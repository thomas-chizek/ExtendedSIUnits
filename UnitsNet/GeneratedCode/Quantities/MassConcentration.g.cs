//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In chemistry, the mass concentration ρi (or γi) is defined as the mass of a constituent mi divided by the volume of the mixture V
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Mass_concentration_(chemistry)
    /// </remarks>
    public partial struct MassConcentration : IQuantity<MassConcentrationUnit>, IEquatable<MassConcentration>, IComparable, IComparable<MassConcentration>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassConcentrationUnit? _unit;

        static MassConcentration()
        {
            BaseDimensions = new BaseDimensions(-3, 1, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<MassConcentrationUnit>(QuantityType.MassConcentration,
                new UnitInfo<MassConcentrationUnit>[] {
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.CentigramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.CentigramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.CentigramPerMilliliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.DecigramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.DecigramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.DecigramPerMilliliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.GramPerCubicCentimeter, new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Gram)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.GramPerCubicMeter, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Gram)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.GramPerCubicMillimeter, new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Gram)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.GramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.GramPerLiter, new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Gram)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.GramPerMilliliter, new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Gram)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.KilogramPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.KilogramPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.KilogramPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.KilogramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.KilopoundPerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.KilopoundPerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MicrogramPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MicrogramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MicrogramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MicrogramPerMilliliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MilligramPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MilligramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MilligramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.MilligramPerMilliliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.NanogramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.NanogramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.NanogramPerMilliliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PicogramPerDeciliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PicogramPerLiter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PicogramPerMilliliter, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PoundPerCubicFoot, new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Pound)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PoundPerCubicInch, new BaseUnits(length: LengthUnit.Inch, mass: MassUnit.Pound)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PoundPerImperialGallon, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.PoundPerUSGallon, BaseUnits.Undefined),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.SlugPerCubicFoot, new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Slug)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.TonnePerCubicCentimeter, new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Tonne)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.TonnePerCubicMeter, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Tonne)),
                    new UnitInfo<MassConcentrationUnit>(MassConcentrationUnit.TonnePerCubicMillimeter, new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Tonne)),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MassConcentration(double numericValue, MassConcentrationUnit unit)
        {
            if(unit == MassConcentrationUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public MassConcentration(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<MassConcentrationUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of MassConcentration, which is KilogramPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static MassConcentrationUnit BaseUnit { get; } = MassConcentrationUnit.KilogramPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of MassConcentration
        /// </summary>
        public static MassConcentration MaxValue { get; } = new MassConcentration(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of MassConcentration
        /// </summary>
        public static MassConcentration MinValue { get; } = new MassConcentration(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.MassConcentration;

        /// <summary>
        ///     All units of measurement for the MassConcentration quantity.
        /// </summary>
        public static MassConcentrationUnit[] Units { get; } = Enum.GetValues(typeof(MassConcentrationUnit)).Cast<MassConcentrationUnit>().Except(new MassConcentrationUnit[]{ MassConcentrationUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        public static MassConcentration Zero { get; } = new MassConcentration(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public MassConcentrationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<MassConcentrationUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => MassConcentration.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => MassConcentration.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get MassConcentration in CentigramsPerDeciliter.
        /// </summary>
        public double CentigramsPerDeciliter => As(MassConcentrationUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in CentigramsPerLiter.
        /// </summary>
        public double CentigramsPerLiter => As(MassConcentrationUnit.CentigramPerLiter);

        /// <summary>
        ///     Get MassConcentration in CentigramsPerMilliliter.
        /// </summary>
        public double CentigramsPerMilliliter => As(MassConcentrationUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerDeciliter.
        /// </summary>
        public double DecigramsPerDeciliter => As(MassConcentrationUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerLiter.
        /// </summary>
        public double DecigramsPerLiter => As(MassConcentrationUnit.DecigramPerLiter);

        /// <summary>
        ///     Get MassConcentration in DecigramsPerMilliliter.
        /// </summary>
        public double DecigramsPerMilliliter => As(MassConcentrationUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in GramsPerCubicCentimeter.
        /// </summary>
        public double GramsPerCubicCentimeter => As(MassConcentrationUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration in GramsPerCubicMeter.
        /// </summary>
        public double GramsPerCubicMeter => As(MassConcentrationUnit.GramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in GramsPerCubicMillimeter.
        /// </summary>
        public double GramsPerCubicMillimeter => As(MassConcentrationUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Get MassConcentration in GramsPerDeciliter.
        /// </summary>
        public double GramsPerDeciliter => As(MassConcentrationUnit.GramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in GramsPerLiter.
        /// </summary>
        public double GramsPerLiter => As(MassConcentrationUnit.GramPerLiter);

        /// <summary>
        ///     Get MassConcentration in GramsPerMilliliter.
        /// </summary>
        public double GramsPerMilliliter => As(MassConcentrationUnit.GramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerCubicCentimeter.
        /// </summary>
        public double KilogramsPerCubicCentimeter => As(MassConcentrationUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerCubicMeter.
        /// </summary>
        public double KilogramsPerCubicMeter => As(MassConcentrationUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerCubicMillimeter.
        /// </summary>
        public double KilogramsPerCubicMillimeter => As(MassConcentrationUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Get MassConcentration in KilogramsPerLiter.
        /// </summary>
        public double KilogramsPerLiter => As(MassConcentrationUnit.KilogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in KilopoundsPerCubicFoot.
        /// </summary>
        public double KilopoundsPerCubicFoot => As(MassConcentrationUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration in KilopoundsPerCubicInch.
        /// </summary>
        public double KilopoundsPerCubicInch => As(MassConcentrationUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerCubicMeter.
        /// </summary>
        public double MicrogramsPerCubicMeter => As(MassConcentrationUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerDeciliter.
        /// </summary>
        public double MicrogramsPerDeciliter => As(MassConcentrationUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerLiter.
        /// </summary>
        public double MicrogramsPerLiter => As(MassConcentrationUnit.MicrogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in MicrogramsPerMilliliter.
        /// </summary>
        public double MicrogramsPerMilliliter => As(MassConcentrationUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerCubicMeter.
        /// </summary>
        public double MilligramsPerCubicMeter => As(MassConcentrationUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerDeciliter.
        /// </summary>
        public double MilligramsPerDeciliter => As(MassConcentrationUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerLiter.
        /// </summary>
        public double MilligramsPerLiter => As(MassConcentrationUnit.MilligramPerLiter);

        /// <summary>
        ///     Get MassConcentration in MilligramsPerMilliliter.
        /// </summary>
        public double MilligramsPerMilliliter => As(MassConcentrationUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerDeciliter.
        /// </summary>
        public double NanogramsPerDeciliter => As(MassConcentrationUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerLiter.
        /// </summary>
        public double NanogramsPerLiter => As(MassConcentrationUnit.NanogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in NanogramsPerMilliliter.
        /// </summary>
        public double NanogramsPerMilliliter => As(MassConcentrationUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerDeciliter.
        /// </summary>
        public double PicogramsPerDeciliter => As(MassConcentrationUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerLiter.
        /// </summary>
        public double PicogramsPerLiter => As(MassConcentrationUnit.PicogramPerLiter);

        /// <summary>
        ///     Get MassConcentration in PicogramsPerMilliliter.
        /// </summary>
        public double PicogramsPerMilliliter => As(MassConcentrationUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Get MassConcentration in PoundsPerCubicFoot.
        /// </summary>
        public double PoundsPerCubicFoot => As(MassConcentrationUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration in PoundsPerCubicInch.
        /// </summary>
        public double PoundsPerCubicInch => As(MassConcentrationUnit.PoundPerCubicInch);

        /// <summary>
        ///     Get MassConcentration in PoundsPerImperialGallon.
        /// </summary>
        public double PoundsPerImperialGallon => As(MassConcentrationUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Get MassConcentration in PoundsPerUSGallon.
        /// </summary>
        public double PoundsPerUSGallon => As(MassConcentrationUnit.PoundPerUSGallon);

        /// <summary>
        ///     Get MassConcentration in SlugsPerCubicFoot.
        /// </summary>
        public double SlugsPerCubicFoot => As(MassConcentrationUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Get MassConcentration in TonnesPerCubicCentimeter.
        /// </summary>
        public double TonnesPerCubicCentimeter => As(MassConcentrationUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Get MassConcentration in TonnesPerCubicMeter.
        /// </summary>
        public double TonnesPerCubicMeter => As(MassConcentrationUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Get MassConcentration in TonnesPerCubicMillimeter.
        /// </summary>
        public double TonnesPerCubicMillimeter => As(MassConcentrationUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MassConcentrationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(MassConcentrationUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get MassConcentration from CentigramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerDeciliter(QuantityValue centigramsperdeciliter)
        {
            double value = (double) centigramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from CentigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerLiter(QuantityValue centigramsperliter)
        {
            double value = (double) centigramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from CentigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromCentigramsPerMilliliter(QuantityValue centigramspermilliliter)
        {
            double value = (double) centigramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from DecigramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerDeciliter(QuantityValue decigramsperdeciliter)
        {
            double value = (double) decigramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from DecigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerLiter(QuantityValue decigramsperliter)
        {
            double value = (double) decigramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from DecigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromDecigramsPerMilliliter(QuantityValue decigramspermilliliter)
        {
            double value = (double) decigramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from GramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerCubicCentimeter(QuantityValue gramspercubiccentimeter)
        {
            double value = (double) gramspercubiccentimeter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerCubicCentimeter);
        }
        /// <summary>
        ///     Get MassConcentration from GramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerCubicMeter(QuantityValue gramspercubicmeter)
        {
            double value = (double) gramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerCubicMeter);
        }
        /// <summary>
        ///     Get MassConcentration from GramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerCubicMillimeter(QuantityValue gramspercubicmillimeter)
        {
            double value = (double) gramspercubicmillimeter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerCubicMillimeter);
        }
        /// <summary>
        ///     Get MassConcentration from GramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerDeciliter(QuantityValue gramsperdeciliter)
        {
            double value = (double) gramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from GramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerLiter(QuantityValue gramsperliter)
        {
            double value = (double) gramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from GramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromGramsPerMilliliter(QuantityValue gramspermilliliter)
        {
            double value = (double) gramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from KilogramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerCubicCentimeter(QuantityValue kilogramspercubiccentimeter)
        {
            double value = (double) kilogramspercubiccentimeter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerCubicCentimeter);
        }
        /// <summary>
        ///     Get MassConcentration from KilogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerCubicMeter(QuantityValue kilogramspercubicmeter)
        {
            double value = (double) kilogramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerCubicMeter);
        }
        /// <summary>
        ///     Get MassConcentration from KilogramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerCubicMillimeter(QuantityValue kilogramspercubicmillimeter)
        {
            double value = (double) kilogramspercubicmillimeter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerCubicMillimeter);
        }
        /// <summary>
        ///     Get MassConcentration from KilogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilogramsPerLiter(QuantityValue kilogramsperliter)
        {
            double value = (double) kilogramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from KilopoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilopoundsPerCubicFoot(QuantityValue kilopoundspercubicfoot)
        {
            double value = (double) kilopoundspercubicfoot;
            return new MassConcentration(value, MassConcentrationUnit.KilopoundPerCubicFoot);
        }
        /// <summary>
        ///     Get MassConcentration from KilopoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromKilopoundsPerCubicInch(QuantityValue kilopoundspercubicinch)
        {
            double value = (double) kilopoundspercubicinch;
            return new MassConcentration(value, MassConcentrationUnit.KilopoundPerCubicInch);
        }
        /// <summary>
        ///     Get MassConcentration from MicrogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerCubicMeter(QuantityValue microgramspercubicmeter)
        {
            double value = (double) microgramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerCubicMeter);
        }
        /// <summary>
        ///     Get MassConcentration from MicrogramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerDeciliter(QuantityValue microgramsperdeciliter)
        {
            double value = (double) microgramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from MicrogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerLiter(QuantityValue microgramsperliter)
        {
            double value = (double) microgramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from MicrogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMicrogramsPerMilliliter(QuantityValue microgramspermilliliter)
        {
            double value = (double) microgramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from MilligramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerCubicMeter(QuantityValue milligramspercubicmeter)
        {
            double value = (double) milligramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerCubicMeter);
        }
        /// <summary>
        ///     Get MassConcentration from MilligramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerDeciliter(QuantityValue milligramsperdeciliter)
        {
            double value = (double) milligramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from MilligramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerLiter(QuantityValue milligramsperliter)
        {
            double value = (double) milligramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from MilligramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromMilligramsPerMilliliter(QuantityValue milligramspermilliliter)
        {
            double value = (double) milligramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from NanogramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerDeciliter(QuantityValue nanogramsperdeciliter)
        {
            double value = (double) nanogramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from NanogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerLiter(QuantityValue nanogramsperliter)
        {
            double value = (double) nanogramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from NanogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromNanogramsPerMilliliter(QuantityValue nanogramspermilliliter)
        {
            double value = (double) nanogramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from PicogramsPerDeciliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerDeciliter(QuantityValue picogramsperdeciliter)
        {
            double value = (double) picogramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerDeciliter);
        }
        /// <summary>
        ///     Get MassConcentration from PicogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerLiter(QuantityValue picogramsperliter)
        {
            double value = (double) picogramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerLiter);
        }
        /// <summary>
        ///     Get MassConcentration from PicogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPicogramsPerMilliliter(QuantityValue picogramspermilliliter)
        {
            double value = (double) picogramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerMilliliter);
        }
        /// <summary>
        ///     Get MassConcentration from PoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerCubicFoot(QuantityValue poundspercubicfoot)
        {
            double value = (double) poundspercubicfoot;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerCubicFoot);
        }
        /// <summary>
        ///     Get MassConcentration from PoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerCubicInch(QuantityValue poundspercubicinch)
        {
            double value = (double) poundspercubicinch;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerCubicInch);
        }
        /// <summary>
        ///     Get MassConcentration from PoundsPerImperialGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerImperialGallon(QuantityValue poundsperimperialgallon)
        {
            double value = (double) poundsperimperialgallon;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerImperialGallon);
        }
        /// <summary>
        ///     Get MassConcentration from PoundsPerUSGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromPoundsPerUSGallon(QuantityValue poundsperusgallon)
        {
            double value = (double) poundsperusgallon;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerUSGallon);
        }
        /// <summary>
        ///     Get MassConcentration from SlugsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromSlugsPerCubicFoot(QuantityValue slugspercubicfoot)
        {
            double value = (double) slugspercubicfoot;
            return new MassConcentration(value, MassConcentrationUnit.SlugPerCubicFoot);
        }
        /// <summary>
        ///     Get MassConcentration from TonnesPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromTonnesPerCubicCentimeter(QuantityValue tonnespercubiccentimeter)
        {
            double value = (double) tonnespercubiccentimeter;
            return new MassConcentration(value, MassConcentrationUnit.TonnePerCubicCentimeter);
        }
        /// <summary>
        ///     Get MassConcentration from TonnesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromTonnesPerCubicMeter(QuantityValue tonnespercubicmeter)
        {
            double value = (double) tonnespercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.TonnePerCubicMeter);
        }
        /// <summary>
        ///     Get MassConcentration from TonnesPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassConcentration FromTonnesPerCubicMillimeter(QuantityValue tonnespercubicmillimeter)
        {
            double value = (double) tonnespercubicmillimeter;
            return new MassConcentration(value, MassConcentrationUnit.TonnePerCubicMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassConcentrationUnit" /> to <see cref="MassConcentration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassConcentration unit value.</returns>
        public static MassConcentration From(QuantityValue value, MassConcentrationUnit fromUnit)
        {
            return new MassConcentration((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassConcentration Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static MassConcentration Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<MassConcentration, MassConcentrationUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MassConcentration result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out MassConcentration result)
        {
            return QuantityParser.Default.TryParse<MassConcentration, MassConcentrationUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassConcentrationUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static MassConcentrationUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<MassConcentrationUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.MassConcentrationUnit)"/>
        public static bool TryParseUnit(string str, out MassConcentrationUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out MassConcentrationUnit unit)
        {
            return UnitParser.Default.TryParse<MassConcentrationUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static MassConcentration operator -(MassConcentration right)
        {
            return new MassConcentration(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="MassConcentration"/> from adding two <see cref="MassConcentration"/>.</summary>
        public static MassConcentration operator +(MassConcentration left, MassConcentration right)
        {
            return new MassConcentration(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="MassConcentration"/> from subtracting two <see cref="MassConcentration"/>.</summary>
        public static MassConcentration operator -(MassConcentration left, MassConcentration right)
        {
            return new MassConcentration(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="MassConcentration"/> from multiplying value and <see cref="MassConcentration"/>.</summary>
        public static MassConcentration operator *(double left, MassConcentration right)
        {
            return new MassConcentration(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="MassConcentration"/> from multiplying value and <see cref="MassConcentration"/>.</summary>
        public static MassConcentration operator *(MassConcentration left, double right)
        {
            return new MassConcentration(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="MassConcentration"/> from dividing <see cref="MassConcentration"/> by value.</summary>
        public static MassConcentration operator /(MassConcentration left, double right)
        {
            return new MassConcentration(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="MassConcentration"/> by <see cref="MassConcentration"/>.</summary>
        public static double operator /(MassConcentration left, MassConcentration right)
        {
            return left.KilogramsPerCubicMeter / right.KilogramsPerCubicMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(MassConcentration left, MassConcentration right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(MassConcentration left, MassConcentration right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(MassConcentration left, MassConcentration right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(MassConcentration left, MassConcentration right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MassConcentration, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(MassConcentration left, MassConcentration right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(MassConcentration, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(MassConcentration left, MassConcentration right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is MassConcentration objMassConcentration)) throw new ArgumentException("Expected type MassConcentration.", nameof(obj));

            return CompareTo(objMassConcentration);
        }

        /// <inheritdoc />
        public int CompareTo(MassConcentration other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(MassConcentration, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is MassConcentration objMassConcentration))
                return false;

            return Equals(objMassConcentration);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(MassConcentration, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(MassConcentration other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another MassConcentration within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(MassConcentration other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current MassConcentration.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MassConcentrationUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is MassConcentrationUnit unitAsMassConcentrationUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MassConcentrationUnit)} is supported.", nameof(unit));

            return As(unitAsMassConcentrationUnit);
        }

        /// <summary>
        ///     Converts this MassConcentration to another MassConcentration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A MassConcentration with the specified unit.</returns>
        public MassConcentration ToUnit(MassConcentrationUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new MassConcentration(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is MassConcentrationUnit unitAsMassConcentrationUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MassConcentrationUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsMassConcentrationUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public MassConcentration ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<MassConcentrationUnit> IQuantity<MassConcentrationUnit>.ToUnit(MassConcentrationUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<MassConcentrationUnit> IQuantity<MassConcentrationUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case MassConcentrationUnit.CentigramPerDeciliter: return (_value/1e-1) * 1e-2d;
                case MassConcentrationUnit.CentigramPerLiter: return (_value) * 1e-2d;
                case MassConcentrationUnit.CentigramPerMilliliter: return (_value/1e-3) * 1e-2d;
                case MassConcentrationUnit.DecigramPerDeciliter: return (_value/1e-1) * 1e-1d;
                case MassConcentrationUnit.DecigramPerLiter: return (_value) * 1e-1d;
                case MassConcentrationUnit.DecigramPerMilliliter: return (_value/1e-3) * 1e-1d;
                case MassConcentrationUnit.GramPerCubicCentimeter: return _value/1e-3;
                case MassConcentrationUnit.GramPerCubicMeter: return _value/1e3;
                case MassConcentrationUnit.GramPerCubicMillimeter: return _value/1e-6;
                case MassConcentrationUnit.GramPerDeciliter: return _value/1e-1;
                case MassConcentrationUnit.GramPerLiter: return _value;
                case MassConcentrationUnit.GramPerMilliliter: return _value/1e-3;
                case MassConcentrationUnit.KilogramPerCubicCentimeter: return (_value/1e-3) * 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMeter: return (_value/1e3) * 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMillimeter: return (_value/1e-6) * 1e3d;
                case MassConcentrationUnit.KilogramPerLiter: return (_value) * 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicFoot: return (_value/0.062427961) * 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicInch: return (_value/3.6127298147753e-5) * 1e3d;
                case MassConcentrationUnit.MicrogramPerCubicMeter: return (_value/1e3) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerDeciliter: return (_value/1e-1) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerLiter: return (_value) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerMilliliter: return (_value/1e-3) * 1e-6d;
                case MassConcentrationUnit.MilligramPerCubicMeter: return (_value/1e3) * 1e-3d;
                case MassConcentrationUnit.MilligramPerDeciliter: return (_value/1e-1) * 1e-3d;
                case MassConcentrationUnit.MilligramPerLiter: return (_value) * 1e-3d;
                case MassConcentrationUnit.MilligramPerMilliliter: return (_value/1e-3) * 1e-3d;
                case MassConcentrationUnit.NanogramPerDeciliter: return (_value/1e-1) * 1e-9d;
                case MassConcentrationUnit.NanogramPerLiter: return (_value) * 1e-9d;
                case MassConcentrationUnit.NanogramPerMilliliter: return (_value/1e-3) * 1e-9d;
                case MassConcentrationUnit.PicogramPerDeciliter: return (_value/1e-1) * 1e-12d;
                case MassConcentrationUnit.PicogramPerLiter: return (_value) * 1e-12d;
                case MassConcentrationUnit.PicogramPerMilliliter: return (_value/1e-3) * 1e-12d;
                case MassConcentrationUnit.PoundPerCubicFoot: return _value/0.062427961;
                case MassConcentrationUnit.PoundPerCubicInch: return _value/3.6127298147753e-5;
                case MassConcentrationUnit.PoundPerImperialGallon: return _value*9.9776398e1;
                case MassConcentrationUnit.PoundPerUSGallon: return _value*1.19826427e2;
                case MassConcentrationUnit.SlugPerCubicFoot: return _value*515.378818;
                case MassConcentrationUnit.TonnePerCubicCentimeter: return _value/1e-9;
                case MassConcentrationUnit.TonnePerCubicMeter: return _value/0.001;
                case MassConcentrationUnit.TonnePerCubicMillimeter: return _value/1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(MassConcentrationUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case MassConcentrationUnit.CentigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-2d;
                case MassConcentrationUnit.CentigramPerLiter: return (baseUnitValue) / 1e-2d;
                case MassConcentrationUnit.CentigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-2d;
                case MassConcentrationUnit.DecigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-1d;
                case MassConcentrationUnit.DecigramPerLiter: return (baseUnitValue) / 1e-1d;
                case MassConcentrationUnit.DecigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-1d;
                case MassConcentrationUnit.GramPerCubicCentimeter: return baseUnitValue*1e-3;
                case MassConcentrationUnit.GramPerCubicMeter: return baseUnitValue*1e3;
                case MassConcentrationUnit.GramPerCubicMillimeter: return baseUnitValue*1e-6;
                case MassConcentrationUnit.GramPerDeciliter: return baseUnitValue*1e-1;
                case MassConcentrationUnit.GramPerLiter: return baseUnitValue;
                case MassConcentrationUnit.GramPerMilliliter: return baseUnitValue*1e-3;
                case MassConcentrationUnit.KilogramPerCubicCentimeter: return (baseUnitValue*1e-3) / 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMeter: return (baseUnitValue*1e3) / 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMillimeter: return (baseUnitValue*1e-6) / 1e3d;
                case MassConcentrationUnit.KilogramPerLiter: return (baseUnitValue) / 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicFoot: return (baseUnitValue*0.062427961) / 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicInch: return (baseUnitValue*3.6127298147753e-5) / 1e3d;
                case MassConcentrationUnit.MicrogramPerCubicMeter: return (baseUnitValue*1e3) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerLiter: return (baseUnitValue) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-6d;
                case MassConcentrationUnit.MilligramPerCubicMeter: return (baseUnitValue*1e3) / 1e-3d;
                case MassConcentrationUnit.MilligramPerDeciliter: return (baseUnitValue*1e-1) / 1e-3d;
                case MassConcentrationUnit.MilligramPerLiter: return (baseUnitValue) / 1e-3d;
                case MassConcentrationUnit.MilligramPerMilliliter: return (baseUnitValue*1e-3) / 1e-3d;
                case MassConcentrationUnit.NanogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-9d;
                case MassConcentrationUnit.NanogramPerLiter: return (baseUnitValue) / 1e-9d;
                case MassConcentrationUnit.NanogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-9d;
                case MassConcentrationUnit.PicogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-12d;
                case MassConcentrationUnit.PicogramPerLiter: return (baseUnitValue) / 1e-12d;
                case MassConcentrationUnit.PicogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-12d;
                case MassConcentrationUnit.PoundPerCubicFoot: return baseUnitValue*0.062427961;
                case MassConcentrationUnit.PoundPerCubicInch: return baseUnitValue*3.6127298147753e-5;
                case MassConcentrationUnit.PoundPerImperialGallon: return baseUnitValue/9.9776398e1;
                case MassConcentrationUnit.PoundPerUSGallon: return baseUnitValue/1.19826427e2;
                case MassConcentrationUnit.SlugPerCubicFoot: return baseUnitValue*0.00194032033;
                case MassConcentrationUnit.TonnePerCubicCentimeter: return baseUnitValue*1e-9;
                case MassConcentrationUnit.TonnePerCubicMeter: return baseUnitValue*0.001;
                case MassConcentrationUnit.TonnePerCubicMillimeter: return baseUnitValue*1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<MassConcentrationUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(MassConcentration)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(MassConcentration)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(MassConcentration)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(MassConcentration))
                return this;
            else if(conversionType == typeof(MassConcentrationUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return MassConcentration.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return MassConcentration.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(MassConcentration)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
