//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
    /// </summary>
    public partial class Torque : IQuantity<TorqueUnit>, IEquatable<Torque>, IComparable, IComparable<Torque>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly TorqueUnit? _unit;

        static Torque()
        {
            BaseDimensions = new BaseDimensions(2, 1, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<TorqueUnit>(QuantityType.Torque,
                new UnitInfo<TorqueUnit>[] {
                    new UnitInfo<TorqueUnit>(TorqueUnit.CentinewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.CentinewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.CentinewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.CentipoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.CentipoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecanewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecanewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecanewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecinewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecinewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecinewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecipoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.DecipoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ExanewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ExanewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ExanewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ExapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ExapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.FemtonewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.FemtonewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.FemtonewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.FemtopoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.FemtopoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.GiganewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.GiganewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.GiganewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.GigapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.GigapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.HectonewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.HectonewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.HectonewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.HectopoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.HectopoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilogramForceCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilogramForceMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilogramForceMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilonewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilonewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilonewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilopoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.KilopoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MeganewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MeganewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MeganewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MegapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MegapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MicronewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MicronewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MicronewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MicropoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MicropoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MillinewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MillinewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MillinewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MillipoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.MillipoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NanonewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NanonewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NanonewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NanopoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NanopoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.NewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PetanewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PetanewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PetanewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PetapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PetapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PiconewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PiconewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PiconewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PicopoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PicopoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.PoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.QutranewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.QutranewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.QutranewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.QutrapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.QutrapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TeranewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TeranewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TeranewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TerapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TerapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TonneForceCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TonneForceMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.TonneForceMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.VettanewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.VettanewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.VettanewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.VettapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.VettapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.YottanewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.YottanewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.YottanewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.YottapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.YottapoundForceInch, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ZettanewtonCentimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ZettanewtonMeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ZettanewtonMillimeter, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ZettapoundForceFoot, BaseUnits.Undefined),
                    new UnitInfo<TorqueUnit>(TorqueUnit.ZettapoundForceInch, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Torque(double numericValue, TorqueUnit unit)
        {
            if(unit == TorqueUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Torque(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<TorqueUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Torque, which is NewtonMeter. All conversions go via this value.
        /// </summary>
        public static TorqueUnit BaseUnit { get; } = TorqueUnit.NewtonMeter;

        /// <summary>
        /// Represents the largest possible value of Torque
        /// </summary>
        public static Torque MaxValue { get; } = new Torque(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Torque
        /// </summary>
        public static Torque MinValue { get; } = new Torque(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Torque;

        /// <summary>
        ///     All units of measurement for the Torque quantity.
        /// </summary>
        public static TorqueUnit[] Units { get; } = Enum.GetValues(typeof(TorqueUnit)).Cast<TorqueUnit>().Except(new TorqueUnit[]{ TorqueUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeter.
        /// </summary>
        public static Torque Zero { get; } = new Torque(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public TorqueUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<TorqueUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Torque.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Torque.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Torque in CentinewtonCentimeters.
        /// </summary>
        public double CentinewtonCentimeters => As(TorqueUnit.CentinewtonCentimeter);

        /// <summary>
        ///     Get Torque in CentinewtonMeters.
        /// </summary>
        public double CentinewtonMeters => As(TorqueUnit.CentinewtonMeter);

        /// <summary>
        ///     Get Torque in CentinewtonMillimeters.
        /// </summary>
        public double CentinewtonMillimeters => As(TorqueUnit.CentinewtonMillimeter);

        /// <summary>
        ///     Get Torque in CentipoundForceFeet.
        /// </summary>
        public double CentipoundForceFeet => As(TorqueUnit.CentipoundForceFoot);

        /// <summary>
        ///     Get Torque in CentipoundForceInches.
        /// </summary>
        public double CentipoundForceInches => As(TorqueUnit.CentipoundForceInch);

        /// <summary>
        ///     Get Torque in DecanewtonCentimeters.
        /// </summary>
        public double DecanewtonCentimeters => As(TorqueUnit.DecanewtonCentimeter);

        /// <summary>
        ///     Get Torque in DecanewtonMeters.
        /// </summary>
        public double DecanewtonMeters => As(TorqueUnit.DecanewtonMeter);

        /// <summary>
        ///     Get Torque in DecanewtonMillimeters.
        /// </summary>
        public double DecanewtonMillimeters => As(TorqueUnit.DecanewtonMillimeter);

        /// <summary>
        ///     Get Torque in DecapoundForceFeet.
        /// </summary>
        public double DecapoundForceFeet => As(TorqueUnit.DecapoundForceFoot);

        /// <summary>
        ///     Get Torque in DecapoundForceInches.
        /// </summary>
        public double DecapoundForceInches => As(TorqueUnit.DecapoundForceInch);

        /// <summary>
        ///     Get Torque in DecinewtonCentimeters.
        /// </summary>
        public double DecinewtonCentimeters => As(TorqueUnit.DecinewtonCentimeter);

        /// <summary>
        ///     Get Torque in DecinewtonMeters.
        /// </summary>
        public double DecinewtonMeters => As(TorqueUnit.DecinewtonMeter);

        /// <summary>
        ///     Get Torque in DecinewtonMillimeters.
        /// </summary>
        public double DecinewtonMillimeters => As(TorqueUnit.DecinewtonMillimeter);

        /// <summary>
        ///     Get Torque in DecipoundForceFeet.
        /// </summary>
        public double DecipoundForceFeet => As(TorqueUnit.DecipoundForceFoot);

        /// <summary>
        ///     Get Torque in DecipoundForceInches.
        /// </summary>
        public double DecipoundForceInches => As(TorqueUnit.DecipoundForceInch);

        /// <summary>
        ///     Get Torque in ExanewtonCentimeters.
        /// </summary>
        public double ExanewtonCentimeters => As(TorqueUnit.ExanewtonCentimeter);

        /// <summary>
        ///     Get Torque in ExanewtonMeters.
        /// </summary>
        public double ExanewtonMeters => As(TorqueUnit.ExanewtonMeter);

        /// <summary>
        ///     Get Torque in ExanewtonMillimeters.
        /// </summary>
        public double ExanewtonMillimeters => As(TorqueUnit.ExanewtonMillimeter);

        /// <summary>
        ///     Get Torque in ExapoundForceFeet.
        /// </summary>
        public double ExapoundForceFeet => As(TorqueUnit.ExapoundForceFoot);

        /// <summary>
        ///     Get Torque in ExapoundForceInches.
        /// </summary>
        public double ExapoundForceInches => As(TorqueUnit.ExapoundForceInch);

        /// <summary>
        ///     Get Torque in FemtonewtonCentimeters.
        /// </summary>
        public double FemtonewtonCentimeters => As(TorqueUnit.FemtonewtonCentimeter);

        /// <summary>
        ///     Get Torque in FemtonewtonMeters.
        /// </summary>
        public double FemtonewtonMeters => As(TorqueUnit.FemtonewtonMeter);

        /// <summary>
        ///     Get Torque in FemtonewtonMillimeters.
        /// </summary>
        public double FemtonewtonMillimeters => As(TorqueUnit.FemtonewtonMillimeter);

        /// <summary>
        ///     Get Torque in FemtopoundForceFeet.
        /// </summary>
        public double FemtopoundForceFeet => As(TorqueUnit.FemtopoundForceFoot);

        /// <summary>
        ///     Get Torque in FemtopoundForceInches.
        /// </summary>
        public double FemtopoundForceInches => As(TorqueUnit.FemtopoundForceInch);

        /// <summary>
        ///     Get Torque in GiganewtonCentimeters.
        /// </summary>
        public double GiganewtonCentimeters => As(TorqueUnit.GiganewtonCentimeter);

        /// <summary>
        ///     Get Torque in GiganewtonMeters.
        /// </summary>
        public double GiganewtonMeters => As(TorqueUnit.GiganewtonMeter);

        /// <summary>
        ///     Get Torque in GiganewtonMillimeters.
        /// </summary>
        public double GiganewtonMillimeters => As(TorqueUnit.GiganewtonMillimeter);

        /// <summary>
        ///     Get Torque in GigapoundForceFeet.
        /// </summary>
        public double GigapoundForceFeet => As(TorqueUnit.GigapoundForceFoot);

        /// <summary>
        ///     Get Torque in GigapoundForceInches.
        /// </summary>
        public double GigapoundForceInches => As(TorqueUnit.GigapoundForceInch);

        /// <summary>
        ///     Get Torque in HectonewtonCentimeters.
        /// </summary>
        public double HectonewtonCentimeters => As(TorqueUnit.HectonewtonCentimeter);

        /// <summary>
        ///     Get Torque in HectonewtonMeters.
        /// </summary>
        public double HectonewtonMeters => As(TorqueUnit.HectonewtonMeter);

        /// <summary>
        ///     Get Torque in HectonewtonMillimeters.
        /// </summary>
        public double HectonewtonMillimeters => As(TorqueUnit.HectonewtonMillimeter);

        /// <summary>
        ///     Get Torque in HectopoundForceFeet.
        /// </summary>
        public double HectopoundForceFeet => As(TorqueUnit.HectopoundForceFoot);

        /// <summary>
        ///     Get Torque in HectopoundForceInches.
        /// </summary>
        public double HectopoundForceInches => As(TorqueUnit.HectopoundForceInch);

        /// <summary>
        ///     Get Torque in KilogramForceCentimeters.
        /// </summary>
        public double KilogramForceCentimeters => As(TorqueUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Get Torque in KilogramForceMeters.
        /// </summary>
        public double KilogramForceMeters => As(TorqueUnit.KilogramForceMeter);

        /// <summary>
        ///     Get Torque in KilogramForceMillimeters.
        /// </summary>
        public double KilogramForceMillimeters => As(TorqueUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Get Torque in KilonewtonCentimeters.
        /// </summary>
        public double KilonewtonCentimeters => As(TorqueUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Get Torque in KilonewtonMeters.
        /// </summary>
        public double KilonewtonMeters => As(TorqueUnit.KilonewtonMeter);

        /// <summary>
        ///     Get Torque in KilonewtonMillimeters.
        /// </summary>
        public double KilonewtonMillimeters => As(TorqueUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Get Torque in KilopoundForceFeet.
        /// </summary>
        public double KilopoundForceFeet => As(TorqueUnit.KilopoundForceFoot);

        /// <summary>
        ///     Get Torque in KilopoundForceInches.
        /// </summary>
        public double KilopoundForceInches => As(TorqueUnit.KilopoundForceInch);

        /// <summary>
        ///     Get Torque in MeganewtonCentimeters.
        /// </summary>
        public double MeganewtonCentimeters => As(TorqueUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Get Torque in MeganewtonMeters.
        /// </summary>
        public double MeganewtonMeters => As(TorqueUnit.MeganewtonMeter);

        /// <summary>
        ///     Get Torque in MeganewtonMillimeters.
        /// </summary>
        public double MeganewtonMillimeters => As(TorqueUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Get Torque in MegapoundForceFeet.
        /// </summary>
        public double MegapoundForceFeet => As(TorqueUnit.MegapoundForceFoot);

        /// <summary>
        ///     Get Torque in MegapoundForceInches.
        /// </summary>
        public double MegapoundForceInches => As(TorqueUnit.MegapoundForceInch);

        /// <summary>
        ///     Get Torque in MicronewtonCentimeters.
        /// </summary>
        public double MicronewtonCentimeters => As(TorqueUnit.MicronewtonCentimeter);

        /// <summary>
        ///     Get Torque in MicronewtonMeters.
        /// </summary>
        public double MicronewtonMeters => As(TorqueUnit.MicronewtonMeter);

        /// <summary>
        ///     Get Torque in MicronewtonMillimeters.
        /// </summary>
        public double MicronewtonMillimeters => As(TorqueUnit.MicronewtonMillimeter);

        /// <summary>
        ///     Get Torque in MicropoundForceFeet.
        /// </summary>
        public double MicropoundForceFeet => As(TorqueUnit.MicropoundForceFoot);

        /// <summary>
        ///     Get Torque in MicropoundForceInches.
        /// </summary>
        public double MicropoundForceInches => As(TorqueUnit.MicropoundForceInch);

        /// <summary>
        ///     Get Torque in MillinewtonCentimeters.
        /// </summary>
        public double MillinewtonCentimeters => As(TorqueUnit.MillinewtonCentimeter);

        /// <summary>
        ///     Get Torque in MillinewtonMeters.
        /// </summary>
        public double MillinewtonMeters => As(TorqueUnit.MillinewtonMeter);

        /// <summary>
        ///     Get Torque in MillinewtonMillimeters.
        /// </summary>
        public double MillinewtonMillimeters => As(TorqueUnit.MillinewtonMillimeter);

        /// <summary>
        ///     Get Torque in MillipoundForceFeet.
        /// </summary>
        public double MillipoundForceFeet => As(TorqueUnit.MillipoundForceFoot);

        /// <summary>
        ///     Get Torque in MillipoundForceInches.
        /// </summary>
        public double MillipoundForceInches => As(TorqueUnit.MillipoundForceInch);

        /// <summary>
        ///     Get Torque in NanonewtonCentimeters.
        /// </summary>
        public double NanonewtonCentimeters => As(TorqueUnit.NanonewtonCentimeter);

        /// <summary>
        ///     Get Torque in NanonewtonMeters.
        /// </summary>
        public double NanonewtonMeters => As(TorqueUnit.NanonewtonMeter);

        /// <summary>
        ///     Get Torque in NanonewtonMillimeters.
        /// </summary>
        public double NanonewtonMillimeters => As(TorqueUnit.NanonewtonMillimeter);

        /// <summary>
        ///     Get Torque in NanopoundForceFeet.
        /// </summary>
        public double NanopoundForceFeet => As(TorqueUnit.NanopoundForceFoot);

        /// <summary>
        ///     Get Torque in NanopoundForceInches.
        /// </summary>
        public double NanopoundForceInches => As(TorqueUnit.NanopoundForceInch);

        /// <summary>
        ///     Get Torque in NewtonCentimeters.
        /// </summary>
        public double NewtonCentimeters => As(TorqueUnit.NewtonCentimeter);

        /// <summary>
        ///     Get Torque in NewtonMeters.
        /// </summary>
        public double NewtonMeters => As(TorqueUnit.NewtonMeter);

        /// <summary>
        ///     Get Torque in NewtonMillimeters.
        /// </summary>
        public double NewtonMillimeters => As(TorqueUnit.NewtonMillimeter);

        /// <summary>
        ///     Get Torque in PetanewtonCentimeters.
        /// </summary>
        public double PetanewtonCentimeters => As(TorqueUnit.PetanewtonCentimeter);

        /// <summary>
        ///     Get Torque in PetanewtonMeters.
        /// </summary>
        public double PetanewtonMeters => As(TorqueUnit.PetanewtonMeter);

        /// <summary>
        ///     Get Torque in PetanewtonMillimeters.
        /// </summary>
        public double PetanewtonMillimeters => As(TorqueUnit.PetanewtonMillimeter);

        /// <summary>
        ///     Get Torque in PetapoundForceFeet.
        /// </summary>
        public double PetapoundForceFeet => As(TorqueUnit.PetapoundForceFoot);

        /// <summary>
        ///     Get Torque in PetapoundForceInches.
        /// </summary>
        public double PetapoundForceInches => As(TorqueUnit.PetapoundForceInch);

        /// <summary>
        ///     Get Torque in PiconewtonCentimeters.
        /// </summary>
        public double PiconewtonCentimeters => As(TorqueUnit.PiconewtonCentimeter);

        /// <summary>
        ///     Get Torque in PiconewtonMeters.
        /// </summary>
        public double PiconewtonMeters => As(TorqueUnit.PiconewtonMeter);

        /// <summary>
        ///     Get Torque in PiconewtonMillimeters.
        /// </summary>
        public double PiconewtonMillimeters => As(TorqueUnit.PiconewtonMillimeter);

        /// <summary>
        ///     Get Torque in PicopoundForceFeet.
        /// </summary>
        public double PicopoundForceFeet => As(TorqueUnit.PicopoundForceFoot);

        /// <summary>
        ///     Get Torque in PicopoundForceInches.
        /// </summary>
        public double PicopoundForceInches => As(TorqueUnit.PicopoundForceInch);

        /// <summary>
        ///     Get Torque in PoundForceFeet.
        /// </summary>
        public double PoundForceFeet => As(TorqueUnit.PoundForceFoot);

        /// <summary>
        ///     Get Torque in PoundForceInches.
        /// </summary>
        public double PoundForceInches => As(TorqueUnit.PoundForceInch);

        /// <summary>
        ///     Get Torque in QutranewtonCentimeters.
        /// </summary>
        public double QutranewtonCentimeters => As(TorqueUnit.QutranewtonCentimeter);

        /// <summary>
        ///     Get Torque in QutranewtonMeters.
        /// </summary>
        public double QutranewtonMeters => As(TorqueUnit.QutranewtonMeter);

        /// <summary>
        ///     Get Torque in QutranewtonMillimeters.
        /// </summary>
        public double QutranewtonMillimeters => As(TorqueUnit.QutranewtonMillimeter);

        /// <summary>
        ///     Get Torque in QutrapoundForceFeet.
        /// </summary>
        public double QutrapoundForceFeet => As(TorqueUnit.QutrapoundForceFoot);

        /// <summary>
        ///     Get Torque in QutrapoundForceInches.
        /// </summary>
        public double QutrapoundForceInches => As(TorqueUnit.QutrapoundForceInch);

        /// <summary>
        ///     Get Torque in TeranewtonCentimeters.
        /// </summary>
        public double TeranewtonCentimeters => As(TorqueUnit.TeranewtonCentimeter);

        /// <summary>
        ///     Get Torque in TeranewtonMeters.
        /// </summary>
        public double TeranewtonMeters => As(TorqueUnit.TeranewtonMeter);

        /// <summary>
        ///     Get Torque in TeranewtonMillimeters.
        /// </summary>
        public double TeranewtonMillimeters => As(TorqueUnit.TeranewtonMillimeter);

        /// <summary>
        ///     Get Torque in TerapoundForceFeet.
        /// </summary>
        public double TerapoundForceFeet => As(TorqueUnit.TerapoundForceFoot);

        /// <summary>
        ///     Get Torque in TerapoundForceInches.
        /// </summary>
        public double TerapoundForceInches => As(TorqueUnit.TerapoundForceInch);

        /// <summary>
        ///     Get Torque in TonneForceCentimeters.
        /// </summary>
        public double TonneForceCentimeters => As(TorqueUnit.TonneForceCentimeter);

        /// <summary>
        ///     Get Torque in TonneForceMeters.
        /// </summary>
        public double TonneForceMeters => As(TorqueUnit.TonneForceMeter);

        /// <summary>
        ///     Get Torque in TonneForceMillimeters.
        /// </summary>
        public double TonneForceMillimeters => As(TorqueUnit.TonneForceMillimeter);

        /// <summary>
        ///     Get Torque in VettanewtonCentimeters.
        /// </summary>
        public double VettanewtonCentimeters => As(TorqueUnit.VettanewtonCentimeter);

        /// <summary>
        ///     Get Torque in VettanewtonMeters.
        /// </summary>
        public double VettanewtonMeters => As(TorqueUnit.VettanewtonMeter);

        /// <summary>
        ///     Get Torque in VettanewtonMillimeters.
        /// </summary>
        public double VettanewtonMillimeters => As(TorqueUnit.VettanewtonMillimeter);

        /// <summary>
        ///     Get Torque in VettapoundForceFeet.
        /// </summary>
        public double VettapoundForceFeet => As(TorqueUnit.VettapoundForceFoot);

        /// <summary>
        ///     Get Torque in VettapoundForceInches.
        /// </summary>
        public double VettapoundForceInches => As(TorqueUnit.VettapoundForceInch);

        /// <summary>
        ///     Get Torque in YottanewtonCentimeters.
        /// </summary>
        public double YottanewtonCentimeters => As(TorqueUnit.YottanewtonCentimeter);

        /// <summary>
        ///     Get Torque in YottanewtonMeters.
        /// </summary>
        public double YottanewtonMeters => As(TorqueUnit.YottanewtonMeter);

        /// <summary>
        ///     Get Torque in YottanewtonMillimeters.
        /// </summary>
        public double YottanewtonMillimeters => As(TorqueUnit.YottanewtonMillimeter);

        /// <summary>
        ///     Get Torque in YottapoundForceFeet.
        /// </summary>
        public double YottapoundForceFeet => As(TorqueUnit.YottapoundForceFoot);

        /// <summary>
        ///     Get Torque in YottapoundForceInches.
        /// </summary>
        public double YottapoundForceInches => As(TorqueUnit.YottapoundForceInch);

        /// <summary>
        ///     Get Torque in ZettanewtonCentimeters.
        /// </summary>
        public double ZettanewtonCentimeters => As(TorqueUnit.ZettanewtonCentimeter);

        /// <summary>
        ///     Get Torque in ZettanewtonMeters.
        /// </summary>
        public double ZettanewtonMeters => As(TorqueUnit.ZettanewtonMeter);

        /// <summary>
        ///     Get Torque in ZettanewtonMillimeters.
        /// </summary>
        public double ZettanewtonMillimeters => As(TorqueUnit.ZettanewtonMillimeter);

        /// <summary>
        ///     Get Torque in ZettapoundForceFeet.
        /// </summary>
        public double ZettapoundForceFeet => As(TorqueUnit.ZettapoundForceFoot);

        /// <summary>
        ///     Get Torque in ZettapoundForceInches.
        /// </summary>
        public double ZettapoundForceInches => As(TorqueUnit.ZettapoundForceInch);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(TorqueUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(TorqueUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Torque from CentinewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromCentinewtonCentimeters(QuantityValue centinewtoncentimeters)
        {
            double value = (double) centinewtoncentimeters;
            return new Torque(value, TorqueUnit.CentinewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from CentinewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromCentinewtonMeters(QuantityValue centinewtonmeters)
        {
            double value = (double) centinewtonmeters;
            return new Torque(value, TorqueUnit.CentinewtonMeter);
        }
        /// <summary>
        ///     Get Torque from CentinewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromCentinewtonMillimeters(QuantityValue centinewtonmillimeters)
        {
            double value = (double) centinewtonmillimeters;
            return new Torque(value, TorqueUnit.CentinewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from CentipoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromCentipoundForceFeet(QuantityValue centipoundforcefeet)
        {
            double value = (double) centipoundforcefeet;
            return new Torque(value, TorqueUnit.CentipoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from CentipoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromCentipoundForceInches(QuantityValue centipoundforceinches)
        {
            double value = (double) centipoundforceinches;
            return new Torque(value, TorqueUnit.CentipoundForceInch);
        }
        /// <summary>
        ///     Get Torque from DecanewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecanewtonCentimeters(QuantityValue decanewtoncentimeters)
        {
            double value = (double) decanewtoncentimeters;
            return new Torque(value, TorqueUnit.DecanewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from DecanewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecanewtonMeters(QuantityValue decanewtonmeters)
        {
            double value = (double) decanewtonmeters;
            return new Torque(value, TorqueUnit.DecanewtonMeter);
        }
        /// <summary>
        ///     Get Torque from DecanewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecanewtonMillimeters(QuantityValue decanewtonmillimeters)
        {
            double value = (double) decanewtonmillimeters;
            return new Torque(value, TorqueUnit.DecanewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from DecapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecapoundForceFeet(QuantityValue decapoundforcefeet)
        {
            double value = (double) decapoundforcefeet;
            return new Torque(value, TorqueUnit.DecapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from DecapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecapoundForceInches(QuantityValue decapoundforceinches)
        {
            double value = (double) decapoundforceinches;
            return new Torque(value, TorqueUnit.DecapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from DecinewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecinewtonCentimeters(QuantityValue decinewtoncentimeters)
        {
            double value = (double) decinewtoncentimeters;
            return new Torque(value, TorqueUnit.DecinewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from DecinewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecinewtonMeters(QuantityValue decinewtonmeters)
        {
            double value = (double) decinewtonmeters;
            return new Torque(value, TorqueUnit.DecinewtonMeter);
        }
        /// <summary>
        ///     Get Torque from DecinewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecinewtonMillimeters(QuantityValue decinewtonmillimeters)
        {
            double value = (double) decinewtonmillimeters;
            return new Torque(value, TorqueUnit.DecinewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from DecipoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecipoundForceFeet(QuantityValue decipoundforcefeet)
        {
            double value = (double) decipoundforcefeet;
            return new Torque(value, TorqueUnit.DecipoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from DecipoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromDecipoundForceInches(QuantityValue decipoundforceinches)
        {
            double value = (double) decipoundforceinches;
            return new Torque(value, TorqueUnit.DecipoundForceInch);
        }
        /// <summary>
        ///     Get Torque from ExanewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromExanewtonCentimeters(QuantityValue exanewtoncentimeters)
        {
            double value = (double) exanewtoncentimeters;
            return new Torque(value, TorqueUnit.ExanewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from ExanewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromExanewtonMeters(QuantityValue exanewtonmeters)
        {
            double value = (double) exanewtonmeters;
            return new Torque(value, TorqueUnit.ExanewtonMeter);
        }
        /// <summary>
        ///     Get Torque from ExanewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromExanewtonMillimeters(QuantityValue exanewtonmillimeters)
        {
            double value = (double) exanewtonmillimeters;
            return new Torque(value, TorqueUnit.ExanewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from ExapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromExapoundForceFeet(QuantityValue exapoundforcefeet)
        {
            double value = (double) exapoundforcefeet;
            return new Torque(value, TorqueUnit.ExapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from ExapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromExapoundForceInches(QuantityValue exapoundforceinches)
        {
            double value = (double) exapoundforceinches;
            return new Torque(value, TorqueUnit.ExapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from FemtonewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromFemtonewtonCentimeters(QuantityValue femtonewtoncentimeters)
        {
            double value = (double) femtonewtoncentimeters;
            return new Torque(value, TorqueUnit.FemtonewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from FemtonewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromFemtonewtonMeters(QuantityValue femtonewtonmeters)
        {
            double value = (double) femtonewtonmeters;
            return new Torque(value, TorqueUnit.FemtonewtonMeter);
        }
        /// <summary>
        ///     Get Torque from FemtonewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromFemtonewtonMillimeters(QuantityValue femtonewtonmillimeters)
        {
            double value = (double) femtonewtonmillimeters;
            return new Torque(value, TorqueUnit.FemtonewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from FemtopoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromFemtopoundForceFeet(QuantityValue femtopoundforcefeet)
        {
            double value = (double) femtopoundforcefeet;
            return new Torque(value, TorqueUnit.FemtopoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from FemtopoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromFemtopoundForceInches(QuantityValue femtopoundforceinches)
        {
            double value = (double) femtopoundforceinches;
            return new Torque(value, TorqueUnit.FemtopoundForceInch);
        }
        /// <summary>
        ///     Get Torque from GiganewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromGiganewtonCentimeters(QuantityValue giganewtoncentimeters)
        {
            double value = (double) giganewtoncentimeters;
            return new Torque(value, TorqueUnit.GiganewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from GiganewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromGiganewtonMeters(QuantityValue giganewtonmeters)
        {
            double value = (double) giganewtonmeters;
            return new Torque(value, TorqueUnit.GiganewtonMeter);
        }
        /// <summary>
        ///     Get Torque from GiganewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromGiganewtonMillimeters(QuantityValue giganewtonmillimeters)
        {
            double value = (double) giganewtonmillimeters;
            return new Torque(value, TorqueUnit.GiganewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from GigapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromGigapoundForceFeet(QuantityValue gigapoundforcefeet)
        {
            double value = (double) gigapoundforcefeet;
            return new Torque(value, TorqueUnit.GigapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from GigapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromGigapoundForceInches(QuantityValue gigapoundforceinches)
        {
            double value = (double) gigapoundforceinches;
            return new Torque(value, TorqueUnit.GigapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from HectonewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromHectonewtonCentimeters(QuantityValue hectonewtoncentimeters)
        {
            double value = (double) hectonewtoncentimeters;
            return new Torque(value, TorqueUnit.HectonewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from HectonewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromHectonewtonMeters(QuantityValue hectonewtonmeters)
        {
            double value = (double) hectonewtonmeters;
            return new Torque(value, TorqueUnit.HectonewtonMeter);
        }
        /// <summary>
        ///     Get Torque from HectonewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromHectonewtonMillimeters(QuantityValue hectonewtonmillimeters)
        {
            double value = (double) hectonewtonmillimeters;
            return new Torque(value, TorqueUnit.HectonewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from HectopoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromHectopoundForceFeet(QuantityValue hectopoundforcefeet)
        {
            double value = (double) hectopoundforcefeet;
            return new Torque(value, TorqueUnit.HectopoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from HectopoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromHectopoundForceInches(QuantityValue hectopoundforceinches)
        {
            double value = (double) hectopoundforceinches;
            return new Torque(value, TorqueUnit.HectopoundForceInch);
        }
        /// <summary>
        ///     Get Torque from KilogramForceCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilogramForceCentimeters(QuantityValue kilogramforcecentimeters)
        {
            double value = (double) kilogramforcecentimeters;
            return new Torque(value, TorqueUnit.KilogramForceCentimeter);
        }
        /// <summary>
        ///     Get Torque from KilogramForceMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilogramForceMeters(QuantityValue kilogramforcemeters)
        {
            double value = (double) kilogramforcemeters;
            return new Torque(value, TorqueUnit.KilogramForceMeter);
        }
        /// <summary>
        ///     Get Torque from KilogramForceMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilogramForceMillimeters(QuantityValue kilogramforcemillimeters)
        {
            double value = (double) kilogramforcemillimeters;
            return new Torque(value, TorqueUnit.KilogramForceMillimeter);
        }
        /// <summary>
        ///     Get Torque from KilonewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilonewtonCentimeters(QuantityValue kilonewtoncentimeters)
        {
            double value = (double) kilonewtoncentimeters;
            return new Torque(value, TorqueUnit.KilonewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from KilonewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilonewtonMeters(QuantityValue kilonewtonmeters)
        {
            double value = (double) kilonewtonmeters;
            return new Torque(value, TorqueUnit.KilonewtonMeter);
        }
        /// <summary>
        ///     Get Torque from KilonewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilonewtonMillimeters(QuantityValue kilonewtonmillimeters)
        {
            double value = (double) kilonewtonmillimeters;
            return new Torque(value, TorqueUnit.KilonewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from KilopoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilopoundForceFeet(QuantityValue kilopoundforcefeet)
        {
            double value = (double) kilopoundforcefeet;
            return new Torque(value, TorqueUnit.KilopoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from KilopoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromKilopoundForceInches(QuantityValue kilopoundforceinches)
        {
            double value = (double) kilopoundforceinches;
            return new Torque(value, TorqueUnit.KilopoundForceInch);
        }
        /// <summary>
        ///     Get Torque from MeganewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMeganewtonCentimeters(QuantityValue meganewtoncentimeters)
        {
            double value = (double) meganewtoncentimeters;
            return new Torque(value, TorqueUnit.MeganewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from MeganewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMeganewtonMeters(QuantityValue meganewtonmeters)
        {
            double value = (double) meganewtonmeters;
            return new Torque(value, TorqueUnit.MeganewtonMeter);
        }
        /// <summary>
        ///     Get Torque from MeganewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMeganewtonMillimeters(QuantityValue meganewtonmillimeters)
        {
            double value = (double) meganewtonmillimeters;
            return new Torque(value, TorqueUnit.MeganewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from MegapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMegapoundForceFeet(QuantityValue megapoundforcefeet)
        {
            double value = (double) megapoundforcefeet;
            return new Torque(value, TorqueUnit.MegapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from MegapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMegapoundForceInches(QuantityValue megapoundforceinches)
        {
            double value = (double) megapoundforceinches;
            return new Torque(value, TorqueUnit.MegapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from MicronewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMicronewtonCentimeters(QuantityValue micronewtoncentimeters)
        {
            double value = (double) micronewtoncentimeters;
            return new Torque(value, TorqueUnit.MicronewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from MicronewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMicronewtonMeters(QuantityValue micronewtonmeters)
        {
            double value = (double) micronewtonmeters;
            return new Torque(value, TorqueUnit.MicronewtonMeter);
        }
        /// <summary>
        ///     Get Torque from MicronewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMicronewtonMillimeters(QuantityValue micronewtonmillimeters)
        {
            double value = (double) micronewtonmillimeters;
            return new Torque(value, TorqueUnit.MicronewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from MicropoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMicropoundForceFeet(QuantityValue micropoundforcefeet)
        {
            double value = (double) micropoundforcefeet;
            return new Torque(value, TorqueUnit.MicropoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from MicropoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMicropoundForceInches(QuantityValue micropoundforceinches)
        {
            double value = (double) micropoundforceinches;
            return new Torque(value, TorqueUnit.MicropoundForceInch);
        }
        /// <summary>
        ///     Get Torque from MillinewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMillinewtonCentimeters(QuantityValue millinewtoncentimeters)
        {
            double value = (double) millinewtoncentimeters;
            return new Torque(value, TorqueUnit.MillinewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from MillinewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMillinewtonMeters(QuantityValue millinewtonmeters)
        {
            double value = (double) millinewtonmeters;
            return new Torque(value, TorqueUnit.MillinewtonMeter);
        }
        /// <summary>
        ///     Get Torque from MillinewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMillinewtonMillimeters(QuantityValue millinewtonmillimeters)
        {
            double value = (double) millinewtonmillimeters;
            return new Torque(value, TorqueUnit.MillinewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from MillipoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMillipoundForceFeet(QuantityValue millipoundforcefeet)
        {
            double value = (double) millipoundforcefeet;
            return new Torque(value, TorqueUnit.MillipoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from MillipoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromMillipoundForceInches(QuantityValue millipoundforceinches)
        {
            double value = (double) millipoundforceinches;
            return new Torque(value, TorqueUnit.MillipoundForceInch);
        }
        /// <summary>
        ///     Get Torque from NanonewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNanonewtonCentimeters(QuantityValue nanonewtoncentimeters)
        {
            double value = (double) nanonewtoncentimeters;
            return new Torque(value, TorqueUnit.NanonewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from NanonewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNanonewtonMeters(QuantityValue nanonewtonmeters)
        {
            double value = (double) nanonewtonmeters;
            return new Torque(value, TorqueUnit.NanonewtonMeter);
        }
        /// <summary>
        ///     Get Torque from NanonewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNanonewtonMillimeters(QuantityValue nanonewtonmillimeters)
        {
            double value = (double) nanonewtonmillimeters;
            return new Torque(value, TorqueUnit.NanonewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from NanopoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNanopoundForceFeet(QuantityValue nanopoundforcefeet)
        {
            double value = (double) nanopoundforcefeet;
            return new Torque(value, TorqueUnit.NanopoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from NanopoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNanopoundForceInches(QuantityValue nanopoundforceinches)
        {
            double value = (double) nanopoundforceinches;
            return new Torque(value, TorqueUnit.NanopoundForceInch);
        }
        /// <summary>
        ///     Get Torque from NewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNewtonCentimeters(QuantityValue newtoncentimeters)
        {
            double value = (double) newtoncentimeters;
            return new Torque(value, TorqueUnit.NewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from NewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNewtonMeters(QuantityValue newtonmeters)
        {
            double value = (double) newtonmeters;
            return new Torque(value, TorqueUnit.NewtonMeter);
        }
        /// <summary>
        ///     Get Torque from NewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromNewtonMillimeters(QuantityValue newtonmillimeters)
        {
            double value = (double) newtonmillimeters;
            return new Torque(value, TorqueUnit.NewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from PetanewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPetanewtonCentimeters(QuantityValue petanewtoncentimeters)
        {
            double value = (double) petanewtoncentimeters;
            return new Torque(value, TorqueUnit.PetanewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from PetanewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPetanewtonMeters(QuantityValue petanewtonmeters)
        {
            double value = (double) petanewtonmeters;
            return new Torque(value, TorqueUnit.PetanewtonMeter);
        }
        /// <summary>
        ///     Get Torque from PetanewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPetanewtonMillimeters(QuantityValue petanewtonmillimeters)
        {
            double value = (double) petanewtonmillimeters;
            return new Torque(value, TorqueUnit.PetanewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from PetapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPetapoundForceFeet(QuantityValue petapoundforcefeet)
        {
            double value = (double) petapoundforcefeet;
            return new Torque(value, TorqueUnit.PetapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from PetapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPetapoundForceInches(QuantityValue petapoundforceinches)
        {
            double value = (double) petapoundforceinches;
            return new Torque(value, TorqueUnit.PetapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from PiconewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPiconewtonCentimeters(QuantityValue piconewtoncentimeters)
        {
            double value = (double) piconewtoncentimeters;
            return new Torque(value, TorqueUnit.PiconewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from PiconewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPiconewtonMeters(QuantityValue piconewtonmeters)
        {
            double value = (double) piconewtonmeters;
            return new Torque(value, TorqueUnit.PiconewtonMeter);
        }
        /// <summary>
        ///     Get Torque from PiconewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPiconewtonMillimeters(QuantityValue piconewtonmillimeters)
        {
            double value = (double) piconewtonmillimeters;
            return new Torque(value, TorqueUnit.PiconewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from PicopoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPicopoundForceFeet(QuantityValue picopoundforcefeet)
        {
            double value = (double) picopoundforcefeet;
            return new Torque(value, TorqueUnit.PicopoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from PicopoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPicopoundForceInches(QuantityValue picopoundforceinches)
        {
            double value = (double) picopoundforceinches;
            return new Torque(value, TorqueUnit.PicopoundForceInch);
        }
        /// <summary>
        ///     Get Torque from PoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPoundForceFeet(QuantityValue poundforcefeet)
        {
            double value = (double) poundforcefeet;
            return new Torque(value, TorqueUnit.PoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from PoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromPoundForceInches(QuantityValue poundforceinches)
        {
            double value = (double) poundforceinches;
            return new Torque(value, TorqueUnit.PoundForceInch);
        }
        /// <summary>
        ///     Get Torque from QutranewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromQutranewtonCentimeters(QuantityValue qutranewtoncentimeters)
        {
            double value = (double) qutranewtoncentimeters;
            return new Torque(value, TorqueUnit.QutranewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from QutranewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromQutranewtonMeters(QuantityValue qutranewtonmeters)
        {
            double value = (double) qutranewtonmeters;
            return new Torque(value, TorqueUnit.QutranewtonMeter);
        }
        /// <summary>
        ///     Get Torque from QutranewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromQutranewtonMillimeters(QuantityValue qutranewtonmillimeters)
        {
            double value = (double) qutranewtonmillimeters;
            return new Torque(value, TorqueUnit.QutranewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from QutrapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromQutrapoundForceFeet(QuantityValue qutrapoundforcefeet)
        {
            double value = (double) qutrapoundforcefeet;
            return new Torque(value, TorqueUnit.QutrapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from QutrapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromQutrapoundForceInches(QuantityValue qutrapoundforceinches)
        {
            double value = (double) qutrapoundforceinches;
            return new Torque(value, TorqueUnit.QutrapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from TeranewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTeranewtonCentimeters(QuantityValue teranewtoncentimeters)
        {
            double value = (double) teranewtoncentimeters;
            return new Torque(value, TorqueUnit.TeranewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from TeranewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTeranewtonMeters(QuantityValue teranewtonmeters)
        {
            double value = (double) teranewtonmeters;
            return new Torque(value, TorqueUnit.TeranewtonMeter);
        }
        /// <summary>
        ///     Get Torque from TeranewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTeranewtonMillimeters(QuantityValue teranewtonmillimeters)
        {
            double value = (double) teranewtonmillimeters;
            return new Torque(value, TorqueUnit.TeranewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from TerapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTerapoundForceFeet(QuantityValue terapoundforcefeet)
        {
            double value = (double) terapoundforcefeet;
            return new Torque(value, TorqueUnit.TerapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from TerapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTerapoundForceInches(QuantityValue terapoundforceinches)
        {
            double value = (double) terapoundforceinches;
            return new Torque(value, TorqueUnit.TerapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from TonneForceCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTonneForceCentimeters(QuantityValue tonneforcecentimeters)
        {
            double value = (double) tonneforcecentimeters;
            return new Torque(value, TorqueUnit.TonneForceCentimeter);
        }
        /// <summary>
        ///     Get Torque from TonneForceMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTonneForceMeters(QuantityValue tonneforcemeters)
        {
            double value = (double) tonneforcemeters;
            return new Torque(value, TorqueUnit.TonneForceMeter);
        }
        /// <summary>
        ///     Get Torque from TonneForceMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromTonneForceMillimeters(QuantityValue tonneforcemillimeters)
        {
            double value = (double) tonneforcemillimeters;
            return new Torque(value, TorqueUnit.TonneForceMillimeter);
        }
        /// <summary>
        ///     Get Torque from VettanewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromVettanewtonCentimeters(QuantityValue vettanewtoncentimeters)
        {
            double value = (double) vettanewtoncentimeters;
            return new Torque(value, TorqueUnit.VettanewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from VettanewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromVettanewtonMeters(QuantityValue vettanewtonmeters)
        {
            double value = (double) vettanewtonmeters;
            return new Torque(value, TorqueUnit.VettanewtonMeter);
        }
        /// <summary>
        ///     Get Torque from VettanewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromVettanewtonMillimeters(QuantityValue vettanewtonmillimeters)
        {
            double value = (double) vettanewtonmillimeters;
            return new Torque(value, TorqueUnit.VettanewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from VettapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromVettapoundForceFeet(QuantityValue vettapoundforcefeet)
        {
            double value = (double) vettapoundforcefeet;
            return new Torque(value, TorqueUnit.VettapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from VettapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromVettapoundForceInches(QuantityValue vettapoundforceinches)
        {
            double value = (double) vettapoundforceinches;
            return new Torque(value, TorqueUnit.VettapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from YottanewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromYottanewtonCentimeters(QuantityValue yottanewtoncentimeters)
        {
            double value = (double) yottanewtoncentimeters;
            return new Torque(value, TorqueUnit.YottanewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from YottanewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromYottanewtonMeters(QuantityValue yottanewtonmeters)
        {
            double value = (double) yottanewtonmeters;
            return new Torque(value, TorqueUnit.YottanewtonMeter);
        }
        /// <summary>
        ///     Get Torque from YottanewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromYottanewtonMillimeters(QuantityValue yottanewtonmillimeters)
        {
            double value = (double) yottanewtonmillimeters;
            return new Torque(value, TorqueUnit.YottanewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from YottapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromYottapoundForceFeet(QuantityValue yottapoundforcefeet)
        {
            double value = (double) yottapoundforcefeet;
            return new Torque(value, TorqueUnit.YottapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from YottapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromYottapoundForceInches(QuantityValue yottapoundforceinches)
        {
            double value = (double) yottapoundforceinches;
            return new Torque(value, TorqueUnit.YottapoundForceInch);
        }
        /// <summary>
        ///     Get Torque from ZettanewtonCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromZettanewtonCentimeters(QuantityValue zettanewtoncentimeters)
        {
            double value = (double) zettanewtoncentimeters;
            return new Torque(value, TorqueUnit.ZettanewtonCentimeter);
        }
        /// <summary>
        ///     Get Torque from ZettanewtonMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromZettanewtonMeters(QuantityValue zettanewtonmeters)
        {
            double value = (double) zettanewtonmeters;
            return new Torque(value, TorqueUnit.ZettanewtonMeter);
        }
        /// <summary>
        ///     Get Torque from ZettanewtonMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromZettanewtonMillimeters(QuantityValue zettanewtonmillimeters)
        {
            double value = (double) zettanewtonmillimeters;
            return new Torque(value, TorqueUnit.ZettanewtonMillimeter);
        }
        /// <summary>
        ///     Get Torque from ZettapoundForceFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromZettapoundForceFeet(QuantityValue zettapoundforcefeet)
        {
            double value = (double) zettapoundforcefeet;
            return new Torque(value, TorqueUnit.ZettapoundForceFoot);
        }
        /// <summary>
        ///     Get Torque from ZettapoundForceInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Torque FromZettapoundForceInches(QuantityValue zettapoundforceinches)
        {
            double value = (double) zettapoundforceinches;
            return new Torque(value, TorqueUnit.ZettapoundForceInch);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        public static Torque From(QuantityValue value, TorqueUnit fromUnit)
        {
            return new Torque((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Torque Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Torque, TorqueUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Torque result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Torque result)
        {
            return QuantityParser.Default.TryParse<Torque, TorqueUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static TorqueUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<TorqueUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.TorqueUnit)"/>
        public static bool TryParseUnit(string str, out TorqueUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out TorqueUnit unit)
        {
            return UnitParser.Default.TryParse<TorqueUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Torque operator -(Torque right)
        {
            return new Torque(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from adding two <see cref="Torque"/>.</summary>
        public static Torque operator +(Torque left, Torque right)
        {
            return new Torque(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from subtracting two <see cref="Torque"/>.</summary>
        public static Torque operator -(Torque left, Torque right)
        {
            return new Torque(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from multiplying value and <see cref="Torque"/>.</summary>
        public static Torque operator *(double left, Torque right)
        {
            return new Torque(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from multiplying value and <see cref="Torque"/>.</summary>
        public static Torque operator *(Torque left, double right)
        {
            return new Torque(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from dividing <see cref="Torque"/> by value.</summary>
        public static Torque operator /(Torque left, double right)
        {
            return new Torque(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Torque"/> by <see cref="Torque"/>.</summary>
        public static double operator /(Torque left, Torque right)
        {
            return left.NewtonMeters / right.NewtonMeters;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Torque left, Torque right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Torque left, Torque right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Torque left, Torque right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Torque left, Torque right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Torque, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Torque left, Torque right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Torque, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Torque left, Torque right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Torque objTorque)) throw new ArgumentException("Expected type Torque.", nameof(obj));

            return CompareTo(objTorque);
        }

        /// <inheritdoc />
        public int CompareTo(Torque other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Torque, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Torque objTorque))
                return false;

            return Equals(objTorque);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Torque, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Torque other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Torque within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Torque other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Torque.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(TorqueUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            if (firstUnitInfo is null)
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
                if (firstUnitInfo is null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }
            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is TorqueUnit unitAsTorqueUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(TorqueUnit)} is supported.", nameof(unit));

            return As(unitAsTorqueUnit);
        }

        /// <summary>
        ///     Converts this Torque to another Torque with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Torque with the specified unit.</returns>
        public Torque ToUnit(TorqueUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Torque(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is TorqueUnit unitAsTorqueUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(TorqueUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsTorqueUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Torque ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<TorqueUnit> IQuantity<TorqueUnit>.ToUnit(TorqueUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<TorqueUnit> IQuantity<TorqueUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case TorqueUnit.CentinewtonCentimeter: return (_value*0.01) * 1e-2d;
                case TorqueUnit.CentinewtonMeter: return (_value) * 1e-2d;
                case TorqueUnit.CentinewtonMillimeter: return (_value*0.001) * 1e-2d;
                case TorqueUnit.CentipoundForceFoot: return (_value*1.3558179483314) * 1e-2d;
                case TorqueUnit.CentipoundForceInch: return (_value*1.129848290276167e-1) * 1e-2d;
                case TorqueUnit.DecanewtonCentimeter: return (_value*0.01) * 1e1d;
                case TorqueUnit.DecanewtonMeter: return (_value) * 1e1d;
                case TorqueUnit.DecanewtonMillimeter: return (_value*0.001) * 1e1d;
                case TorqueUnit.DecapoundForceFoot: return (_value*1.3558179483314) * 1e1d;
                case TorqueUnit.DecapoundForceInch: return (_value*1.129848290276167e-1) * 1e1d;
                case TorqueUnit.DecinewtonCentimeter: return (_value*0.01) * 1e-1d;
                case TorqueUnit.DecinewtonMeter: return (_value) * 1e-1d;
                case TorqueUnit.DecinewtonMillimeter: return (_value*0.001) * 1e-1d;
                case TorqueUnit.DecipoundForceFoot: return (_value*1.3558179483314) * 1e-1d;
                case TorqueUnit.DecipoundForceInch: return (_value*1.129848290276167e-1) * 1e-1d;
                case TorqueUnit.ExanewtonCentimeter: return (_value*0.01) * 1e18d;
                case TorqueUnit.ExanewtonMeter: return (_value) * 1e18d;
                case TorqueUnit.ExanewtonMillimeter: return (_value*0.001) * 1e18d;
                case TorqueUnit.ExapoundForceFoot: return (_value*1.3558179483314) * 1e18d;
                case TorqueUnit.ExapoundForceInch: return (_value*1.129848290276167e-1) * 1e18d;
                case TorqueUnit.FemtonewtonCentimeter: return (_value*0.01) * 1e-15d;
                case TorqueUnit.FemtonewtonMeter: return (_value) * 1e-15d;
                case TorqueUnit.FemtonewtonMillimeter: return (_value*0.001) * 1e-15d;
                case TorqueUnit.FemtopoundForceFoot: return (_value*1.3558179483314) * 1e-15d;
                case TorqueUnit.FemtopoundForceInch: return (_value*1.129848290276167e-1) * 1e-15d;
                case TorqueUnit.GiganewtonCentimeter: return (_value*0.01) * 1e9d;
                case TorqueUnit.GiganewtonMeter: return (_value) * 1e9d;
                case TorqueUnit.GiganewtonMillimeter: return (_value*0.001) * 1e9d;
                case TorqueUnit.GigapoundForceFoot: return (_value*1.3558179483314) * 1e9d;
                case TorqueUnit.GigapoundForceInch: return (_value*1.129848290276167e-1) * 1e9d;
                case TorqueUnit.HectonewtonCentimeter: return (_value*0.01) * 1e2d;
                case TorqueUnit.HectonewtonMeter: return (_value) * 1e2d;
                case TorqueUnit.HectonewtonMillimeter: return (_value*0.001) * 1e2d;
                case TorqueUnit.HectopoundForceFoot: return (_value*1.3558179483314) * 1e2d;
                case TorqueUnit.HectopoundForceInch: return (_value*1.129848290276167e-1) * 1e2d;
                case TorqueUnit.KilogramForceCentimeter: return _value*0.0980665019960652;
                case TorqueUnit.KilogramForceMeter: return _value*9.80665019960652;
                case TorqueUnit.KilogramForceMillimeter: return _value*0.00980665019960652;
                case TorqueUnit.KilonewtonCentimeter: return (_value*0.01) * 1e3d;
                case TorqueUnit.KilonewtonMeter: return (_value) * 1e3d;
                case TorqueUnit.KilonewtonMillimeter: return (_value*0.001) * 1e3d;
                case TorqueUnit.KilopoundForceFoot: return (_value*1.3558179483314) * 1e3d;
                case TorqueUnit.KilopoundForceInch: return (_value*1.129848290276167e-1) * 1e3d;
                case TorqueUnit.MeganewtonCentimeter: return (_value*0.01) * 1e6d;
                case TorqueUnit.MeganewtonMeter: return (_value) * 1e6d;
                case TorqueUnit.MeganewtonMillimeter: return (_value*0.001) * 1e6d;
                case TorqueUnit.MegapoundForceFoot: return (_value*1.3558179483314) * 1e6d;
                case TorqueUnit.MegapoundForceInch: return (_value*1.129848290276167e-1) * 1e6d;
                case TorqueUnit.MicronewtonCentimeter: return (_value*0.01) * 1e-6d;
                case TorqueUnit.MicronewtonMeter: return (_value) * 1e-6d;
                case TorqueUnit.MicronewtonMillimeter: return (_value*0.001) * 1e-6d;
                case TorqueUnit.MicropoundForceFoot: return (_value*1.3558179483314) * 1e-6d;
                case TorqueUnit.MicropoundForceInch: return (_value*1.129848290276167e-1) * 1e-6d;
                case TorqueUnit.MillinewtonCentimeter: return (_value*0.01) * 1e-3d;
                case TorqueUnit.MillinewtonMeter: return (_value) * 1e-3d;
                case TorqueUnit.MillinewtonMillimeter: return (_value*0.001) * 1e-3d;
                case TorqueUnit.MillipoundForceFoot: return (_value*1.3558179483314) * 1e-3d;
                case TorqueUnit.MillipoundForceInch: return (_value*1.129848290276167e-1) * 1e-3d;
                case TorqueUnit.NanonewtonCentimeter: return (_value*0.01) * 1e-9d;
                case TorqueUnit.NanonewtonMeter: return (_value) * 1e-9d;
                case TorqueUnit.NanonewtonMillimeter: return (_value*0.001) * 1e-9d;
                case TorqueUnit.NanopoundForceFoot: return (_value*1.3558179483314) * 1e-9d;
                case TorqueUnit.NanopoundForceInch: return (_value*1.129848290276167e-1) * 1e-9d;
                case TorqueUnit.NewtonCentimeter: return _value*0.01;
                case TorqueUnit.NewtonMeter: return _value;
                case TorqueUnit.NewtonMillimeter: return _value*0.001;
                case TorqueUnit.PetanewtonCentimeter: return (_value*0.01) * 1e15d;
                case TorqueUnit.PetanewtonMeter: return (_value) * 1e15d;
                case TorqueUnit.PetanewtonMillimeter: return (_value*0.001) * 1e15d;
                case TorqueUnit.PetapoundForceFoot: return (_value*1.3558179483314) * 1e15d;
                case TorqueUnit.PetapoundForceInch: return (_value*1.129848290276167e-1) * 1e15d;
                case TorqueUnit.PiconewtonCentimeter: return (_value*0.01) * 1e-12d;
                case TorqueUnit.PiconewtonMeter: return (_value) * 1e-12d;
                case TorqueUnit.PiconewtonMillimeter: return (_value*0.001) * 1e-12d;
                case TorqueUnit.PicopoundForceFoot: return (_value*1.3558179483314) * 1e-12d;
                case TorqueUnit.PicopoundForceInch: return (_value*1.129848290276167e-1) * 1e-12d;
                case TorqueUnit.PoundForceFoot: return _value*1.3558179483314;
                case TorqueUnit.PoundForceInch: return _value*1.129848290276167e-1;
                case TorqueUnit.QutranewtonCentimeter: return (_value*0.01) * 1e27d;
                case TorqueUnit.QutranewtonMeter: return (_value) * 1e27d;
                case TorqueUnit.QutranewtonMillimeter: return (_value*0.001) * 1e27d;
                case TorqueUnit.QutrapoundForceFoot: return (_value*1.3558179483314) * 1e27d;
                case TorqueUnit.QutrapoundForceInch: return (_value*1.129848290276167e-1) * 1e27d;
                case TorqueUnit.TeranewtonCentimeter: return (_value*0.01) * 1e12d;
                case TorqueUnit.TeranewtonMeter: return (_value) * 1e12d;
                case TorqueUnit.TeranewtonMillimeter: return (_value*0.001) * 1e12d;
                case TorqueUnit.TerapoundForceFoot: return (_value*1.3558179483314) * 1e12d;
                case TorqueUnit.TerapoundForceInch: return (_value*1.129848290276167e-1) * 1e12d;
                case TorqueUnit.TonneForceCentimeter: return _value*98.0665019960652;
                case TorqueUnit.TonneForceMeter: return _value*9806.65019960653;
                case TorqueUnit.TonneForceMillimeter: return _value*9.80665019960652;
                case TorqueUnit.VettanewtonCentimeter: return (_value*0.01) * 1e30d;
                case TorqueUnit.VettanewtonMeter: return (_value) * 1e30d;
                case TorqueUnit.VettanewtonMillimeter: return (_value*0.001) * 1e30d;
                case TorqueUnit.VettapoundForceFoot: return (_value*1.3558179483314) * 1e30d;
                case TorqueUnit.VettapoundForceInch: return (_value*1.129848290276167e-1) * 1e30d;
                case TorqueUnit.YottanewtonCentimeter: return (_value*0.01) * 1e24d;
                case TorqueUnit.YottanewtonMeter: return (_value) * 1e24d;
                case TorqueUnit.YottanewtonMillimeter: return (_value*0.001) * 1e24d;
                case TorqueUnit.YottapoundForceFoot: return (_value*1.3558179483314) * 1e24d;
                case TorqueUnit.YottapoundForceInch: return (_value*1.129848290276167e-1) * 1e24d;
                case TorqueUnit.ZettanewtonCentimeter: return (_value*0.01) * 1e21d;
                case TorqueUnit.ZettanewtonMeter: return (_value) * 1e21d;
                case TorqueUnit.ZettanewtonMillimeter: return (_value*0.001) * 1e21d;
                case TorqueUnit.ZettapoundForceFoot: return (_value*1.3558179483314) * 1e21d;
                case TorqueUnit.ZettapoundForceInch: return (_value*1.129848290276167e-1) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(TorqueUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case TorqueUnit.CentinewtonCentimeter: return (baseUnitValue*100) / 1e-2d;
                case TorqueUnit.CentinewtonMeter: return (baseUnitValue) / 1e-2d;
                case TorqueUnit.CentinewtonMillimeter: return (baseUnitValue*1000) / 1e-2d;
                case TorqueUnit.CentipoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-2d;
                case TorqueUnit.CentipoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-2d;
                case TorqueUnit.DecanewtonCentimeter: return (baseUnitValue*100) / 1e1d;
                case TorqueUnit.DecanewtonMeter: return (baseUnitValue) / 1e1d;
                case TorqueUnit.DecanewtonMillimeter: return (baseUnitValue*1000) / 1e1d;
                case TorqueUnit.DecapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e1d;
                case TorqueUnit.DecapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e1d;
                case TorqueUnit.DecinewtonCentimeter: return (baseUnitValue*100) / 1e-1d;
                case TorqueUnit.DecinewtonMeter: return (baseUnitValue) / 1e-1d;
                case TorqueUnit.DecinewtonMillimeter: return (baseUnitValue*1000) / 1e-1d;
                case TorqueUnit.DecipoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-1d;
                case TorqueUnit.DecipoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-1d;
                case TorqueUnit.ExanewtonCentimeter: return (baseUnitValue*100) / 1e18d;
                case TorqueUnit.ExanewtonMeter: return (baseUnitValue) / 1e18d;
                case TorqueUnit.ExanewtonMillimeter: return (baseUnitValue*1000) / 1e18d;
                case TorqueUnit.ExapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e18d;
                case TorqueUnit.ExapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e18d;
                case TorqueUnit.FemtonewtonCentimeter: return (baseUnitValue*100) / 1e-15d;
                case TorqueUnit.FemtonewtonMeter: return (baseUnitValue) / 1e-15d;
                case TorqueUnit.FemtonewtonMillimeter: return (baseUnitValue*1000) / 1e-15d;
                case TorqueUnit.FemtopoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-15d;
                case TorqueUnit.FemtopoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-15d;
                case TorqueUnit.GiganewtonCentimeter: return (baseUnitValue*100) / 1e9d;
                case TorqueUnit.GiganewtonMeter: return (baseUnitValue) / 1e9d;
                case TorqueUnit.GiganewtonMillimeter: return (baseUnitValue*1000) / 1e9d;
                case TorqueUnit.GigapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e9d;
                case TorqueUnit.GigapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e9d;
                case TorqueUnit.HectonewtonCentimeter: return (baseUnitValue*100) / 1e2d;
                case TorqueUnit.HectonewtonMeter: return (baseUnitValue) / 1e2d;
                case TorqueUnit.HectonewtonMillimeter: return (baseUnitValue*1000) / 1e2d;
                case TorqueUnit.HectopoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e2d;
                case TorqueUnit.HectopoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e2d;
                case TorqueUnit.KilogramForceCentimeter: return baseUnitValue*10.1971619222242;
                case TorqueUnit.KilogramForceMeter: return baseUnitValue*0.101971619222242;
                case TorqueUnit.KilogramForceMillimeter: return baseUnitValue*101.971619222242;
                case TorqueUnit.KilonewtonCentimeter: return (baseUnitValue*100) / 1e3d;
                case TorqueUnit.KilonewtonMeter: return (baseUnitValue) / 1e3d;
                case TorqueUnit.KilonewtonMillimeter: return (baseUnitValue*1000) / 1e3d;
                case TorqueUnit.KilopoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e3d;
                case TorqueUnit.KilopoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e3d;
                case TorqueUnit.MeganewtonCentimeter: return (baseUnitValue*100) / 1e6d;
                case TorqueUnit.MeganewtonMeter: return (baseUnitValue) / 1e6d;
                case TorqueUnit.MeganewtonMillimeter: return (baseUnitValue*1000) / 1e6d;
                case TorqueUnit.MegapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e6d;
                case TorqueUnit.MegapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e6d;
                case TorqueUnit.MicronewtonCentimeter: return (baseUnitValue*100) / 1e-6d;
                case TorqueUnit.MicronewtonMeter: return (baseUnitValue) / 1e-6d;
                case TorqueUnit.MicronewtonMillimeter: return (baseUnitValue*1000) / 1e-6d;
                case TorqueUnit.MicropoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-6d;
                case TorqueUnit.MicropoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-6d;
                case TorqueUnit.MillinewtonCentimeter: return (baseUnitValue*100) / 1e-3d;
                case TorqueUnit.MillinewtonMeter: return (baseUnitValue) / 1e-3d;
                case TorqueUnit.MillinewtonMillimeter: return (baseUnitValue*1000) / 1e-3d;
                case TorqueUnit.MillipoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-3d;
                case TorqueUnit.MillipoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-3d;
                case TorqueUnit.NanonewtonCentimeter: return (baseUnitValue*100) / 1e-9d;
                case TorqueUnit.NanonewtonMeter: return (baseUnitValue) / 1e-9d;
                case TorqueUnit.NanonewtonMillimeter: return (baseUnitValue*1000) / 1e-9d;
                case TorqueUnit.NanopoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-9d;
                case TorqueUnit.NanopoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-9d;
                case TorqueUnit.NewtonCentimeter: return baseUnitValue*100;
                case TorqueUnit.NewtonMeter: return baseUnitValue;
                case TorqueUnit.NewtonMillimeter: return baseUnitValue*1000;
                case TorqueUnit.PetanewtonCentimeter: return (baseUnitValue*100) / 1e15d;
                case TorqueUnit.PetanewtonMeter: return (baseUnitValue) / 1e15d;
                case TorqueUnit.PetanewtonMillimeter: return (baseUnitValue*1000) / 1e15d;
                case TorqueUnit.PetapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e15d;
                case TorqueUnit.PetapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e15d;
                case TorqueUnit.PiconewtonCentimeter: return (baseUnitValue*100) / 1e-12d;
                case TorqueUnit.PiconewtonMeter: return (baseUnitValue) / 1e-12d;
                case TorqueUnit.PiconewtonMillimeter: return (baseUnitValue*1000) / 1e-12d;
                case TorqueUnit.PicopoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e-12d;
                case TorqueUnit.PicopoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e-12d;
                case TorqueUnit.PoundForceFoot: return baseUnitValue/1.3558179483314;
                case TorqueUnit.PoundForceInch: return baseUnitValue/1.129848290276167e-1;
                case TorqueUnit.QutranewtonCentimeter: return (baseUnitValue*100) / 1e27d;
                case TorqueUnit.QutranewtonMeter: return (baseUnitValue) / 1e27d;
                case TorqueUnit.QutranewtonMillimeter: return (baseUnitValue*1000) / 1e27d;
                case TorqueUnit.QutrapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e27d;
                case TorqueUnit.QutrapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e27d;
                case TorqueUnit.TeranewtonCentimeter: return (baseUnitValue*100) / 1e12d;
                case TorqueUnit.TeranewtonMeter: return (baseUnitValue) / 1e12d;
                case TorqueUnit.TeranewtonMillimeter: return (baseUnitValue*1000) / 1e12d;
                case TorqueUnit.TerapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e12d;
                case TorqueUnit.TerapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e12d;
                case TorqueUnit.TonneForceCentimeter: return baseUnitValue*0.0101971619222242;
                case TorqueUnit.TonneForceMeter: return baseUnitValue*0.000101971619222242;
                case TorqueUnit.TonneForceMillimeter: return baseUnitValue*0.101971619222242;
                case TorqueUnit.VettanewtonCentimeter: return (baseUnitValue*100) / 1e30d;
                case TorqueUnit.VettanewtonMeter: return (baseUnitValue) / 1e30d;
                case TorqueUnit.VettanewtonMillimeter: return (baseUnitValue*1000) / 1e30d;
                case TorqueUnit.VettapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e30d;
                case TorqueUnit.VettapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e30d;
                case TorqueUnit.YottanewtonCentimeter: return (baseUnitValue*100) / 1e24d;
                case TorqueUnit.YottanewtonMeter: return (baseUnitValue) / 1e24d;
                case TorqueUnit.YottanewtonMillimeter: return (baseUnitValue*1000) / 1e24d;
                case TorqueUnit.YottapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e24d;
                case TorqueUnit.YottapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e24d;
                case TorqueUnit.ZettanewtonCentimeter: return (baseUnitValue*100) / 1e21d;
                case TorqueUnit.ZettanewtonMeter: return (baseUnitValue) / 1e21d;
                case TorqueUnit.ZettanewtonMillimeter: return (baseUnitValue*1000) / 1e21d;
                case TorqueUnit.ZettapoundForceFoot: return (baseUnitValue/1.3558179483314) / 1e21d;
                case TorqueUnit.ZettapoundForceInch: return (baseUnitValue/1.129848290276167e-1) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<TorqueUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Torque)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Torque)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Torque)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Torque))
                return this;
            else if(conversionType == typeof(TorqueUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Torque.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Torque.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Torque)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
