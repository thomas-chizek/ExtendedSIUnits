//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
    /// </summary>
    public partial class Length : IQuantity<LengthUnit>, IEquatable<Length>, IComparable, IComparable<Length>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LengthUnit? _unit;

        static Length()
        {
            BaseDimensions = new BaseDimensions(1, 0, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<LengthUnit>(QuantityType.Length,
                new UnitInfo<LengthUnit>[] {
                    new UnitInfo<LengthUnit>(LengthUnit.AU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.CentiaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centilightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centilighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centilightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centilightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centilightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centimeter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Centiparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.DecaaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decalightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decalighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decalightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decalightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decaparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.DeciaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decilightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decilighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decilightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decilightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decilightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Decimeter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Deciparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.DtpPica, new BaseUnits(length: LengthUnit.DtpPica)),
                    new UnitInfo<LengthUnit>(LengthUnit.DtpPoint, new BaseUnits(length: LengthUnit.DtpPoint)),
                    new UnitInfo<LengthUnit>(LengthUnit.Exalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Exameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Exaparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Fathom, new BaseUnits(length: LengthUnit.Fathom)),
                    new UnitInfo<LengthUnit>(LengthUnit.Femtometer, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Foot, new BaseUnits(length: LengthUnit.Foot)),
                    new UnitInfo<LengthUnit>(LengthUnit.GigaaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigalightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigalighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigalightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigalightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigaparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Hand, new BaseUnits(length: LengthUnit.Hand)),
                    new UnitInfo<LengthUnit>(LengthUnit.HectoaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectolightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectolighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectolightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectolightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectolightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectometer, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectoparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Inch, new BaseUnits(length: LengthUnit.Inch)),
                    new UnitInfo<LengthUnit>(LengthUnit.KiloaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilolightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilolighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilolightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilolightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilolightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilometer, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Kiloparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Lightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Lighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Lightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Lightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Lightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.MegaaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megalightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megalighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megalightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megalightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Megaparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Meter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.MicroaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microinch, new BaseUnits(length: LengthUnit.Microinch)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microlightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microlighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microlightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microlightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microlightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Micrometer, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Microparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Mil, new BaseUnits(length: LengthUnit.Mil)),
                    new UnitInfo<LengthUnit>(LengthUnit.Mile, new BaseUnits(length: LengthUnit.Mile)),
                    new UnitInfo<LengthUnit>(LengthUnit.MilliaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Millilightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Millilighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Millilightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Millilightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Millilightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Millimeter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Milliparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Nanometer, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.NauticalMile, new BaseUnits(length: LengthUnit.NauticalMile)),
                    new UnitInfo<LengthUnit>(LengthUnit.Parsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Petalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Petameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Petaparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Picometer, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.PrinterPica, new BaseUnits(length: LengthUnit.PrinterPica)),
                    new UnitInfo<LengthUnit>(LengthUnit.PrinterPoint, new BaseUnits(length: LengthUnit.PrinterPoint)),
                    new UnitInfo<LengthUnit>(LengthUnit.Qutrameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Shackle, new BaseUnits(length: LengthUnit.Shackle)),
                    new UnitInfo<LengthUnit>(LengthUnit.TeraaU, new BaseUnits(length: LengthUnit.AU)),
                    new UnitInfo<LengthUnit>(LengthUnit.Teralightday, new BaseUnits(length: LengthUnit.Lightday)),
                    new UnitInfo<LengthUnit>(LengthUnit.Teralighthour, new BaseUnits(length: LengthUnit.Lighthour)),
                    new UnitInfo<LengthUnit>(LengthUnit.Teralightminute, new BaseUnits(length: LengthUnit.Lightminute)),
                    new UnitInfo<LengthUnit>(LengthUnit.Teralightsecond, new BaseUnits(length: LengthUnit.Lightsecond)),
                    new UnitInfo<LengthUnit>(LengthUnit.Teralightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Terameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Teraparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Twip, new BaseUnits(length: LengthUnit.Twip)),
                    new UnitInfo<LengthUnit>(LengthUnit.UsSurveyFoot, new BaseUnits(length: LengthUnit.UsSurveyFoot)),
                    new UnitInfo<LengthUnit>(LengthUnit.Vettameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Yard, new BaseUnits(length: LengthUnit.Yard)),
                    new UnitInfo<LengthUnit>(LengthUnit.Yottalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Yottameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Yottaparsec, new BaseUnits()),
                    new UnitInfo<LengthUnit>(LengthUnit.Zettalightyear, new BaseUnits(length: LengthUnit.Lightyear)),
                    new UnitInfo<LengthUnit>(LengthUnit.Zettameter, new BaseUnits(length: LengthUnit.Meter)),
                    new UnitInfo<LengthUnit>(LengthUnit.Zettaparsec, new BaseUnits()),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Length(double numericValue, LengthUnit unit)
        {
            if(unit == LengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Length(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<LengthUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Length, which is Meter. All conversions go via this value.
        /// </summary>
        public static LengthUnit BaseUnit { get; } = LengthUnit.Meter;

        /// <summary>
        /// Represents the largest possible value of Length
        /// </summary>
        public static Length MaxValue { get; } = new Length(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Length
        /// </summary>
        public static Length MinValue { get; } = new Length(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Length;

        /// <summary>
        ///     All units of measurement for the Length quantity.
        /// </summary>
        public static LengthUnit[] Units { get; } = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>().Except(new LengthUnit[]{ LengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Meter.
        /// </summary>
        public static Length Zero { get; } = new Length(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public LengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<LengthUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Length.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Length.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Length in AUs.
        /// </summary>
        public double AUs => As(LengthUnit.AU);

        /// <summary>
        ///     Get Length in CentiaUs.
        /// </summary>
        public double CentiaUs => As(LengthUnit.CentiaU);

        /// <summary>
        ///     Get Length in Centilightdays.
        /// </summary>
        public double Centilightdays => As(LengthUnit.Centilightday);

        /// <summary>
        ///     Get Length in Centilighthours.
        /// </summary>
        public double Centilighthours => As(LengthUnit.Centilighthour);

        /// <summary>
        ///     Get Length in Centilightminutes.
        /// </summary>
        public double Centilightminutes => As(LengthUnit.Centilightminute);

        /// <summary>
        ///     Get Length in Centilightseconds.
        /// </summary>
        public double Centilightseconds => As(LengthUnit.Centilightsecond);

        /// <summary>
        ///     Get Length in Centilightyears.
        /// </summary>
        public double Centilightyears => As(LengthUnit.Centilightyear);

        /// <summary>
        ///     Get Length in Centimeters.
        /// </summary>
        public double Centimeters => As(LengthUnit.Centimeter);

        /// <summary>
        ///     Get Length in Centiparsecs.
        /// </summary>
        public double Centiparsecs => As(LengthUnit.Centiparsec);

        /// <summary>
        ///     Get Length in DecaaUs.
        /// </summary>
        public double DecaaUs => As(LengthUnit.DecaaU);

        /// <summary>
        ///     Get Length in Decalightdays.
        /// </summary>
        public double Decalightdays => As(LengthUnit.Decalightday);

        /// <summary>
        ///     Get Length in Decalighthours.
        /// </summary>
        public double Decalighthours => As(LengthUnit.Decalighthour);

        /// <summary>
        ///     Get Length in Decalightminutes.
        /// </summary>
        public double Decalightminutes => As(LengthUnit.Decalightminute);

        /// <summary>
        ///     Get Length in Decalightseconds.
        /// </summary>
        public double Decalightseconds => As(LengthUnit.Decalightsecond);

        /// <summary>
        ///     Get Length in Decalightyears.
        /// </summary>
        public double Decalightyears => As(LengthUnit.Decalightyear);

        /// <summary>
        ///     Get Length in Decameters.
        /// </summary>
        public double Decameters => As(LengthUnit.Decameter);

        /// <summary>
        ///     Get Length in Decaparsecs.
        /// </summary>
        public double Decaparsecs => As(LengthUnit.Decaparsec);

        /// <summary>
        ///     Get Length in DeciaUs.
        /// </summary>
        public double DeciaUs => As(LengthUnit.DeciaU);

        /// <summary>
        ///     Get Length in Decilightdays.
        /// </summary>
        public double Decilightdays => As(LengthUnit.Decilightday);

        /// <summary>
        ///     Get Length in Decilighthours.
        /// </summary>
        public double Decilighthours => As(LengthUnit.Decilighthour);

        /// <summary>
        ///     Get Length in Decilightminutes.
        /// </summary>
        public double Decilightminutes => As(LengthUnit.Decilightminute);

        /// <summary>
        ///     Get Length in Decilightseconds.
        /// </summary>
        public double Decilightseconds => As(LengthUnit.Decilightsecond);

        /// <summary>
        ///     Get Length in Decilightyears.
        /// </summary>
        public double Decilightyears => As(LengthUnit.Decilightyear);

        /// <summary>
        ///     Get Length in Decimeters.
        /// </summary>
        public double Decimeters => As(LengthUnit.Decimeter);

        /// <summary>
        ///     Get Length in Deciparsecs.
        /// </summary>
        public double Deciparsecs => As(LengthUnit.Deciparsec);

        /// <summary>
        ///     Get Length in DtpPicas.
        /// </summary>
        public double DtpPicas => As(LengthUnit.DtpPica);

        /// <summary>
        ///     Get Length in DtpPoints.
        /// </summary>
        public double DtpPoints => As(LengthUnit.DtpPoint);

        /// <summary>
        ///     Get Length in Exalightyears.
        /// </summary>
        public double Exalightyears => As(LengthUnit.Exalightyear);

        /// <summary>
        ///     Get Length in Exameters.
        /// </summary>
        public double Exameters => As(LengthUnit.Exameter);

        /// <summary>
        ///     Get Length in Exaparsecs.
        /// </summary>
        public double Exaparsecs => As(LengthUnit.Exaparsec);

        /// <summary>
        ///     Get Length in Fathoms.
        /// </summary>
        public double Fathoms => As(LengthUnit.Fathom);

        /// <summary>
        ///     Get Length in Femtometers.
        /// </summary>
        public double Femtometers => As(LengthUnit.Femtometer);

        /// <summary>
        ///     Get Length in Feet.
        /// </summary>
        public double Feet => As(LengthUnit.Foot);

        /// <summary>
        ///     Get Length in GigaaUs.
        /// </summary>
        public double GigaaUs => As(LengthUnit.GigaaU);

        /// <summary>
        ///     Get Length in Gigalightdays.
        /// </summary>
        public double Gigalightdays => As(LengthUnit.Gigalightday);

        /// <summary>
        ///     Get Length in Gigalighthours.
        /// </summary>
        public double Gigalighthours => As(LengthUnit.Gigalighthour);

        /// <summary>
        ///     Get Length in Gigalightminutes.
        /// </summary>
        public double Gigalightminutes => As(LengthUnit.Gigalightminute);

        /// <summary>
        ///     Get Length in Gigalightseconds.
        /// </summary>
        public double Gigalightseconds => As(LengthUnit.Gigalightsecond);

        /// <summary>
        ///     Get Length in Gigalightyears.
        /// </summary>
        public double Gigalightyears => As(LengthUnit.Gigalightyear);

        /// <summary>
        ///     Get Length in Gigameters.
        /// </summary>
        public double Gigameters => As(LengthUnit.Gigameter);

        /// <summary>
        ///     Get Length in Gigaparsecs.
        /// </summary>
        public double Gigaparsecs => As(LengthUnit.Gigaparsec);

        /// <summary>
        ///     Get Length in Hands.
        /// </summary>
        public double Hands => As(LengthUnit.Hand);

        /// <summary>
        ///     Get Length in HectoaUs.
        /// </summary>
        public double HectoaUs => As(LengthUnit.HectoaU);

        /// <summary>
        ///     Get Length in Hectolightdays.
        /// </summary>
        public double Hectolightdays => As(LengthUnit.Hectolightday);

        /// <summary>
        ///     Get Length in Hectolighthours.
        /// </summary>
        public double Hectolighthours => As(LengthUnit.Hectolighthour);

        /// <summary>
        ///     Get Length in Hectolightminutes.
        /// </summary>
        public double Hectolightminutes => As(LengthUnit.Hectolightminute);

        /// <summary>
        ///     Get Length in Hectolightseconds.
        /// </summary>
        public double Hectolightseconds => As(LengthUnit.Hectolightsecond);

        /// <summary>
        ///     Get Length in Hectolightyears.
        /// </summary>
        public double Hectolightyears => As(LengthUnit.Hectolightyear);

        /// <summary>
        ///     Get Length in Hectometers.
        /// </summary>
        public double Hectometers => As(LengthUnit.Hectometer);

        /// <summary>
        ///     Get Length in Hectoparsecs.
        /// </summary>
        public double Hectoparsecs => As(LengthUnit.Hectoparsec);

        /// <summary>
        ///     Get Length in Inches.
        /// </summary>
        public double Inches => As(LengthUnit.Inch);

        /// <summary>
        ///     Get Length in KiloaUs.
        /// </summary>
        public double KiloaUs => As(LengthUnit.KiloaU);

        /// <summary>
        ///     Get Length in Kilolightdays.
        /// </summary>
        public double Kilolightdays => As(LengthUnit.Kilolightday);

        /// <summary>
        ///     Get Length in Kilolighthours.
        /// </summary>
        public double Kilolighthours => As(LengthUnit.Kilolighthour);

        /// <summary>
        ///     Get Length in Kilolightminutes.
        /// </summary>
        public double Kilolightminutes => As(LengthUnit.Kilolightminute);

        /// <summary>
        ///     Get Length in Kilolightseconds.
        /// </summary>
        public double Kilolightseconds => As(LengthUnit.Kilolightsecond);

        /// <summary>
        ///     Get Length in Kilolightyears.
        /// </summary>
        public double Kilolightyears => As(LengthUnit.Kilolightyear);

        /// <summary>
        ///     Get Length in Kilometers.
        /// </summary>
        public double Kilometers => As(LengthUnit.Kilometer);

        /// <summary>
        ///     Get Length in Kiloparsecs.
        /// </summary>
        public double Kiloparsecs => As(LengthUnit.Kiloparsec);

        /// <summary>
        ///     Get Length in Lightdays.
        /// </summary>
        public double Lightdays => As(LengthUnit.Lightday);

        /// <summary>
        ///     Get Length in Lighthours.
        /// </summary>
        public double Lighthours => As(LengthUnit.Lighthour);

        /// <summary>
        ///     Get Length in Lightminutes.
        /// </summary>
        public double Lightminutes => As(LengthUnit.Lightminute);

        /// <summary>
        ///     Get Length in Lightseconds.
        /// </summary>
        public double Lightseconds => As(LengthUnit.Lightsecond);

        /// <summary>
        ///     Get Length in Lightyears.
        /// </summary>
        public double Lightyears => As(LengthUnit.Lightyear);

        /// <summary>
        ///     Get Length in MegaaUs.
        /// </summary>
        public double MegaaUs => As(LengthUnit.MegaaU);

        /// <summary>
        ///     Get Length in Megalightdays.
        /// </summary>
        public double Megalightdays => As(LengthUnit.Megalightday);

        /// <summary>
        ///     Get Length in Megalighthours.
        /// </summary>
        public double Megalighthours => As(LengthUnit.Megalighthour);

        /// <summary>
        ///     Get Length in Megalightminutes.
        /// </summary>
        public double Megalightminutes => As(LengthUnit.Megalightminute);

        /// <summary>
        ///     Get Length in Megalightseconds.
        /// </summary>
        public double Megalightseconds => As(LengthUnit.Megalightsecond);

        /// <summary>
        ///     Get Length in Megalightyears.
        /// </summary>
        public double Megalightyears => As(LengthUnit.Megalightyear);

        /// <summary>
        ///     Get Length in Megameters.
        /// </summary>
        public double Megameters => As(LengthUnit.Megameter);

        /// <summary>
        ///     Get Length in Megaparsecs.
        /// </summary>
        public double Megaparsecs => As(LengthUnit.Megaparsec);

        /// <summary>
        ///     Get Length in Meters.
        /// </summary>
        public double Meters => As(LengthUnit.Meter);

        /// <summary>
        ///     Get Length in MicroaUs.
        /// </summary>
        public double MicroaUs => As(LengthUnit.MicroaU);

        /// <summary>
        ///     Get Length in Microinches.
        /// </summary>
        public double Microinches => As(LengthUnit.Microinch);

        /// <summary>
        ///     Get Length in Microlightdays.
        /// </summary>
        public double Microlightdays => As(LengthUnit.Microlightday);

        /// <summary>
        ///     Get Length in Microlighthours.
        /// </summary>
        public double Microlighthours => As(LengthUnit.Microlighthour);

        /// <summary>
        ///     Get Length in Microlightminutes.
        /// </summary>
        public double Microlightminutes => As(LengthUnit.Microlightminute);

        /// <summary>
        ///     Get Length in Microlightseconds.
        /// </summary>
        public double Microlightseconds => As(LengthUnit.Microlightsecond);

        /// <summary>
        ///     Get Length in Microlightyears.
        /// </summary>
        public double Microlightyears => As(LengthUnit.Microlightyear);

        /// <summary>
        ///     Get Length in Micrometers.
        /// </summary>
        public double Micrometers => As(LengthUnit.Micrometer);

        /// <summary>
        ///     Get Length in Microparsecs.
        /// </summary>
        public double Microparsecs => As(LengthUnit.Microparsec);

        /// <summary>
        ///     Get Length in Mils.
        /// </summary>
        public double Mils => As(LengthUnit.Mil);

        /// <summary>
        ///     Get Length in Miles.
        /// </summary>
        public double Miles => As(LengthUnit.Mile);

        /// <summary>
        ///     Get Length in MilliaUs.
        /// </summary>
        public double MilliaUs => As(LengthUnit.MilliaU);

        /// <summary>
        ///     Get Length in Millilightdays.
        /// </summary>
        public double Millilightdays => As(LengthUnit.Millilightday);

        /// <summary>
        ///     Get Length in Millilighthours.
        /// </summary>
        public double Millilighthours => As(LengthUnit.Millilighthour);

        /// <summary>
        ///     Get Length in Millilightminutes.
        /// </summary>
        public double Millilightminutes => As(LengthUnit.Millilightminute);

        /// <summary>
        ///     Get Length in Millilightseconds.
        /// </summary>
        public double Millilightseconds => As(LengthUnit.Millilightsecond);

        /// <summary>
        ///     Get Length in Millilightyears.
        /// </summary>
        public double Millilightyears => As(LengthUnit.Millilightyear);

        /// <summary>
        ///     Get Length in Millimeters.
        /// </summary>
        public double Millimeters => As(LengthUnit.Millimeter);

        /// <summary>
        ///     Get Length in Milliparsecs.
        /// </summary>
        public double Milliparsecs => As(LengthUnit.Milliparsec);

        /// <summary>
        ///     Get Length in Nanometers.
        /// </summary>
        public double Nanometers => As(LengthUnit.Nanometer);

        /// <summary>
        ///     Get Length in NauticalMiles.
        /// </summary>
        public double NauticalMiles => As(LengthUnit.NauticalMile);

        /// <summary>
        ///     Get Length in Parsecs.
        /// </summary>
        public double Parsecs => As(LengthUnit.Parsec);

        /// <summary>
        ///     Get Length in Petalightyears.
        /// </summary>
        public double Petalightyears => As(LengthUnit.Petalightyear);

        /// <summary>
        ///     Get Length in Petameters.
        /// </summary>
        public double Petameters => As(LengthUnit.Petameter);

        /// <summary>
        ///     Get Length in Petaparsecs.
        /// </summary>
        public double Petaparsecs => As(LengthUnit.Petaparsec);

        /// <summary>
        ///     Get Length in Picometers.
        /// </summary>
        public double Picometers => As(LengthUnit.Picometer);

        /// <summary>
        ///     Get Length in PrinterPicas.
        /// </summary>
        public double PrinterPicas => As(LengthUnit.PrinterPica);

        /// <summary>
        ///     Get Length in PrinterPoints.
        /// </summary>
        public double PrinterPoints => As(LengthUnit.PrinterPoint);

        /// <summary>
        ///     Get Length in Qutrameters.
        /// </summary>
        public double Qutrameters => As(LengthUnit.Qutrameter);

        /// <summary>
        ///     Get Length in Shackles.
        /// </summary>
        public double Shackles => As(LengthUnit.Shackle);

        /// <summary>
        ///     Get Length in TeraaUs.
        /// </summary>
        public double TeraaUs => As(LengthUnit.TeraaU);

        /// <summary>
        ///     Get Length in Teralightdays.
        /// </summary>
        public double Teralightdays => As(LengthUnit.Teralightday);

        /// <summary>
        ///     Get Length in Teralighthours.
        /// </summary>
        public double Teralighthours => As(LengthUnit.Teralighthour);

        /// <summary>
        ///     Get Length in Teralightminutes.
        /// </summary>
        public double Teralightminutes => As(LengthUnit.Teralightminute);

        /// <summary>
        ///     Get Length in Teralightseconds.
        /// </summary>
        public double Teralightseconds => As(LengthUnit.Teralightsecond);

        /// <summary>
        ///     Get Length in Teralightyears.
        /// </summary>
        public double Teralightyears => As(LengthUnit.Teralightyear);

        /// <summary>
        ///     Get Length in Terameters.
        /// </summary>
        public double Terameters => As(LengthUnit.Terameter);

        /// <summary>
        ///     Get Length in Teraparsecs.
        /// </summary>
        public double Teraparsecs => As(LengthUnit.Teraparsec);

        /// <summary>
        ///     Get Length in Twips.
        /// </summary>
        public double Twips => As(LengthUnit.Twip);

        /// <summary>
        ///     Get Length in UsSurveyFeet.
        /// </summary>
        public double UsSurveyFeet => As(LengthUnit.UsSurveyFoot);

        /// <summary>
        ///     Get Length in Vettameters.
        /// </summary>
        public double Vettameters => As(LengthUnit.Vettameter);

        /// <summary>
        ///     Get Length in Yards.
        /// </summary>
        public double Yards => As(LengthUnit.Yard);

        /// <summary>
        ///     Get Length in Yottalightyears.
        /// </summary>
        public double Yottalightyears => As(LengthUnit.Yottalightyear);

        /// <summary>
        ///     Get Length in Yottameters.
        /// </summary>
        public double Yottameters => As(LengthUnit.Yottameter);

        /// <summary>
        ///     Get Length in Yottaparsecs.
        /// </summary>
        public double Yottaparsecs => As(LengthUnit.Yottaparsec);

        /// <summary>
        ///     Get Length in Zettalightyears.
        /// </summary>
        public double Zettalightyears => As(LengthUnit.Zettalightyear);

        /// <summary>
        ///     Get Length in Zettameters.
        /// </summary>
        public double Zettameters => As(LengthUnit.Zettameter);

        /// <summary>
        ///     Get Length in Zettaparsecs.
        /// </summary>
        public double Zettaparsecs => As(LengthUnit.Zettaparsec);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(LengthUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Length from AUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromAUs(QuantityValue aus)
        {
            double value = (double) aus;
            return new Length(value, LengthUnit.AU);
        }
        /// <summary>
        ///     Get Length from CentiaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentiaUs(QuantityValue centiaus)
        {
            double value = (double) centiaus;
            return new Length(value, LengthUnit.CentiaU);
        }
        /// <summary>
        ///     Get Length from Centilightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentilightdays(QuantityValue centilightdays)
        {
            double value = (double) centilightdays;
            return new Length(value, LengthUnit.Centilightday);
        }
        /// <summary>
        ///     Get Length from Centilighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentilighthours(QuantityValue centilighthours)
        {
            double value = (double) centilighthours;
            return new Length(value, LengthUnit.Centilighthour);
        }
        /// <summary>
        ///     Get Length from Centilightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentilightminutes(QuantityValue centilightminutes)
        {
            double value = (double) centilightminutes;
            return new Length(value, LengthUnit.Centilightminute);
        }
        /// <summary>
        ///     Get Length from Centilightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentilightseconds(QuantityValue centilightseconds)
        {
            double value = (double) centilightseconds;
            return new Length(value, LengthUnit.Centilightsecond);
        }
        /// <summary>
        ///     Get Length from Centilightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentilightyears(QuantityValue centilightyears)
        {
            double value = (double) centilightyears;
            return new Length(value, LengthUnit.Centilightyear);
        }
        /// <summary>
        ///     Get Length from Centimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentimeters(QuantityValue centimeters)
        {
            double value = (double) centimeters;
            return new Length(value, LengthUnit.Centimeter);
        }
        /// <summary>
        ///     Get Length from Centiparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromCentiparsecs(QuantityValue centiparsecs)
        {
            double value = (double) centiparsecs;
            return new Length(value, LengthUnit.Centiparsec);
        }
        /// <summary>
        ///     Get Length from DecaaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecaaUs(QuantityValue decaaus)
        {
            double value = (double) decaaus;
            return new Length(value, LengthUnit.DecaaU);
        }
        /// <summary>
        ///     Get Length from Decalightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecalightdays(QuantityValue decalightdays)
        {
            double value = (double) decalightdays;
            return new Length(value, LengthUnit.Decalightday);
        }
        /// <summary>
        ///     Get Length from Decalighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecalighthours(QuantityValue decalighthours)
        {
            double value = (double) decalighthours;
            return new Length(value, LengthUnit.Decalighthour);
        }
        /// <summary>
        ///     Get Length from Decalightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecalightminutes(QuantityValue decalightminutes)
        {
            double value = (double) decalightminutes;
            return new Length(value, LengthUnit.Decalightminute);
        }
        /// <summary>
        ///     Get Length from Decalightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecalightseconds(QuantityValue decalightseconds)
        {
            double value = (double) decalightseconds;
            return new Length(value, LengthUnit.Decalightsecond);
        }
        /// <summary>
        ///     Get Length from Decalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecalightyears(QuantityValue decalightyears)
        {
            double value = (double) decalightyears;
            return new Length(value, LengthUnit.Decalightyear);
        }
        /// <summary>
        ///     Get Length from Decameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecameters(QuantityValue decameters)
        {
            double value = (double) decameters;
            return new Length(value, LengthUnit.Decameter);
        }
        /// <summary>
        ///     Get Length from Decaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecaparsecs(QuantityValue decaparsecs)
        {
            double value = (double) decaparsecs;
            return new Length(value, LengthUnit.Decaparsec);
        }
        /// <summary>
        ///     Get Length from DeciaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDeciaUs(QuantityValue deciaus)
        {
            double value = (double) deciaus;
            return new Length(value, LengthUnit.DeciaU);
        }
        /// <summary>
        ///     Get Length from Decilightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecilightdays(QuantityValue decilightdays)
        {
            double value = (double) decilightdays;
            return new Length(value, LengthUnit.Decilightday);
        }
        /// <summary>
        ///     Get Length from Decilighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecilighthours(QuantityValue decilighthours)
        {
            double value = (double) decilighthours;
            return new Length(value, LengthUnit.Decilighthour);
        }
        /// <summary>
        ///     Get Length from Decilightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecilightminutes(QuantityValue decilightminutes)
        {
            double value = (double) decilightminutes;
            return new Length(value, LengthUnit.Decilightminute);
        }
        /// <summary>
        ///     Get Length from Decilightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecilightseconds(QuantityValue decilightseconds)
        {
            double value = (double) decilightseconds;
            return new Length(value, LengthUnit.Decilightsecond);
        }
        /// <summary>
        ///     Get Length from Decilightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecilightyears(QuantityValue decilightyears)
        {
            double value = (double) decilightyears;
            return new Length(value, LengthUnit.Decilightyear);
        }
        /// <summary>
        ///     Get Length from Decimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDecimeters(QuantityValue decimeters)
        {
            double value = (double) decimeters;
            return new Length(value, LengthUnit.Decimeter);
        }
        /// <summary>
        ///     Get Length from Deciparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDeciparsecs(QuantityValue deciparsecs)
        {
            double value = (double) deciparsecs;
            return new Length(value, LengthUnit.Deciparsec);
        }
        /// <summary>
        ///     Get Length from DtpPicas.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDtpPicas(QuantityValue dtppicas)
        {
            double value = (double) dtppicas;
            return new Length(value, LengthUnit.DtpPica);
        }
        /// <summary>
        ///     Get Length from DtpPoints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromDtpPoints(QuantityValue dtppoints)
        {
            double value = (double) dtppoints;
            return new Length(value, LengthUnit.DtpPoint);
        }
        /// <summary>
        ///     Get Length from Exalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromExalightyears(QuantityValue exalightyears)
        {
            double value = (double) exalightyears;
            return new Length(value, LengthUnit.Exalightyear);
        }
        /// <summary>
        ///     Get Length from Exameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromExameters(QuantityValue exameters)
        {
            double value = (double) exameters;
            return new Length(value, LengthUnit.Exameter);
        }
        /// <summary>
        ///     Get Length from Exaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromExaparsecs(QuantityValue exaparsecs)
        {
            double value = (double) exaparsecs;
            return new Length(value, LengthUnit.Exaparsec);
        }
        /// <summary>
        ///     Get Length from Fathoms.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromFathoms(QuantityValue fathoms)
        {
            double value = (double) fathoms;
            return new Length(value, LengthUnit.Fathom);
        }
        /// <summary>
        ///     Get Length from Femtometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromFemtometers(QuantityValue femtometers)
        {
            double value = (double) femtometers;
            return new Length(value, LengthUnit.Femtometer);
        }
        /// <summary>
        ///     Get Length from Feet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromFeet(QuantityValue feet)
        {
            double value = (double) feet;
            return new Length(value, LengthUnit.Foot);
        }
        /// <summary>
        ///     Get Length from GigaaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigaaUs(QuantityValue gigaaus)
        {
            double value = (double) gigaaus;
            return new Length(value, LengthUnit.GigaaU);
        }
        /// <summary>
        ///     Get Length from Gigalightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigalightdays(QuantityValue gigalightdays)
        {
            double value = (double) gigalightdays;
            return new Length(value, LengthUnit.Gigalightday);
        }
        /// <summary>
        ///     Get Length from Gigalighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigalighthours(QuantityValue gigalighthours)
        {
            double value = (double) gigalighthours;
            return new Length(value, LengthUnit.Gigalighthour);
        }
        /// <summary>
        ///     Get Length from Gigalightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigalightminutes(QuantityValue gigalightminutes)
        {
            double value = (double) gigalightminutes;
            return new Length(value, LengthUnit.Gigalightminute);
        }
        /// <summary>
        ///     Get Length from Gigalightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigalightseconds(QuantityValue gigalightseconds)
        {
            double value = (double) gigalightseconds;
            return new Length(value, LengthUnit.Gigalightsecond);
        }
        /// <summary>
        ///     Get Length from Gigalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigalightyears(QuantityValue gigalightyears)
        {
            double value = (double) gigalightyears;
            return new Length(value, LengthUnit.Gigalightyear);
        }
        /// <summary>
        ///     Get Length from Gigameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigameters(QuantityValue gigameters)
        {
            double value = (double) gigameters;
            return new Length(value, LengthUnit.Gigameter);
        }
        /// <summary>
        ///     Get Length from Gigaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromGigaparsecs(QuantityValue gigaparsecs)
        {
            double value = (double) gigaparsecs;
            return new Length(value, LengthUnit.Gigaparsec);
        }
        /// <summary>
        ///     Get Length from Hands.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHands(QuantityValue hands)
        {
            double value = (double) hands;
            return new Length(value, LengthUnit.Hand);
        }
        /// <summary>
        ///     Get Length from HectoaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectoaUs(QuantityValue hectoaus)
        {
            double value = (double) hectoaus;
            return new Length(value, LengthUnit.HectoaU);
        }
        /// <summary>
        ///     Get Length from Hectolightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectolightdays(QuantityValue hectolightdays)
        {
            double value = (double) hectolightdays;
            return new Length(value, LengthUnit.Hectolightday);
        }
        /// <summary>
        ///     Get Length from Hectolighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectolighthours(QuantityValue hectolighthours)
        {
            double value = (double) hectolighthours;
            return new Length(value, LengthUnit.Hectolighthour);
        }
        /// <summary>
        ///     Get Length from Hectolightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectolightminutes(QuantityValue hectolightminutes)
        {
            double value = (double) hectolightminutes;
            return new Length(value, LengthUnit.Hectolightminute);
        }
        /// <summary>
        ///     Get Length from Hectolightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectolightseconds(QuantityValue hectolightseconds)
        {
            double value = (double) hectolightseconds;
            return new Length(value, LengthUnit.Hectolightsecond);
        }
        /// <summary>
        ///     Get Length from Hectolightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectolightyears(QuantityValue hectolightyears)
        {
            double value = (double) hectolightyears;
            return new Length(value, LengthUnit.Hectolightyear);
        }
        /// <summary>
        ///     Get Length from Hectometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectometers(QuantityValue hectometers)
        {
            double value = (double) hectometers;
            return new Length(value, LengthUnit.Hectometer);
        }
        /// <summary>
        ///     Get Length from Hectoparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromHectoparsecs(QuantityValue hectoparsecs)
        {
            double value = (double) hectoparsecs;
            return new Length(value, LengthUnit.Hectoparsec);
        }
        /// <summary>
        ///     Get Length from Inches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromInches(QuantityValue inches)
        {
            double value = (double) inches;
            return new Length(value, LengthUnit.Inch);
        }
        /// <summary>
        ///     Get Length from KiloaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKiloaUs(QuantityValue kiloaus)
        {
            double value = (double) kiloaus;
            return new Length(value, LengthUnit.KiloaU);
        }
        /// <summary>
        ///     Get Length from Kilolightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKilolightdays(QuantityValue kilolightdays)
        {
            double value = (double) kilolightdays;
            return new Length(value, LengthUnit.Kilolightday);
        }
        /// <summary>
        ///     Get Length from Kilolighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKilolighthours(QuantityValue kilolighthours)
        {
            double value = (double) kilolighthours;
            return new Length(value, LengthUnit.Kilolighthour);
        }
        /// <summary>
        ///     Get Length from Kilolightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKilolightminutes(QuantityValue kilolightminutes)
        {
            double value = (double) kilolightminutes;
            return new Length(value, LengthUnit.Kilolightminute);
        }
        /// <summary>
        ///     Get Length from Kilolightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKilolightseconds(QuantityValue kilolightseconds)
        {
            double value = (double) kilolightseconds;
            return new Length(value, LengthUnit.Kilolightsecond);
        }
        /// <summary>
        ///     Get Length from Kilolightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKilolightyears(QuantityValue kilolightyears)
        {
            double value = (double) kilolightyears;
            return new Length(value, LengthUnit.Kilolightyear);
        }
        /// <summary>
        ///     Get Length from Kilometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKilometers(QuantityValue kilometers)
        {
            double value = (double) kilometers;
            return new Length(value, LengthUnit.Kilometer);
        }
        /// <summary>
        ///     Get Length from Kiloparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromKiloparsecs(QuantityValue kiloparsecs)
        {
            double value = (double) kiloparsecs;
            return new Length(value, LengthUnit.Kiloparsec);
        }
        /// <summary>
        ///     Get Length from Lightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromLightdays(QuantityValue lightdays)
        {
            double value = (double) lightdays;
            return new Length(value, LengthUnit.Lightday);
        }
        /// <summary>
        ///     Get Length from Lighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromLighthours(QuantityValue lighthours)
        {
            double value = (double) lighthours;
            return new Length(value, LengthUnit.Lighthour);
        }
        /// <summary>
        ///     Get Length from Lightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromLightminutes(QuantityValue lightminutes)
        {
            double value = (double) lightminutes;
            return new Length(value, LengthUnit.Lightminute);
        }
        /// <summary>
        ///     Get Length from Lightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromLightseconds(QuantityValue lightseconds)
        {
            double value = (double) lightseconds;
            return new Length(value, LengthUnit.Lightsecond);
        }
        /// <summary>
        ///     Get Length from Lightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromLightyears(QuantityValue lightyears)
        {
            double value = (double) lightyears;
            return new Length(value, LengthUnit.Lightyear);
        }
        /// <summary>
        ///     Get Length from MegaaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegaaUs(QuantityValue megaaus)
        {
            double value = (double) megaaus;
            return new Length(value, LengthUnit.MegaaU);
        }
        /// <summary>
        ///     Get Length from Megalightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegalightdays(QuantityValue megalightdays)
        {
            double value = (double) megalightdays;
            return new Length(value, LengthUnit.Megalightday);
        }
        /// <summary>
        ///     Get Length from Megalighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegalighthours(QuantityValue megalighthours)
        {
            double value = (double) megalighthours;
            return new Length(value, LengthUnit.Megalighthour);
        }
        /// <summary>
        ///     Get Length from Megalightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegalightminutes(QuantityValue megalightminutes)
        {
            double value = (double) megalightminutes;
            return new Length(value, LengthUnit.Megalightminute);
        }
        /// <summary>
        ///     Get Length from Megalightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegalightseconds(QuantityValue megalightseconds)
        {
            double value = (double) megalightseconds;
            return new Length(value, LengthUnit.Megalightsecond);
        }
        /// <summary>
        ///     Get Length from Megalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegalightyears(QuantityValue megalightyears)
        {
            double value = (double) megalightyears;
            return new Length(value, LengthUnit.Megalightyear);
        }
        /// <summary>
        ///     Get Length from Megameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegameters(QuantityValue megameters)
        {
            double value = (double) megameters;
            return new Length(value, LengthUnit.Megameter);
        }
        /// <summary>
        ///     Get Length from Megaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMegaparsecs(QuantityValue megaparsecs)
        {
            double value = (double) megaparsecs;
            return new Length(value, LengthUnit.Megaparsec);
        }
        /// <summary>
        ///     Get Length from Meters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMeters(QuantityValue meters)
        {
            double value = (double) meters;
            return new Length(value, LengthUnit.Meter);
        }
        /// <summary>
        ///     Get Length from MicroaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicroaUs(QuantityValue microaus)
        {
            double value = (double) microaus;
            return new Length(value, LengthUnit.MicroaU);
        }
        /// <summary>
        ///     Get Length from Microinches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicroinches(QuantityValue microinches)
        {
            double value = (double) microinches;
            return new Length(value, LengthUnit.Microinch);
        }
        /// <summary>
        ///     Get Length from Microlightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicrolightdays(QuantityValue microlightdays)
        {
            double value = (double) microlightdays;
            return new Length(value, LengthUnit.Microlightday);
        }
        /// <summary>
        ///     Get Length from Microlighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicrolighthours(QuantityValue microlighthours)
        {
            double value = (double) microlighthours;
            return new Length(value, LengthUnit.Microlighthour);
        }
        /// <summary>
        ///     Get Length from Microlightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicrolightminutes(QuantityValue microlightminutes)
        {
            double value = (double) microlightminutes;
            return new Length(value, LengthUnit.Microlightminute);
        }
        /// <summary>
        ///     Get Length from Microlightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicrolightseconds(QuantityValue microlightseconds)
        {
            double value = (double) microlightseconds;
            return new Length(value, LengthUnit.Microlightsecond);
        }
        /// <summary>
        ///     Get Length from Microlightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicrolightyears(QuantityValue microlightyears)
        {
            double value = (double) microlightyears;
            return new Length(value, LengthUnit.Microlightyear);
        }
        /// <summary>
        ///     Get Length from Micrometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicrometers(QuantityValue micrometers)
        {
            double value = (double) micrometers;
            return new Length(value, LengthUnit.Micrometer);
        }
        /// <summary>
        ///     Get Length from Microparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMicroparsecs(QuantityValue microparsecs)
        {
            double value = (double) microparsecs;
            return new Length(value, LengthUnit.Microparsec);
        }
        /// <summary>
        ///     Get Length from Mils.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMils(QuantityValue mils)
        {
            double value = (double) mils;
            return new Length(value, LengthUnit.Mil);
        }
        /// <summary>
        ///     Get Length from Miles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMiles(QuantityValue miles)
        {
            double value = (double) miles;
            return new Length(value, LengthUnit.Mile);
        }
        /// <summary>
        ///     Get Length from MilliaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMilliaUs(QuantityValue milliaus)
        {
            double value = (double) milliaus;
            return new Length(value, LengthUnit.MilliaU);
        }
        /// <summary>
        ///     Get Length from Millilightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMillilightdays(QuantityValue millilightdays)
        {
            double value = (double) millilightdays;
            return new Length(value, LengthUnit.Millilightday);
        }
        /// <summary>
        ///     Get Length from Millilighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMillilighthours(QuantityValue millilighthours)
        {
            double value = (double) millilighthours;
            return new Length(value, LengthUnit.Millilighthour);
        }
        /// <summary>
        ///     Get Length from Millilightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMillilightminutes(QuantityValue millilightminutes)
        {
            double value = (double) millilightminutes;
            return new Length(value, LengthUnit.Millilightminute);
        }
        /// <summary>
        ///     Get Length from Millilightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMillilightseconds(QuantityValue millilightseconds)
        {
            double value = (double) millilightseconds;
            return new Length(value, LengthUnit.Millilightsecond);
        }
        /// <summary>
        ///     Get Length from Millilightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMillilightyears(QuantityValue millilightyears)
        {
            double value = (double) millilightyears;
            return new Length(value, LengthUnit.Millilightyear);
        }
        /// <summary>
        ///     Get Length from Millimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMillimeters(QuantityValue millimeters)
        {
            double value = (double) millimeters;
            return new Length(value, LengthUnit.Millimeter);
        }
        /// <summary>
        ///     Get Length from Milliparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromMilliparsecs(QuantityValue milliparsecs)
        {
            double value = (double) milliparsecs;
            return new Length(value, LengthUnit.Milliparsec);
        }
        /// <summary>
        ///     Get Length from Nanometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromNanometers(QuantityValue nanometers)
        {
            double value = (double) nanometers;
            return new Length(value, LengthUnit.Nanometer);
        }
        /// <summary>
        ///     Get Length from NauticalMiles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromNauticalMiles(QuantityValue nauticalmiles)
        {
            double value = (double) nauticalmiles;
            return new Length(value, LengthUnit.NauticalMile);
        }
        /// <summary>
        ///     Get Length from Parsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromParsecs(QuantityValue parsecs)
        {
            double value = (double) parsecs;
            return new Length(value, LengthUnit.Parsec);
        }
        /// <summary>
        ///     Get Length from Petalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromPetalightyears(QuantityValue petalightyears)
        {
            double value = (double) petalightyears;
            return new Length(value, LengthUnit.Petalightyear);
        }
        /// <summary>
        ///     Get Length from Petameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromPetameters(QuantityValue petameters)
        {
            double value = (double) petameters;
            return new Length(value, LengthUnit.Petameter);
        }
        /// <summary>
        ///     Get Length from Petaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromPetaparsecs(QuantityValue petaparsecs)
        {
            double value = (double) petaparsecs;
            return new Length(value, LengthUnit.Petaparsec);
        }
        /// <summary>
        ///     Get Length from Picometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromPicometers(QuantityValue picometers)
        {
            double value = (double) picometers;
            return new Length(value, LengthUnit.Picometer);
        }
        /// <summary>
        ///     Get Length from PrinterPicas.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromPrinterPicas(QuantityValue printerpicas)
        {
            double value = (double) printerpicas;
            return new Length(value, LengthUnit.PrinterPica);
        }
        /// <summary>
        ///     Get Length from PrinterPoints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromPrinterPoints(QuantityValue printerpoints)
        {
            double value = (double) printerpoints;
            return new Length(value, LengthUnit.PrinterPoint);
        }
        /// <summary>
        ///     Get Length from Qutrameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromQutrameters(QuantityValue qutrameters)
        {
            double value = (double) qutrameters;
            return new Length(value, LengthUnit.Qutrameter);
        }
        /// <summary>
        ///     Get Length from Shackles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromShackles(QuantityValue shackles)
        {
            double value = (double) shackles;
            return new Length(value, LengthUnit.Shackle);
        }
        /// <summary>
        ///     Get Length from TeraaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeraaUs(QuantityValue teraaus)
        {
            double value = (double) teraaus;
            return new Length(value, LengthUnit.TeraaU);
        }
        /// <summary>
        ///     Get Length from Teralightdays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeralightdays(QuantityValue teralightdays)
        {
            double value = (double) teralightdays;
            return new Length(value, LengthUnit.Teralightday);
        }
        /// <summary>
        ///     Get Length from Teralighthours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeralighthours(QuantityValue teralighthours)
        {
            double value = (double) teralighthours;
            return new Length(value, LengthUnit.Teralighthour);
        }
        /// <summary>
        ///     Get Length from Teralightminutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeralightminutes(QuantityValue teralightminutes)
        {
            double value = (double) teralightminutes;
            return new Length(value, LengthUnit.Teralightminute);
        }
        /// <summary>
        ///     Get Length from Teralightseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeralightseconds(QuantityValue teralightseconds)
        {
            double value = (double) teralightseconds;
            return new Length(value, LengthUnit.Teralightsecond);
        }
        /// <summary>
        ///     Get Length from Teralightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeralightyears(QuantityValue teralightyears)
        {
            double value = (double) teralightyears;
            return new Length(value, LengthUnit.Teralightyear);
        }
        /// <summary>
        ///     Get Length from Terameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTerameters(QuantityValue terameters)
        {
            double value = (double) terameters;
            return new Length(value, LengthUnit.Terameter);
        }
        /// <summary>
        ///     Get Length from Teraparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTeraparsecs(QuantityValue teraparsecs)
        {
            double value = (double) teraparsecs;
            return new Length(value, LengthUnit.Teraparsec);
        }
        /// <summary>
        ///     Get Length from Twips.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromTwips(QuantityValue twips)
        {
            double value = (double) twips;
            return new Length(value, LengthUnit.Twip);
        }
        /// <summary>
        ///     Get Length from UsSurveyFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromUsSurveyFeet(QuantityValue ussurveyfeet)
        {
            double value = (double) ussurveyfeet;
            return new Length(value, LengthUnit.UsSurveyFoot);
        }
        /// <summary>
        ///     Get Length from Vettameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromVettameters(QuantityValue vettameters)
        {
            double value = (double) vettameters;
            return new Length(value, LengthUnit.Vettameter);
        }
        /// <summary>
        ///     Get Length from Yards.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromYards(QuantityValue yards)
        {
            double value = (double) yards;
            return new Length(value, LengthUnit.Yard);
        }
        /// <summary>
        ///     Get Length from Yottalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromYottalightyears(QuantityValue yottalightyears)
        {
            double value = (double) yottalightyears;
            return new Length(value, LengthUnit.Yottalightyear);
        }
        /// <summary>
        ///     Get Length from Yottameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromYottameters(QuantityValue yottameters)
        {
            double value = (double) yottameters;
            return new Length(value, LengthUnit.Yottameter);
        }
        /// <summary>
        ///     Get Length from Yottaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromYottaparsecs(QuantityValue yottaparsecs)
        {
            double value = (double) yottaparsecs;
            return new Length(value, LengthUnit.Yottaparsec);
        }
        /// <summary>
        ///     Get Length from Zettalightyears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromZettalightyears(QuantityValue zettalightyears)
        {
            double value = (double) zettalightyears;
            return new Length(value, LengthUnit.Zettalightyear);
        }
        /// <summary>
        ///     Get Length from Zettameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromZettameters(QuantityValue zettameters)
        {
            double value = (double) zettameters;
            return new Length(value, LengthUnit.Zettameter);
        }
        /// <summary>
        ///     Get Length from Zettaparsecs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Length FromZettaparsecs(QuantityValue zettaparsecs)
        {
            double value = (double) zettaparsecs;
            return new Length(value, LengthUnit.Zettaparsec);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LengthUnit" /> to <see cref="Length" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Length unit value.</returns>
        public static Length From(QuantityValue value, LengthUnit fromUnit)
        {
            return new Length((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Length Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Length Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Length, LengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Length result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Length result)
        {
            return QuantityParser.Default.TryParse<Length, LengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static LengthUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<LengthUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.LengthUnit)"/>
        public static bool TryParseUnit(string str, out LengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out LengthUnit unit)
        {
            return UnitParser.Default.TryParse<LengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Length operator -(Length right)
        {
            return new Length(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Length"/> from adding two <see cref="Length"/>.</summary>
        public static Length operator +(Length left, Length right)
        {
            return new Length(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from subtracting two <see cref="Length"/>.</summary>
        public static Length operator -(Length left, Length right)
        {
            return new Length(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from multiplying value and <see cref="Length"/>.</summary>
        public static Length operator *(double left, Length right)
        {
            return new Length(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Length"/> from multiplying value and <see cref="Length"/>.</summary>
        public static Length operator *(Length left, double right)
        {
            return new Length(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from dividing <see cref="Length"/> by value.</summary>
        public static Length operator /(Length left, double right)
        {
            return new Length(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Length"/> by <see cref="Length"/>.</summary>
        public static double operator /(Length left, Length right)
        {
            return left.Meters / right.Meters;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Length left, Length right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Length left, Length right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Length left, Length right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Length left, Length right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Length, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Length left, Length right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Length, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Length left, Length right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Length objLength)) throw new ArgumentException("Expected type Length.", nameof(obj));

            return CompareTo(objLength);
        }

        /// <inheritdoc />
        public int CompareTo(Length other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Length, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Length objLength))
                return false;

            return Equals(objLength);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Length, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Length other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Length within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Length other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Length.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LengthUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var firstUnitInfo = Info.BaseUnitInfo;
            if (firstUnitInfo == null)
            {
              var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
              firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
                if (firstUnitInfo == null)
                    throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }

            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is LengthUnit unitAsLengthUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LengthUnit)} is supported.", nameof(unit));

            return As(unitAsLengthUnit);
        }

        /// <summary>
        ///     Converts this Length to another Length with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Length with the specified unit.</returns>
        public Length ToUnit(LengthUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Length(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is LengthUnit unitAsLengthUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LengthUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsLengthUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Length ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var firstUnitInfo = Info.BaseUnitInfo;
            if (firstUnitInfo == null)
            {
              var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
              firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
                if (firstUnitInfo == null)
                    throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<LengthUnit> IQuantity<LengthUnit>.ToUnit(LengthUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<LengthUnit> IQuantity<LengthUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case LengthUnit.AU: return _value*1.496e11;
                case LengthUnit.CentiaU: return (_value*1.496e11) * 1e-2d;
                case LengthUnit.Centilightday: return (_value*2.59e13) * 1e-2d;
                case LengthUnit.Centilighthour: return (_value*1.079e12) * 1e-2d;
                case LengthUnit.Centilightminute: return (_value*1.799e10) * 1e-2d;
                case LengthUnit.Centilightsecond: return (_value*299792458) * 1e-2d;
                case LengthUnit.Centilightyear: return (_value*9.4607304725808E15) * 1e-2d;
                case LengthUnit.Centimeter: return (_value) * 1e-2d;
                case LengthUnit.Centiparsec: return (_value*3.086090280155857E16) * 1e-2d;
                case LengthUnit.DecaaU: return (_value*1.496e11) * 1e1d;
                case LengthUnit.Decalightday: return (_value*2.59e13) * 1e1d;
                case LengthUnit.Decalighthour: return (_value*1.079e12) * 1e1d;
                case LengthUnit.Decalightminute: return (_value*1.799e10) * 1e1d;
                case LengthUnit.Decalightsecond: return (_value*299792458) * 1e1d;
                case LengthUnit.Decalightyear: return (_value*9.4607304725808E15) * 1e1d;
                case LengthUnit.Decameter: return (_value) * 1e1d;
                case LengthUnit.Decaparsec: return (_value*3.086090280155857E16) * 1e1d;
                case LengthUnit.DeciaU: return (_value*1.496e11) * 1e-1d;
                case LengthUnit.Decilightday: return (_value*2.59e13) * 1e-1d;
                case LengthUnit.Decilighthour: return (_value*1.079e12) * 1e-1d;
                case LengthUnit.Decilightminute: return (_value*1.799e10) * 1e-1d;
                case LengthUnit.Decilightsecond: return (_value*299792458) * 1e-1d;
                case LengthUnit.Decilightyear: return (_value*9.4607304725808E15) * 1e-1d;
                case LengthUnit.Decimeter: return (_value) * 1e-1d;
                case LengthUnit.Deciparsec: return (_value*3.086090280155857E16) * 1e-1d;
                case LengthUnit.DtpPica: return _value/236.220472441;
                case LengthUnit.DtpPoint: return (_value/72)*2.54e-2;
                case LengthUnit.Exalightyear: return (_value*9.4607304725808E15) * 1e18d;
                case LengthUnit.Exameter: return (_value) * 1e18d;
                case LengthUnit.Exaparsec: return (_value*3.086090280155857E16) * 1e18d;
                case LengthUnit.Fathom: return _value*1.8288;
                case LengthUnit.Femtometer: return (_value) * 1e-15d;
                case LengthUnit.Foot: return _value*0.3048;
                case LengthUnit.GigaaU: return (_value*1.496e11) * 1e9d;
                case LengthUnit.Gigalightday: return (_value*2.59e13) * 1e9d;
                case LengthUnit.Gigalighthour: return (_value*1.079e12) * 1e9d;
                case LengthUnit.Gigalightminute: return (_value*1.799e10) * 1e9d;
                case LengthUnit.Gigalightsecond: return (_value*299792458) * 1e9d;
                case LengthUnit.Gigalightyear: return (_value*9.4607304725808E15) * 1e9d;
                case LengthUnit.Gigameter: return (_value) * 1e9d;
                case LengthUnit.Gigaparsec: return (_value*3.086090280155857E16) * 1e9d;
                case LengthUnit.Hand: return _value * 1.016e-1;
                case LengthUnit.HectoaU: return (_value*1.496e11) * 1e2d;
                case LengthUnit.Hectolightday: return (_value*2.59e13) * 1e2d;
                case LengthUnit.Hectolighthour: return (_value*1.079e12) * 1e2d;
                case LengthUnit.Hectolightminute: return (_value*1.799e10) * 1e2d;
                case LengthUnit.Hectolightsecond: return (_value*299792458) * 1e2d;
                case LengthUnit.Hectolightyear: return (_value*9.4607304725808E15) * 1e2d;
                case LengthUnit.Hectometer: return (_value) * 1e2d;
                case LengthUnit.Hectoparsec: return (_value*3.086090280155857E16) * 1e2d;
                case LengthUnit.Inch: return _value*2.54e-2;
                case LengthUnit.KiloaU: return (_value*1.496e11) * 1e3d;
                case LengthUnit.Kilolightday: return (_value*2.59e13) * 1e3d;
                case LengthUnit.Kilolighthour: return (_value*1.079e12) * 1e3d;
                case LengthUnit.Kilolightminute: return (_value*1.799e10) * 1e3d;
                case LengthUnit.Kilolightsecond: return (_value*299792458) * 1e3d;
                case LengthUnit.Kilolightyear: return (_value*9.4607304725808E15) * 1e3d;
                case LengthUnit.Kilometer: return (_value) * 1e3d;
                case LengthUnit.Kiloparsec: return (_value*3.086090280155857E16) * 1e3d;
                case LengthUnit.Lightday: return _value*2.59e13;
                case LengthUnit.Lighthour: return _value*1.079e12;
                case LengthUnit.Lightminute: return _value*1.799e10;
                case LengthUnit.Lightsecond: return _value*299792458;
                case LengthUnit.Lightyear: return _value*9.4607304725808E15;
                case LengthUnit.MegaaU: return (_value*1.496e11) * 1e6d;
                case LengthUnit.Megalightday: return (_value*2.59e13) * 1e6d;
                case LengthUnit.Megalighthour: return (_value*1.079e12) * 1e6d;
                case LengthUnit.Megalightminute: return (_value*1.799e10) * 1e6d;
                case LengthUnit.Megalightsecond: return (_value*299792458) * 1e6d;
                case LengthUnit.Megalightyear: return (_value*9.4607304725808E15) * 1e6d;
                case LengthUnit.Megameter: return (_value) * 1e6d;
                case LengthUnit.Megaparsec: return (_value*3.086090280155857E16) * 1e6d;
                case LengthUnit.Meter: return _value;
                case LengthUnit.MicroaU: return (_value*1.496e11) * 1e-6d;
                case LengthUnit.Microinch: return _value*2.54e-8;
                case LengthUnit.Microlightday: return (_value*2.59e13) * 1e-6d;
                case LengthUnit.Microlighthour: return (_value*1.079e12) * 1e-6d;
                case LengthUnit.Microlightminute: return (_value*1.799e10) * 1e-6d;
                case LengthUnit.Microlightsecond: return (_value*299792458) * 1e-6d;
                case LengthUnit.Microlightyear: return (_value*9.4607304725808E15) * 1e-6d;
                case LengthUnit.Micrometer: return (_value) * 1e-6d;
                case LengthUnit.Microparsec: return (_value*3.086090280155857E16) * 1e-6d;
                case LengthUnit.Mil: return _value*2.54e-5;
                case LengthUnit.Mile: return _value*1609.34;
                case LengthUnit.MilliaU: return (_value*1.496e11) * 1e-3d;
                case LengthUnit.Millilightday: return (_value*2.59e13) * 1e-3d;
                case LengthUnit.Millilighthour: return (_value*1.079e12) * 1e-3d;
                case LengthUnit.Millilightminute: return (_value*1.799e10) * 1e-3d;
                case LengthUnit.Millilightsecond: return (_value*299792458) * 1e-3d;
                case LengthUnit.Millilightyear: return (_value*9.4607304725808E15) * 1e-3d;
                case LengthUnit.Millimeter: return (_value) * 1e-3d;
                case LengthUnit.Milliparsec: return (_value*3.086090280155857E16) * 1e-3d;
                case LengthUnit.Nanometer: return (_value) * 1e-9d;
                case LengthUnit.NauticalMile: return _value*1852;
                case LengthUnit.Parsec: return _value*3.086090280155857E16;
                case LengthUnit.Petalightyear: return (_value*9.4607304725808E15) * 1e15d;
                case LengthUnit.Petameter: return (_value) * 1e15d;
                case LengthUnit.Petaparsec: return (_value*3.086090280155857E16) * 1e15d;
                case LengthUnit.Picometer: return (_value) * 1e-12d;
                case LengthUnit.PrinterPica: return _value/237.106301584;
                case LengthUnit.PrinterPoint: return (_value/72.27)*2.54e-2;
                case LengthUnit.Qutrameter: return (_value) * 1e27d;
                case LengthUnit.Shackle: return _value*27.432;
                case LengthUnit.TeraaU: return (_value*1.496e11) * 1e12d;
                case LengthUnit.Teralightday: return (_value*2.59e13) * 1e12d;
                case LengthUnit.Teralighthour: return (_value*1.079e12) * 1e12d;
                case LengthUnit.Teralightminute: return (_value*1.799e10) * 1e12d;
                case LengthUnit.Teralightsecond: return (_value*299792458) * 1e12d;
                case LengthUnit.Teralightyear: return (_value*9.4607304725808E15) * 1e12d;
                case LengthUnit.Terameter: return (_value) * 1e12d;
                case LengthUnit.Teraparsec: return (_value*3.086090280155857E16) * 1e12d;
                case LengthUnit.Twip: return _value/56692.913385826;
                case LengthUnit.UsSurveyFoot: return _value*1200/3937;
                case LengthUnit.Vettameter: return (_value) * 1e30d;
                case LengthUnit.Yard: return _value*0.9144;
                case LengthUnit.Yottalightyear: return (_value*9.4607304725808E15) * 1e24d;
                case LengthUnit.Yottameter: return (_value) * 1e24d;
                case LengthUnit.Yottaparsec: return (_value*3.086090280155857E16) * 1e24d;
                case LengthUnit.Zettalightyear: return (_value*9.4607304725808E15) * 1e21d;
                case LengthUnit.Zettameter: return (_value) * 1e21d;
                case LengthUnit.Zettaparsec: return (_value*3.086090280155857E16) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(LengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case LengthUnit.AU: return baseUnitValue/1.496e11;
                case LengthUnit.CentiaU: return (baseUnitValue/1.496e11) / 1e-2d;
                case LengthUnit.Centilightday: return (baseUnitValue/2.59e13) / 1e-2d;
                case LengthUnit.Centilighthour: return (baseUnitValue/1.079e12) / 1e-2d;
                case LengthUnit.Centilightminute: return (baseUnitValue/1.799e10) / 1e-2d;
                case LengthUnit.Centilightsecond: return (baseUnitValue/299792458) / 1e-2d;
                case LengthUnit.Centilightyear: return (baseUnitValue/9.4607304725808E15) / 1e-2d;
                case LengthUnit.Centimeter: return (baseUnitValue) / 1e-2d;
                case LengthUnit.Centiparsec: return (baseUnitValue/3.086090280155857E16) / 1e-2d;
                case LengthUnit.DecaaU: return (baseUnitValue/1.496e11) / 1e1d;
                case LengthUnit.Decalightday: return (baseUnitValue/2.59e13) / 1e1d;
                case LengthUnit.Decalighthour: return (baseUnitValue/1.079e12) / 1e1d;
                case LengthUnit.Decalightminute: return (baseUnitValue/1.799e10) / 1e1d;
                case LengthUnit.Decalightsecond: return (baseUnitValue/299792458) / 1e1d;
                case LengthUnit.Decalightyear: return (baseUnitValue/9.4607304725808E15) / 1e1d;
                case LengthUnit.Decameter: return (baseUnitValue) / 1e1d;
                case LengthUnit.Decaparsec: return (baseUnitValue/3.086090280155857E16) / 1e1d;
                case LengthUnit.DeciaU: return (baseUnitValue/1.496e11) / 1e-1d;
                case LengthUnit.Decilightday: return (baseUnitValue/2.59e13) / 1e-1d;
                case LengthUnit.Decilighthour: return (baseUnitValue/1.079e12) / 1e-1d;
                case LengthUnit.Decilightminute: return (baseUnitValue/1.799e10) / 1e-1d;
                case LengthUnit.Decilightsecond: return (baseUnitValue/299792458) / 1e-1d;
                case LengthUnit.Decilightyear: return (baseUnitValue/9.4607304725808E15) / 1e-1d;
                case LengthUnit.Decimeter: return (baseUnitValue) / 1e-1d;
                case LengthUnit.Deciparsec: return (baseUnitValue/3.086090280155857E16) / 1e-1d;
                case LengthUnit.DtpPica: return baseUnitValue*236.220472441;
                case LengthUnit.DtpPoint: return (baseUnitValue/2.54e-2)*72;
                case LengthUnit.Exalightyear: return (baseUnitValue/9.4607304725808E15) / 1e18d;
                case LengthUnit.Exameter: return (baseUnitValue) / 1e18d;
                case LengthUnit.Exaparsec: return (baseUnitValue/3.086090280155857E16) / 1e18d;
                case LengthUnit.Fathom: return baseUnitValue/1.8288;
                case LengthUnit.Femtometer: return (baseUnitValue) / 1e-15d;
                case LengthUnit.Foot: return baseUnitValue/0.3048;
                case LengthUnit.GigaaU: return (baseUnitValue/1.496e11) / 1e9d;
                case LengthUnit.Gigalightday: return (baseUnitValue/2.59e13) / 1e9d;
                case LengthUnit.Gigalighthour: return (baseUnitValue/1.079e12) / 1e9d;
                case LengthUnit.Gigalightminute: return (baseUnitValue/1.799e10) / 1e9d;
                case LengthUnit.Gigalightsecond: return (baseUnitValue/299792458) / 1e9d;
                case LengthUnit.Gigalightyear: return (baseUnitValue/9.4607304725808E15) / 1e9d;
                case LengthUnit.Gigameter: return (baseUnitValue) / 1e9d;
                case LengthUnit.Gigaparsec: return (baseUnitValue/3.086090280155857E16) / 1e9d;
                case LengthUnit.Hand: return baseUnitValue / 1.016e-1;
                case LengthUnit.HectoaU: return (baseUnitValue/1.496e11) / 1e2d;
                case LengthUnit.Hectolightday: return (baseUnitValue/2.59e13) / 1e2d;
                case LengthUnit.Hectolighthour: return (baseUnitValue/1.079e12) / 1e2d;
                case LengthUnit.Hectolightminute: return (baseUnitValue/1.799e10) / 1e2d;
                case LengthUnit.Hectolightsecond: return (baseUnitValue/299792458) / 1e2d;
                case LengthUnit.Hectolightyear: return (baseUnitValue/9.4607304725808E15) / 1e2d;
                case LengthUnit.Hectometer: return (baseUnitValue) / 1e2d;
                case LengthUnit.Hectoparsec: return (baseUnitValue/3.086090280155857E16) / 1e2d;
                case LengthUnit.Inch: return baseUnitValue/2.54e-2;
                case LengthUnit.KiloaU: return (baseUnitValue/1.496e11) / 1e3d;
                case LengthUnit.Kilolightday: return (baseUnitValue/2.59e13) / 1e3d;
                case LengthUnit.Kilolighthour: return (baseUnitValue/1.079e12) / 1e3d;
                case LengthUnit.Kilolightminute: return (baseUnitValue/1.799e10) / 1e3d;
                case LengthUnit.Kilolightsecond: return (baseUnitValue/299792458) / 1e3d;
                case LengthUnit.Kilolightyear: return (baseUnitValue/9.4607304725808E15) / 1e3d;
                case LengthUnit.Kilometer: return (baseUnitValue) / 1e3d;
                case LengthUnit.Kiloparsec: return (baseUnitValue/3.086090280155857E16) / 1e3d;
                case LengthUnit.Lightday: return baseUnitValue/2.59e13;
                case LengthUnit.Lighthour: return baseUnitValue/1.079e12;
                case LengthUnit.Lightminute: return baseUnitValue/1.799e10;
                case LengthUnit.Lightsecond: return baseUnitValue/299792458;
                case LengthUnit.Lightyear: return baseUnitValue/9.4607304725808E15;
                case LengthUnit.MegaaU: return (baseUnitValue/1.496e11) / 1e6d;
                case LengthUnit.Megalightday: return (baseUnitValue/2.59e13) / 1e6d;
                case LengthUnit.Megalighthour: return (baseUnitValue/1.079e12) / 1e6d;
                case LengthUnit.Megalightminute: return (baseUnitValue/1.799e10) / 1e6d;
                case LengthUnit.Megalightsecond: return (baseUnitValue/299792458) / 1e6d;
                case LengthUnit.Megalightyear: return (baseUnitValue/9.4607304725808E15) / 1e6d;
                case LengthUnit.Megameter: return (baseUnitValue) / 1e6d;
                case LengthUnit.Megaparsec: return (baseUnitValue/3.086090280155857E16) / 1e6d;
                case LengthUnit.Meter: return baseUnitValue;
                case LengthUnit.MicroaU: return (baseUnitValue/1.496e11) / 1e-6d;
                case LengthUnit.Microinch: return baseUnitValue/2.54e-8;
                case LengthUnit.Microlightday: return (baseUnitValue/2.59e13) / 1e-6d;
                case LengthUnit.Microlighthour: return (baseUnitValue/1.079e12) / 1e-6d;
                case LengthUnit.Microlightminute: return (baseUnitValue/1.799e10) / 1e-6d;
                case LengthUnit.Microlightsecond: return (baseUnitValue/299792458) / 1e-6d;
                case LengthUnit.Microlightyear: return (baseUnitValue/9.4607304725808E15) / 1e-6d;
                case LengthUnit.Micrometer: return (baseUnitValue) / 1e-6d;
                case LengthUnit.Microparsec: return (baseUnitValue/3.086090280155857E16) / 1e-6d;
                case LengthUnit.Mil: return baseUnitValue/2.54e-5;
                case LengthUnit.Mile: return baseUnitValue/1609.34;
                case LengthUnit.MilliaU: return (baseUnitValue/1.496e11) / 1e-3d;
                case LengthUnit.Millilightday: return (baseUnitValue/2.59e13) / 1e-3d;
                case LengthUnit.Millilighthour: return (baseUnitValue/1.079e12) / 1e-3d;
                case LengthUnit.Millilightminute: return (baseUnitValue/1.799e10) / 1e-3d;
                case LengthUnit.Millilightsecond: return (baseUnitValue/299792458) / 1e-3d;
                case LengthUnit.Millilightyear: return (baseUnitValue/9.4607304725808E15) / 1e-3d;
                case LengthUnit.Millimeter: return (baseUnitValue) / 1e-3d;
                case LengthUnit.Milliparsec: return (baseUnitValue/3.086090280155857E16) / 1e-3d;
                case LengthUnit.Nanometer: return (baseUnitValue) / 1e-9d;
                case LengthUnit.NauticalMile: return baseUnitValue/1852;
                case LengthUnit.Parsec: return baseUnitValue/3.086090280155857E16;
                case LengthUnit.Petalightyear: return (baseUnitValue/9.4607304725808E15) / 1e15d;
                case LengthUnit.Petameter: return (baseUnitValue) / 1e15d;
                case LengthUnit.Petaparsec: return (baseUnitValue/3.086090280155857E16) / 1e15d;
                case LengthUnit.Picometer: return (baseUnitValue) / 1e-12d;
                case LengthUnit.PrinterPica: return baseUnitValue*237.106301584;
                case LengthUnit.PrinterPoint: return (baseUnitValue/2.54e-2)*72.27;
                case LengthUnit.Qutrameter: return (baseUnitValue) / 1e27d;
                case LengthUnit.Shackle: return baseUnitValue/27.432;
                case LengthUnit.TeraaU: return (baseUnitValue/1.496e11) / 1e12d;
                case LengthUnit.Teralightday: return (baseUnitValue/2.59e13) / 1e12d;
                case LengthUnit.Teralighthour: return (baseUnitValue/1.079e12) / 1e12d;
                case LengthUnit.Teralightminute: return (baseUnitValue/1.799e10) / 1e12d;
                case LengthUnit.Teralightsecond: return (baseUnitValue/299792458) / 1e12d;
                case LengthUnit.Teralightyear: return (baseUnitValue/9.4607304725808E15) / 1e12d;
                case LengthUnit.Terameter: return (baseUnitValue) / 1e12d;
                case LengthUnit.Teraparsec: return (baseUnitValue/3.086090280155857E16) / 1e12d;
                case LengthUnit.Twip: return baseUnitValue*56692.913385826;
                case LengthUnit.UsSurveyFoot: return baseUnitValue*3937/1200;
                case LengthUnit.Vettameter: return (baseUnitValue) / 1e30d;
                case LengthUnit.Yard: return baseUnitValue/0.9144;
                case LengthUnit.Yottalightyear: return (baseUnitValue/9.4607304725808E15) / 1e24d;
                case LengthUnit.Yottameter: return (baseUnitValue) / 1e24d;
                case LengthUnit.Yottaparsec: return (baseUnitValue/3.086090280155857E16) / 1e24d;
                case LengthUnit.Zettalightyear: return (baseUnitValue/9.4607304725808E15) / 1e21d;
                case LengthUnit.Zettameter: return (baseUnitValue) / 1e21d;
                case LengthUnit.Zettaparsec: return (baseUnitValue/3.086090280155857E16) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<LengthUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Length)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Length)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Length)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Length))
                return this;
            else if(conversionType == typeof(LengthUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Length.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Length.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Length)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
