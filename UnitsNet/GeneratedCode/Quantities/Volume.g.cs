//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    public partial struct Volume : IQuantity<VolumeUnit>, IEquatable<Volume>, IComparable, IComparable<Volume>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit? _unit;

        static Volume()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<VolumeUnit>(QuantityType.Volume,
                new UnitInfo<VolumeUnit>[] {
                    new UnitInfo<VolumeUnit>(VolumeUnit.AcreFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.AuTablespoon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CenticubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CenticubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Centiliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicDecimeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicHectometer, new BaseUnits(length: LengthUnit.Hectometer)),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicInch, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicKilometer, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMicrometer, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMile, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicYard, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.DecacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.DecacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Decaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.DecicubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.DecicubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Deciliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ExacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ExacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Exaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.FemtocubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.FemtocubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Femtoliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.GigacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.GigacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Gigaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.HectocubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.HectocubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Hectoliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialBeerBarrel, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialGallon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialOunce, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialPint, new BaseUnits(length: LengthUnit.Decimeter)),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KilocubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KilocubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KiloimperialGallon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Kiloliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KilousGallon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Liter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegaimperialGallon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Megaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegausGallon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MetricCup, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MetricTeaspoon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MicrocubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MicrocubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Microliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MillicubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MillicubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Milliliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.NanocubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.NanocubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Nanoliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.OilBarrel, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.PetacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.PetacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Petaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.PicocubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.PicocubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Picoliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.QutracubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.QutracubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Qutraliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.TeracubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.TeracubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Teraliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UkTablespoon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsBeerBarrel, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsCustomaryCup, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsGallon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsLegalCup, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsOunce, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsPint, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsQuart, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsTablespoon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsTeaspoon, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.VettacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.VettacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Vettaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.YottacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.YottacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Yottaliter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ZettacubicFoot, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ZettacubicMeter, BaseUnits.Undefined),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Zettaliter, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Volume(double numericValue, VolumeUnit unit)
        {
            if(unit == VolumeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Volume(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<VolumeUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; } = VolumeUnit.CubicMeter;

        /// <summary>
        /// Represents the largest possible value of Volume
        /// </summary>
        public static Volume MaxValue { get; } = new Volume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Volume
        /// </summary>
        public static Volume MinValue { get; } = new Volume(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Volume;

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; } = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().Except(new VolumeUnit[]{ VolumeUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero { get; } = new Volume(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<VolumeUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Volume.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Volume in AcreFeet.
        /// </summary>
        public double AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Get Volume in AuTablespoons.
        /// </summary>
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Get Volume in CenticubicFeet.
        /// </summary>
        public double CenticubicFeet => As(VolumeUnit.CenticubicFoot);

        /// <summary>
        ///     Get Volume in CenticubicMeters.
        /// </summary>
        public double CenticubicMeters => As(VolumeUnit.CenticubicMeter);

        /// <summary>
        ///     Get Volume in Centiliters.
        /// </summary>
        public double Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Get Volume in CubicCentimeters.
        /// </summary>
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Get Volume in CubicDecimeters.
        /// </summary>
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Get Volume in CubicFeet.
        /// </summary>
        public double CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Get Volume in CubicHectometers.
        /// </summary>
        public double CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Get Volume in CubicInches.
        /// </summary>
        public double CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Get Volume in CubicKilometers.
        /// </summary>
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Get Volume in CubicMeters.
        /// </summary>
        public double CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Get Volume in CubicMicrometers.
        /// </summary>
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Get Volume in CubicMiles.
        /// </summary>
        public double CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Get Volume in CubicMillimeters.
        /// </summary>
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Get Volume in CubicYards.
        /// </summary>
        public double CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Get Volume in DecacubicFeet.
        /// </summary>
        public double DecacubicFeet => As(VolumeUnit.DecacubicFoot);

        /// <summary>
        ///     Get Volume in DecacubicMeters.
        /// </summary>
        public double DecacubicMeters => As(VolumeUnit.DecacubicMeter);

        /// <summary>
        ///     Get Volume in Decaliters.
        /// </summary>
        public double Decaliters => As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Get Volume in DecicubicFeet.
        /// </summary>
        public double DecicubicFeet => As(VolumeUnit.DecicubicFoot);

        /// <summary>
        ///     Get Volume in DecicubicMeters.
        /// </summary>
        public double DecicubicMeters => As(VolumeUnit.DecicubicMeter);

        /// <summary>
        ///     Get Volume in Deciliters.
        /// </summary>
        public double Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Get Volume in ExacubicFeet.
        /// </summary>
        public double ExacubicFeet => As(VolumeUnit.ExacubicFoot);

        /// <summary>
        ///     Get Volume in ExacubicMeters.
        /// </summary>
        public double ExacubicMeters => As(VolumeUnit.ExacubicMeter);

        /// <summary>
        ///     Get Volume in Exaliters.
        /// </summary>
        public double Exaliters => As(VolumeUnit.Exaliter);

        /// <summary>
        ///     Get Volume in FemtocubicFeet.
        /// </summary>
        public double FemtocubicFeet => As(VolumeUnit.FemtocubicFoot);

        /// <summary>
        ///     Get Volume in FemtocubicMeters.
        /// </summary>
        public double FemtocubicMeters => As(VolumeUnit.FemtocubicMeter);

        /// <summary>
        ///     Get Volume in Femtoliters.
        /// </summary>
        public double Femtoliters => As(VolumeUnit.Femtoliter);

        /// <summary>
        ///     Get Volume in GigacubicFeet.
        /// </summary>
        public double GigacubicFeet => As(VolumeUnit.GigacubicFoot);

        /// <summary>
        ///     Get Volume in GigacubicMeters.
        /// </summary>
        public double GigacubicMeters => As(VolumeUnit.GigacubicMeter);

        /// <summary>
        ///     Get Volume in Gigaliters.
        /// </summary>
        public double Gigaliters => As(VolumeUnit.Gigaliter);

        /// <summary>
        ///     Get Volume in HectocubicFeet.
        /// </summary>
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Get Volume in HectocubicMeters.
        /// </summary>
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Get Volume in Hectoliters.
        /// </summary>
        public double Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Get Volume in ImperialBeerBarrels.
        /// </summary>
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Get Volume in ImperialGallons.
        /// </summary>
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Get Volume in ImperialOunces.
        /// </summary>
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Get Volume in ImperialPints.
        /// </summary>
        public double ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Get Volume in KilocubicFeet.
        /// </summary>
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Get Volume in KilocubicMeters.
        /// </summary>
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Get Volume in KiloimperialGallons.
        /// </summary>
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Get Volume in Kiloliters.
        /// </summary>
        public double Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Get Volume in KilousGallons.
        /// </summary>
        public double KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Get Volume in Liters.
        /// </summary>
        public double Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Get Volume in MegacubicFeet.
        /// </summary>
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Get Volume in MegacubicMeters.
        /// </summary>
        public double MegacubicMeters => As(VolumeUnit.MegacubicMeter);

        /// <summary>
        ///     Get Volume in MegaimperialGallons.
        /// </summary>
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Get Volume in Megaliters.
        /// </summary>
        public double Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Get Volume in MegausGallons.
        /// </summary>
        public double MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Get Volume in MetricCups.
        /// </summary>
        public double MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Get Volume in MetricTeaspoons.
        /// </summary>
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Get Volume in MicrocubicFeet.
        /// </summary>
        public double MicrocubicFeet => As(VolumeUnit.MicrocubicFoot);

        /// <summary>
        ///     Get Volume in MicrocubicMeters.
        /// </summary>
        public double MicrocubicMeters => As(VolumeUnit.MicrocubicMeter);

        /// <summary>
        ///     Get Volume in Microliters.
        /// </summary>
        public double Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Get Volume in MillicubicFeet.
        /// </summary>
        public double MillicubicFeet => As(VolumeUnit.MillicubicFoot);

        /// <summary>
        ///     Get Volume in MillicubicMeters.
        /// </summary>
        public double MillicubicMeters => As(VolumeUnit.MillicubicMeter);

        /// <summary>
        ///     Get Volume in Milliliters.
        /// </summary>
        public double Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Get Volume in NanocubicFeet.
        /// </summary>
        public double NanocubicFeet => As(VolumeUnit.NanocubicFoot);

        /// <summary>
        ///     Get Volume in NanocubicMeters.
        /// </summary>
        public double NanocubicMeters => As(VolumeUnit.NanocubicMeter);

        /// <summary>
        ///     Get Volume in Nanoliters.
        /// </summary>
        public double Nanoliters => As(VolumeUnit.Nanoliter);

        /// <summary>
        ///     Get Volume in OilBarrels.
        /// </summary>
        public double OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Get Volume in PetacubicFeet.
        /// </summary>
        public double PetacubicFeet => As(VolumeUnit.PetacubicFoot);

        /// <summary>
        ///     Get Volume in PetacubicMeters.
        /// </summary>
        public double PetacubicMeters => As(VolumeUnit.PetacubicMeter);

        /// <summary>
        ///     Get Volume in Petaliters.
        /// </summary>
        public double Petaliters => As(VolumeUnit.Petaliter);

        /// <summary>
        ///     Get Volume in PicocubicFeet.
        /// </summary>
        public double PicocubicFeet => As(VolumeUnit.PicocubicFoot);

        /// <summary>
        ///     Get Volume in PicocubicMeters.
        /// </summary>
        public double PicocubicMeters => As(VolumeUnit.PicocubicMeter);

        /// <summary>
        ///     Get Volume in Picoliters.
        /// </summary>
        public double Picoliters => As(VolumeUnit.Picoliter);

        /// <summary>
        ///     Get Volume in QutracubicFeet.
        /// </summary>
        public double QutracubicFeet => As(VolumeUnit.QutracubicFoot);

        /// <summary>
        ///     Get Volume in QutracubicMeters.
        /// </summary>
        public double QutracubicMeters => As(VolumeUnit.QutracubicMeter);

        /// <summary>
        ///     Get Volume in Qutraliters.
        /// </summary>
        public double Qutraliters => As(VolumeUnit.Qutraliter);

        /// <summary>
        ///     Get Volume in TeracubicFeet.
        /// </summary>
        public double TeracubicFeet => As(VolumeUnit.TeracubicFoot);

        /// <summary>
        ///     Get Volume in TeracubicMeters.
        /// </summary>
        public double TeracubicMeters => As(VolumeUnit.TeracubicMeter);

        /// <summary>
        ///     Get Volume in Teraliters.
        /// </summary>
        public double Teraliters => As(VolumeUnit.Teraliter);

        /// <summary>
        ///     Get Volume in UkTablespoons.
        /// </summary>
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Get Volume in UsBeerBarrels.
        /// </summary>
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Get Volume in UsCustomaryCups.
        /// </summary>
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Get Volume in UsGallons.
        /// </summary>
        public double UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Get Volume in UsLegalCups.
        /// </summary>
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Get Volume in UsOunces.
        /// </summary>
        public double UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Get Volume in UsPints.
        /// </summary>
        public double UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Get Volume in UsQuarts.
        /// </summary>
        public double UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Get Volume in UsTablespoons.
        /// </summary>
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Get Volume in UsTeaspoons.
        /// </summary>
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        /// <summary>
        ///     Get Volume in VettacubicFeet.
        /// </summary>
        public double VettacubicFeet => As(VolumeUnit.VettacubicFoot);

        /// <summary>
        ///     Get Volume in VettacubicMeters.
        /// </summary>
        public double VettacubicMeters => As(VolumeUnit.VettacubicMeter);

        /// <summary>
        ///     Get Volume in Vettaliters.
        /// </summary>
        public double Vettaliters => As(VolumeUnit.Vettaliter);

        /// <summary>
        ///     Get Volume in YottacubicFeet.
        /// </summary>
        public double YottacubicFeet => As(VolumeUnit.YottacubicFoot);

        /// <summary>
        ///     Get Volume in YottacubicMeters.
        /// </summary>
        public double YottacubicMeters => As(VolumeUnit.YottacubicMeter);

        /// <summary>
        ///     Get Volume in Yottaliters.
        /// </summary>
        public double Yottaliters => As(VolumeUnit.Yottaliter);

        /// <summary>
        ///     Get Volume in ZettacubicFeet.
        /// </summary>
        public double ZettacubicFeet => As(VolumeUnit.ZettacubicFoot);

        /// <summary>
        ///     Get Volume in ZettacubicMeters.
        /// </summary>
        public double ZettacubicMeters => As(VolumeUnit.ZettacubicMeter);

        /// <summary>
        ///     Get Volume in Zettaliters.
        /// </summary>
        public double Zettaliters => As(VolumeUnit.Zettaliter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(VolumeUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Volume from AcreFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromAcreFeet(QuantityValue acrefeet)
        {
            double value = (double) acrefeet;
            return new Volume(value, VolumeUnit.AcreFoot);
        }
        /// <summary>
        ///     Get Volume from AuTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromAuTablespoons(QuantityValue autablespoons)
        {
            double value = (double) autablespoons;
            return new Volume(value, VolumeUnit.AuTablespoon);
        }
        /// <summary>
        ///     Get Volume from CenticubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCenticubicFeet(QuantityValue centicubicfeet)
        {
            double value = (double) centicubicfeet;
            return new Volume(value, VolumeUnit.CenticubicFoot);
        }
        /// <summary>
        ///     Get Volume from CenticubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCenticubicMeters(QuantityValue centicubicmeters)
        {
            double value = (double) centicubicmeters;
            return new Volume(value, VolumeUnit.CenticubicMeter);
        }
        /// <summary>
        ///     Get Volume from Centiliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCentiliters(QuantityValue centiliters)
        {
            double value = (double) centiliters;
            return new Volume(value, VolumeUnit.Centiliter);
        }
        /// <summary>
        ///     Get Volume from CubicCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicCentimeters(QuantityValue cubiccentimeters)
        {
            double value = (double) cubiccentimeters;
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }
        /// <summary>
        ///     Get Volume from CubicDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicDecimeters(QuantityValue cubicdecimeters)
        {
            double value = (double) cubicdecimeters;
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }
        /// <summary>
        ///     Get Volume from CubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicFeet(QuantityValue cubicfeet)
        {
            double value = (double) cubicfeet;
            return new Volume(value, VolumeUnit.CubicFoot);
        }
        /// <summary>
        ///     Get Volume from CubicHectometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicHectometers(QuantityValue cubichectometers)
        {
            double value = (double) cubichectometers;
            return new Volume(value, VolumeUnit.CubicHectometer);
        }
        /// <summary>
        ///     Get Volume from CubicInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicInches(QuantityValue cubicinches)
        {
            double value = (double) cubicinches;
            return new Volume(value, VolumeUnit.CubicInch);
        }
        /// <summary>
        ///     Get Volume from CubicKilometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicKilometers(QuantityValue cubickilometers)
        {
            double value = (double) cubickilometers;
            return new Volume(value, VolumeUnit.CubicKilometer);
        }
        /// <summary>
        ///     Get Volume from CubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMeters(QuantityValue cubicmeters)
        {
            double value = (double) cubicmeters;
            return new Volume(value, VolumeUnit.CubicMeter);
        }
        /// <summary>
        ///     Get Volume from CubicMicrometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMicrometers(QuantityValue cubicmicrometers)
        {
            double value = (double) cubicmicrometers;
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }
        /// <summary>
        ///     Get Volume from CubicMiles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMiles(QuantityValue cubicmiles)
        {
            double value = (double) cubicmiles;
            return new Volume(value, VolumeUnit.CubicMile);
        }
        /// <summary>
        ///     Get Volume from CubicMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMillimeters(QuantityValue cubicmillimeters)
        {
            double value = (double) cubicmillimeters;
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }
        /// <summary>
        ///     Get Volume from CubicYards.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicYards(QuantityValue cubicyards)
        {
            double value = (double) cubicyards;
            return new Volume(value, VolumeUnit.CubicYard);
        }
        /// <summary>
        ///     Get Volume from DecacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecacubicFeet(QuantityValue decacubicfeet)
        {
            double value = (double) decacubicfeet;
            return new Volume(value, VolumeUnit.DecacubicFoot);
        }
        /// <summary>
        ///     Get Volume from DecacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecacubicMeters(QuantityValue decacubicmeters)
        {
            double value = (double) decacubicmeters;
            return new Volume(value, VolumeUnit.DecacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Decaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecaliters(QuantityValue decaliters)
        {
            double value = (double) decaliters;
            return new Volume(value, VolumeUnit.Decaliter);
        }
        /// <summary>
        ///     Get Volume from DecicubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecicubicFeet(QuantityValue decicubicfeet)
        {
            double value = (double) decicubicfeet;
            return new Volume(value, VolumeUnit.DecicubicFoot);
        }
        /// <summary>
        ///     Get Volume from DecicubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecicubicMeters(QuantityValue decicubicmeters)
        {
            double value = (double) decicubicmeters;
            return new Volume(value, VolumeUnit.DecicubicMeter);
        }
        /// <summary>
        ///     Get Volume from Deciliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDeciliters(QuantityValue deciliters)
        {
            double value = (double) deciliters;
            return new Volume(value, VolumeUnit.Deciliter);
        }
        /// <summary>
        ///     Get Volume from ExacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromExacubicFeet(QuantityValue exacubicfeet)
        {
            double value = (double) exacubicfeet;
            return new Volume(value, VolumeUnit.ExacubicFoot);
        }
        /// <summary>
        ///     Get Volume from ExacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromExacubicMeters(QuantityValue exacubicmeters)
        {
            double value = (double) exacubicmeters;
            return new Volume(value, VolumeUnit.ExacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Exaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromExaliters(QuantityValue exaliters)
        {
            double value = (double) exaliters;
            return new Volume(value, VolumeUnit.Exaliter);
        }
        /// <summary>
        ///     Get Volume from FemtocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromFemtocubicFeet(QuantityValue femtocubicfeet)
        {
            double value = (double) femtocubicfeet;
            return new Volume(value, VolumeUnit.FemtocubicFoot);
        }
        /// <summary>
        ///     Get Volume from FemtocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromFemtocubicMeters(QuantityValue femtocubicmeters)
        {
            double value = (double) femtocubicmeters;
            return new Volume(value, VolumeUnit.FemtocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Femtoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromFemtoliters(QuantityValue femtoliters)
        {
            double value = (double) femtoliters;
            return new Volume(value, VolumeUnit.Femtoliter);
        }
        /// <summary>
        ///     Get Volume from GigacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromGigacubicFeet(QuantityValue gigacubicfeet)
        {
            double value = (double) gigacubicfeet;
            return new Volume(value, VolumeUnit.GigacubicFoot);
        }
        /// <summary>
        ///     Get Volume from GigacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromGigacubicMeters(QuantityValue gigacubicmeters)
        {
            double value = (double) gigacubicmeters;
            return new Volume(value, VolumeUnit.GigacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Gigaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromGigaliters(QuantityValue gigaliters)
        {
            double value = (double) gigaliters;
            return new Volume(value, VolumeUnit.Gigaliter);
        }
        /// <summary>
        ///     Get Volume from HectocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectocubicFeet(QuantityValue hectocubicfeet)
        {
            double value = (double) hectocubicfeet;
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }
        /// <summary>
        ///     Get Volume from HectocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectocubicMeters(QuantityValue hectocubicmeters)
        {
            double value = (double) hectocubicmeters;
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Hectoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectoliters(QuantityValue hectoliters)
        {
            double value = (double) hectoliters;
            return new Volume(value, VolumeUnit.Hectoliter);
        }
        /// <summary>
        ///     Get Volume from ImperialBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialBeerBarrels(QuantityValue imperialbeerbarrels)
        {
            double value = (double) imperialbeerbarrels;
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }
        /// <summary>
        ///     Get Volume from ImperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialGallons(QuantityValue imperialgallons)
        {
            double value = (double) imperialgallons;
            return new Volume(value, VolumeUnit.ImperialGallon);
        }
        /// <summary>
        ///     Get Volume from ImperialOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialOunces(QuantityValue imperialounces)
        {
            double value = (double) imperialounces;
            return new Volume(value, VolumeUnit.ImperialOunce);
        }
        /// <summary>
        ///     Get Volume from ImperialPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialPints(QuantityValue imperialpints)
        {
            double value = (double) imperialpints;
            return new Volume(value, VolumeUnit.ImperialPint);
        }
        /// <summary>
        ///     Get Volume from KilocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKilocubicFeet(QuantityValue kilocubicfeet)
        {
            double value = (double) kilocubicfeet;
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }
        /// <summary>
        ///     Get Volume from KilocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKilocubicMeters(QuantityValue kilocubicmeters)
        {
            double value = (double) kilocubicmeters;
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }
        /// <summary>
        ///     Get Volume from KiloimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKiloimperialGallons(QuantityValue kiloimperialgallons)
        {
            double value = (double) kiloimperialgallons;
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }
        /// <summary>
        ///     Get Volume from Kiloliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKiloliters(QuantityValue kiloliters)
        {
            double value = (double) kiloliters;
            return new Volume(value, VolumeUnit.Kiloliter);
        }
        /// <summary>
        ///     Get Volume from KilousGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKilousGallons(QuantityValue kilousgallons)
        {
            double value = (double) kilousgallons;
            return new Volume(value, VolumeUnit.KilousGallon);
        }
        /// <summary>
        ///     Get Volume from Liters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromLiters(QuantityValue liters)
        {
            double value = (double) liters;
            return new Volume(value, VolumeUnit.Liter);
        }
        /// <summary>
        ///     Get Volume from MegacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegacubicFeet(QuantityValue megacubicfeet)
        {
            double value = (double) megacubicfeet;
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }
        /// <summary>
        ///     Get Volume from MegacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegacubicMeters(QuantityValue megacubicmeters)
        {
            double value = (double) megacubicmeters;
            return new Volume(value, VolumeUnit.MegacubicMeter);
        }
        /// <summary>
        ///     Get Volume from MegaimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegaimperialGallons(QuantityValue megaimperialgallons)
        {
            double value = (double) megaimperialgallons;
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }
        /// <summary>
        ///     Get Volume from Megaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegaliters(QuantityValue megaliters)
        {
            double value = (double) megaliters;
            return new Volume(value, VolumeUnit.Megaliter);
        }
        /// <summary>
        ///     Get Volume from MegausGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegausGallons(QuantityValue megausgallons)
        {
            double value = (double) megausgallons;
            return new Volume(value, VolumeUnit.MegausGallon);
        }
        /// <summary>
        ///     Get Volume from MetricCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMetricCups(QuantityValue metriccups)
        {
            double value = (double) metriccups;
            return new Volume(value, VolumeUnit.MetricCup);
        }
        /// <summary>
        ///     Get Volume from MetricTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMetricTeaspoons(QuantityValue metricteaspoons)
        {
            double value = (double) metricteaspoons;
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }
        /// <summary>
        ///     Get Volume from MicrocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMicrocubicFeet(QuantityValue microcubicfeet)
        {
            double value = (double) microcubicfeet;
            return new Volume(value, VolumeUnit.MicrocubicFoot);
        }
        /// <summary>
        ///     Get Volume from MicrocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMicrocubicMeters(QuantityValue microcubicmeters)
        {
            double value = (double) microcubicmeters;
            return new Volume(value, VolumeUnit.MicrocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Microliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMicroliters(QuantityValue microliters)
        {
            double value = (double) microliters;
            return new Volume(value, VolumeUnit.Microliter);
        }
        /// <summary>
        ///     Get Volume from MillicubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMillicubicFeet(QuantityValue millicubicfeet)
        {
            double value = (double) millicubicfeet;
            return new Volume(value, VolumeUnit.MillicubicFoot);
        }
        /// <summary>
        ///     Get Volume from MillicubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMillicubicMeters(QuantityValue millicubicmeters)
        {
            double value = (double) millicubicmeters;
            return new Volume(value, VolumeUnit.MillicubicMeter);
        }
        /// <summary>
        ///     Get Volume from Milliliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMilliliters(QuantityValue milliliters)
        {
            double value = (double) milliliters;
            return new Volume(value, VolumeUnit.Milliliter);
        }
        /// <summary>
        ///     Get Volume from NanocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromNanocubicFeet(QuantityValue nanocubicfeet)
        {
            double value = (double) nanocubicfeet;
            return new Volume(value, VolumeUnit.NanocubicFoot);
        }
        /// <summary>
        ///     Get Volume from NanocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromNanocubicMeters(QuantityValue nanocubicmeters)
        {
            double value = (double) nanocubicmeters;
            return new Volume(value, VolumeUnit.NanocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Nanoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromNanoliters(QuantityValue nanoliters)
        {
            double value = (double) nanoliters;
            return new Volume(value, VolumeUnit.Nanoliter);
        }
        /// <summary>
        ///     Get Volume from OilBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromOilBarrels(QuantityValue oilbarrels)
        {
            double value = (double) oilbarrels;
            return new Volume(value, VolumeUnit.OilBarrel);
        }
        /// <summary>
        ///     Get Volume from PetacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromPetacubicFeet(QuantityValue petacubicfeet)
        {
            double value = (double) petacubicfeet;
            return new Volume(value, VolumeUnit.PetacubicFoot);
        }
        /// <summary>
        ///     Get Volume from PetacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromPetacubicMeters(QuantityValue petacubicmeters)
        {
            double value = (double) petacubicmeters;
            return new Volume(value, VolumeUnit.PetacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Petaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromPetaliters(QuantityValue petaliters)
        {
            double value = (double) petaliters;
            return new Volume(value, VolumeUnit.Petaliter);
        }
        /// <summary>
        ///     Get Volume from PicocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromPicocubicFeet(QuantityValue picocubicfeet)
        {
            double value = (double) picocubicfeet;
            return new Volume(value, VolumeUnit.PicocubicFoot);
        }
        /// <summary>
        ///     Get Volume from PicocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromPicocubicMeters(QuantityValue picocubicmeters)
        {
            double value = (double) picocubicmeters;
            return new Volume(value, VolumeUnit.PicocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Picoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromPicoliters(QuantityValue picoliters)
        {
            double value = (double) picoliters;
            return new Volume(value, VolumeUnit.Picoliter);
        }
        /// <summary>
        ///     Get Volume from QutracubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromQutracubicFeet(QuantityValue qutracubicfeet)
        {
            double value = (double) qutracubicfeet;
            return new Volume(value, VolumeUnit.QutracubicFoot);
        }
        /// <summary>
        ///     Get Volume from QutracubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromQutracubicMeters(QuantityValue qutracubicmeters)
        {
            double value = (double) qutracubicmeters;
            return new Volume(value, VolumeUnit.QutracubicMeter);
        }
        /// <summary>
        ///     Get Volume from Qutraliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromQutraliters(QuantityValue qutraliters)
        {
            double value = (double) qutraliters;
            return new Volume(value, VolumeUnit.Qutraliter);
        }
        /// <summary>
        ///     Get Volume from TeracubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromTeracubicFeet(QuantityValue teracubicfeet)
        {
            double value = (double) teracubicfeet;
            return new Volume(value, VolumeUnit.TeracubicFoot);
        }
        /// <summary>
        ///     Get Volume from TeracubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromTeracubicMeters(QuantityValue teracubicmeters)
        {
            double value = (double) teracubicmeters;
            return new Volume(value, VolumeUnit.TeracubicMeter);
        }
        /// <summary>
        ///     Get Volume from Teraliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromTeraliters(QuantityValue teraliters)
        {
            double value = (double) teraliters;
            return new Volume(value, VolumeUnit.Teraliter);
        }
        /// <summary>
        ///     Get Volume from UkTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUkTablespoons(QuantityValue uktablespoons)
        {
            double value = (double) uktablespoons;
            return new Volume(value, VolumeUnit.UkTablespoon);
        }
        /// <summary>
        ///     Get Volume from UsBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsBeerBarrels(QuantityValue usbeerbarrels)
        {
            double value = (double) usbeerbarrels;
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }
        /// <summary>
        ///     Get Volume from UsCustomaryCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsCustomaryCups(QuantityValue uscustomarycups)
        {
            double value = (double) uscustomarycups;
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }
        /// <summary>
        ///     Get Volume from UsGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsGallons(QuantityValue usgallons)
        {
            double value = (double) usgallons;
            return new Volume(value, VolumeUnit.UsGallon);
        }
        /// <summary>
        ///     Get Volume from UsLegalCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsLegalCups(QuantityValue uslegalcups)
        {
            double value = (double) uslegalcups;
            return new Volume(value, VolumeUnit.UsLegalCup);
        }
        /// <summary>
        ///     Get Volume from UsOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsOunces(QuantityValue usounces)
        {
            double value = (double) usounces;
            return new Volume(value, VolumeUnit.UsOunce);
        }
        /// <summary>
        ///     Get Volume from UsPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsPints(QuantityValue uspints)
        {
            double value = (double) uspints;
            return new Volume(value, VolumeUnit.UsPint);
        }
        /// <summary>
        ///     Get Volume from UsQuarts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsQuarts(QuantityValue usquarts)
        {
            double value = (double) usquarts;
            return new Volume(value, VolumeUnit.UsQuart);
        }
        /// <summary>
        ///     Get Volume from UsTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsTablespoons(QuantityValue ustablespoons)
        {
            double value = (double) ustablespoons;
            return new Volume(value, VolumeUnit.UsTablespoon);
        }
        /// <summary>
        ///     Get Volume from UsTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsTeaspoons(QuantityValue usteaspoons)
        {
            double value = (double) usteaspoons;
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }
        /// <summary>
        ///     Get Volume from VettacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromVettacubicFeet(QuantityValue vettacubicfeet)
        {
            double value = (double) vettacubicfeet;
            return new Volume(value, VolumeUnit.VettacubicFoot);
        }
        /// <summary>
        ///     Get Volume from VettacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromVettacubicMeters(QuantityValue vettacubicmeters)
        {
            double value = (double) vettacubicmeters;
            return new Volume(value, VolumeUnit.VettacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Vettaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromVettaliters(QuantityValue vettaliters)
        {
            double value = (double) vettaliters;
            return new Volume(value, VolumeUnit.Vettaliter);
        }
        /// <summary>
        ///     Get Volume from YottacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromYottacubicFeet(QuantityValue yottacubicfeet)
        {
            double value = (double) yottacubicfeet;
            return new Volume(value, VolumeUnit.YottacubicFoot);
        }
        /// <summary>
        ///     Get Volume from YottacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromYottacubicMeters(QuantityValue yottacubicmeters)
        {
            double value = (double) yottacubicmeters;
            return new Volume(value, VolumeUnit.YottacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Yottaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromYottaliters(QuantityValue yottaliters)
        {
            double value = (double) yottaliters;
            return new Volume(value, VolumeUnit.Yottaliter);
        }
        /// <summary>
        ///     Get Volume from ZettacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromZettacubicFeet(QuantityValue zettacubicfeet)
        {
            double value = (double) zettacubicfeet;
            return new Volume(value, VolumeUnit.ZettacubicFoot);
        }
        /// <summary>
        ///     Get Volume from ZettacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromZettacubicMeters(QuantityValue zettacubicmeters)
        {
            double value = (double) zettacubicmeters;
            return new Volume(value, VolumeUnit.ZettacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Zettaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromZettaliters(QuantityValue zettaliters)
        {
            double value = (double) zettaliters;
            return new Volume(value, VolumeUnit.Zettaliter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume From(QuantityValue value, VolumeUnit fromUnit)
        {
            return new Volume((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Volume Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Volume, VolumeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Volume result)
        {
            return QuantityParser.Default.TryParse<Volume, VolumeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static VolumeUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<VolumeUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.VolumeUnit)"/>
        public static bool TryParseUnit(string str, out VolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out VolumeUnit unit)
        {
            return UnitParser.Default.TryParse<VolumeUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Volume operator -(Volume right)
        {
            return new Volume(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from adding two <see cref="Volume"/>.</summary>
        public static Volume operator +(Volume left, Volume right)
        {
            return new Volume(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from subtracting two <see cref="Volume"/>.</summary>
        public static Volume operator -(Volume left, Volume right)
        {
            return new Volume(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from multiplying value and <see cref="Volume"/>.</summary>
        public static Volume operator *(double left, Volume right)
        {
            return new Volume(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from multiplying value and <see cref="Volume"/>.</summary>
        public static Volume operator *(Volume left, double right)
        {
            return new Volume(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from dividing <see cref="Volume"/> by value.</summary>
        public static Volume operator /(Volume left, double right)
        {
            return new Volume(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Volume"/> by <see cref="Volume"/>.</summary>
        public static double operator /(Volume left, Volume right)
        {
            return left.CubicMeters / right.CubicMeters;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Volume left, Volume right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Volume left, Volume right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Volume left, Volume right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Volume left, Volume right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Volume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Volume left, Volume right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Volume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Volume left, Volume right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Volume objVolume)) throw new ArgumentException("Expected type Volume.", nameof(obj));

            return CompareTo(objVolume);
        }

        /// <inheritdoc />
        public int CompareTo(Volume other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Volume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Volume objVolume))
                return false;

            return Equals(objVolume);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Volume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Volume other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Volume within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Volume other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is VolumeUnit unitAsVolumeUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeUnit)} is supported.", nameof(unit));

            return As(unitAsVolumeUnit);
        }

        /// <summary>
        ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Volume(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is VolumeUnit unitAsVolumeUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsVolumeUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Volume ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<VolumeUnit> IQuantity<VolumeUnit>.ToUnit(VolumeUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<VolumeUnit> IQuantity<VolumeUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case VolumeUnit.AcreFoot: return _value/0.000810714;
                case VolumeUnit.AuTablespoon: return _value*2e-5;
                case VolumeUnit.CenticubicFoot: return (_value*0.0283168) * 1e-2d;
                case VolumeUnit.CenticubicMeter: return (_value) * 1e-2d;
                case VolumeUnit.Centiliter: return (_value/1e3) * 1e-2d;
                case VolumeUnit.CubicCentimeter: return _value/1e6;
                case VolumeUnit.CubicDecimeter: return _value/1e3;
                case VolumeUnit.CubicFoot: return _value*0.0283168;
                case VolumeUnit.CubicHectometer: return _value*1e6;
                case VolumeUnit.CubicInch: return _value*1.6387*1e-5;
                case VolumeUnit.CubicKilometer: return _value*1e9;
                case VolumeUnit.CubicMeter: return _value;
                case VolumeUnit.CubicMicrometer: return _value/1e18;
                case VolumeUnit.CubicMile: return _value*4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return _value/1e9;
                case VolumeUnit.CubicYard: return _value*0.764554858;
                case VolumeUnit.DecacubicFoot: return (_value*0.0283168) * 1e1d;
                case VolumeUnit.DecacubicMeter: return (_value) * 1e1d;
                case VolumeUnit.Decaliter: return (_value/1e3) * 1e1d;
                case VolumeUnit.DecicubicFoot: return (_value*0.0283168) * 1e-1d;
                case VolumeUnit.DecicubicMeter: return (_value) * 1e-1d;
                case VolumeUnit.Deciliter: return (_value/1e3) * 1e-1d;
                case VolumeUnit.ExacubicFoot: return (_value*0.0283168) * 1e18d;
                case VolumeUnit.ExacubicMeter: return (_value) * 1e18d;
                case VolumeUnit.Exaliter: return (_value/1e3) * 1e18d;
                case VolumeUnit.FemtocubicFoot: return (_value*0.0283168) * 1e-15d;
                case VolumeUnit.FemtocubicMeter: return (_value) * 1e-15d;
                case VolumeUnit.Femtoliter: return (_value/1e3) * 1e-15d;
                case VolumeUnit.GigacubicFoot: return (_value*0.0283168) * 1e9d;
                case VolumeUnit.GigacubicMeter: return (_value) * 1e9d;
                case VolumeUnit.Gigaliter: return (_value/1e3) * 1e9d;
                case VolumeUnit.HectocubicFoot: return (_value*0.0283168) * 1e2d;
                case VolumeUnit.HectocubicMeter: return (_value) * 1e2d;
                case VolumeUnit.Hectoliter: return (_value/1e3) * 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return _value*0.16365924;
                case VolumeUnit.ImperialGallon: return _value*0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return _value*2.8413062499962901241875439064617e-5;
                case VolumeUnit.ImperialPint: return _value * 5.6826125e-4;
                case VolumeUnit.KilocubicFoot: return (_value*0.0283168) * 1e3d;
                case VolumeUnit.KilocubicMeter: return (_value) * 1e3d;
                case VolumeUnit.KiloimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e3d;
                case VolumeUnit.Kiloliter: return (_value/1e3) * 1e3d;
                case VolumeUnit.KilousGallon: return (_value*0.00378541) * 1e3d;
                case VolumeUnit.Liter: return _value/1e3;
                case VolumeUnit.MegacubicFoot: return (_value*0.0283168) * 1e6d;
                case VolumeUnit.MegacubicMeter: return (_value) * 1e6d;
                case VolumeUnit.MegaimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e6d;
                case VolumeUnit.Megaliter: return (_value/1e3) * 1e6d;
                case VolumeUnit.MegausGallon: return (_value*0.00378541) * 1e6d;
                case VolumeUnit.MetricCup: return _value*0.00025;
                case VolumeUnit.MetricTeaspoon: return _value*0.5e-5;
                case VolumeUnit.MicrocubicFoot: return (_value*0.0283168) * 1e-6d;
                case VolumeUnit.MicrocubicMeter: return (_value) * 1e-6d;
                case VolumeUnit.Microliter: return (_value/1e3) * 1e-6d;
                case VolumeUnit.MillicubicFoot: return (_value*0.0283168) * 1e-3d;
                case VolumeUnit.MillicubicMeter: return (_value) * 1e-3d;
                case VolumeUnit.Milliliter: return (_value/1e3) * 1e-3d;
                case VolumeUnit.NanocubicFoot: return (_value*0.0283168) * 1e-9d;
                case VolumeUnit.NanocubicMeter: return (_value) * 1e-9d;
                case VolumeUnit.Nanoliter: return (_value/1e3) * 1e-9d;
                case VolumeUnit.OilBarrel: return _value*0.158987294928;
                case VolumeUnit.PetacubicFoot: return (_value*0.0283168) * 1e15d;
                case VolumeUnit.PetacubicMeter: return (_value) * 1e15d;
                case VolumeUnit.Petaliter: return (_value/1e3) * 1e15d;
                case VolumeUnit.PicocubicFoot: return (_value*0.0283168) * 1e-12d;
                case VolumeUnit.PicocubicMeter: return (_value) * 1e-12d;
                case VolumeUnit.Picoliter: return (_value/1e3) * 1e-12d;
                case VolumeUnit.QutracubicFoot: return (_value*0.0283168) * 1e27d;
                case VolumeUnit.QutracubicMeter: return (_value) * 1e27d;
                case VolumeUnit.Qutraliter: return (_value/1e3) * 1e27d;
                case VolumeUnit.TeracubicFoot: return (_value*0.0283168) * 1e12d;
                case VolumeUnit.TeracubicMeter: return (_value) * 1e12d;
                case VolumeUnit.Teraliter: return (_value/1e3) * 1e12d;
                case VolumeUnit.UkTablespoon: return _value*1.5e-5;
                case VolumeUnit.UsBeerBarrel: return _value*0.1173477658;
                case VolumeUnit.UsCustomaryCup: return _value*0.0002365882365;
                case VolumeUnit.UsGallon: return _value*0.00378541;
                case VolumeUnit.UsLegalCup: return _value*0.00024;
                case VolumeUnit.UsOunce: return _value*2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return _value*4.73176473e-4;
                case VolumeUnit.UsQuart: return _value*9.46352946e-4;
                case VolumeUnit.UsTablespoon: return _value*1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return _value*4.92892159375e-6;
                case VolumeUnit.VettacubicFoot: return (_value*0.0283168) * 1e30d;
                case VolumeUnit.VettacubicMeter: return (_value) * 1e30d;
                case VolumeUnit.Vettaliter: return (_value/1e3) * 1e30d;
                case VolumeUnit.YottacubicFoot: return (_value*0.0283168) * 1e24d;
                case VolumeUnit.YottacubicMeter: return (_value) * 1e24d;
                case VolumeUnit.Yottaliter: return (_value/1e3) * 1e24d;
                case VolumeUnit.ZettacubicFoot: return (_value*0.0283168) * 1e21d;
                case VolumeUnit.ZettacubicMeter: return (_value) * 1e21d;
                case VolumeUnit.Zettaliter: return (_value/1e3) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(VolumeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case VolumeUnit.AcreFoot: return baseUnitValue*0.000810714;
                case VolumeUnit.AuTablespoon: return baseUnitValue/2e-5;
                case VolumeUnit.CenticubicFoot: return (baseUnitValue/0.0283168) / 1e-2d;
                case VolumeUnit.CenticubicMeter: return (baseUnitValue) / 1e-2d;
                case VolumeUnit.Centiliter: return (baseUnitValue*1e3) / 1e-2d;
                case VolumeUnit.CubicCentimeter: return baseUnitValue*1e6;
                case VolumeUnit.CubicDecimeter: return baseUnitValue*1e3;
                case VolumeUnit.CubicFoot: return baseUnitValue/0.0283168;
                case VolumeUnit.CubicHectometer: return baseUnitValue/1e6;
                case VolumeUnit.CubicInch: return baseUnitValue/(1.6387*1e-5);
                case VolumeUnit.CubicKilometer: return baseUnitValue/1e9;
                case VolumeUnit.CubicMeter: return baseUnitValue;
                case VolumeUnit.CubicMicrometer: return baseUnitValue*1e18;
                case VolumeUnit.CubicMile: return baseUnitValue/4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return baseUnitValue*1e9;
                case VolumeUnit.CubicYard: return baseUnitValue/0.764554858;
                case VolumeUnit.DecacubicFoot: return (baseUnitValue/0.0283168) / 1e1d;
                case VolumeUnit.DecacubicMeter: return (baseUnitValue) / 1e1d;
                case VolumeUnit.Decaliter: return (baseUnitValue*1e3) / 1e1d;
                case VolumeUnit.DecicubicFoot: return (baseUnitValue/0.0283168) / 1e-1d;
                case VolumeUnit.DecicubicMeter: return (baseUnitValue) / 1e-1d;
                case VolumeUnit.Deciliter: return (baseUnitValue*1e3) / 1e-1d;
                case VolumeUnit.ExacubicFoot: return (baseUnitValue/0.0283168) / 1e18d;
                case VolumeUnit.ExacubicMeter: return (baseUnitValue) / 1e18d;
                case VolumeUnit.Exaliter: return (baseUnitValue*1e3) / 1e18d;
                case VolumeUnit.FemtocubicFoot: return (baseUnitValue/0.0283168) / 1e-15d;
                case VolumeUnit.FemtocubicMeter: return (baseUnitValue) / 1e-15d;
                case VolumeUnit.Femtoliter: return (baseUnitValue*1e3) / 1e-15d;
                case VolumeUnit.GigacubicFoot: return (baseUnitValue/0.0283168) / 1e9d;
                case VolumeUnit.GigacubicMeter: return (baseUnitValue) / 1e9d;
                case VolumeUnit.Gigaliter: return (baseUnitValue*1e3) / 1e9d;
                case VolumeUnit.HectocubicFoot: return (baseUnitValue/0.0283168) / 1e2d;
                case VolumeUnit.HectocubicMeter: return (baseUnitValue) / 1e2d;
                case VolumeUnit.Hectoliter: return (baseUnitValue*1e3) / 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return baseUnitValue/0.16365924;
                case VolumeUnit.ImperialGallon: return baseUnitValue/0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return baseUnitValue/2.8413062499962901241875439064617e-5;
                case VolumeUnit.ImperialPint: return baseUnitValue / 5.6826125e-4;
                case VolumeUnit.KilocubicFoot: return (baseUnitValue/0.0283168) / 1e3d;
                case VolumeUnit.KilocubicMeter: return (baseUnitValue) / 1e3d;
                case VolumeUnit.KiloimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e3d;
                case VolumeUnit.Kiloliter: return (baseUnitValue*1e3) / 1e3d;
                case VolumeUnit.KilousGallon: return (baseUnitValue/0.00378541) / 1e3d;
                case VolumeUnit.Liter: return baseUnitValue*1e3;
                case VolumeUnit.MegacubicFoot: return (baseUnitValue/0.0283168) / 1e6d;
                case VolumeUnit.MegacubicMeter: return (baseUnitValue) / 1e6d;
                case VolumeUnit.MegaimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e6d;
                case VolumeUnit.Megaliter: return (baseUnitValue*1e3) / 1e6d;
                case VolumeUnit.MegausGallon: return (baseUnitValue/0.00378541) / 1e6d;
                case VolumeUnit.MetricCup: return baseUnitValue/0.00025;
                case VolumeUnit.MetricTeaspoon: return baseUnitValue/0.5e-5;
                case VolumeUnit.MicrocubicFoot: return (baseUnitValue/0.0283168) / 1e-6d;
                case VolumeUnit.MicrocubicMeter: return (baseUnitValue) / 1e-6d;
                case VolumeUnit.Microliter: return (baseUnitValue*1e3) / 1e-6d;
                case VolumeUnit.MillicubicFoot: return (baseUnitValue/0.0283168) / 1e-3d;
                case VolumeUnit.MillicubicMeter: return (baseUnitValue) / 1e-3d;
                case VolumeUnit.Milliliter: return (baseUnitValue*1e3) / 1e-3d;
                case VolumeUnit.NanocubicFoot: return (baseUnitValue/0.0283168) / 1e-9d;
                case VolumeUnit.NanocubicMeter: return (baseUnitValue) / 1e-9d;
                case VolumeUnit.Nanoliter: return (baseUnitValue*1e3) / 1e-9d;
                case VolumeUnit.OilBarrel: return baseUnitValue/0.158987294928;
                case VolumeUnit.PetacubicFoot: return (baseUnitValue/0.0283168) / 1e15d;
                case VolumeUnit.PetacubicMeter: return (baseUnitValue) / 1e15d;
                case VolumeUnit.Petaliter: return (baseUnitValue*1e3) / 1e15d;
                case VolumeUnit.PicocubicFoot: return (baseUnitValue/0.0283168) / 1e-12d;
                case VolumeUnit.PicocubicMeter: return (baseUnitValue) / 1e-12d;
                case VolumeUnit.Picoliter: return (baseUnitValue*1e3) / 1e-12d;
                case VolumeUnit.QutracubicFoot: return (baseUnitValue/0.0283168) / 1e27d;
                case VolumeUnit.QutracubicMeter: return (baseUnitValue) / 1e27d;
                case VolumeUnit.Qutraliter: return (baseUnitValue*1e3) / 1e27d;
                case VolumeUnit.TeracubicFoot: return (baseUnitValue/0.0283168) / 1e12d;
                case VolumeUnit.TeracubicMeter: return (baseUnitValue) / 1e12d;
                case VolumeUnit.Teraliter: return (baseUnitValue*1e3) / 1e12d;
                case VolumeUnit.UkTablespoon: return baseUnitValue/1.5e-5;
                case VolumeUnit.UsBeerBarrel: return baseUnitValue/0.1173477658;
                case VolumeUnit.UsCustomaryCup: return baseUnitValue/0.0002365882365;
                case VolumeUnit.UsGallon: return baseUnitValue/0.00378541;
                case VolumeUnit.UsLegalCup: return baseUnitValue/0.00024;
                case VolumeUnit.UsOunce: return baseUnitValue/2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return baseUnitValue/4.73176473e-4;
                case VolumeUnit.UsQuart: return baseUnitValue/9.46352946e-4;
                case VolumeUnit.UsTablespoon: return baseUnitValue/1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return baseUnitValue/4.92892159375e-6;
                case VolumeUnit.VettacubicFoot: return (baseUnitValue/0.0283168) / 1e30d;
                case VolumeUnit.VettacubicMeter: return (baseUnitValue) / 1e30d;
                case VolumeUnit.Vettaliter: return (baseUnitValue*1e3) / 1e30d;
                case VolumeUnit.YottacubicFoot: return (baseUnitValue/0.0283168) / 1e24d;
                case VolumeUnit.YottacubicMeter: return (baseUnitValue) / 1e24d;
                case VolumeUnit.Yottaliter: return (baseUnitValue*1e3) / 1e24d;
                case VolumeUnit.ZettacubicFoot: return (baseUnitValue/0.0283168) / 1e21d;
                case VolumeUnit.ZettacubicMeter: return (baseUnitValue) / 1e21d;
                case VolumeUnit.Zettaliter: return (baseUnitValue*1e3) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<VolumeUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Volume)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Volume)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Volume)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Volume))
                return this;
            else if(conversionType == typeof(VolumeUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Volume.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Volume.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Volume)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
