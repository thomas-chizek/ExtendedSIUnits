//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The SpecificEnergy
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Specific_energy
    /// </remarks>
    public partial class SpecificEnergy : IQuantity<SpecificEnergyUnit>, IEquatable<SpecificEnergy>, IComparable, IComparable<SpecificEnergy>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificEnergyUnit? _unit;

        static SpecificEnergy()
        {
            BaseDimensions = new BaseDimensions(2, 0, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<SpecificEnergyUnit>(QuantityType.SpecificEnergy,
                new UnitInfo<SpecificEnergyUnit>[] {
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.BtuPerPound, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.CaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.CenticaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.CentijoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.CentiwattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.DecacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.DecajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.DecawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.DecicaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.DecijoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.DeciwattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.ExacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.ExajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.ExawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.FemtocaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.FemtojoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.FemtowattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.GigacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.GigajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.GigawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.HectocaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.HectojoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.HectowattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.JoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.KilocaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.KilojoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.KilowattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MegacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MegajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MegawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MicrocaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MicrojoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MicrowattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MillicaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MillijoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.MilliwattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.NanocaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.NanojoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.NanowattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.PetacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.PetajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.PetawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.PicocaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.PicojoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.PicowattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.QutracaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.QutrajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.QutrawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.TeracaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.TerajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.TerawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.VettacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.VettajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.VettawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.WattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.YottacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.YottajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.YottawattHourPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.ZettacaloriePerGram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.ZettajoulePerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificEnergyUnit>(SpecificEnergyUnit.ZettawattHourPerKilogram, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificEnergy(double numericValue, SpecificEnergyUnit unit)
        {
            if(unit == SpecificEnergyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public SpecificEnergy(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<SpecificEnergyUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificEnergy, which is JoulePerKilogram. All conversions go via this value.
        /// </summary>
        public static SpecificEnergyUnit BaseUnit { get; } = SpecificEnergyUnit.JoulePerKilogram;

        /// <summary>
        /// Represents the largest possible value of SpecificEnergy
        /// </summary>
        public static SpecificEnergy MaxValue { get; } = new SpecificEnergy(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificEnergy
        /// </summary>
        public static SpecificEnergy MinValue { get; } = new SpecificEnergy(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.SpecificEnergy;

        /// <summary>
        ///     All units of measurement for the SpecificEnergy quantity.
        /// </summary>
        public static SpecificEnergyUnit[] Units { get; } = Enum.GetValues(typeof(SpecificEnergyUnit)).Cast<SpecificEnergyUnit>().Except(new SpecificEnergyUnit[]{ SpecificEnergyUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogram.
        /// </summary>
        public static SpecificEnergy Zero { get; } = new SpecificEnergy(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public SpecificEnergyUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<SpecificEnergyUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificEnergy.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificEnergy.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificEnergy in BtuPerPound.
        /// </summary>
        public double BtuPerPound => As(SpecificEnergyUnit.BtuPerPound);

        /// <summary>
        ///     Get SpecificEnergy in CaloriesPerGram.
        /// </summary>
        public double CaloriesPerGram => As(SpecificEnergyUnit.CaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in CenticaloriesPerGram.
        /// </summary>
        public double CenticaloriesPerGram => As(SpecificEnergyUnit.CenticaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in CentijoulesPerKilogram.
        /// </summary>
        public double CentijoulesPerKilogram => As(SpecificEnergyUnit.CentijoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in CentiwattHoursPerKilogram.
        /// </summary>
        public double CentiwattHoursPerKilogram => As(SpecificEnergyUnit.CentiwattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in DecacaloriesPerGram.
        /// </summary>
        public double DecacaloriesPerGram => As(SpecificEnergyUnit.DecacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in DecajoulesPerKilogram.
        /// </summary>
        public double DecajoulesPerKilogram => As(SpecificEnergyUnit.DecajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in DecawattHoursPerKilogram.
        /// </summary>
        public double DecawattHoursPerKilogram => As(SpecificEnergyUnit.DecawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in DecicaloriesPerGram.
        /// </summary>
        public double DecicaloriesPerGram => As(SpecificEnergyUnit.DecicaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in DecijoulesPerKilogram.
        /// </summary>
        public double DecijoulesPerKilogram => As(SpecificEnergyUnit.DecijoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in DeciwattHoursPerKilogram.
        /// </summary>
        public double DeciwattHoursPerKilogram => As(SpecificEnergyUnit.DeciwattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in ExacaloriesPerGram.
        /// </summary>
        public double ExacaloriesPerGram => As(SpecificEnergyUnit.ExacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in ExajoulesPerKilogram.
        /// </summary>
        public double ExajoulesPerKilogram => As(SpecificEnergyUnit.ExajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in ExawattHoursPerKilogram.
        /// </summary>
        public double ExawattHoursPerKilogram => As(SpecificEnergyUnit.ExawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in FemtocaloriesPerGram.
        /// </summary>
        public double FemtocaloriesPerGram => As(SpecificEnergyUnit.FemtocaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in FemtojoulesPerKilogram.
        /// </summary>
        public double FemtojoulesPerKilogram => As(SpecificEnergyUnit.FemtojoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in FemtowattHoursPerKilogram.
        /// </summary>
        public double FemtowattHoursPerKilogram => As(SpecificEnergyUnit.FemtowattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in GigacaloriesPerGram.
        /// </summary>
        public double GigacaloriesPerGram => As(SpecificEnergyUnit.GigacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in GigajoulesPerKilogram.
        /// </summary>
        public double GigajoulesPerKilogram => As(SpecificEnergyUnit.GigajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in GigawattHoursPerKilogram.
        /// </summary>
        public double GigawattHoursPerKilogram => As(SpecificEnergyUnit.GigawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in HectocaloriesPerGram.
        /// </summary>
        public double HectocaloriesPerGram => As(SpecificEnergyUnit.HectocaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in HectojoulesPerKilogram.
        /// </summary>
        public double HectojoulesPerKilogram => As(SpecificEnergyUnit.HectojoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in HectowattHoursPerKilogram.
        /// </summary>
        public double HectowattHoursPerKilogram => As(SpecificEnergyUnit.HectowattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in JoulesPerKilogram.
        /// </summary>
        public double JoulesPerKilogram => As(SpecificEnergyUnit.JoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in KilocaloriesPerGram.
        /// </summary>
        public double KilocaloriesPerGram => As(SpecificEnergyUnit.KilocaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in KilojoulesPerKilogram.
        /// </summary>
        public double KilojoulesPerKilogram => As(SpecificEnergyUnit.KilojoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in KilowattHoursPerKilogram.
        /// </summary>
        public double KilowattHoursPerKilogram => As(SpecificEnergyUnit.KilowattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in MegacaloriesPerGram.
        /// </summary>
        public double MegacaloriesPerGram => As(SpecificEnergyUnit.MegacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in MegajoulesPerKilogram.
        /// </summary>
        public double MegajoulesPerKilogram => As(SpecificEnergyUnit.MegajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in MegawattHoursPerKilogram.
        /// </summary>
        public double MegawattHoursPerKilogram => As(SpecificEnergyUnit.MegawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in MicrocaloriesPerGram.
        /// </summary>
        public double MicrocaloriesPerGram => As(SpecificEnergyUnit.MicrocaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in MicrojoulesPerKilogram.
        /// </summary>
        public double MicrojoulesPerKilogram => As(SpecificEnergyUnit.MicrojoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in MicrowattHoursPerKilogram.
        /// </summary>
        public double MicrowattHoursPerKilogram => As(SpecificEnergyUnit.MicrowattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in MillicaloriesPerGram.
        /// </summary>
        public double MillicaloriesPerGram => As(SpecificEnergyUnit.MillicaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in MillijoulesPerKilogram.
        /// </summary>
        public double MillijoulesPerKilogram => As(SpecificEnergyUnit.MillijoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in MilliwattHoursPerKilogram.
        /// </summary>
        public double MilliwattHoursPerKilogram => As(SpecificEnergyUnit.MilliwattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in NanocaloriesPerGram.
        /// </summary>
        public double NanocaloriesPerGram => As(SpecificEnergyUnit.NanocaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in NanojoulesPerKilogram.
        /// </summary>
        public double NanojoulesPerKilogram => As(SpecificEnergyUnit.NanojoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in NanowattHoursPerKilogram.
        /// </summary>
        public double NanowattHoursPerKilogram => As(SpecificEnergyUnit.NanowattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in PetacaloriesPerGram.
        /// </summary>
        public double PetacaloriesPerGram => As(SpecificEnergyUnit.PetacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in PetajoulesPerKilogram.
        /// </summary>
        public double PetajoulesPerKilogram => As(SpecificEnergyUnit.PetajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in PetawattHoursPerKilogram.
        /// </summary>
        public double PetawattHoursPerKilogram => As(SpecificEnergyUnit.PetawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in PicocaloriesPerGram.
        /// </summary>
        public double PicocaloriesPerGram => As(SpecificEnergyUnit.PicocaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in PicojoulesPerKilogram.
        /// </summary>
        public double PicojoulesPerKilogram => As(SpecificEnergyUnit.PicojoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in PicowattHoursPerKilogram.
        /// </summary>
        public double PicowattHoursPerKilogram => As(SpecificEnergyUnit.PicowattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in QutracaloriesPerGram.
        /// </summary>
        public double QutracaloriesPerGram => As(SpecificEnergyUnit.QutracaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in QutrajoulesPerKilogram.
        /// </summary>
        public double QutrajoulesPerKilogram => As(SpecificEnergyUnit.QutrajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in QutrawattHoursPerKilogram.
        /// </summary>
        public double QutrawattHoursPerKilogram => As(SpecificEnergyUnit.QutrawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in TeracaloriesPerGram.
        /// </summary>
        public double TeracaloriesPerGram => As(SpecificEnergyUnit.TeracaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in TerajoulesPerKilogram.
        /// </summary>
        public double TerajoulesPerKilogram => As(SpecificEnergyUnit.TerajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in TerawattHoursPerKilogram.
        /// </summary>
        public double TerawattHoursPerKilogram => As(SpecificEnergyUnit.TerawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in VettacaloriesPerGram.
        /// </summary>
        public double VettacaloriesPerGram => As(SpecificEnergyUnit.VettacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in VettajoulesPerKilogram.
        /// </summary>
        public double VettajoulesPerKilogram => As(SpecificEnergyUnit.VettajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in VettawattHoursPerKilogram.
        /// </summary>
        public double VettawattHoursPerKilogram => As(SpecificEnergyUnit.VettawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in WattHoursPerKilogram.
        /// </summary>
        public double WattHoursPerKilogram => As(SpecificEnergyUnit.WattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in YottacaloriesPerGram.
        /// </summary>
        public double YottacaloriesPerGram => As(SpecificEnergyUnit.YottacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in YottajoulesPerKilogram.
        /// </summary>
        public double YottajoulesPerKilogram => As(SpecificEnergyUnit.YottajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in YottawattHoursPerKilogram.
        /// </summary>
        public double YottawattHoursPerKilogram => As(SpecificEnergyUnit.YottawattHourPerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in ZettacaloriesPerGram.
        /// </summary>
        public double ZettacaloriesPerGram => As(SpecificEnergyUnit.ZettacaloriePerGram);

        /// <summary>
        ///     Get SpecificEnergy in ZettajoulesPerKilogram.
        /// </summary>
        public double ZettajoulesPerKilogram => As(SpecificEnergyUnit.ZettajoulePerKilogram);

        /// <summary>
        ///     Get SpecificEnergy in ZettawattHoursPerKilogram.
        /// </summary>
        public double ZettawattHoursPerKilogram => As(SpecificEnergyUnit.ZettawattHourPerKilogram);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificEnergyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(SpecificEnergyUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificEnergy from BtuPerPound.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromBtuPerPound(QuantityValue btuperpound)
        {
            double value = (double) btuperpound;
            return new SpecificEnergy(value, SpecificEnergyUnit.BtuPerPound);
        }
        /// <summary>
        ///     Get SpecificEnergy from CaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromCaloriesPerGram(QuantityValue caloriespergram)
        {
            double value = (double) caloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.CaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from CenticaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromCenticaloriesPerGram(QuantityValue centicaloriespergram)
        {
            double value = (double) centicaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.CenticaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from CentijoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromCentijoulesPerKilogram(QuantityValue centijoulesperkilogram)
        {
            double value = (double) centijoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.CentijoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from CentiwattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromCentiwattHoursPerKilogram(QuantityValue centiwatthoursperkilogram)
        {
            double value = (double) centiwatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.CentiwattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from DecacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromDecacaloriesPerGram(QuantityValue decacaloriespergram)
        {
            double value = (double) decacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.DecacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from DecajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromDecajoulesPerKilogram(QuantityValue decajoulesperkilogram)
        {
            double value = (double) decajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.DecajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from DecawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromDecawattHoursPerKilogram(QuantityValue decawatthoursperkilogram)
        {
            double value = (double) decawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.DecawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from DecicaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromDecicaloriesPerGram(QuantityValue decicaloriespergram)
        {
            double value = (double) decicaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.DecicaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from DecijoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromDecijoulesPerKilogram(QuantityValue decijoulesperkilogram)
        {
            double value = (double) decijoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.DecijoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from DeciwattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromDeciwattHoursPerKilogram(QuantityValue deciwatthoursperkilogram)
        {
            double value = (double) deciwatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.DeciwattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from ExacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromExacaloriesPerGram(QuantityValue exacaloriespergram)
        {
            double value = (double) exacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.ExacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from ExajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromExajoulesPerKilogram(QuantityValue exajoulesperkilogram)
        {
            double value = (double) exajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.ExajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from ExawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromExawattHoursPerKilogram(QuantityValue exawatthoursperkilogram)
        {
            double value = (double) exawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.ExawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from FemtocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromFemtocaloriesPerGram(QuantityValue femtocaloriespergram)
        {
            double value = (double) femtocaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.FemtocaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from FemtojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromFemtojoulesPerKilogram(QuantityValue femtojoulesperkilogram)
        {
            double value = (double) femtojoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.FemtojoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from FemtowattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromFemtowattHoursPerKilogram(QuantityValue femtowatthoursperkilogram)
        {
            double value = (double) femtowatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.FemtowattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from GigacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromGigacaloriesPerGram(QuantityValue gigacaloriespergram)
        {
            double value = (double) gigacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from GigajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromGigajoulesPerKilogram(QuantityValue gigajoulesperkilogram)
        {
            double value = (double) gigajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from GigawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromGigawattHoursPerKilogram(QuantityValue gigawatthoursperkilogram)
        {
            double value = (double) gigawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from HectocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromHectocaloriesPerGram(QuantityValue hectocaloriespergram)
        {
            double value = (double) hectocaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.HectocaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from HectojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromHectojoulesPerKilogram(QuantityValue hectojoulesperkilogram)
        {
            double value = (double) hectojoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.HectojoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from HectowattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromHectowattHoursPerKilogram(QuantityValue hectowatthoursperkilogram)
        {
            double value = (double) hectowatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.HectowattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from JoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromJoulesPerKilogram(QuantityValue joulesperkilogram)
        {
            double value = (double) joulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.JoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from KilocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromKilocaloriesPerGram(QuantityValue kilocaloriespergram)
        {
            double value = (double) kilocaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilocaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from KilojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromKilojoulesPerKilogram(QuantityValue kilojoulesperkilogram)
        {
            double value = (double) kilojoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilojoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from KilowattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromKilowattHoursPerKilogram(QuantityValue kilowatthoursperkilogram)
        {
            double value = (double) kilowatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilowattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MegacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMegacaloriesPerGram(QuantityValue megacaloriespergram)
        {
            double value = (double) megacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MegajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMegajoulesPerKilogram(QuantityValue megajoulesperkilogram)
        {
            double value = (double) megajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MegawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMegawattHoursPerKilogram(QuantityValue megawatthoursperkilogram)
        {
            double value = (double) megawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MicrocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMicrocaloriesPerGram(QuantityValue microcaloriespergram)
        {
            double value = (double) microcaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MicrocaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MicrojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMicrojoulesPerKilogram(QuantityValue microjoulesperkilogram)
        {
            double value = (double) microjoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MicrojoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MicrowattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMicrowattHoursPerKilogram(QuantityValue microwatthoursperkilogram)
        {
            double value = (double) microwatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MicrowattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MillicaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMillicaloriesPerGram(QuantityValue millicaloriespergram)
        {
            double value = (double) millicaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MillicaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MillijoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMillijoulesPerKilogram(QuantityValue millijoulesperkilogram)
        {
            double value = (double) millijoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MillijoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from MilliwattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromMilliwattHoursPerKilogram(QuantityValue milliwatthoursperkilogram)
        {
            double value = (double) milliwatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MilliwattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from NanocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromNanocaloriesPerGram(QuantityValue nanocaloriespergram)
        {
            double value = (double) nanocaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.NanocaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from NanojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromNanojoulesPerKilogram(QuantityValue nanojoulesperkilogram)
        {
            double value = (double) nanojoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.NanojoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from NanowattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromNanowattHoursPerKilogram(QuantityValue nanowatthoursperkilogram)
        {
            double value = (double) nanowatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.NanowattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from PetacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromPetacaloriesPerGram(QuantityValue petacaloriespergram)
        {
            double value = (double) petacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.PetacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from PetajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromPetajoulesPerKilogram(QuantityValue petajoulesperkilogram)
        {
            double value = (double) petajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.PetajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from PetawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromPetawattHoursPerKilogram(QuantityValue petawatthoursperkilogram)
        {
            double value = (double) petawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.PetawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from PicocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromPicocaloriesPerGram(QuantityValue picocaloriespergram)
        {
            double value = (double) picocaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.PicocaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from PicojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromPicojoulesPerKilogram(QuantityValue picojoulesperkilogram)
        {
            double value = (double) picojoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.PicojoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from PicowattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromPicowattHoursPerKilogram(QuantityValue picowatthoursperkilogram)
        {
            double value = (double) picowatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.PicowattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from QutracaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromQutracaloriesPerGram(QuantityValue qutracaloriespergram)
        {
            double value = (double) qutracaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.QutracaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from QutrajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromQutrajoulesPerKilogram(QuantityValue qutrajoulesperkilogram)
        {
            double value = (double) qutrajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.QutrajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from QutrawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromQutrawattHoursPerKilogram(QuantityValue qutrawatthoursperkilogram)
        {
            double value = (double) qutrawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.QutrawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from TeracaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromTeracaloriesPerGram(QuantityValue teracaloriespergram)
        {
            double value = (double) teracaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.TeracaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from TerajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromTerajoulesPerKilogram(QuantityValue terajoulesperkilogram)
        {
            double value = (double) terajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.TerajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from TerawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromTerawattHoursPerKilogram(QuantityValue terawatthoursperkilogram)
        {
            double value = (double) terawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.TerawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from VettacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromVettacaloriesPerGram(QuantityValue vettacaloriespergram)
        {
            double value = (double) vettacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.VettacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from VettajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromVettajoulesPerKilogram(QuantityValue vettajoulesperkilogram)
        {
            double value = (double) vettajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.VettajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from VettawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromVettawattHoursPerKilogram(QuantityValue vettawatthoursperkilogram)
        {
            double value = (double) vettawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.VettawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from WattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromWattHoursPerKilogram(QuantityValue watthoursperkilogram)
        {
            double value = (double) watthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.WattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from YottacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromYottacaloriesPerGram(QuantityValue yottacaloriespergram)
        {
            double value = (double) yottacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.YottacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from YottajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromYottajoulesPerKilogram(QuantityValue yottajoulesperkilogram)
        {
            double value = (double) yottajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.YottajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from YottawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromYottawattHoursPerKilogram(QuantityValue yottawatthoursperkilogram)
        {
            double value = (double) yottawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.YottawattHourPerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from ZettacaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromZettacaloriesPerGram(QuantityValue zettacaloriespergram)
        {
            double value = (double) zettacaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.ZettacaloriePerGram);
        }
        /// <summary>
        ///     Get SpecificEnergy from ZettajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromZettajoulesPerKilogram(QuantityValue zettajoulesperkilogram)
        {
            double value = (double) zettajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.ZettajoulePerKilogram);
        }
        /// <summary>
        ///     Get SpecificEnergy from ZettawattHoursPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEnergy FromZettawattHoursPerKilogram(QuantityValue zettawatthoursperkilogram)
        {
            double value = (double) zettawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.ZettawattHourPerKilogram);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificEnergyUnit" /> to <see cref="SpecificEnergy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificEnergy unit value.</returns>
        public static SpecificEnergy From(QuantityValue value, SpecificEnergyUnit fromUnit)
        {
            return new SpecificEnergy((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificEnergy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificEnergy Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<SpecificEnergy, SpecificEnergyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificEnergy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out SpecificEnergy result)
        {
            return QuantityParser.Default.TryParse<SpecificEnergy, SpecificEnergyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificEnergyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificEnergyUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<SpecificEnergyUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.SpecificEnergyUnit)"/>
        public static bool TryParseUnit(string str, out SpecificEnergyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out SpecificEnergyUnit unit)
        {
            return UnitParser.Default.TryParse<SpecificEnergyUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static SpecificEnergy operator -(SpecificEnergy right)
        {
            return new SpecificEnergy(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from adding two <see cref="SpecificEnergy"/>.</summary>
        public static SpecificEnergy operator +(SpecificEnergy left, SpecificEnergy right)
        {
            return new SpecificEnergy(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from subtracting two <see cref="SpecificEnergy"/>.</summary>
        public static SpecificEnergy operator -(SpecificEnergy left, SpecificEnergy right)
        {
            return new SpecificEnergy(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from multiplying value and <see cref="SpecificEnergy"/>.</summary>
        public static SpecificEnergy operator *(double left, SpecificEnergy right)
        {
            return new SpecificEnergy(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from multiplying value and <see cref="SpecificEnergy"/>.</summary>
        public static SpecificEnergy operator *(SpecificEnergy left, double right)
        {
            return new SpecificEnergy(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from dividing <see cref="SpecificEnergy"/> by value.</summary>
        public static SpecificEnergy operator /(SpecificEnergy left, double right)
        {
            return new SpecificEnergy(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="SpecificEnergy"/> by <see cref="SpecificEnergy"/>.</summary>
        public static double operator /(SpecificEnergy left, SpecificEnergy right)
        {
            return left.JoulesPerKilogram / right.JoulesPerKilogram;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(SpecificEnergy left, SpecificEnergy right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(SpecificEnergy left, SpecificEnergy right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(SpecificEnergy left, SpecificEnergy right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(SpecificEnergy left, SpecificEnergy right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificEnergy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(SpecificEnergy left, SpecificEnergy right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificEnergy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(SpecificEnergy left, SpecificEnergy right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificEnergy objSpecificEnergy)) throw new ArgumentException("Expected type SpecificEnergy.", nameof(obj));

            return CompareTo(objSpecificEnergy);
        }

        /// <inheritdoc />
        public int CompareTo(SpecificEnergy other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificEnergy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificEnergy objSpecificEnergy))
                return false;

            return Equals(objSpecificEnergy);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificEnergy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(SpecificEnergy other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificEnergy within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificEnergy other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificEnergy.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificEnergyUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            if (firstUnitInfo is null)
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
                if (firstUnitInfo is null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }
            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is SpecificEnergyUnit unitAsSpecificEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificEnergyUnit)} is supported.", nameof(unit));

            return As(unitAsSpecificEnergyUnit);
        }

        /// <summary>
        ///     Converts this SpecificEnergy to another SpecificEnergy with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificEnergy with the specified unit.</returns>
        public SpecificEnergy ToUnit(SpecificEnergyUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new SpecificEnergy(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is SpecificEnergyUnit unitAsSpecificEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificEnergyUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsSpecificEnergyUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public SpecificEnergy ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<SpecificEnergyUnit> IQuantity<SpecificEnergyUnit>.ToUnit(SpecificEnergyUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<SpecificEnergyUnit> IQuantity<SpecificEnergyUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificEnergyUnit.BtuPerPound: return _value*2326.000075362;
                case SpecificEnergyUnit.CaloriePerGram: return _value*4.184e3;
                case SpecificEnergyUnit.CenticaloriePerGram: return (_value*4.184e3) * 1e-2d;
                case SpecificEnergyUnit.CentijoulePerKilogram: return (_value) * 1e-2d;
                case SpecificEnergyUnit.CentiwattHourPerKilogram: return (_value*3.6e3) * 1e-2d;
                case SpecificEnergyUnit.DecacaloriePerGram: return (_value*4.184e3) * 1e1d;
                case SpecificEnergyUnit.DecajoulePerKilogram: return (_value) * 1e1d;
                case SpecificEnergyUnit.DecawattHourPerKilogram: return (_value*3.6e3) * 1e1d;
                case SpecificEnergyUnit.DecicaloriePerGram: return (_value*4.184e3) * 1e-1d;
                case SpecificEnergyUnit.DecijoulePerKilogram: return (_value) * 1e-1d;
                case SpecificEnergyUnit.DeciwattHourPerKilogram: return (_value*3.6e3) * 1e-1d;
                case SpecificEnergyUnit.ExacaloriePerGram: return (_value*4.184e3) * 1e18d;
                case SpecificEnergyUnit.ExajoulePerKilogram: return (_value) * 1e18d;
                case SpecificEnergyUnit.ExawattHourPerKilogram: return (_value*3.6e3) * 1e18d;
                case SpecificEnergyUnit.FemtocaloriePerGram: return (_value*4.184e3) * 1e-15d;
                case SpecificEnergyUnit.FemtojoulePerKilogram: return (_value) * 1e-15d;
                case SpecificEnergyUnit.FemtowattHourPerKilogram: return (_value*3.6e3) * 1e-15d;
                case SpecificEnergyUnit.GigacaloriePerGram: return (_value*4.184e3) * 1e9d;
                case SpecificEnergyUnit.GigajoulePerKilogram: return (_value) * 1e9d;
                case SpecificEnergyUnit.GigawattHourPerKilogram: return (_value*3.6e3) * 1e9d;
                case SpecificEnergyUnit.HectocaloriePerGram: return (_value*4.184e3) * 1e2d;
                case SpecificEnergyUnit.HectojoulePerKilogram: return (_value) * 1e2d;
                case SpecificEnergyUnit.HectowattHourPerKilogram: return (_value*3.6e3) * 1e2d;
                case SpecificEnergyUnit.JoulePerKilogram: return _value;
                case SpecificEnergyUnit.KilocaloriePerGram: return (_value*4.184e3) * 1e3d;
                case SpecificEnergyUnit.KilojoulePerKilogram: return (_value) * 1e3d;
                case SpecificEnergyUnit.KilowattHourPerKilogram: return (_value*3.6e3) * 1e3d;
                case SpecificEnergyUnit.MegacaloriePerGram: return (_value*4.184e3) * 1e6d;
                case SpecificEnergyUnit.MegajoulePerKilogram: return (_value) * 1e6d;
                case SpecificEnergyUnit.MegawattHourPerKilogram: return (_value*3.6e3) * 1e6d;
                case SpecificEnergyUnit.MicrocaloriePerGram: return (_value*4.184e3) * 1e-6d;
                case SpecificEnergyUnit.MicrojoulePerKilogram: return (_value) * 1e-6d;
                case SpecificEnergyUnit.MicrowattHourPerKilogram: return (_value*3.6e3) * 1e-6d;
                case SpecificEnergyUnit.MillicaloriePerGram: return (_value*4.184e3) * 1e-3d;
                case SpecificEnergyUnit.MillijoulePerKilogram: return (_value) * 1e-3d;
                case SpecificEnergyUnit.MilliwattHourPerKilogram: return (_value*3.6e3) * 1e-3d;
                case SpecificEnergyUnit.NanocaloriePerGram: return (_value*4.184e3) * 1e-9d;
                case SpecificEnergyUnit.NanojoulePerKilogram: return (_value) * 1e-9d;
                case SpecificEnergyUnit.NanowattHourPerKilogram: return (_value*3.6e3) * 1e-9d;
                case SpecificEnergyUnit.PetacaloriePerGram: return (_value*4.184e3) * 1e15d;
                case SpecificEnergyUnit.PetajoulePerKilogram: return (_value) * 1e15d;
                case SpecificEnergyUnit.PetawattHourPerKilogram: return (_value*3.6e3) * 1e15d;
                case SpecificEnergyUnit.PicocaloriePerGram: return (_value*4.184e3) * 1e-12d;
                case SpecificEnergyUnit.PicojoulePerKilogram: return (_value) * 1e-12d;
                case SpecificEnergyUnit.PicowattHourPerKilogram: return (_value*3.6e3) * 1e-12d;
                case SpecificEnergyUnit.QutracaloriePerGram: return (_value*4.184e3) * 1e27d;
                case SpecificEnergyUnit.QutrajoulePerKilogram: return (_value) * 1e27d;
                case SpecificEnergyUnit.QutrawattHourPerKilogram: return (_value*3.6e3) * 1e27d;
                case SpecificEnergyUnit.TeracaloriePerGram: return (_value*4.184e3) * 1e12d;
                case SpecificEnergyUnit.TerajoulePerKilogram: return (_value) * 1e12d;
                case SpecificEnergyUnit.TerawattHourPerKilogram: return (_value*3.6e3) * 1e12d;
                case SpecificEnergyUnit.VettacaloriePerGram: return (_value*4.184e3) * 1e30d;
                case SpecificEnergyUnit.VettajoulePerKilogram: return (_value) * 1e30d;
                case SpecificEnergyUnit.VettawattHourPerKilogram: return (_value*3.6e3) * 1e30d;
                case SpecificEnergyUnit.WattHourPerKilogram: return _value*3.6e3;
                case SpecificEnergyUnit.YottacaloriePerGram: return (_value*4.184e3) * 1e24d;
                case SpecificEnergyUnit.YottajoulePerKilogram: return (_value) * 1e24d;
                case SpecificEnergyUnit.YottawattHourPerKilogram: return (_value*3.6e3) * 1e24d;
                case SpecificEnergyUnit.ZettacaloriePerGram: return (_value*4.184e3) * 1e21d;
                case SpecificEnergyUnit.ZettajoulePerKilogram: return (_value) * 1e21d;
                case SpecificEnergyUnit.ZettawattHourPerKilogram: return (_value*3.6e3) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificEnergyUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificEnergyUnit.BtuPerPound: return baseUnitValue/2326.000075362;
                case SpecificEnergyUnit.CaloriePerGram: return baseUnitValue/4.184e3;
                case SpecificEnergyUnit.CenticaloriePerGram: return (baseUnitValue/4.184e3) / 1e-2d;
                case SpecificEnergyUnit.CentijoulePerKilogram: return (baseUnitValue) / 1e-2d;
                case SpecificEnergyUnit.CentiwattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-2d;
                case SpecificEnergyUnit.DecacaloriePerGram: return (baseUnitValue/4.184e3) / 1e1d;
                case SpecificEnergyUnit.DecajoulePerKilogram: return (baseUnitValue) / 1e1d;
                case SpecificEnergyUnit.DecawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e1d;
                case SpecificEnergyUnit.DecicaloriePerGram: return (baseUnitValue/4.184e3) / 1e-1d;
                case SpecificEnergyUnit.DecijoulePerKilogram: return (baseUnitValue) / 1e-1d;
                case SpecificEnergyUnit.DeciwattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-1d;
                case SpecificEnergyUnit.ExacaloriePerGram: return (baseUnitValue/4.184e3) / 1e18d;
                case SpecificEnergyUnit.ExajoulePerKilogram: return (baseUnitValue) / 1e18d;
                case SpecificEnergyUnit.ExawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e18d;
                case SpecificEnergyUnit.FemtocaloriePerGram: return (baseUnitValue/4.184e3) / 1e-15d;
                case SpecificEnergyUnit.FemtojoulePerKilogram: return (baseUnitValue) / 1e-15d;
                case SpecificEnergyUnit.FemtowattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-15d;
                case SpecificEnergyUnit.GigacaloriePerGram: return (baseUnitValue/4.184e3) / 1e9d;
                case SpecificEnergyUnit.GigajoulePerKilogram: return (baseUnitValue) / 1e9d;
                case SpecificEnergyUnit.GigawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e9d;
                case SpecificEnergyUnit.HectocaloriePerGram: return (baseUnitValue/4.184e3) / 1e2d;
                case SpecificEnergyUnit.HectojoulePerKilogram: return (baseUnitValue) / 1e2d;
                case SpecificEnergyUnit.HectowattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e2d;
                case SpecificEnergyUnit.JoulePerKilogram: return baseUnitValue;
                case SpecificEnergyUnit.KilocaloriePerGram: return (baseUnitValue/4.184e3) / 1e3d;
                case SpecificEnergyUnit.KilojoulePerKilogram: return (baseUnitValue) / 1e3d;
                case SpecificEnergyUnit.KilowattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e3d;
                case SpecificEnergyUnit.MegacaloriePerGram: return (baseUnitValue/4.184e3) / 1e6d;
                case SpecificEnergyUnit.MegajoulePerKilogram: return (baseUnitValue) / 1e6d;
                case SpecificEnergyUnit.MegawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e6d;
                case SpecificEnergyUnit.MicrocaloriePerGram: return (baseUnitValue/4.184e3) / 1e-6d;
                case SpecificEnergyUnit.MicrojoulePerKilogram: return (baseUnitValue) / 1e-6d;
                case SpecificEnergyUnit.MicrowattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-6d;
                case SpecificEnergyUnit.MillicaloriePerGram: return (baseUnitValue/4.184e3) / 1e-3d;
                case SpecificEnergyUnit.MillijoulePerKilogram: return (baseUnitValue) / 1e-3d;
                case SpecificEnergyUnit.MilliwattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-3d;
                case SpecificEnergyUnit.NanocaloriePerGram: return (baseUnitValue/4.184e3) / 1e-9d;
                case SpecificEnergyUnit.NanojoulePerKilogram: return (baseUnitValue) / 1e-9d;
                case SpecificEnergyUnit.NanowattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-9d;
                case SpecificEnergyUnit.PetacaloriePerGram: return (baseUnitValue/4.184e3) / 1e15d;
                case SpecificEnergyUnit.PetajoulePerKilogram: return (baseUnitValue) / 1e15d;
                case SpecificEnergyUnit.PetawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e15d;
                case SpecificEnergyUnit.PicocaloriePerGram: return (baseUnitValue/4.184e3) / 1e-12d;
                case SpecificEnergyUnit.PicojoulePerKilogram: return (baseUnitValue) / 1e-12d;
                case SpecificEnergyUnit.PicowattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e-12d;
                case SpecificEnergyUnit.QutracaloriePerGram: return (baseUnitValue/4.184e3) / 1e27d;
                case SpecificEnergyUnit.QutrajoulePerKilogram: return (baseUnitValue) / 1e27d;
                case SpecificEnergyUnit.QutrawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e27d;
                case SpecificEnergyUnit.TeracaloriePerGram: return (baseUnitValue/4.184e3) / 1e12d;
                case SpecificEnergyUnit.TerajoulePerKilogram: return (baseUnitValue) / 1e12d;
                case SpecificEnergyUnit.TerawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e12d;
                case SpecificEnergyUnit.VettacaloriePerGram: return (baseUnitValue/4.184e3) / 1e30d;
                case SpecificEnergyUnit.VettajoulePerKilogram: return (baseUnitValue) / 1e30d;
                case SpecificEnergyUnit.VettawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e30d;
                case SpecificEnergyUnit.WattHourPerKilogram: return baseUnitValue/3.6e3;
                case SpecificEnergyUnit.YottacaloriePerGram: return (baseUnitValue/4.184e3) / 1e24d;
                case SpecificEnergyUnit.YottajoulePerKilogram: return (baseUnitValue) / 1e24d;
                case SpecificEnergyUnit.YottawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e24d;
                case SpecificEnergyUnit.ZettacaloriePerGram: return (baseUnitValue/4.184e3) / 1e21d;
                case SpecificEnergyUnit.ZettajoulePerKilogram: return (baseUnitValue) / 1e21d;
                case SpecificEnergyUnit.ZettawattHourPerKilogram: return (baseUnitValue/3.6e3) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<SpecificEnergyUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificEnergy)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificEnergy)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificEnergy)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(SpecificEnergy))
                return this;
            else if(conversionType == typeof(SpecificEnergyUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return SpecificEnergy.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return SpecificEnergy.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(SpecificEnergy)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
