//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Irradiance is the intensity of ultraviolet (UV) or visible light incident on a surface.
    /// </summary>
    public partial class Irradiance : IQuantity<IrradianceUnit>, IEquatable<Irradiance>, IComparable, IComparable<Irradiance>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly IrradianceUnit? _unit;

        static Irradiance()
        {
            BaseDimensions = new BaseDimensions(0, 1, -3, 0, 0, 0, 0);

            Info = new QuantityInfo<IrradianceUnit>(QuantityType.Irradiance,
                new UnitInfo<IrradianceUnit>[] {
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.CentiwattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.CentiwattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.DecawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.DecawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.DeciwattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.DeciwattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.ExawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.ExawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.FemtowattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.FemtowattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.GigawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.GigawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.HectowattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.HectowattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.KilowattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.KilowattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.MegawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.MegawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.MicrowattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.MicrowattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.MilliwattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.MilliwattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.NanowattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.NanowattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.PetawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.PetawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.PicowattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.PicowattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.QutrawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.QutrawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.TerawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.TerawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.VettawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.VettawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.WattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.WattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.YottawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.YottawattPerSquareMeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.ZettawattPerSquareCentimeter, BaseUnits.Undefined),
                    new UnitInfo<IrradianceUnit>(IrradianceUnit.ZettawattPerSquareMeter, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Irradiance(double numericValue, IrradianceUnit unit)
        {
            if(unit == IrradianceUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Irradiance(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<IrradianceUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Irradiance, which is WattPerSquareMeter. All conversions go via this value.
        /// </summary>
        public static IrradianceUnit BaseUnit { get; } = IrradianceUnit.WattPerSquareMeter;

        /// <summary>
        /// Represents the largest possible value of Irradiance
        /// </summary>
        public static Irradiance MaxValue { get; } = new Irradiance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Irradiance
        /// </summary>
        public static Irradiance MinValue { get; } = new Irradiance(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Irradiance;

        /// <summary>
        ///     All units of measurement for the Irradiance quantity.
        /// </summary>
        public static IrradianceUnit[] Units { get; } = Enum.GetValues(typeof(IrradianceUnit)).Cast<IrradianceUnit>().Except(new IrradianceUnit[]{ IrradianceUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeter.
        /// </summary>
        public static Irradiance Zero { get; } = new Irradiance(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public IrradianceUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<IrradianceUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Irradiance.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Irradiance.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Irradiance in CentiwattsPerSquareCentimeter.
        /// </summary>
        public double CentiwattsPerSquareCentimeter => As(IrradianceUnit.CentiwattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in CentiwattsPerSquareMeter.
        /// </summary>
        public double CentiwattsPerSquareMeter => As(IrradianceUnit.CentiwattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in DecawattsPerSquareCentimeter.
        /// </summary>
        public double DecawattsPerSquareCentimeter => As(IrradianceUnit.DecawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in DecawattsPerSquareMeter.
        /// </summary>
        public double DecawattsPerSquareMeter => As(IrradianceUnit.DecawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in DeciwattsPerSquareCentimeter.
        /// </summary>
        public double DeciwattsPerSquareCentimeter => As(IrradianceUnit.DeciwattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in DeciwattsPerSquareMeter.
        /// </summary>
        public double DeciwattsPerSquareMeter => As(IrradianceUnit.DeciwattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in ExawattsPerSquareCentimeter.
        /// </summary>
        public double ExawattsPerSquareCentimeter => As(IrradianceUnit.ExawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in ExawattsPerSquareMeter.
        /// </summary>
        public double ExawattsPerSquareMeter => As(IrradianceUnit.ExawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in FemtowattsPerSquareCentimeter.
        /// </summary>
        public double FemtowattsPerSquareCentimeter => As(IrradianceUnit.FemtowattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in FemtowattsPerSquareMeter.
        /// </summary>
        public double FemtowattsPerSquareMeter => As(IrradianceUnit.FemtowattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in GigawattsPerSquareCentimeter.
        /// </summary>
        public double GigawattsPerSquareCentimeter => As(IrradianceUnit.GigawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in GigawattsPerSquareMeter.
        /// </summary>
        public double GigawattsPerSquareMeter => As(IrradianceUnit.GigawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in HectowattsPerSquareCentimeter.
        /// </summary>
        public double HectowattsPerSquareCentimeter => As(IrradianceUnit.HectowattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in HectowattsPerSquareMeter.
        /// </summary>
        public double HectowattsPerSquareMeter => As(IrradianceUnit.HectowattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in KilowattsPerSquareCentimeter.
        /// </summary>
        public double KilowattsPerSquareCentimeter => As(IrradianceUnit.KilowattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in KilowattsPerSquareMeter.
        /// </summary>
        public double KilowattsPerSquareMeter => As(IrradianceUnit.KilowattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in MegawattsPerSquareCentimeter.
        /// </summary>
        public double MegawattsPerSquareCentimeter => As(IrradianceUnit.MegawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in MegawattsPerSquareMeter.
        /// </summary>
        public double MegawattsPerSquareMeter => As(IrradianceUnit.MegawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in MicrowattsPerSquareCentimeter.
        /// </summary>
        public double MicrowattsPerSquareCentimeter => As(IrradianceUnit.MicrowattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in MicrowattsPerSquareMeter.
        /// </summary>
        public double MicrowattsPerSquareMeter => As(IrradianceUnit.MicrowattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in MilliwattsPerSquareCentimeter.
        /// </summary>
        public double MilliwattsPerSquareCentimeter => As(IrradianceUnit.MilliwattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in MilliwattsPerSquareMeter.
        /// </summary>
        public double MilliwattsPerSquareMeter => As(IrradianceUnit.MilliwattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in NanowattsPerSquareCentimeter.
        /// </summary>
        public double NanowattsPerSquareCentimeter => As(IrradianceUnit.NanowattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in NanowattsPerSquareMeter.
        /// </summary>
        public double NanowattsPerSquareMeter => As(IrradianceUnit.NanowattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in PetawattsPerSquareCentimeter.
        /// </summary>
        public double PetawattsPerSquareCentimeter => As(IrradianceUnit.PetawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in PetawattsPerSquareMeter.
        /// </summary>
        public double PetawattsPerSquareMeter => As(IrradianceUnit.PetawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in PicowattsPerSquareCentimeter.
        /// </summary>
        public double PicowattsPerSquareCentimeter => As(IrradianceUnit.PicowattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in PicowattsPerSquareMeter.
        /// </summary>
        public double PicowattsPerSquareMeter => As(IrradianceUnit.PicowattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in QutrawattsPerSquareCentimeter.
        /// </summary>
        public double QutrawattsPerSquareCentimeter => As(IrradianceUnit.QutrawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in QutrawattsPerSquareMeter.
        /// </summary>
        public double QutrawattsPerSquareMeter => As(IrradianceUnit.QutrawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in TerawattsPerSquareCentimeter.
        /// </summary>
        public double TerawattsPerSquareCentimeter => As(IrradianceUnit.TerawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in TerawattsPerSquareMeter.
        /// </summary>
        public double TerawattsPerSquareMeter => As(IrradianceUnit.TerawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in VettawattsPerSquareCentimeter.
        /// </summary>
        public double VettawattsPerSquareCentimeter => As(IrradianceUnit.VettawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in VettawattsPerSquareMeter.
        /// </summary>
        public double VettawattsPerSquareMeter => As(IrradianceUnit.VettawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in WattsPerSquareCentimeter.
        /// </summary>
        public double WattsPerSquareCentimeter => As(IrradianceUnit.WattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in WattsPerSquareMeter.
        /// </summary>
        public double WattsPerSquareMeter => As(IrradianceUnit.WattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in YottawattsPerSquareCentimeter.
        /// </summary>
        public double YottawattsPerSquareCentimeter => As(IrradianceUnit.YottawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in YottawattsPerSquareMeter.
        /// </summary>
        public double YottawattsPerSquareMeter => As(IrradianceUnit.YottawattPerSquareMeter);

        /// <summary>
        ///     Get Irradiance in ZettawattsPerSquareCentimeter.
        /// </summary>
        public double ZettawattsPerSquareCentimeter => As(IrradianceUnit.ZettawattPerSquareCentimeter);

        /// <summary>
        ///     Get Irradiance in ZettawattsPerSquareMeter.
        /// </summary>
        public double ZettawattsPerSquareMeter => As(IrradianceUnit.ZettawattPerSquareMeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(IrradianceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(IrradianceUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Irradiance from CentiwattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromCentiwattsPerSquareCentimeter(QuantityValue centiwattspersquarecentimeter)
        {
            double value = (double) centiwattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.CentiwattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from CentiwattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromCentiwattsPerSquareMeter(QuantityValue centiwattspersquaremeter)
        {
            double value = (double) centiwattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.CentiwattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from DecawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromDecawattsPerSquareCentimeter(QuantityValue decawattspersquarecentimeter)
        {
            double value = (double) decawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.DecawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from DecawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromDecawattsPerSquareMeter(QuantityValue decawattspersquaremeter)
        {
            double value = (double) decawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.DecawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from DeciwattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromDeciwattsPerSquareCentimeter(QuantityValue deciwattspersquarecentimeter)
        {
            double value = (double) deciwattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.DeciwattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from DeciwattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromDeciwattsPerSquareMeter(QuantityValue deciwattspersquaremeter)
        {
            double value = (double) deciwattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.DeciwattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from ExawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromExawattsPerSquareCentimeter(QuantityValue exawattspersquarecentimeter)
        {
            double value = (double) exawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.ExawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from ExawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromExawattsPerSquareMeter(QuantityValue exawattspersquaremeter)
        {
            double value = (double) exawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.ExawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from FemtowattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromFemtowattsPerSquareCentimeter(QuantityValue femtowattspersquarecentimeter)
        {
            double value = (double) femtowattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.FemtowattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from FemtowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromFemtowattsPerSquareMeter(QuantityValue femtowattspersquaremeter)
        {
            double value = (double) femtowattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.FemtowattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from GigawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromGigawattsPerSquareCentimeter(QuantityValue gigawattspersquarecentimeter)
        {
            double value = (double) gigawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.GigawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from GigawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromGigawattsPerSquareMeter(QuantityValue gigawattspersquaremeter)
        {
            double value = (double) gigawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.GigawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from HectowattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromHectowattsPerSquareCentimeter(QuantityValue hectowattspersquarecentimeter)
        {
            double value = (double) hectowattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.HectowattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from HectowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromHectowattsPerSquareMeter(QuantityValue hectowattspersquaremeter)
        {
            double value = (double) hectowattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.HectowattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from KilowattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromKilowattsPerSquareCentimeter(QuantityValue kilowattspersquarecentimeter)
        {
            double value = (double) kilowattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.KilowattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from KilowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromKilowattsPerSquareMeter(QuantityValue kilowattspersquaremeter)
        {
            double value = (double) kilowattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.KilowattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from MegawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromMegawattsPerSquareCentimeter(QuantityValue megawattspersquarecentimeter)
        {
            double value = (double) megawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.MegawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from MegawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromMegawattsPerSquareMeter(QuantityValue megawattspersquaremeter)
        {
            double value = (double) megawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.MegawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from MicrowattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromMicrowattsPerSquareCentimeter(QuantityValue microwattspersquarecentimeter)
        {
            double value = (double) microwattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.MicrowattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from MicrowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromMicrowattsPerSquareMeter(QuantityValue microwattspersquaremeter)
        {
            double value = (double) microwattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.MicrowattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from MilliwattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromMilliwattsPerSquareCentimeter(QuantityValue milliwattspersquarecentimeter)
        {
            double value = (double) milliwattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.MilliwattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from MilliwattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromMilliwattsPerSquareMeter(QuantityValue milliwattspersquaremeter)
        {
            double value = (double) milliwattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.MilliwattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from NanowattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromNanowattsPerSquareCentimeter(QuantityValue nanowattspersquarecentimeter)
        {
            double value = (double) nanowattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.NanowattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from NanowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromNanowattsPerSquareMeter(QuantityValue nanowattspersquaremeter)
        {
            double value = (double) nanowattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.NanowattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from PetawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromPetawattsPerSquareCentimeter(QuantityValue petawattspersquarecentimeter)
        {
            double value = (double) petawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.PetawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from PetawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromPetawattsPerSquareMeter(QuantityValue petawattspersquaremeter)
        {
            double value = (double) petawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.PetawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from PicowattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromPicowattsPerSquareCentimeter(QuantityValue picowattspersquarecentimeter)
        {
            double value = (double) picowattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.PicowattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from PicowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromPicowattsPerSquareMeter(QuantityValue picowattspersquaremeter)
        {
            double value = (double) picowattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.PicowattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from QutrawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromQutrawattsPerSquareCentimeter(QuantityValue qutrawattspersquarecentimeter)
        {
            double value = (double) qutrawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.QutrawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from QutrawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromQutrawattsPerSquareMeter(QuantityValue qutrawattspersquaremeter)
        {
            double value = (double) qutrawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.QutrawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from TerawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromTerawattsPerSquareCentimeter(QuantityValue terawattspersquarecentimeter)
        {
            double value = (double) terawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.TerawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from TerawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromTerawattsPerSquareMeter(QuantityValue terawattspersquaremeter)
        {
            double value = (double) terawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.TerawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from VettawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromVettawattsPerSquareCentimeter(QuantityValue vettawattspersquarecentimeter)
        {
            double value = (double) vettawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.VettawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from VettawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromVettawattsPerSquareMeter(QuantityValue vettawattspersquaremeter)
        {
            double value = (double) vettawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.VettawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from WattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromWattsPerSquareCentimeter(QuantityValue wattspersquarecentimeter)
        {
            double value = (double) wattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.WattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from WattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromWattsPerSquareMeter(QuantityValue wattspersquaremeter)
        {
            double value = (double) wattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.WattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from YottawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromYottawattsPerSquareCentimeter(QuantityValue yottawattspersquarecentimeter)
        {
            double value = (double) yottawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.YottawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from YottawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromYottawattsPerSquareMeter(QuantityValue yottawattspersquaremeter)
        {
            double value = (double) yottawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.YottawattPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiance from ZettawattsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromZettawattsPerSquareCentimeter(QuantityValue zettawattspersquarecentimeter)
        {
            double value = (double) zettawattspersquarecentimeter;
            return new Irradiance(value, IrradianceUnit.ZettawattPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiance from ZettawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Irradiance FromZettawattsPerSquareMeter(QuantityValue zettawattspersquaremeter)
        {
            double value = (double) zettawattspersquaremeter;
            return new Irradiance(value, IrradianceUnit.ZettawattPerSquareMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="IrradianceUnit" /> to <see cref="Irradiance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Irradiance unit value.</returns>
        public static Irradiance From(QuantityValue value, IrradianceUnit fromUnit)
        {
            return new Irradiance((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Irradiance Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Irradiance Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Irradiance, IrradianceUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Irradiance result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Irradiance result)
        {
            return QuantityParser.Default.TryParse<Irradiance, IrradianceUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static IrradianceUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static IrradianceUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<IrradianceUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.IrradianceUnit)"/>
        public static bool TryParseUnit(string str, out IrradianceUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out IrradianceUnit unit)
        {
            return UnitParser.Default.TryParse<IrradianceUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Irradiance operator -(Irradiance right)
        {
            return new Irradiance(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Irradiance"/> from adding two <see cref="Irradiance"/>.</summary>
        public static Irradiance operator +(Irradiance left, Irradiance right)
        {
            return new Irradiance(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Irradiance"/> from subtracting two <see cref="Irradiance"/>.</summary>
        public static Irradiance operator -(Irradiance left, Irradiance right)
        {
            return new Irradiance(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Irradiance"/> from multiplying value and <see cref="Irradiance"/>.</summary>
        public static Irradiance operator *(double left, Irradiance right)
        {
            return new Irradiance(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Irradiance"/> from multiplying value and <see cref="Irradiance"/>.</summary>
        public static Irradiance operator *(Irradiance left, double right)
        {
            return new Irradiance(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Irradiance"/> from dividing <see cref="Irradiance"/> by value.</summary>
        public static Irradiance operator /(Irradiance left, double right)
        {
            return new Irradiance(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Irradiance"/> by <see cref="Irradiance"/>.</summary>
        public static double operator /(Irradiance left, Irradiance right)
        {
            return left.WattsPerSquareMeter / right.WattsPerSquareMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Irradiance left, Irradiance right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Irradiance left, Irradiance right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Irradiance left, Irradiance right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Irradiance left, Irradiance right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Irradiance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Irradiance left, Irradiance right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Irradiance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Irradiance left, Irradiance right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Irradiance objIrradiance)) throw new ArgumentException("Expected type Irradiance.", nameof(obj));

            return CompareTo(objIrradiance);
        }

        /// <inheritdoc />
        public int CompareTo(Irradiance other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Irradiance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Irradiance objIrradiance))
                return false;

            return Equals(objIrradiance);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Irradiance, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Irradiance other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Irradiance within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Irradiance other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Irradiance.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(IrradianceUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            if (firstUnitInfo is null)
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
                if (firstUnitInfo is null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }
            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is IrradianceUnit unitAsIrradianceUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(IrradianceUnit)} is supported.", nameof(unit));

            return As(unitAsIrradianceUnit);
        }

        /// <summary>
        ///     Converts this Irradiance to another Irradiance with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Irradiance with the specified unit.</returns>
        public Irradiance ToUnit(IrradianceUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Irradiance(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is IrradianceUnit unitAsIrradianceUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(IrradianceUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsIrradianceUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Irradiance ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<IrradianceUnit> IQuantity<IrradianceUnit>.ToUnit(IrradianceUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<IrradianceUnit> IQuantity<IrradianceUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case IrradianceUnit.CentiwattPerSquareCentimeter: return (_value*10000) * 1e-2d;
                case IrradianceUnit.CentiwattPerSquareMeter: return (_value) * 1e-2d;
                case IrradianceUnit.DecawattPerSquareCentimeter: return (_value*10000) * 1e1d;
                case IrradianceUnit.DecawattPerSquareMeter: return (_value) * 1e1d;
                case IrradianceUnit.DeciwattPerSquareCentimeter: return (_value*10000) * 1e-1d;
                case IrradianceUnit.DeciwattPerSquareMeter: return (_value) * 1e-1d;
                case IrradianceUnit.ExawattPerSquareCentimeter: return (_value*10000) * 1e18d;
                case IrradianceUnit.ExawattPerSquareMeter: return (_value) * 1e18d;
                case IrradianceUnit.FemtowattPerSquareCentimeter: return (_value*10000) * 1e-15d;
                case IrradianceUnit.FemtowattPerSquareMeter: return (_value) * 1e-15d;
                case IrradianceUnit.GigawattPerSquareCentimeter: return (_value*10000) * 1e9d;
                case IrradianceUnit.GigawattPerSquareMeter: return (_value) * 1e9d;
                case IrradianceUnit.HectowattPerSquareCentimeter: return (_value*10000) * 1e2d;
                case IrradianceUnit.HectowattPerSquareMeter: return (_value) * 1e2d;
                case IrradianceUnit.KilowattPerSquareCentimeter: return (_value*10000) * 1e3d;
                case IrradianceUnit.KilowattPerSquareMeter: return (_value) * 1e3d;
                case IrradianceUnit.MegawattPerSquareCentimeter: return (_value*10000) * 1e6d;
                case IrradianceUnit.MegawattPerSquareMeter: return (_value) * 1e6d;
                case IrradianceUnit.MicrowattPerSquareCentimeter: return (_value*10000) * 1e-6d;
                case IrradianceUnit.MicrowattPerSquareMeter: return (_value) * 1e-6d;
                case IrradianceUnit.MilliwattPerSquareCentimeter: return (_value*10000) * 1e-3d;
                case IrradianceUnit.MilliwattPerSquareMeter: return (_value) * 1e-3d;
                case IrradianceUnit.NanowattPerSquareCentimeter: return (_value*10000) * 1e-9d;
                case IrradianceUnit.NanowattPerSquareMeter: return (_value) * 1e-9d;
                case IrradianceUnit.PetawattPerSquareCentimeter: return (_value*10000) * 1e15d;
                case IrradianceUnit.PetawattPerSquareMeter: return (_value) * 1e15d;
                case IrradianceUnit.PicowattPerSquareCentimeter: return (_value*10000) * 1e-12d;
                case IrradianceUnit.PicowattPerSquareMeter: return (_value) * 1e-12d;
                case IrradianceUnit.QutrawattPerSquareCentimeter: return (_value*10000) * 1e27d;
                case IrradianceUnit.QutrawattPerSquareMeter: return (_value) * 1e27d;
                case IrradianceUnit.TerawattPerSquareCentimeter: return (_value*10000) * 1e12d;
                case IrradianceUnit.TerawattPerSquareMeter: return (_value) * 1e12d;
                case IrradianceUnit.VettawattPerSquareCentimeter: return (_value*10000) * 1e30d;
                case IrradianceUnit.VettawattPerSquareMeter: return (_value) * 1e30d;
                case IrradianceUnit.WattPerSquareCentimeter: return _value*10000;
                case IrradianceUnit.WattPerSquareMeter: return _value;
                case IrradianceUnit.YottawattPerSquareCentimeter: return (_value*10000) * 1e24d;
                case IrradianceUnit.YottawattPerSquareMeter: return (_value) * 1e24d;
                case IrradianceUnit.ZettawattPerSquareCentimeter: return (_value*10000) * 1e21d;
                case IrradianceUnit.ZettawattPerSquareMeter: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(IrradianceUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case IrradianceUnit.CentiwattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-2d;
                case IrradianceUnit.CentiwattPerSquareMeter: return (baseUnitValue) / 1e-2d;
                case IrradianceUnit.DecawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e1d;
                case IrradianceUnit.DecawattPerSquareMeter: return (baseUnitValue) / 1e1d;
                case IrradianceUnit.DeciwattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-1d;
                case IrradianceUnit.DeciwattPerSquareMeter: return (baseUnitValue) / 1e-1d;
                case IrradianceUnit.ExawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e18d;
                case IrradianceUnit.ExawattPerSquareMeter: return (baseUnitValue) / 1e18d;
                case IrradianceUnit.FemtowattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-15d;
                case IrradianceUnit.FemtowattPerSquareMeter: return (baseUnitValue) / 1e-15d;
                case IrradianceUnit.GigawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e9d;
                case IrradianceUnit.GigawattPerSquareMeter: return (baseUnitValue) / 1e9d;
                case IrradianceUnit.HectowattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e2d;
                case IrradianceUnit.HectowattPerSquareMeter: return (baseUnitValue) / 1e2d;
                case IrradianceUnit.KilowattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e3d;
                case IrradianceUnit.KilowattPerSquareMeter: return (baseUnitValue) / 1e3d;
                case IrradianceUnit.MegawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e6d;
                case IrradianceUnit.MegawattPerSquareMeter: return (baseUnitValue) / 1e6d;
                case IrradianceUnit.MicrowattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-6d;
                case IrradianceUnit.MicrowattPerSquareMeter: return (baseUnitValue) / 1e-6d;
                case IrradianceUnit.MilliwattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-3d;
                case IrradianceUnit.MilliwattPerSquareMeter: return (baseUnitValue) / 1e-3d;
                case IrradianceUnit.NanowattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-9d;
                case IrradianceUnit.NanowattPerSquareMeter: return (baseUnitValue) / 1e-9d;
                case IrradianceUnit.PetawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e15d;
                case IrradianceUnit.PetawattPerSquareMeter: return (baseUnitValue) / 1e15d;
                case IrradianceUnit.PicowattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e-12d;
                case IrradianceUnit.PicowattPerSquareMeter: return (baseUnitValue) / 1e-12d;
                case IrradianceUnit.QutrawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e27d;
                case IrradianceUnit.QutrawattPerSquareMeter: return (baseUnitValue) / 1e27d;
                case IrradianceUnit.TerawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e12d;
                case IrradianceUnit.TerawattPerSquareMeter: return (baseUnitValue) / 1e12d;
                case IrradianceUnit.VettawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e30d;
                case IrradianceUnit.VettawattPerSquareMeter: return (baseUnitValue) / 1e30d;
                case IrradianceUnit.WattPerSquareCentimeter: return baseUnitValue*0.0001;
                case IrradianceUnit.WattPerSquareMeter: return baseUnitValue;
                case IrradianceUnit.YottawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e24d;
                case IrradianceUnit.YottawattPerSquareMeter: return (baseUnitValue) / 1e24d;
                case IrradianceUnit.ZettawattPerSquareCentimeter: return (baseUnitValue*0.0001) / 1e21d;
                case IrradianceUnit.ZettawattPerSquareMeter: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<IrradianceUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Irradiance)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Irradiance)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Irradiance)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Irradiance))
                return this;
            else if(conversionType == typeof(IrradianceUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Irradiance.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Irradiance.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Irradiance)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
