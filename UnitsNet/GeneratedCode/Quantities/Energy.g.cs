//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or N·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
    /// </summary>
    public partial class Energy : IQuantity<EnergyUnit>, IEquatable<Energy>, IComparable, IComparable<Energy>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EnergyUnit? _unit;

        static Energy()
        {
            BaseDimensions = new BaseDimensions(2, 1, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<EnergyUnit>(QuantityType.Energy,
                new UnitInfo<EnergyUnit>[] {
                    new UnitInfo<EnergyUnit>(EnergyUnit.BritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Calorie, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.DecathermEc, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.DecathermImperial, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.DecathermUs, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ElectronVolt, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Erg, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ExabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Exajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ExawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.FootPound, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.GigabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Gigajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.GigawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Joule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.KilobritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Kilocalorie, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Kilojoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.KilowattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.MegabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Megajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.MegawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.PetabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Petajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.PetawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.QutrabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Qutrajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.QutrawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.TerabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Terajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.TerawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ThermEc, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ThermImperial, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ThermUs, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.VettabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Vettajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.VettawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.WattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.YottabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Yottajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.YottawattHour, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ZettabritishThermalUnit, BaseUnits.Undefined),
                    new UnitInfo<EnergyUnit>(EnergyUnit.Zettajoule, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<EnergyUnit>(EnergyUnit.ZettawattHour, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Energy(double numericValue, EnergyUnit unit)
        {
            if(unit == EnergyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Energy(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<EnergyUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Energy, which is Joule. All conversions go via this value.
        /// </summary>
        public static EnergyUnit BaseUnit { get; } = EnergyUnit.Joule;

        /// <summary>
        /// Represents the largest possible value of Energy
        /// </summary>
        public static Energy MaxValue { get; } = new Energy(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Energy
        /// </summary>
        public static Energy MinValue { get; } = new Energy(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Energy;

        /// <summary>
        ///     All units of measurement for the Energy quantity.
        /// </summary>
        public static EnergyUnit[] Units { get; } = Enum.GetValues(typeof(EnergyUnit)).Cast<EnergyUnit>().Except(new EnergyUnit[]{ EnergyUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Joule.
        /// </summary>
        public static Energy Zero { get; } = new Energy(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public EnergyUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<EnergyUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Energy.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Energy.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Energy in BritishThermalUnits.
        /// </summary>
        public double BritishThermalUnits => As(EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Get Energy in Calories.
        /// </summary>
        public double Calories => As(EnergyUnit.Calorie);

        /// <summary>
        ///     Get Energy in DecathermsEc.
        /// </summary>
        public double DecathermsEc => As(EnergyUnit.DecathermEc);

        /// <summary>
        ///     Get Energy in DecathermsImperial.
        /// </summary>
        public double DecathermsImperial => As(EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Get Energy in DecathermsUs.
        /// </summary>
        public double DecathermsUs => As(EnergyUnit.DecathermUs);

        /// <summary>
        ///     Get Energy in ElectronVolts.
        /// </summary>
        public double ElectronVolts => As(EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Get Energy in Ergs.
        /// </summary>
        public double Ergs => As(EnergyUnit.Erg);

        /// <summary>
        ///     Get Energy in ExabritishThermalUnits.
        /// </summary>
        public double ExabritishThermalUnits => As(EnergyUnit.ExabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Exajoules.
        /// </summary>
        public double Exajoules => As(EnergyUnit.Exajoule);

        /// <summary>
        ///     Get Energy in ExawattHours.
        /// </summary>
        public double ExawattHours => As(EnergyUnit.ExawattHour);

        /// <summary>
        ///     Get Energy in FootPounds.
        /// </summary>
        public double FootPounds => As(EnergyUnit.FootPound);

        /// <summary>
        ///     Get Energy in GigabritishThermalUnits.
        /// </summary>
        public double GigabritishThermalUnits => As(EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Gigajoules.
        /// </summary>
        public double Gigajoules => As(EnergyUnit.Gigajoule);

        /// <summary>
        ///     Get Energy in GigawattHours.
        /// </summary>
        public double GigawattHours => As(EnergyUnit.GigawattHour);

        /// <summary>
        ///     Get Energy in Joules.
        /// </summary>
        public double Joules => As(EnergyUnit.Joule);

        /// <summary>
        ///     Get Energy in KilobritishThermalUnits.
        /// </summary>
        public double KilobritishThermalUnits => As(EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Get Energy in Kilocalories.
        /// </summary>
        public double Kilocalories => As(EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Get Energy in Kilojoules.
        /// </summary>
        public double Kilojoules => As(EnergyUnit.Kilojoule);

        /// <summary>
        ///     Get Energy in KilowattHours.
        /// </summary>
        public double KilowattHours => As(EnergyUnit.KilowattHour);

        /// <summary>
        ///     Get Energy in MegabritishThermalUnits.
        /// </summary>
        public double MegabritishThermalUnits => As(EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Megajoules.
        /// </summary>
        public double Megajoules => As(EnergyUnit.Megajoule);

        /// <summary>
        ///     Get Energy in MegawattHours.
        /// </summary>
        public double MegawattHours => As(EnergyUnit.MegawattHour);

        /// <summary>
        ///     Get Energy in PetabritishThermalUnits.
        /// </summary>
        public double PetabritishThermalUnits => As(EnergyUnit.PetabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Petajoules.
        /// </summary>
        public double Petajoules => As(EnergyUnit.Petajoule);

        /// <summary>
        ///     Get Energy in PetawattHours.
        /// </summary>
        public double PetawattHours => As(EnergyUnit.PetawattHour);

        /// <summary>
        ///     Get Energy in QutrabritishThermalUnits.
        /// </summary>
        public double QutrabritishThermalUnits => As(EnergyUnit.QutrabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Qutrajoules.
        /// </summary>
        public double Qutrajoules => As(EnergyUnit.Qutrajoule);

        /// <summary>
        ///     Get Energy in QutrawattHours.
        /// </summary>
        public double QutrawattHours => As(EnergyUnit.QutrawattHour);

        /// <summary>
        ///     Get Energy in TerabritishThermalUnits.
        /// </summary>
        public double TerabritishThermalUnits => As(EnergyUnit.TerabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Terajoules.
        /// </summary>
        public double Terajoules => As(EnergyUnit.Terajoule);

        /// <summary>
        ///     Get Energy in TerawattHours.
        /// </summary>
        public double TerawattHours => As(EnergyUnit.TerawattHour);

        /// <summary>
        ///     Get Energy in ThermsEc.
        /// </summary>
        public double ThermsEc => As(EnergyUnit.ThermEc);

        /// <summary>
        ///     Get Energy in ThermsImperial.
        /// </summary>
        public double ThermsImperial => As(EnergyUnit.ThermImperial);

        /// <summary>
        ///     Get Energy in ThermsUs.
        /// </summary>
        public double ThermsUs => As(EnergyUnit.ThermUs);

        /// <summary>
        ///     Get Energy in VettabritishThermalUnits.
        /// </summary>
        public double VettabritishThermalUnits => As(EnergyUnit.VettabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Vettajoules.
        /// </summary>
        public double Vettajoules => As(EnergyUnit.Vettajoule);

        /// <summary>
        ///     Get Energy in VettawattHours.
        /// </summary>
        public double VettawattHours => As(EnergyUnit.VettawattHour);

        /// <summary>
        ///     Get Energy in WattHours.
        /// </summary>
        public double WattHours => As(EnergyUnit.WattHour);

        /// <summary>
        ///     Get Energy in YottabritishThermalUnits.
        /// </summary>
        public double YottabritishThermalUnits => As(EnergyUnit.YottabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Yottajoules.
        /// </summary>
        public double Yottajoules => As(EnergyUnit.Yottajoule);

        /// <summary>
        ///     Get Energy in YottawattHours.
        /// </summary>
        public double YottawattHours => As(EnergyUnit.YottawattHour);

        /// <summary>
        ///     Get Energy in ZettabritishThermalUnits.
        /// </summary>
        public double ZettabritishThermalUnits => As(EnergyUnit.ZettabritishThermalUnit);

        /// <summary>
        ///     Get Energy in Zettajoules.
        /// </summary>
        public double Zettajoules => As(EnergyUnit.Zettajoule);

        /// <summary>
        ///     Get Energy in ZettawattHours.
        /// </summary>
        public double ZettawattHours => As(EnergyUnit.ZettawattHour);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(EnergyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(EnergyUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Energy from BritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromBritishThermalUnits(QuantityValue britishthermalunits)
        {
            double value = (double) britishthermalunits;
            return new Energy(value, EnergyUnit.BritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Calories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromCalories(QuantityValue calories)
        {
            double value = (double) calories;
            return new Energy(value, EnergyUnit.Calorie);
        }
        /// <summary>
        ///     Get Energy from DecathermsEc.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsEc(QuantityValue decathermsec)
        {
            double value = (double) decathermsec;
            return new Energy(value, EnergyUnit.DecathermEc);
        }
        /// <summary>
        ///     Get Energy from DecathermsImperial.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsImperial(QuantityValue decathermsimperial)
        {
            double value = (double) decathermsimperial;
            return new Energy(value, EnergyUnit.DecathermImperial);
        }
        /// <summary>
        ///     Get Energy from DecathermsUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsUs(QuantityValue decathermsus)
        {
            double value = (double) decathermsus;
            return new Energy(value, EnergyUnit.DecathermUs);
        }
        /// <summary>
        ///     Get Energy from ElectronVolts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromElectronVolts(QuantityValue electronvolts)
        {
            double value = (double) electronvolts;
            return new Energy(value, EnergyUnit.ElectronVolt);
        }
        /// <summary>
        ///     Get Energy from Ergs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromErgs(QuantityValue ergs)
        {
            double value = (double) ergs;
            return new Energy(value, EnergyUnit.Erg);
        }
        /// <summary>
        ///     Get Energy from ExabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromExabritishThermalUnits(QuantityValue exabritishthermalunits)
        {
            double value = (double) exabritishthermalunits;
            return new Energy(value, EnergyUnit.ExabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Exajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromExajoules(QuantityValue exajoules)
        {
            double value = (double) exajoules;
            return new Energy(value, EnergyUnit.Exajoule);
        }
        /// <summary>
        ///     Get Energy from ExawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromExawattHours(QuantityValue exawatthours)
        {
            double value = (double) exawatthours;
            return new Energy(value, EnergyUnit.ExawattHour);
        }
        /// <summary>
        ///     Get Energy from FootPounds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromFootPounds(QuantityValue footpounds)
        {
            double value = (double) footpounds;
            return new Energy(value, EnergyUnit.FootPound);
        }
        /// <summary>
        ///     Get Energy from GigabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigabritishThermalUnits(QuantityValue gigabritishthermalunits)
        {
            double value = (double) gigabritishthermalunits;
            return new Energy(value, EnergyUnit.GigabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Gigajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigajoules(QuantityValue gigajoules)
        {
            double value = (double) gigajoules;
            return new Energy(value, EnergyUnit.Gigajoule);
        }
        /// <summary>
        ///     Get Energy from GigawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattHours(QuantityValue gigawatthours)
        {
            double value = (double) gigawatthours;
            return new Energy(value, EnergyUnit.GigawattHour);
        }
        /// <summary>
        ///     Get Energy from Joules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromJoules(QuantityValue joules)
        {
            double value = (double) joules;
            return new Energy(value, EnergyUnit.Joule);
        }
        /// <summary>
        ///     Get Energy from KilobritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilobritishThermalUnits(QuantityValue kilobritishthermalunits)
        {
            double value = (double) kilobritishthermalunits;
            return new Energy(value, EnergyUnit.KilobritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Kilocalories.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilocalories(QuantityValue kilocalories)
        {
            double value = (double) kilocalories;
            return new Energy(value, EnergyUnit.Kilocalorie);
        }
        /// <summary>
        ///     Get Energy from Kilojoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilojoules(QuantityValue kilojoules)
        {
            double value = (double) kilojoules;
            return new Energy(value, EnergyUnit.Kilojoule);
        }
        /// <summary>
        ///     Get Energy from KilowattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattHours(QuantityValue kilowatthours)
        {
            double value = (double) kilowatthours;
            return new Energy(value, EnergyUnit.KilowattHour);
        }
        /// <summary>
        ///     Get Energy from MegabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegabritishThermalUnits(QuantityValue megabritishthermalunits)
        {
            double value = (double) megabritishthermalunits;
            return new Energy(value, EnergyUnit.MegabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Megajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegajoules(QuantityValue megajoules)
        {
            double value = (double) megajoules;
            return new Energy(value, EnergyUnit.Megajoule);
        }
        /// <summary>
        ///     Get Energy from MegawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattHours(QuantityValue megawatthours)
        {
            double value = (double) megawatthours;
            return new Energy(value, EnergyUnit.MegawattHour);
        }
        /// <summary>
        ///     Get Energy from PetabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromPetabritishThermalUnits(QuantityValue petabritishthermalunits)
        {
            double value = (double) petabritishthermalunits;
            return new Energy(value, EnergyUnit.PetabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Petajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromPetajoules(QuantityValue petajoules)
        {
            double value = (double) petajoules;
            return new Energy(value, EnergyUnit.Petajoule);
        }
        /// <summary>
        ///     Get Energy from PetawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromPetawattHours(QuantityValue petawatthours)
        {
            double value = (double) petawatthours;
            return new Energy(value, EnergyUnit.PetawattHour);
        }
        /// <summary>
        ///     Get Energy from QutrabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromQutrabritishThermalUnits(QuantityValue qutrabritishthermalunits)
        {
            double value = (double) qutrabritishthermalunits;
            return new Energy(value, EnergyUnit.QutrabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Qutrajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromQutrajoules(QuantityValue qutrajoules)
        {
            double value = (double) qutrajoules;
            return new Energy(value, EnergyUnit.Qutrajoule);
        }
        /// <summary>
        ///     Get Energy from QutrawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromQutrawattHours(QuantityValue qutrawatthours)
        {
            double value = (double) qutrawatthours;
            return new Energy(value, EnergyUnit.QutrawattHour);
        }
        /// <summary>
        ///     Get Energy from TerabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerabritishThermalUnits(QuantityValue terabritishthermalunits)
        {
            double value = (double) terabritishthermalunits;
            return new Energy(value, EnergyUnit.TerabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Terajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerajoules(QuantityValue terajoules)
        {
            double value = (double) terajoules;
            return new Energy(value, EnergyUnit.Terajoule);
        }
        /// <summary>
        ///     Get Energy from TerawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattHours(QuantityValue terawatthours)
        {
            double value = (double) terawatthours;
            return new Energy(value, EnergyUnit.TerawattHour);
        }
        /// <summary>
        ///     Get Energy from ThermsEc.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsEc(QuantityValue thermsec)
        {
            double value = (double) thermsec;
            return new Energy(value, EnergyUnit.ThermEc);
        }
        /// <summary>
        ///     Get Energy from ThermsImperial.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsImperial(QuantityValue thermsimperial)
        {
            double value = (double) thermsimperial;
            return new Energy(value, EnergyUnit.ThermImperial);
        }
        /// <summary>
        ///     Get Energy from ThermsUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsUs(QuantityValue thermsus)
        {
            double value = (double) thermsus;
            return new Energy(value, EnergyUnit.ThermUs);
        }
        /// <summary>
        ///     Get Energy from VettabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromVettabritishThermalUnits(QuantityValue vettabritishthermalunits)
        {
            double value = (double) vettabritishthermalunits;
            return new Energy(value, EnergyUnit.VettabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Vettajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromVettajoules(QuantityValue vettajoules)
        {
            double value = (double) vettajoules;
            return new Energy(value, EnergyUnit.Vettajoule);
        }
        /// <summary>
        ///     Get Energy from VettawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromVettawattHours(QuantityValue vettawatthours)
        {
            double value = (double) vettawatthours;
            return new Energy(value, EnergyUnit.VettawattHour);
        }
        /// <summary>
        ///     Get Energy from WattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattHours(QuantityValue watthours)
        {
            double value = (double) watthours;
            return new Energy(value, EnergyUnit.WattHour);
        }
        /// <summary>
        ///     Get Energy from YottabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromYottabritishThermalUnits(QuantityValue yottabritishthermalunits)
        {
            double value = (double) yottabritishthermalunits;
            return new Energy(value, EnergyUnit.YottabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Yottajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromYottajoules(QuantityValue yottajoules)
        {
            double value = (double) yottajoules;
            return new Energy(value, EnergyUnit.Yottajoule);
        }
        /// <summary>
        ///     Get Energy from YottawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromYottawattHours(QuantityValue yottawatthours)
        {
            double value = (double) yottawatthours;
            return new Energy(value, EnergyUnit.YottawattHour);
        }
        /// <summary>
        ///     Get Energy from ZettabritishThermalUnits.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromZettabritishThermalUnits(QuantityValue zettabritishthermalunits)
        {
            double value = (double) zettabritishthermalunits;
            return new Energy(value, EnergyUnit.ZettabritishThermalUnit);
        }
        /// <summary>
        ///     Get Energy from Zettajoules.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromZettajoules(QuantityValue zettajoules)
        {
            double value = (double) zettajoules;
            return new Energy(value, EnergyUnit.Zettajoule);
        }
        /// <summary>
        ///     Get Energy from ZettawattHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromZettawattHours(QuantityValue zettawatthours)
        {
            double value = (double) zettawatthours;
            return new Energy(value, EnergyUnit.ZettawattHour);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnergyUnit" /> to <see cref="Energy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Energy unit value.</returns>
        public static Energy From(QuantityValue value, EnergyUnit fromUnit)
        {
            return new Energy((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Energy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Energy Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Energy, EnergyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Energy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Energy result)
        {
            return QuantityParser.Default.TryParse<Energy, EnergyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static EnergyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static EnergyUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<EnergyUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.EnergyUnit)"/>
        public static bool TryParseUnit(string str, out EnergyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out EnergyUnit unit)
        {
            return UnitParser.Default.TryParse<EnergyUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Energy operator -(Energy right)
        {
            return new Energy(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from adding two <see cref="Energy"/>.</summary>
        public static Energy operator +(Energy left, Energy right)
        {
            return new Energy(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from subtracting two <see cref="Energy"/>.</summary>
        public static Energy operator -(Energy left, Energy right)
        {
            return new Energy(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from multiplying value and <see cref="Energy"/>.</summary>
        public static Energy operator *(double left, Energy right)
        {
            return new Energy(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from multiplying value and <see cref="Energy"/>.</summary>
        public static Energy operator *(Energy left, double right)
        {
            return new Energy(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Energy"/> from dividing <see cref="Energy"/> by value.</summary>
        public static Energy operator /(Energy left, double right)
        {
            return new Energy(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Energy"/> by <see cref="Energy"/>.</summary>
        public static double operator /(Energy left, Energy right)
        {
            return left.Joules / right.Joules;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Energy left, Energy right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Energy left, Energy right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Energy left, Energy right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Energy left, Energy right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Energy left, Energy right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Energy left, Energy right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Energy objEnergy)) throw new ArgumentException("Expected type Energy.", nameof(obj));

            return CompareTo(objEnergy);
        }

        /// <inheritdoc />
        public int CompareTo(Energy other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Energy objEnergy))
                return false;

            return Equals(objEnergy);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Energy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Energy other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Energy within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Energy other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Energy.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(EnergyUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            if (firstUnitInfo is null)
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
                if (firstUnitInfo is null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }
            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is EnergyUnit unitAsEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EnergyUnit)} is supported.", nameof(unit));

            return As(unitAsEnergyUnit);
        }

        /// <summary>
        ///     Converts this Energy to another Energy with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Energy with the specified unit.</returns>
        public Energy ToUnit(EnergyUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Energy(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is EnergyUnit unitAsEnergyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(EnergyUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsEnergyUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Energy ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<EnergyUnit> IQuantity<EnergyUnit>.ToUnit(EnergyUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<EnergyUnit> IQuantity<EnergyUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case EnergyUnit.BritishThermalUnit: return _value*1055.05585262;
                case EnergyUnit.Calorie: return _value*4.184;
                case EnergyUnit.DecathermEc: return (_value*1.05505585262e8) * 1e1d;
                case EnergyUnit.DecathermImperial: return (_value*1.05505585257348e8) * 1e1d;
                case EnergyUnit.DecathermUs: return (_value*1.054804e8) * 1e1d;
                case EnergyUnit.ElectronVolt: return _value*1.602176565e-19;
                case EnergyUnit.Erg: return _value*1e-7;
                case EnergyUnit.ExabritishThermalUnit: return (_value*1055.05585262) * 1e18d;
                case EnergyUnit.Exajoule: return (_value) * 1e18d;
                case EnergyUnit.ExawattHour: return (_value*3600d) * 1e18d;
                case EnergyUnit.FootPound: return _value*1.355817948;
                case EnergyUnit.GigabritishThermalUnit: return (_value*1055.05585262) * 1e9d;
                case EnergyUnit.Gigajoule: return (_value) * 1e9d;
                case EnergyUnit.GigawattHour: return (_value*3600d) * 1e9d;
                case EnergyUnit.Joule: return _value;
                case EnergyUnit.KilobritishThermalUnit: return (_value*1055.05585262) * 1e3d;
                case EnergyUnit.Kilocalorie: return (_value*4.184) * 1e3d;
                case EnergyUnit.Kilojoule: return (_value) * 1e3d;
                case EnergyUnit.KilowattHour: return (_value*3600d) * 1e3d;
                case EnergyUnit.MegabritishThermalUnit: return (_value*1055.05585262) * 1e6d;
                case EnergyUnit.Megajoule: return (_value) * 1e6d;
                case EnergyUnit.MegawattHour: return (_value*3600d) * 1e6d;
                case EnergyUnit.PetabritishThermalUnit: return (_value*1055.05585262) * 1e15d;
                case EnergyUnit.Petajoule: return (_value) * 1e15d;
                case EnergyUnit.PetawattHour: return (_value*3600d) * 1e15d;
                case EnergyUnit.QutrabritishThermalUnit: return (_value*1055.05585262) * 1e27d;
                case EnergyUnit.Qutrajoule: return (_value) * 1e27d;
                case EnergyUnit.QutrawattHour: return (_value*3600d) * 1e27d;
                case EnergyUnit.TerabritishThermalUnit: return (_value*1055.05585262) * 1e12d;
                case EnergyUnit.Terajoule: return (_value) * 1e12d;
                case EnergyUnit.TerawattHour: return (_value*3600d) * 1e12d;
                case EnergyUnit.ThermEc: return _value*1.05505585262e8;
                case EnergyUnit.ThermImperial: return _value*1.05505585257348e8;
                case EnergyUnit.ThermUs: return _value*1.054804e8;
                case EnergyUnit.VettabritishThermalUnit: return (_value*1055.05585262) * 1e30d;
                case EnergyUnit.Vettajoule: return (_value) * 1e30d;
                case EnergyUnit.VettawattHour: return (_value*3600d) * 1e30d;
                case EnergyUnit.WattHour: return _value*3600d;
                case EnergyUnit.YottabritishThermalUnit: return (_value*1055.05585262) * 1e24d;
                case EnergyUnit.Yottajoule: return (_value) * 1e24d;
                case EnergyUnit.YottawattHour: return (_value*3600d) * 1e24d;
                case EnergyUnit.ZettabritishThermalUnit: return (_value*1055.05585262) * 1e21d;
                case EnergyUnit.Zettajoule: return (_value) * 1e21d;
                case EnergyUnit.ZettawattHour: return (_value*3600d) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(EnergyUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case EnergyUnit.BritishThermalUnit: return baseUnitValue/1055.05585262;
                case EnergyUnit.Calorie: return baseUnitValue/4.184;
                case EnergyUnit.DecathermEc: return (baseUnitValue/1.05505585262e8) / 1e1d;
                case EnergyUnit.DecathermImperial: return (baseUnitValue/1.05505585257348e8) / 1e1d;
                case EnergyUnit.DecathermUs: return (baseUnitValue/1.054804e8) / 1e1d;
                case EnergyUnit.ElectronVolt: return baseUnitValue/1.602176565e-19;
                case EnergyUnit.Erg: return baseUnitValue/1e-7;
                case EnergyUnit.ExabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e18d;
                case EnergyUnit.Exajoule: return (baseUnitValue) / 1e18d;
                case EnergyUnit.ExawattHour: return (baseUnitValue/3600d) / 1e18d;
                case EnergyUnit.FootPound: return baseUnitValue/1.355817948;
                case EnergyUnit.GigabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e9d;
                case EnergyUnit.Gigajoule: return (baseUnitValue) / 1e9d;
                case EnergyUnit.GigawattHour: return (baseUnitValue/3600d) / 1e9d;
                case EnergyUnit.Joule: return baseUnitValue;
                case EnergyUnit.KilobritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e3d;
                case EnergyUnit.Kilocalorie: return (baseUnitValue/4.184) / 1e3d;
                case EnergyUnit.Kilojoule: return (baseUnitValue) / 1e3d;
                case EnergyUnit.KilowattHour: return (baseUnitValue/3600d) / 1e3d;
                case EnergyUnit.MegabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e6d;
                case EnergyUnit.Megajoule: return (baseUnitValue) / 1e6d;
                case EnergyUnit.MegawattHour: return (baseUnitValue/3600d) / 1e6d;
                case EnergyUnit.PetabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e15d;
                case EnergyUnit.Petajoule: return (baseUnitValue) / 1e15d;
                case EnergyUnit.PetawattHour: return (baseUnitValue/3600d) / 1e15d;
                case EnergyUnit.QutrabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e27d;
                case EnergyUnit.Qutrajoule: return (baseUnitValue) / 1e27d;
                case EnergyUnit.QutrawattHour: return (baseUnitValue/3600d) / 1e27d;
                case EnergyUnit.TerabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e12d;
                case EnergyUnit.Terajoule: return (baseUnitValue) / 1e12d;
                case EnergyUnit.TerawattHour: return (baseUnitValue/3600d) / 1e12d;
                case EnergyUnit.ThermEc: return baseUnitValue/1.05505585262e8;
                case EnergyUnit.ThermImperial: return baseUnitValue/1.05505585257348e8;
                case EnergyUnit.ThermUs: return baseUnitValue/1.054804e8;
                case EnergyUnit.VettabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e30d;
                case EnergyUnit.Vettajoule: return (baseUnitValue) / 1e30d;
                case EnergyUnit.VettawattHour: return (baseUnitValue/3600d) / 1e30d;
                case EnergyUnit.WattHour: return baseUnitValue/3600d;
                case EnergyUnit.YottabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e24d;
                case EnergyUnit.Yottajoule: return (baseUnitValue) / 1e24d;
                case EnergyUnit.YottawattHour: return (baseUnitValue/3600d) / 1e24d;
                case EnergyUnit.ZettabritishThermalUnit: return (baseUnitValue/1055.05585262) / 1e21d;
                case EnergyUnit.Zettajoule: return (baseUnitValue) / 1e21d;
                case EnergyUnit.ZettawattHour: return (baseUnitValue/3600d) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<EnergyUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Energy)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Energy)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Energy)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Energy))
                return this;
            else if(conversionType == typeof(EnergyUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Energy.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Energy.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Energy)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
