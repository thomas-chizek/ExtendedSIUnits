//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Specific entropy is an amount of energy required to raise temperature of a substance by 1 Kelvin per unit mass.
    /// </summary>
    public partial struct SpecificEntropy : IQuantity<SpecificEntropyUnit>, IEquatable<SpecificEntropy>, IComparable, IComparable<SpecificEntropy>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificEntropyUnit? _unit;

        static SpecificEntropy()
        {
            BaseDimensions = new BaseDimensions(2, 0, -2, 0, -1, 0, 0);

            Info = new QuantityInfo<SpecificEntropyUnit>(QuantityType.SpecificEntropy,
                new UnitInfo<SpecificEntropyUnit>[] {
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.AttocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.AttojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.AttojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.BtuPerPoundFahrenheit, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.CaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.CenticaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.CentijoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.DecacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.DecajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.DecicaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.DecijoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ExacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ExajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.FemtocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.FemtojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.GigacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.GigajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.HectocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.HectojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.JoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.JoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.KilocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.KilojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MegacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MegajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MicrocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MicrojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MillicaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.MillijoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.NanocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.NanojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.PetacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.PetajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.PicocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.PicojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.QutracaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.QutrajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.TeracaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.TerajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.VettacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.VettajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.YoctocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.YoctojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.YoctojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.YottacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.YottajoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ZeptocaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ZeptojoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ZeptojoulePerKilogramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ZettacaloriePerGramKelvin, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius, BaseUnits.Undefined),
                    new UnitInfo<SpecificEntropyUnit>(SpecificEntropyUnit.ZettajoulePerKilogramKelvin, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificEntropy(double numericValue, SpecificEntropyUnit unit)
        {
            if(unit == SpecificEntropyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public SpecificEntropy(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<SpecificEntropyUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificEntropy, which is JoulePerKilogramKelvin. All conversions go via this value.
        /// </summary>
        public static SpecificEntropyUnit BaseUnit { get; } = SpecificEntropyUnit.JoulePerKilogramKelvin;

        /// <summary>
        /// Represents the largest possible value of SpecificEntropy
        /// </summary>
        public static SpecificEntropy MaxValue { get; } = new SpecificEntropy(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificEntropy
        /// </summary>
        public static SpecificEntropy MinValue { get; } = new SpecificEntropy(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.SpecificEntropy;

        /// <summary>
        ///     All units of measurement for the SpecificEntropy quantity.
        /// </summary>
        public static SpecificEntropyUnit[] Units { get; } = Enum.GetValues(typeof(SpecificEntropyUnit)).Cast<SpecificEntropyUnit>().Except(new SpecificEntropyUnit[]{ SpecificEntropyUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogramKelvin.
        /// </summary>
        public static SpecificEntropy Zero { get; } = new SpecificEntropy(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public SpecificEntropyUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<SpecificEntropyUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificEntropy.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificEntropy.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificEntropy in AttocaloriesPerGramKelvin.
        /// </summary>
        public double AttocaloriesPerGramKelvin => As(SpecificEntropyUnit.AttocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in AttojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double AttojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.AttojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in AttojoulesPerKilogramKelvin.
        /// </summary>
        public double AttojoulesPerKilogramKelvin => As(SpecificEntropyUnit.AttojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in BtusPerPoundFahrenheit.
        /// </summary>
        public double BtusPerPoundFahrenheit => As(SpecificEntropyUnit.BtuPerPoundFahrenheit);

        /// <summary>
        ///     Get SpecificEntropy in CaloriesPerGramKelvin.
        /// </summary>
        public double CaloriesPerGramKelvin => As(SpecificEntropyUnit.CaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in CenticaloriesPerGramKelvin.
        /// </summary>
        public double CenticaloriesPerGramKelvin => As(SpecificEntropyUnit.CenticaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in CentijoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double CentijoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in CentijoulesPerKilogramKelvin.
        /// </summary>
        public double CentijoulesPerKilogramKelvin => As(SpecificEntropyUnit.CentijoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecacaloriesPerGramKelvin.
        /// </summary>
        public double DecacaloriesPerGramKelvin => As(SpecificEntropyUnit.DecacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double DecajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in DecajoulesPerKilogramKelvin.
        /// </summary>
        public double DecajoulesPerKilogramKelvin => As(SpecificEntropyUnit.DecajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecicaloriesPerGramKelvin.
        /// </summary>
        public double DecicaloriesPerGramKelvin => As(SpecificEntropyUnit.DecicaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecijoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double DecijoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in DecijoulesPerKilogramKelvin.
        /// </summary>
        public double DecijoulesPerKilogramKelvin => As(SpecificEntropyUnit.DecijoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ExacaloriesPerGramKelvin.
        /// </summary>
        public double ExacaloriesPerGramKelvin => As(SpecificEntropyUnit.ExacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ExajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double ExajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in ExajoulesPerKilogramKelvin.
        /// </summary>
        public double ExajoulesPerKilogramKelvin => As(SpecificEntropyUnit.ExajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in FemtocaloriesPerGramKelvin.
        /// </summary>
        public double FemtocaloriesPerGramKelvin => As(SpecificEntropyUnit.FemtocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in FemtojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double FemtojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in FemtojoulesPerKilogramKelvin.
        /// </summary>
        public double FemtojoulesPerKilogramKelvin => As(SpecificEntropyUnit.FemtojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in GigacaloriesPerGramKelvin.
        /// </summary>
        public double GigacaloriesPerGramKelvin => As(SpecificEntropyUnit.GigacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in GigajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double GigajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in GigajoulesPerKilogramKelvin.
        /// </summary>
        public double GigajoulesPerKilogramKelvin => As(SpecificEntropyUnit.GigajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in HectocaloriesPerGramKelvin.
        /// </summary>
        public double HectocaloriesPerGramKelvin => As(SpecificEntropyUnit.HectocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in HectojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double HectojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in HectojoulesPerKilogramKelvin.
        /// </summary>
        public double HectojoulesPerKilogramKelvin => As(SpecificEntropyUnit.HectojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in JoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double JoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.JoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in JoulesPerKilogramKelvin.
        /// </summary>
        public double JoulesPerKilogramKelvin => As(SpecificEntropyUnit.JoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in KilocaloriesPerGramKelvin.
        /// </summary>
        public double KilocaloriesPerGramKelvin => As(SpecificEntropyUnit.KilocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in KilojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double KilojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in KilojoulesPerKilogramKelvin.
        /// </summary>
        public double KilojoulesPerKilogramKelvin => As(SpecificEntropyUnit.KilojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MegacaloriesPerGramKelvin.
        /// </summary>
        public double MegacaloriesPerGramKelvin => As(SpecificEntropyUnit.MegacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MegajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double MegajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in MegajoulesPerKilogramKelvin.
        /// </summary>
        public double MegajoulesPerKilogramKelvin => As(SpecificEntropyUnit.MegajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MicrocaloriesPerGramKelvin.
        /// </summary>
        public double MicrocaloriesPerGramKelvin => As(SpecificEntropyUnit.MicrocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MicrojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double MicrojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in MicrojoulesPerKilogramKelvin.
        /// </summary>
        public double MicrojoulesPerKilogramKelvin => As(SpecificEntropyUnit.MicrojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MillicaloriesPerGramKelvin.
        /// </summary>
        public double MillicaloriesPerGramKelvin => As(SpecificEntropyUnit.MillicaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MillijoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double MillijoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in MillijoulesPerKilogramKelvin.
        /// </summary>
        public double MillijoulesPerKilogramKelvin => As(SpecificEntropyUnit.MillijoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in NanocaloriesPerGramKelvin.
        /// </summary>
        public double NanocaloriesPerGramKelvin => As(SpecificEntropyUnit.NanocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in NanojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double NanojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in NanojoulesPerKilogramKelvin.
        /// </summary>
        public double NanojoulesPerKilogramKelvin => As(SpecificEntropyUnit.NanojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PetacaloriesPerGramKelvin.
        /// </summary>
        public double PetacaloriesPerGramKelvin => As(SpecificEntropyUnit.PetacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PetajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double PetajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in PetajoulesPerKilogramKelvin.
        /// </summary>
        public double PetajoulesPerKilogramKelvin => As(SpecificEntropyUnit.PetajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PicocaloriesPerGramKelvin.
        /// </summary>
        public double PicocaloriesPerGramKelvin => As(SpecificEntropyUnit.PicocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PicojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double PicojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in PicojoulesPerKilogramKelvin.
        /// </summary>
        public double PicojoulesPerKilogramKelvin => As(SpecificEntropyUnit.PicojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in QutracaloriesPerGramKelvin.
        /// </summary>
        public double QutracaloriesPerGramKelvin => As(SpecificEntropyUnit.QutracaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in QutrajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double QutrajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in QutrajoulesPerKilogramKelvin.
        /// </summary>
        public double QutrajoulesPerKilogramKelvin => As(SpecificEntropyUnit.QutrajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in TeracaloriesPerGramKelvin.
        /// </summary>
        public double TeracaloriesPerGramKelvin => As(SpecificEntropyUnit.TeracaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in TerajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double TerajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in TerajoulesPerKilogramKelvin.
        /// </summary>
        public double TerajoulesPerKilogramKelvin => As(SpecificEntropyUnit.TerajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in VettacaloriesPerGramKelvin.
        /// </summary>
        public double VettacaloriesPerGramKelvin => As(SpecificEntropyUnit.VettacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in VettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double VettajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in VettajoulesPerKilogramKelvin.
        /// </summary>
        public double VettajoulesPerKilogramKelvin => As(SpecificEntropyUnit.VettajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in YoctocaloriesPerGramKelvin.
        /// </summary>
        public double YoctocaloriesPerGramKelvin => As(SpecificEntropyUnit.YoctocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in YoctojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double YoctojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.YoctojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in YoctojoulesPerKilogramKelvin.
        /// </summary>
        public double YoctojoulesPerKilogramKelvin => As(SpecificEntropyUnit.YoctojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in YottacaloriesPerGramKelvin.
        /// </summary>
        public double YottacaloriesPerGramKelvin => As(SpecificEntropyUnit.YottacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in YottajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double YottajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in YottajoulesPerKilogramKelvin.
        /// </summary>
        public double YottajoulesPerKilogramKelvin => As(SpecificEntropyUnit.YottajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ZeptocaloriesPerGramKelvin.
        /// </summary>
        public double ZeptocaloriesPerGramKelvin => As(SpecificEntropyUnit.ZeptocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ZeptojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double ZeptojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.ZeptojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in ZeptojoulesPerKilogramKelvin.
        /// </summary>
        public double ZeptojoulesPerKilogramKelvin => As(SpecificEntropyUnit.ZeptojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ZettacaloriesPerGramKelvin.
        /// </summary>
        public double ZettacaloriesPerGramKelvin => As(SpecificEntropyUnit.ZettacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ZettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double ZettajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in ZettajoulesPerKilogramKelvin.
        /// </summary>
        public double ZettajoulesPerKilogramKelvin => As(SpecificEntropyUnit.ZettajoulePerKilogramKelvin);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificEntropyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(SpecificEntropyUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificEntropy from AttocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromAttocaloriesPerGramKelvin(QuantityValue attocaloriespergramkelvin)
        {
            double value = (double) attocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.AttocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from AttojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromAttojoulesPerKilogramDegreeCelsius(QuantityValue attojoulesperkilogramdegreecelsius)
        {
            double value = (double) attojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.AttojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from AttojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromAttojoulesPerKilogramKelvin(QuantityValue attojoulesperkilogramkelvin)
        {
            double value = (double) attojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.AttojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from BtusPerPoundFahrenheit.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromBtusPerPoundFahrenheit(QuantityValue btusperpoundfahrenheit)
        {
            double value = (double) btusperpoundfahrenheit;
            return new SpecificEntropy(value, SpecificEntropyUnit.BtuPerPoundFahrenheit);
        }
        /// <summary>
        ///     Get SpecificEntropy from CaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromCaloriesPerGramKelvin(QuantityValue caloriespergramkelvin)
        {
            double value = (double) caloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.CaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from CenticaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromCenticaloriesPerGramKelvin(QuantityValue centicaloriespergramkelvin)
        {
            double value = (double) centicaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.CenticaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from CentijoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromCentijoulesPerKilogramDegreeCelsius(QuantityValue centijoulesperkilogramdegreecelsius)
        {
            double value = (double) centijoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from CentijoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromCentijoulesPerKilogramKelvin(QuantityValue centijoulesperkilogramkelvin)
        {
            double value = (double) centijoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.CentijoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromDecacaloriesPerGramKelvin(QuantityValue decacaloriespergramkelvin)
        {
            double value = (double) decacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromDecajoulesPerKilogramDegreeCelsius(QuantityValue decajoulesperkilogramdegreecelsius)
        {
            double value = (double) decajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromDecajoulesPerKilogramKelvin(QuantityValue decajoulesperkilogramkelvin)
        {
            double value = (double) decajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecicaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromDecicaloriesPerGramKelvin(QuantityValue decicaloriespergramkelvin)
        {
            double value = (double) decicaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecicaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecijoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromDecijoulesPerKilogramDegreeCelsius(QuantityValue decijoulesperkilogramdegreecelsius)
        {
            double value = (double) decijoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecijoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromDecijoulesPerKilogramKelvin(QuantityValue decijoulesperkilogramkelvin)
        {
            double value = (double) decijoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecijoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ExacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromExacaloriesPerGramKelvin(QuantityValue exacaloriespergramkelvin)
        {
            double value = (double) exacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ExacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ExajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromExajoulesPerKilogramDegreeCelsius(QuantityValue exajoulesperkilogramdegreecelsius)
        {
            double value = (double) exajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from ExajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromExajoulesPerKilogramKelvin(QuantityValue exajoulesperkilogramkelvin)
        {
            double value = (double) exajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ExajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from FemtocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromFemtocaloriesPerGramKelvin(QuantityValue femtocaloriespergramkelvin)
        {
            double value = (double) femtocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.FemtocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from FemtojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromFemtojoulesPerKilogramDegreeCelsius(QuantityValue femtojoulesperkilogramdegreecelsius)
        {
            double value = (double) femtojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from FemtojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromFemtojoulesPerKilogramKelvin(QuantityValue femtojoulesperkilogramkelvin)
        {
            double value = (double) femtojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.FemtojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from GigacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromGigacaloriesPerGramKelvin(QuantityValue gigacaloriespergramkelvin)
        {
            double value = (double) gigacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.GigacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from GigajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromGigajoulesPerKilogramDegreeCelsius(QuantityValue gigajoulesperkilogramdegreecelsius)
        {
            double value = (double) gigajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from GigajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromGigajoulesPerKilogramKelvin(QuantityValue gigajoulesperkilogramkelvin)
        {
            double value = (double) gigajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.GigajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from HectocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromHectocaloriesPerGramKelvin(QuantityValue hectocaloriespergramkelvin)
        {
            double value = (double) hectocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.HectocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from HectojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromHectojoulesPerKilogramDegreeCelsius(QuantityValue hectojoulesperkilogramdegreecelsius)
        {
            double value = (double) hectojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from HectojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromHectojoulesPerKilogramKelvin(QuantityValue hectojoulesperkilogramkelvin)
        {
            double value = (double) hectojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.HectojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from JoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromJoulesPerKilogramDegreeCelsius(QuantityValue joulesperkilogramdegreecelsius)
        {
            double value = (double) joulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.JoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from JoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromJoulesPerKilogramKelvin(QuantityValue joulesperkilogramkelvin)
        {
            double value = (double) joulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.JoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from KilocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromKilocaloriesPerGramKelvin(QuantityValue kilocaloriespergramkelvin)
        {
            double value = (double) kilocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.KilocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from KilojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromKilojoulesPerKilogramDegreeCelsius(QuantityValue kilojoulesperkilogramdegreecelsius)
        {
            double value = (double) kilojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from KilojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromKilojoulesPerKilogramKelvin(QuantityValue kilojoulesperkilogramkelvin)
        {
            double value = (double) kilojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.KilojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MegacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMegacaloriesPerGramKelvin(QuantityValue megacaloriespergramkelvin)
        {
            double value = (double) megacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MegacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MegajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMegajoulesPerKilogramDegreeCelsius(QuantityValue megajoulesperkilogramdegreecelsius)
        {
            double value = (double) megajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from MegajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMegajoulesPerKilogramKelvin(QuantityValue megajoulesperkilogramkelvin)
        {
            double value = (double) megajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MegajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MicrocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMicrocaloriesPerGramKelvin(QuantityValue microcaloriespergramkelvin)
        {
            double value = (double) microcaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MicrocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MicrojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMicrojoulesPerKilogramDegreeCelsius(QuantityValue microjoulesperkilogramdegreecelsius)
        {
            double value = (double) microjoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from MicrojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMicrojoulesPerKilogramKelvin(QuantityValue microjoulesperkilogramkelvin)
        {
            double value = (double) microjoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MicrojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MillicaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMillicaloriesPerGramKelvin(QuantityValue millicaloriespergramkelvin)
        {
            double value = (double) millicaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MillicaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MillijoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMillijoulesPerKilogramDegreeCelsius(QuantityValue millijoulesperkilogramdegreecelsius)
        {
            double value = (double) millijoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from MillijoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromMillijoulesPerKilogramKelvin(QuantityValue millijoulesperkilogramkelvin)
        {
            double value = (double) millijoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MillijoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from NanocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromNanocaloriesPerGramKelvin(QuantityValue nanocaloriespergramkelvin)
        {
            double value = (double) nanocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.NanocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from NanojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromNanojoulesPerKilogramDegreeCelsius(QuantityValue nanojoulesperkilogramdegreecelsius)
        {
            double value = (double) nanojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from NanojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromNanojoulesPerKilogramKelvin(QuantityValue nanojoulesperkilogramkelvin)
        {
            double value = (double) nanojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.NanojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PetacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromPetacaloriesPerGramKelvin(QuantityValue petacaloriespergramkelvin)
        {
            double value = (double) petacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PetacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PetajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromPetajoulesPerKilogramDegreeCelsius(QuantityValue petajoulesperkilogramdegreecelsius)
        {
            double value = (double) petajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from PetajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromPetajoulesPerKilogramKelvin(QuantityValue petajoulesperkilogramkelvin)
        {
            double value = (double) petajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PetajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PicocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromPicocaloriesPerGramKelvin(QuantityValue picocaloriespergramkelvin)
        {
            double value = (double) picocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PicocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PicojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromPicojoulesPerKilogramDegreeCelsius(QuantityValue picojoulesperkilogramdegreecelsius)
        {
            double value = (double) picojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from PicojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromPicojoulesPerKilogramKelvin(QuantityValue picojoulesperkilogramkelvin)
        {
            double value = (double) picojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PicojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from QutracaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromQutracaloriesPerGramKelvin(QuantityValue qutracaloriespergramkelvin)
        {
            double value = (double) qutracaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.QutracaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from QutrajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromQutrajoulesPerKilogramDegreeCelsius(QuantityValue qutrajoulesperkilogramdegreecelsius)
        {
            double value = (double) qutrajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from QutrajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromQutrajoulesPerKilogramKelvin(QuantityValue qutrajoulesperkilogramkelvin)
        {
            double value = (double) qutrajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.QutrajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from TeracaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromTeracaloriesPerGramKelvin(QuantityValue teracaloriespergramkelvin)
        {
            double value = (double) teracaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.TeracaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from TerajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromTerajoulesPerKilogramDegreeCelsius(QuantityValue terajoulesperkilogramdegreecelsius)
        {
            double value = (double) terajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from TerajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromTerajoulesPerKilogramKelvin(QuantityValue terajoulesperkilogramkelvin)
        {
            double value = (double) terajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.TerajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from VettacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromVettacaloriesPerGramKelvin(QuantityValue vettacaloriespergramkelvin)
        {
            double value = (double) vettacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.VettacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from VettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromVettajoulesPerKilogramDegreeCelsius(QuantityValue vettajoulesperkilogramdegreecelsius)
        {
            double value = (double) vettajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from VettajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromVettajoulesPerKilogramKelvin(QuantityValue vettajoulesperkilogramkelvin)
        {
            double value = (double) vettajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.VettajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from YoctocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromYoctocaloriesPerGramKelvin(QuantityValue yoctocaloriespergramkelvin)
        {
            double value = (double) yoctocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.YoctocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from YoctojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromYoctojoulesPerKilogramDegreeCelsius(QuantityValue yoctojoulesperkilogramdegreecelsius)
        {
            double value = (double) yoctojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.YoctojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from YoctojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromYoctojoulesPerKilogramKelvin(QuantityValue yoctojoulesperkilogramkelvin)
        {
            double value = (double) yoctojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.YoctojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from YottacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromYottacaloriesPerGramKelvin(QuantityValue yottacaloriespergramkelvin)
        {
            double value = (double) yottacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.YottacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from YottajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromYottajoulesPerKilogramDegreeCelsius(QuantityValue yottajoulesperkilogramdegreecelsius)
        {
            double value = (double) yottajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from YottajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromYottajoulesPerKilogramKelvin(QuantityValue yottajoulesperkilogramkelvin)
        {
            double value = (double) yottajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.YottajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZeptocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromZeptocaloriesPerGramKelvin(QuantityValue zeptocaloriespergramkelvin)
        {
            double value = (double) zeptocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZeptocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZeptojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromZeptojoulesPerKilogramDegreeCelsius(QuantityValue zeptojoulesperkilogramdegreecelsius)
        {
            double value = (double) zeptojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZeptojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZeptojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromZeptojoulesPerKilogramKelvin(QuantityValue zeptojoulesperkilogramkelvin)
        {
            double value = (double) zeptojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZeptojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZettacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromZettacaloriesPerGramKelvin(QuantityValue zettacaloriespergramkelvin)
        {
            double value = (double) zettacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZettacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromZettajoulesPerKilogramDegreeCelsius(QuantityValue zettajoulesperkilogramdegreecelsius)
        {
            double value = (double) zettajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZettajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropy FromZettajoulesPerKilogramKelvin(QuantityValue zettajoulesperkilogramkelvin)
        {
            double value = (double) zettajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZettajoulePerKilogramKelvin);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificEntropyUnit" /> to <see cref="SpecificEntropy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificEntropy unit value.</returns>
        public static SpecificEntropy From(QuantityValue value, SpecificEntropyUnit fromUnit)
        {
            return new SpecificEntropy((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificEntropy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificEntropy Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<SpecificEntropy, SpecificEntropyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificEntropy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out SpecificEntropy result)
        {
            return QuantityParser.Default.TryParse<SpecificEntropy, SpecificEntropyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificEntropyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificEntropyUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<SpecificEntropyUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.SpecificEntropyUnit)"/>
        public static bool TryParseUnit(string str, out SpecificEntropyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out SpecificEntropyUnit unit)
        {
            return UnitParser.Default.TryParse<SpecificEntropyUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static SpecificEntropy operator -(SpecificEntropy right)
        {
            return new SpecificEntropy(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificEntropy"/> from adding two <see cref="SpecificEntropy"/>.</summary>
        public static SpecificEntropy operator +(SpecificEntropy left, SpecificEntropy right)
        {
            return new SpecificEntropy(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificEntropy"/> from subtracting two <see cref="SpecificEntropy"/>.</summary>
        public static SpecificEntropy operator -(SpecificEntropy left, SpecificEntropy right)
        {
            return new SpecificEntropy(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificEntropy"/> from multiplying value and <see cref="SpecificEntropy"/>.</summary>
        public static SpecificEntropy operator *(double left, SpecificEntropy right)
        {
            return new SpecificEntropy(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificEntropy"/> from multiplying value and <see cref="SpecificEntropy"/>.</summary>
        public static SpecificEntropy operator *(SpecificEntropy left, double right)
        {
            return new SpecificEntropy(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="SpecificEntropy"/> from dividing <see cref="SpecificEntropy"/> by value.</summary>
        public static SpecificEntropy operator /(SpecificEntropy left, double right)
        {
            return new SpecificEntropy(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="SpecificEntropy"/> by <see cref="SpecificEntropy"/>.</summary>
        public static double operator /(SpecificEntropy left, SpecificEntropy right)
        {
            return left.JoulesPerKilogramKelvin / right.JoulesPerKilogramKelvin;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(SpecificEntropy left, SpecificEntropy right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(SpecificEntropy left, SpecificEntropy right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(SpecificEntropy left, SpecificEntropy right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(SpecificEntropy left, SpecificEntropy right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificEntropy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(SpecificEntropy left, SpecificEntropy right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificEntropy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(SpecificEntropy left, SpecificEntropy right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificEntropy objSpecificEntropy)) throw new ArgumentException("Expected type SpecificEntropy.", nameof(obj));

            return CompareTo(objSpecificEntropy);
        }

        /// <inheritdoc />
        public int CompareTo(SpecificEntropy other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificEntropy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificEntropy objSpecificEntropy))
                return false;

            return Equals(objSpecificEntropy);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificEntropy, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(SpecificEntropy other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificEntropy within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificEntropy other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificEntropy.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificEntropyUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is SpecificEntropyUnit unitAsSpecificEntropyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificEntropyUnit)} is supported.", nameof(unit));

            return As(unitAsSpecificEntropyUnit);
        }

        /// <summary>
        ///     Converts this SpecificEntropy to another SpecificEntropy with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificEntropy with the specified unit.</returns>
        public SpecificEntropy ToUnit(SpecificEntropyUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new SpecificEntropy(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is SpecificEntropyUnit unitAsSpecificEntropyUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificEntropyUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsSpecificEntropyUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public SpecificEntropy ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<SpecificEntropyUnit> IQuantity<SpecificEntropyUnit>.ToUnit(SpecificEntropyUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<SpecificEntropyUnit> IQuantity<SpecificEntropyUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificEntropyUnit.AttocaloriePerGramKelvin: return (_value*4.184e3) * 1e-18d;
                case SpecificEntropyUnit.AttojoulePerKilogramDegreeCelsius: return (_value) * 1e-18d;
                case SpecificEntropyUnit.AttojoulePerKilogramKelvin: return (_value) * 1e-18d;
                case SpecificEntropyUnit.BtuPerPoundFahrenheit: return _value * 4.1868e3;
                case SpecificEntropyUnit.CaloriePerGramKelvin: return _value*4.184e3;
                case SpecificEntropyUnit.CenticaloriePerGramKelvin: return (_value*4.184e3) * 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius: return (_value) * 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramKelvin: return (_value) * 1e-2d;
                case SpecificEntropyUnit.DecacaloriePerGramKelvin: return (_value*4.184e3) * 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius: return (_value) * 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramKelvin: return (_value) * 1e1d;
                case SpecificEntropyUnit.DecicaloriePerGramKelvin: return (_value*4.184e3) * 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius: return (_value) * 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramKelvin: return (_value) * 1e-1d;
                case SpecificEntropyUnit.ExacaloriePerGramKelvin: return (_value*4.184e3) * 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius: return (_value) * 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramKelvin: return (_value) * 1e18d;
                case SpecificEntropyUnit.FemtocaloriePerGramKelvin: return (_value*4.184e3) * 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius: return (_value) * 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramKelvin: return (_value) * 1e-15d;
                case SpecificEntropyUnit.GigacaloriePerGramKelvin: return (_value*4.184e3) * 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius: return (_value) * 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramKelvin: return (_value) * 1e9d;
                case SpecificEntropyUnit.HectocaloriePerGramKelvin: return (_value*4.184e3) * 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius: return (_value) * 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramKelvin: return (_value) * 1e2d;
                case SpecificEntropyUnit.JoulePerKilogramDegreeCelsius: return _value;
                case SpecificEntropyUnit.JoulePerKilogramKelvin: return _value;
                case SpecificEntropyUnit.KilocaloriePerGramKelvin: return (_value*4.184e3) * 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius: return (_value) * 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramKelvin: return (_value) * 1e3d;
                case SpecificEntropyUnit.MegacaloriePerGramKelvin: return (_value*4.184e3) * 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius: return (_value) * 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramKelvin: return (_value) * 1e6d;
                case SpecificEntropyUnit.MicrocaloriePerGramKelvin: return (_value*4.184e3) * 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius: return (_value) * 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramKelvin: return (_value) * 1e-6d;
                case SpecificEntropyUnit.MillicaloriePerGramKelvin: return (_value*4.184e3) * 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius: return (_value) * 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramKelvin: return (_value) * 1e-3d;
                case SpecificEntropyUnit.NanocaloriePerGramKelvin: return (_value*4.184e3) * 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius: return (_value) * 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramKelvin: return (_value) * 1e-9d;
                case SpecificEntropyUnit.PetacaloriePerGramKelvin: return (_value*4.184e3) * 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius: return (_value) * 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramKelvin: return (_value) * 1e15d;
                case SpecificEntropyUnit.PicocaloriePerGramKelvin: return (_value*4.184e3) * 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius: return (_value) * 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramKelvin: return (_value) * 1e-12d;
                case SpecificEntropyUnit.QutracaloriePerGramKelvin: return (_value*4.184e3) * 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius: return (_value) * 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramKelvin: return (_value) * 1e27d;
                case SpecificEntropyUnit.TeracaloriePerGramKelvin: return (_value*4.184e3) * 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius: return (_value) * 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramKelvin: return (_value) * 1e12d;
                case SpecificEntropyUnit.VettacaloriePerGramKelvin: return (_value*4.184e3) * 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius: return (_value) * 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramKelvin: return (_value) * 1e30d;
                case SpecificEntropyUnit.YoctocaloriePerGramKelvin: return (_value*4.184e3) * 1e-24d;
                case SpecificEntropyUnit.YoctojoulePerKilogramDegreeCelsius: return (_value) * 1e-24d;
                case SpecificEntropyUnit.YoctojoulePerKilogramKelvin: return (_value) * 1e-24d;
                case SpecificEntropyUnit.YottacaloriePerGramKelvin: return (_value*4.184e3) * 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius: return (_value) * 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramKelvin: return (_value) * 1e24d;
                case SpecificEntropyUnit.ZeptocaloriePerGramKelvin: return (_value*4.184e3) * 1e-21d;
                case SpecificEntropyUnit.ZeptojoulePerKilogramDegreeCelsius: return (_value) * 1e-21d;
                case SpecificEntropyUnit.ZeptojoulePerKilogramKelvin: return (_value) * 1e-21d;
                case SpecificEntropyUnit.ZettacaloriePerGramKelvin: return (_value*4.184e3) * 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius: return (_value) * 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramKelvin: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificEntropyUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificEntropyUnit.AttocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-18d;
                case SpecificEntropyUnit.AttojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-18d;
                case SpecificEntropyUnit.AttojoulePerKilogramKelvin: return (baseUnitValue) / 1e-18d;
                case SpecificEntropyUnit.BtuPerPoundFahrenheit: return baseUnitValue / 4.1868e3;
                case SpecificEntropyUnit.CaloriePerGramKelvin: return baseUnitValue/4.184e3;
                case SpecificEntropyUnit.CenticaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramKelvin: return (baseUnitValue) / 1e-2d;
                case SpecificEntropyUnit.DecacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramKelvin: return (baseUnitValue) / 1e1d;
                case SpecificEntropyUnit.DecicaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramKelvin: return (baseUnitValue) / 1e-1d;
                case SpecificEntropyUnit.ExacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramKelvin: return (baseUnitValue) / 1e18d;
                case SpecificEntropyUnit.FemtocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramKelvin: return (baseUnitValue) / 1e-15d;
                case SpecificEntropyUnit.GigacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramKelvin: return (baseUnitValue) / 1e9d;
                case SpecificEntropyUnit.HectocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramKelvin: return (baseUnitValue) / 1e2d;
                case SpecificEntropyUnit.JoulePerKilogramDegreeCelsius: return baseUnitValue;
                case SpecificEntropyUnit.JoulePerKilogramKelvin: return baseUnitValue;
                case SpecificEntropyUnit.KilocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramKelvin: return (baseUnitValue) / 1e3d;
                case SpecificEntropyUnit.MegacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramKelvin: return (baseUnitValue) / 1e6d;
                case SpecificEntropyUnit.MicrocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramKelvin: return (baseUnitValue) / 1e-6d;
                case SpecificEntropyUnit.MillicaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramKelvin: return (baseUnitValue) / 1e-3d;
                case SpecificEntropyUnit.NanocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramKelvin: return (baseUnitValue) / 1e-9d;
                case SpecificEntropyUnit.PetacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramKelvin: return (baseUnitValue) / 1e15d;
                case SpecificEntropyUnit.PicocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramKelvin: return (baseUnitValue) / 1e-12d;
                case SpecificEntropyUnit.QutracaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramKelvin: return (baseUnitValue) / 1e27d;
                case SpecificEntropyUnit.TeracaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramKelvin: return (baseUnitValue) / 1e12d;
                case SpecificEntropyUnit.VettacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramKelvin: return (baseUnitValue) / 1e30d;
                case SpecificEntropyUnit.YoctocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-24d;
                case SpecificEntropyUnit.YoctojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-24d;
                case SpecificEntropyUnit.YoctojoulePerKilogramKelvin: return (baseUnitValue) / 1e-24d;
                case SpecificEntropyUnit.YottacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramKelvin: return (baseUnitValue) / 1e24d;
                case SpecificEntropyUnit.ZeptocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-21d;
                case SpecificEntropyUnit.ZeptojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-21d;
                case SpecificEntropyUnit.ZeptojoulePerKilogramKelvin: return (baseUnitValue) / 1e-21d;
                case SpecificEntropyUnit.ZettacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramKelvin: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<SpecificEntropyUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificEntropy)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificEntropy)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificEntropy)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(SpecificEntropy))
                return this;
            else if(conversionType == typeof(SpecificEntropyUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return SpecificEntropy.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return SpecificEntropy.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(SpecificEntropy)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
