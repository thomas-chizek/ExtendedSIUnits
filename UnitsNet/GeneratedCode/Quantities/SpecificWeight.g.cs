//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The SpecificWeight, or more precisely, the volumetric weight density, of a substance is its weight per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Specificweight
    /// </remarks>
    public partial class SpecificWeight : IQuantity<SpecificWeightUnit>, IEquatable<SpecificWeight>, IComparable, IComparable<SpecificWeight>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificWeightUnit? _unit;

        static SpecificWeight()
        {
            BaseDimensions = new BaseDimensions(-2, 1, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<SpecificWeightUnit>(QuantityType.SpecificWeight,
                new UnitInfo<SpecificWeightUnit>[] {
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.CentinewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.CentinewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.CentinewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.CentipoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.CentipoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecanewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecanewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecanewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecinewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecinewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecinewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecipoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.DecipoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ExanewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ExanewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ExanewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ExapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ExapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.FemtonewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.FemtonewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.FemtonewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.FemtopoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.FemtopoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.GiganewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.GiganewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.GiganewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.GigapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.GigapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.HectonewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.HectonewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.HectonewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.HectopoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.HectopoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilogramForcePerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilogramForcePerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilogramForcePerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilonewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilonewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilonewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilopoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.KilopoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MeganewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MeganewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MeganewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MegapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MegapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MicronewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MicronewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MicronewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MicropoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MicropoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MillinewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MillinewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MillinewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MillipoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.MillipoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NanonewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NanonewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NanonewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NanopoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NanopoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.NewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PetanewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PetanewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PetanewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PetapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PetapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PiconewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PiconewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PiconewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PicopoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PicopoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.PoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.QutranewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.QutranewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.QutranewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.QutrapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.QutrapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TeranewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TeranewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TeranewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TerapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TerapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TonneForcePerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TonneForcePerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.TonneForcePerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.VettanewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.VettanewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.VettanewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.VettapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.VettapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.YottanewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.YottanewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.YottanewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.YottapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.YottapoundForcePerCubicInch, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ZettanewtonPerCubicCentimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ZettanewtonPerCubicMeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ZettanewtonPerCubicMillimeter, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ZettapoundForcePerCubicFoot, BaseUnits.Undefined),
                    new UnitInfo<SpecificWeightUnit>(SpecificWeightUnit.ZettapoundForcePerCubicInch, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificWeight(double numericValue, SpecificWeightUnit unit)
        {
            if(unit == SpecificWeightUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public SpecificWeight(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<SpecificWeightUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificWeight, which is NewtonPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static SpecificWeightUnit BaseUnit { get; } = SpecificWeightUnit.NewtonPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of SpecificWeight
        /// </summary>
        public static SpecificWeight MaxValue { get; } = new SpecificWeight(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificWeight
        /// </summary>
        public static SpecificWeight MinValue { get; } = new SpecificWeight(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.SpecificWeight;

        /// <summary>
        ///     All units of measurement for the SpecificWeight quantity.
        /// </summary>
        public static SpecificWeightUnit[] Units { get; } = Enum.GetValues(typeof(SpecificWeightUnit)).Cast<SpecificWeightUnit>().Except(new SpecificWeightUnit[]{ SpecificWeightUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonPerCubicMeter.
        /// </summary>
        public static SpecificWeight Zero { get; } = new SpecificWeight(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public SpecificWeightUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<SpecificWeightUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificWeight.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificWeight.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificWeight in CentinewtonsPerCubicCentimeter.
        /// </summary>
        public double CentinewtonsPerCubicCentimeter => As(SpecificWeightUnit.CentinewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in CentinewtonsPerCubicMeter.
        /// </summary>
        public double CentinewtonsPerCubicMeter => As(SpecificWeightUnit.CentinewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in CentinewtonsPerCubicMillimeter.
        /// </summary>
        public double CentinewtonsPerCubicMillimeter => As(SpecificWeightUnit.CentinewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in CentipoundsForcePerCubicFoot.
        /// </summary>
        public double CentipoundsForcePerCubicFoot => As(SpecificWeightUnit.CentipoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in CentipoundsForcePerCubicInch.
        /// </summary>
        public double CentipoundsForcePerCubicInch => As(SpecificWeightUnit.CentipoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in DecanewtonsPerCubicCentimeter.
        /// </summary>
        public double DecanewtonsPerCubicCentimeter => As(SpecificWeightUnit.DecanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in DecanewtonsPerCubicMeter.
        /// </summary>
        public double DecanewtonsPerCubicMeter => As(SpecificWeightUnit.DecanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in DecanewtonsPerCubicMillimeter.
        /// </summary>
        public double DecanewtonsPerCubicMillimeter => As(SpecificWeightUnit.DecanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in DecapoundsForcePerCubicFoot.
        /// </summary>
        public double DecapoundsForcePerCubicFoot => As(SpecificWeightUnit.DecapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in DecapoundsForcePerCubicInch.
        /// </summary>
        public double DecapoundsForcePerCubicInch => As(SpecificWeightUnit.DecapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in DecinewtonsPerCubicCentimeter.
        /// </summary>
        public double DecinewtonsPerCubicCentimeter => As(SpecificWeightUnit.DecinewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in DecinewtonsPerCubicMeter.
        /// </summary>
        public double DecinewtonsPerCubicMeter => As(SpecificWeightUnit.DecinewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in DecinewtonsPerCubicMillimeter.
        /// </summary>
        public double DecinewtonsPerCubicMillimeter => As(SpecificWeightUnit.DecinewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in DecipoundsForcePerCubicFoot.
        /// </summary>
        public double DecipoundsForcePerCubicFoot => As(SpecificWeightUnit.DecipoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in DecipoundsForcePerCubicInch.
        /// </summary>
        public double DecipoundsForcePerCubicInch => As(SpecificWeightUnit.DecipoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in ExanewtonsPerCubicCentimeter.
        /// </summary>
        public double ExanewtonsPerCubicCentimeter => As(SpecificWeightUnit.ExanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in ExanewtonsPerCubicMeter.
        /// </summary>
        public double ExanewtonsPerCubicMeter => As(SpecificWeightUnit.ExanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in ExanewtonsPerCubicMillimeter.
        /// </summary>
        public double ExanewtonsPerCubicMillimeter => As(SpecificWeightUnit.ExanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in ExapoundsForcePerCubicFoot.
        /// </summary>
        public double ExapoundsForcePerCubicFoot => As(SpecificWeightUnit.ExapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in ExapoundsForcePerCubicInch.
        /// </summary>
        public double ExapoundsForcePerCubicInch => As(SpecificWeightUnit.ExapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in FemtonewtonsPerCubicCentimeter.
        /// </summary>
        public double FemtonewtonsPerCubicCentimeter => As(SpecificWeightUnit.FemtonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in FemtonewtonsPerCubicMeter.
        /// </summary>
        public double FemtonewtonsPerCubicMeter => As(SpecificWeightUnit.FemtonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in FemtonewtonsPerCubicMillimeter.
        /// </summary>
        public double FemtonewtonsPerCubicMillimeter => As(SpecificWeightUnit.FemtonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in FemtopoundsForcePerCubicFoot.
        /// </summary>
        public double FemtopoundsForcePerCubicFoot => As(SpecificWeightUnit.FemtopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in FemtopoundsForcePerCubicInch.
        /// </summary>
        public double FemtopoundsForcePerCubicInch => As(SpecificWeightUnit.FemtopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in GiganewtonsPerCubicCentimeter.
        /// </summary>
        public double GiganewtonsPerCubicCentimeter => As(SpecificWeightUnit.GiganewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in GiganewtonsPerCubicMeter.
        /// </summary>
        public double GiganewtonsPerCubicMeter => As(SpecificWeightUnit.GiganewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in GiganewtonsPerCubicMillimeter.
        /// </summary>
        public double GiganewtonsPerCubicMillimeter => As(SpecificWeightUnit.GiganewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in GigapoundsForcePerCubicFoot.
        /// </summary>
        public double GigapoundsForcePerCubicFoot => As(SpecificWeightUnit.GigapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in GigapoundsForcePerCubicInch.
        /// </summary>
        public double GigapoundsForcePerCubicInch => As(SpecificWeightUnit.GigapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in HectonewtonsPerCubicCentimeter.
        /// </summary>
        public double HectonewtonsPerCubicCentimeter => As(SpecificWeightUnit.HectonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in HectonewtonsPerCubicMeter.
        /// </summary>
        public double HectonewtonsPerCubicMeter => As(SpecificWeightUnit.HectonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in HectonewtonsPerCubicMillimeter.
        /// </summary>
        public double HectonewtonsPerCubicMillimeter => As(SpecificWeightUnit.HectonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in HectopoundsForcePerCubicFoot.
        /// </summary>
        public double HectopoundsForcePerCubicFoot => As(SpecificWeightUnit.HectopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in HectopoundsForcePerCubicInch.
        /// </summary>
        public double HectopoundsForcePerCubicInch => As(SpecificWeightUnit.HectopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicCentimeter.
        /// </summary>
        public double KilogramsForcePerCubicCentimeter => As(SpecificWeightUnit.KilogramForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicMeter.
        /// </summary>
        public double KilogramsForcePerCubicMeter => As(SpecificWeightUnit.KilogramForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicMillimeter.
        /// </summary>
        public double KilogramsForcePerCubicMillimeter => As(SpecificWeightUnit.KilogramForcePerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicCentimeter.
        /// </summary>
        public double KilonewtonsPerCubicCentimeter => As(SpecificWeightUnit.KilonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicMeter.
        /// </summary>
        public double KilonewtonsPerCubicMeter => As(SpecificWeightUnit.KilonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicMillimeter.
        /// </summary>
        public double KilonewtonsPerCubicMillimeter => As(SpecificWeightUnit.KilonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in KilopoundsForcePerCubicFoot.
        /// </summary>
        public double KilopoundsForcePerCubicFoot => As(SpecificWeightUnit.KilopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in KilopoundsForcePerCubicInch.
        /// </summary>
        public double KilopoundsForcePerCubicInch => As(SpecificWeightUnit.KilopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicCentimeter.
        /// </summary>
        public double MeganewtonsPerCubicCentimeter => As(SpecificWeightUnit.MeganewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicMeter.
        /// </summary>
        public double MeganewtonsPerCubicMeter => As(SpecificWeightUnit.MeganewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicMillimeter.
        /// </summary>
        public double MeganewtonsPerCubicMillimeter => As(SpecificWeightUnit.MeganewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in MegapoundsForcePerCubicFoot.
        /// </summary>
        public double MegapoundsForcePerCubicFoot => As(SpecificWeightUnit.MegapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in MegapoundsForcePerCubicInch.
        /// </summary>
        public double MegapoundsForcePerCubicInch => As(SpecificWeightUnit.MegapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MicronewtonsPerCubicCentimeter.
        /// </summary>
        public double MicronewtonsPerCubicCentimeter => As(SpecificWeightUnit.MicronewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in MicronewtonsPerCubicMeter.
        /// </summary>
        public double MicronewtonsPerCubicMeter => As(SpecificWeightUnit.MicronewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in MicronewtonsPerCubicMillimeter.
        /// </summary>
        public double MicronewtonsPerCubicMillimeter => As(SpecificWeightUnit.MicronewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in MicropoundsForcePerCubicFoot.
        /// </summary>
        public double MicropoundsForcePerCubicFoot => As(SpecificWeightUnit.MicropoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in MicropoundsForcePerCubicInch.
        /// </summary>
        public double MicropoundsForcePerCubicInch => As(SpecificWeightUnit.MicropoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MillinewtonsPerCubicCentimeter.
        /// </summary>
        public double MillinewtonsPerCubicCentimeter => As(SpecificWeightUnit.MillinewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in MillinewtonsPerCubicMeter.
        /// </summary>
        public double MillinewtonsPerCubicMeter => As(SpecificWeightUnit.MillinewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in MillinewtonsPerCubicMillimeter.
        /// </summary>
        public double MillinewtonsPerCubicMillimeter => As(SpecificWeightUnit.MillinewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in MillipoundsForcePerCubicFoot.
        /// </summary>
        public double MillipoundsForcePerCubicFoot => As(SpecificWeightUnit.MillipoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in MillipoundsForcePerCubicInch.
        /// </summary>
        public double MillipoundsForcePerCubicInch => As(SpecificWeightUnit.MillipoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in NanonewtonsPerCubicCentimeter.
        /// </summary>
        public double NanonewtonsPerCubicCentimeter => As(SpecificWeightUnit.NanonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in NanonewtonsPerCubicMeter.
        /// </summary>
        public double NanonewtonsPerCubicMeter => As(SpecificWeightUnit.NanonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in NanonewtonsPerCubicMillimeter.
        /// </summary>
        public double NanonewtonsPerCubicMillimeter => As(SpecificWeightUnit.NanonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in NanopoundsForcePerCubicFoot.
        /// </summary>
        public double NanopoundsForcePerCubicFoot => As(SpecificWeightUnit.NanopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in NanopoundsForcePerCubicInch.
        /// </summary>
        public double NanopoundsForcePerCubicInch => As(SpecificWeightUnit.NanopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicCentimeter.
        /// </summary>
        public double NewtonsPerCubicCentimeter => As(SpecificWeightUnit.NewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicMeter.
        /// </summary>
        public double NewtonsPerCubicMeter => As(SpecificWeightUnit.NewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicMillimeter.
        /// </summary>
        public double NewtonsPerCubicMillimeter => As(SpecificWeightUnit.NewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PetanewtonsPerCubicCentimeter.
        /// </summary>
        public double PetanewtonsPerCubicCentimeter => As(SpecificWeightUnit.PetanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in PetanewtonsPerCubicMeter.
        /// </summary>
        public double PetanewtonsPerCubicMeter => As(SpecificWeightUnit.PetanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in PetanewtonsPerCubicMillimeter.
        /// </summary>
        public double PetanewtonsPerCubicMillimeter => As(SpecificWeightUnit.PetanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PetapoundsForcePerCubicFoot.
        /// </summary>
        public double PetapoundsForcePerCubicFoot => As(SpecificWeightUnit.PetapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PetapoundsForcePerCubicInch.
        /// </summary>
        public double PetapoundsForcePerCubicInch => As(SpecificWeightUnit.PetapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in PiconewtonsPerCubicCentimeter.
        /// </summary>
        public double PiconewtonsPerCubicCentimeter => As(SpecificWeightUnit.PiconewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in PiconewtonsPerCubicMeter.
        /// </summary>
        public double PiconewtonsPerCubicMeter => As(SpecificWeightUnit.PiconewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in PiconewtonsPerCubicMillimeter.
        /// </summary>
        public double PiconewtonsPerCubicMillimeter => As(SpecificWeightUnit.PiconewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PicopoundsForcePerCubicFoot.
        /// </summary>
        public double PicopoundsForcePerCubicFoot => As(SpecificWeightUnit.PicopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PicopoundsForcePerCubicInch.
        /// </summary>
        public double PicopoundsForcePerCubicInch => As(SpecificWeightUnit.PicopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in PoundsForcePerCubicFoot.
        /// </summary>
        public double PoundsForcePerCubicFoot => As(SpecificWeightUnit.PoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PoundsForcePerCubicInch.
        /// </summary>
        public double PoundsForcePerCubicInch => As(SpecificWeightUnit.PoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in QutranewtonsPerCubicCentimeter.
        /// </summary>
        public double QutranewtonsPerCubicCentimeter => As(SpecificWeightUnit.QutranewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in QutranewtonsPerCubicMeter.
        /// </summary>
        public double QutranewtonsPerCubicMeter => As(SpecificWeightUnit.QutranewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in QutranewtonsPerCubicMillimeter.
        /// </summary>
        public double QutranewtonsPerCubicMillimeter => As(SpecificWeightUnit.QutranewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in QutrapoundsForcePerCubicFoot.
        /// </summary>
        public double QutrapoundsForcePerCubicFoot => As(SpecificWeightUnit.QutrapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in QutrapoundsForcePerCubicInch.
        /// </summary>
        public double QutrapoundsForcePerCubicInch => As(SpecificWeightUnit.QutrapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in TeranewtonsPerCubicCentimeter.
        /// </summary>
        public double TeranewtonsPerCubicCentimeter => As(SpecificWeightUnit.TeranewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in TeranewtonsPerCubicMeter.
        /// </summary>
        public double TeranewtonsPerCubicMeter => As(SpecificWeightUnit.TeranewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in TeranewtonsPerCubicMillimeter.
        /// </summary>
        public double TeranewtonsPerCubicMillimeter => As(SpecificWeightUnit.TeranewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in TerapoundsForcePerCubicFoot.
        /// </summary>
        public double TerapoundsForcePerCubicFoot => As(SpecificWeightUnit.TerapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in TerapoundsForcePerCubicInch.
        /// </summary>
        public double TerapoundsForcePerCubicInch => As(SpecificWeightUnit.TerapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicCentimeter.
        /// </summary>
        public double TonnesForcePerCubicCentimeter => As(SpecificWeightUnit.TonneForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicMeter.
        /// </summary>
        public double TonnesForcePerCubicMeter => As(SpecificWeightUnit.TonneForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicMillimeter.
        /// </summary>
        public double TonnesForcePerCubicMillimeter => As(SpecificWeightUnit.TonneForcePerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in VettanewtonsPerCubicCentimeter.
        /// </summary>
        public double VettanewtonsPerCubicCentimeter => As(SpecificWeightUnit.VettanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in VettanewtonsPerCubicMeter.
        /// </summary>
        public double VettanewtonsPerCubicMeter => As(SpecificWeightUnit.VettanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in VettanewtonsPerCubicMillimeter.
        /// </summary>
        public double VettanewtonsPerCubicMillimeter => As(SpecificWeightUnit.VettanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in VettapoundsForcePerCubicFoot.
        /// </summary>
        public double VettapoundsForcePerCubicFoot => As(SpecificWeightUnit.VettapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in VettapoundsForcePerCubicInch.
        /// </summary>
        public double VettapoundsForcePerCubicInch => As(SpecificWeightUnit.VettapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in YottanewtonsPerCubicCentimeter.
        /// </summary>
        public double YottanewtonsPerCubicCentimeter => As(SpecificWeightUnit.YottanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in YottanewtonsPerCubicMeter.
        /// </summary>
        public double YottanewtonsPerCubicMeter => As(SpecificWeightUnit.YottanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in YottanewtonsPerCubicMillimeter.
        /// </summary>
        public double YottanewtonsPerCubicMillimeter => As(SpecificWeightUnit.YottanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in YottapoundsForcePerCubicFoot.
        /// </summary>
        public double YottapoundsForcePerCubicFoot => As(SpecificWeightUnit.YottapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in YottapoundsForcePerCubicInch.
        /// </summary>
        public double YottapoundsForcePerCubicInch => As(SpecificWeightUnit.YottapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in ZettanewtonsPerCubicCentimeter.
        /// </summary>
        public double ZettanewtonsPerCubicCentimeter => As(SpecificWeightUnit.ZettanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in ZettanewtonsPerCubicMeter.
        /// </summary>
        public double ZettanewtonsPerCubicMeter => As(SpecificWeightUnit.ZettanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in ZettanewtonsPerCubicMillimeter.
        /// </summary>
        public double ZettanewtonsPerCubicMillimeter => As(SpecificWeightUnit.ZettanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in ZettapoundsForcePerCubicFoot.
        /// </summary>
        public double ZettapoundsForcePerCubicFoot => As(SpecificWeightUnit.ZettapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in ZettapoundsForcePerCubicInch.
        /// </summary>
        public double ZettapoundsForcePerCubicInch => As(SpecificWeightUnit.ZettapoundForcePerCubicInch);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificWeightUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(SpecificWeightUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificWeight from CentinewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromCentinewtonsPerCubicCentimeter(QuantityValue centinewtonspercubiccentimeter)
        {
            double value = (double) centinewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.CentinewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from CentinewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromCentinewtonsPerCubicMeter(QuantityValue centinewtonspercubicmeter)
        {
            double value = (double) centinewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.CentinewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from CentinewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromCentinewtonsPerCubicMillimeter(QuantityValue centinewtonspercubicmillimeter)
        {
            double value = (double) centinewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.CentinewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from CentipoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromCentipoundsForcePerCubicFoot(QuantityValue centipoundsforcepercubicfoot)
        {
            double value = (double) centipoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.CentipoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from CentipoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromCentipoundsForcePerCubicInch(QuantityValue centipoundsforcepercubicinch)
        {
            double value = (double) centipoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.CentipoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from DecanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecanewtonsPerCubicCentimeter(QuantityValue decanewtonspercubiccentimeter)
        {
            double value = (double) decanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecanewtonsPerCubicMeter(QuantityValue decanewtonspercubicmeter)
        {
            double value = (double) decanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecanewtonsPerCubicMillimeter(QuantityValue decanewtonspercubicmillimeter)
        {
            double value = (double) decanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecapoundsForcePerCubicFoot(QuantityValue decapoundsforcepercubicfoot)
        {
            double value = (double) decapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.DecapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from DecapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecapoundsForcePerCubicInch(QuantityValue decapoundsforcepercubicinch)
        {
            double value = (double) decapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.DecapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from DecinewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecinewtonsPerCubicCentimeter(QuantityValue decinewtonspercubiccentimeter)
        {
            double value = (double) decinewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecinewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecinewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecinewtonsPerCubicMeter(QuantityValue decinewtonspercubicmeter)
        {
            double value = (double) decinewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecinewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecinewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecinewtonsPerCubicMillimeter(QuantityValue decinewtonspercubicmillimeter)
        {
            double value = (double) decinewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecinewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecipoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecipoundsForcePerCubicFoot(QuantityValue decipoundsforcepercubicfoot)
        {
            double value = (double) decipoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.DecipoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from DecipoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromDecipoundsForcePerCubicInch(QuantityValue decipoundsforcepercubicinch)
        {
            double value = (double) decipoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.DecipoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from ExanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromExanewtonsPerCubicCentimeter(QuantityValue exanewtonspercubiccentimeter)
        {
            double value = (double) exanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ExanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ExanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromExanewtonsPerCubicMeter(QuantityValue exanewtonspercubicmeter)
        {
            double value = (double) exanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.ExanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ExanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromExanewtonsPerCubicMillimeter(QuantityValue exanewtonspercubicmillimeter)
        {
            double value = (double) exanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ExanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ExapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromExapoundsForcePerCubicFoot(QuantityValue exapoundsforcepercubicfoot)
        {
            double value = (double) exapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.ExapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from ExapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromExapoundsForcePerCubicInch(QuantityValue exapoundsforcepercubicinch)
        {
            double value = (double) exapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.ExapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromFemtonewtonsPerCubicCentimeter(QuantityValue femtonewtonspercubiccentimeter)
        {
            double value = (double) femtonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.FemtonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromFemtonewtonsPerCubicMeter(QuantityValue femtonewtonspercubicmeter)
        {
            double value = (double) femtonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.FemtonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromFemtonewtonsPerCubicMillimeter(QuantityValue femtonewtonspercubicmillimeter)
        {
            double value = (double) femtonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.FemtonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromFemtopoundsForcePerCubicFoot(QuantityValue femtopoundsforcepercubicfoot)
        {
            double value = (double) femtopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.FemtopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromFemtopoundsForcePerCubicInch(QuantityValue femtopoundsforcepercubicinch)
        {
            double value = (double) femtopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.FemtopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from GiganewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromGiganewtonsPerCubicCentimeter(QuantityValue giganewtonspercubiccentimeter)
        {
            double value = (double) giganewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.GiganewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from GiganewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromGiganewtonsPerCubicMeter(QuantityValue giganewtonspercubicmeter)
        {
            double value = (double) giganewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.GiganewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from GiganewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromGiganewtonsPerCubicMillimeter(QuantityValue giganewtonspercubicmillimeter)
        {
            double value = (double) giganewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.GiganewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from GigapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromGigapoundsForcePerCubicFoot(QuantityValue gigapoundsforcepercubicfoot)
        {
            double value = (double) gigapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.GigapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from GigapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromGigapoundsForcePerCubicInch(QuantityValue gigapoundsforcepercubicinch)
        {
            double value = (double) gigapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.GigapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from HectonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromHectonewtonsPerCubicCentimeter(QuantityValue hectonewtonspercubiccentimeter)
        {
            double value = (double) hectonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.HectonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from HectonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromHectonewtonsPerCubicMeter(QuantityValue hectonewtonspercubicmeter)
        {
            double value = (double) hectonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.HectonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from HectonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromHectonewtonsPerCubicMillimeter(QuantityValue hectonewtonspercubicmillimeter)
        {
            double value = (double) hectonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.HectonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from HectopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromHectopoundsForcePerCubicFoot(QuantityValue hectopoundsforcepercubicfoot)
        {
            double value = (double) hectopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.HectopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from HectopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromHectopoundsForcePerCubicInch(QuantityValue hectopoundsforcepercubicinch)
        {
            double value = (double) hectopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.HectopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilogramsForcePerCubicCentimeter(QuantityValue kilogramsforcepercubiccentimeter)
        {
            double value = (double) kilogramsforcepercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilogramForcePerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilogramsForcePerCubicMeter(QuantityValue kilogramsforcepercubicmeter)
        {
            double value = (double) kilogramsforcepercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilogramForcePerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilogramsForcePerCubicMillimeter(QuantityValue kilogramsforcepercubicmillimeter)
        {
            double value = (double) kilogramsforcepercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilogramForcePerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilonewtonsPerCubicCentimeter(QuantityValue kilonewtonspercubiccentimeter)
        {
            double value = (double) kilonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilonewtonsPerCubicMeter(QuantityValue kilonewtonspercubicmeter)
        {
            double value = (double) kilonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilonewtonsPerCubicMillimeter(QuantityValue kilonewtonspercubicmillimeter)
        {
            double value = (double) kilonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilopoundsForcePerCubicFoot(QuantityValue kilopoundsforcepercubicfoot)
        {
            double value = (double) kilopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.KilopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from KilopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromKilopoundsForcePerCubicInch(QuantityValue kilopoundsforcepercubicinch)
        {
            double value = (double) kilopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.KilopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMeganewtonsPerCubicCentimeter(QuantityValue meganewtonspercubiccentimeter)
        {
            double value = (double) meganewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MeganewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMeganewtonsPerCubicMeter(QuantityValue meganewtonspercubicmeter)
        {
            double value = (double) meganewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.MeganewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMeganewtonsPerCubicMillimeter(QuantityValue meganewtonspercubicmillimeter)
        {
            double value = (double) meganewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MeganewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MegapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMegapoundsForcePerCubicFoot(QuantityValue megapoundsforcepercubicfoot)
        {
            double value = (double) megapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.MegapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from MegapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMegapoundsForcePerCubicInch(QuantityValue megapoundsforcepercubicinch)
        {
            double value = (double) megapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.MegapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from MicronewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMicronewtonsPerCubicCentimeter(QuantityValue micronewtonspercubiccentimeter)
        {
            double value = (double) micronewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MicronewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MicronewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMicronewtonsPerCubicMeter(QuantityValue micronewtonspercubicmeter)
        {
            double value = (double) micronewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.MicronewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MicronewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMicronewtonsPerCubicMillimeter(QuantityValue micronewtonspercubicmillimeter)
        {
            double value = (double) micronewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MicronewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MicropoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMicropoundsForcePerCubicFoot(QuantityValue micropoundsforcepercubicfoot)
        {
            double value = (double) micropoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.MicropoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from MicropoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMicropoundsForcePerCubicInch(QuantityValue micropoundsforcepercubicinch)
        {
            double value = (double) micropoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.MicropoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from MillinewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMillinewtonsPerCubicCentimeter(QuantityValue millinewtonspercubiccentimeter)
        {
            double value = (double) millinewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MillinewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MillinewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMillinewtonsPerCubicMeter(QuantityValue millinewtonspercubicmeter)
        {
            double value = (double) millinewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.MillinewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MillinewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMillinewtonsPerCubicMillimeter(QuantityValue millinewtonspercubicmillimeter)
        {
            double value = (double) millinewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MillinewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MillipoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMillipoundsForcePerCubicFoot(QuantityValue millipoundsforcepercubicfoot)
        {
            double value = (double) millipoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.MillipoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from MillipoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromMillipoundsForcePerCubicInch(QuantityValue millipoundsforcepercubicinch)
        {
            double value = (double) millipoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.MillipoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from NanonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNanonewtonsPerCubicCentimeter(QuantityValue nanonewtonspercubiccentimeter)
        {
            double value = (double) nanonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NanonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NanonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNanonewtonsPerCubicMeter(QuantityValue nanonewtonspercubicmeter)
        {
            double value = (double) nanonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.NanonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NanonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNanonewtonsPerCubicMillimeter(QuantityValue nanonewtonspercubicmillimeter)
        {
            double value = (double) nanonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NanonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NanopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNanopoundsForcePerCubicFoot(QuantityValue nanopoundsforcepercubicfoot)
        {
            double value = (double) nanopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.NanopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from NanopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNanopoundsForcePerCubicInch(QuantityValue nanopoundsforcepercubicinch)
        {
            double value = (double) nanopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.NanopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNewtonsPerCubicCentimeter(QuantityValue newtonspercubiccentimeter)
        {
            double value = (double) newtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNewtonsPerCubicMeter(QuantityValue newtonspercubicmeter)
        {
            double value = (double) newtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.NewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromNewtonsPerCubicMillimeter(QuantityValue newtonspercubicmillimeter)
        {
            double value = (double) newtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPetanewtonsPerCubicCentimeter(QuantityValue petanewtonspercubiccentimeter)
        {
            double value = (double) petanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PetanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPetanewtonsPerCubicMeter(QuantityValue petanewtonspercubicmeter)
        {
            double value = (double) petanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.PetanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPetanewtonsPerCubicMillimeter(QuantityValue petanewtonspercubicmillimeter)
        {
            double value = (double) petanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PetanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPetapoundsForcePerCubicFoot(QuantityValue petapoundsforcepercubicfoot)
        {
            double value = (double) petapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.PetapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from PetapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPetapoundsForcePerCubicInch(QuantityValue petapoundsforcepercubicinch)
        {
            double value = (double) petapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.PetapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from PiconewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPiconewtonsPerCubicCentimeter(QuantityValue piconewtonspercubiccentimeter)
        {
            double value = (double) piconewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PiconewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PiconewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPiconewtonsPerCubicMeter(QuantityValue piconewtonspercubicmeter)
        {
            double value = (double) piconewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.PiconewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PiconewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPiconewtonsPerCubicMillimeter(QuantityValue piconewtonspercubicmillimeter)
        {
            double value = (double) piconewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PiconewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PicopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPicopoundsForcePerCubicFoot(QuantityValue picopoundsforcepercubicfoot)
        {
            double value = (double) picopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.PicopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from PicopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPicopoundsForcePerCubicInch(QuantityValue picopoundsforcepercubicinch)
        {
            double value = (double) picopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.PicopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from PoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPoundsForcePerCubicFoot(QuantityValue poundsforcepercubicfoot)
        {
            double value = (double) poundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.PoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from PoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromPoundsForcePerCubicInch(QuantityValue poundsforcepercubicinch)
        {
            double value = (double) poundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.PoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from QutranewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromQutranewtonsPerCubicCentimeter(QuantityValue qutranewtonspercubiccentimeter)
        {
            double value = (double) qutranewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.QutranewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from QutranewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromQutranewtonsPerCubicMeter(QuantityValue qutranewtonspercubicmeter)
        {
            double value = (double) qutranewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.QutranewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from QutranewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromQutranewtonsPerCubicMillimeter(QuantityValue qutranewtonspercubicmillimeter)
        {
            double value = (double) qutranewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.QutranewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from QutrapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromQutrapoundsForcePerCubicFoot(QuantityValue qutrapoundsforcepercubicfoot)
        {
            double value = (double) qutrapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.QutrapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from QutrapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromQutrapoundsForcePerCubicInch(QuantityValue qutrapoundsforcepercubicinch)
        {
            double value = (double) qutrapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.QutrapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from TeranewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTeranewtonsPerCubicCentimeter(QuantityValue teranewtonspercubiccentimeter)
        {
            double value = (double) teranewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TeranewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TeranewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTeranewtonsPerCubicMeter(QuantityValue teranewtonspercubicmeter)
        {
            double value = (double) teranewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.TeranewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TeranewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTeranewtonsPerCubicMillimeter(QuantityValue teranewtonspercubicmillimeter)
        {
            double value = (double) teranewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TeranewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TerapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTerapoundsForcePerCubicFoot(QuantityValue terapoundsforcepercubicfoot)
        {
            double value = (double) terapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.TerapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from TerapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTerapoundsForcePerCubicInch(QuantityValue terapoundsforcepercubicinch)
        {
            double value = (double) terapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.TerapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTonnesForcePerCubicCentimeter(QuantityValue tonnesforcepercubiccentimeter)
        {
            double value = (double) tonnesforcepercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TonneForcePerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTonnesForcePerCubicMeter(QuantityValue tonnesforcepercubicmeter)
        {
            double value = (double) tonnesforcepercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.TonneForcePerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromTonnesForcePerCubicMillimeter(QuantityValue tonnesforcepercubicmillimeter)
        {
            double value = (double) tonnesforcepercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TonneForcePerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromVettanewtonsPerCubicCentimeter(QuantityValue vettanewtonspercubiccentimeter)
        {
            double value = (double) vettanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.VettanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromVettanewtonsPerCubicMeter(QuantityValue vettanewtonspercubicmeter)
        {
            double value = (double) vettanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.VettanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromVettanewtonsPerCubicMillimeter(QuantityValue vettanewtonspercubicmillimeter)
        {
            double value = (double) vettanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.VettanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromVettapoundsForcePerCubicFoot(QuantityValue vettapoundsforcepercubicfoot)
        {
            double value = (double) vettapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.VettapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from VettapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromVettapoundsForcePerCubicInch(QuantityValue vettapoundsforcepercubicinch)
        {
            double value = (double) vettapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.VettapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from YottanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromYottanewtonsPerCubicCentimeter(QuantityValue yottanewtonspercubiccentimeter)
        {
            double value = (double) yottanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.YottanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YottanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromYottanewtonsPerCubicMeter(QuantityValue yottanewtonspercubicmeter)
        {
            double value = (double) yottanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.YottanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YottanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromYottanewtonsPerCubicMillimeter(QuantityValue yottanewtonspercubicmillimeter)
        {
            double value = (double) yottanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.YottanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YottapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromYottapoundsForcePerCubicFoot(QuantityValue yottapoundsforcepercubicfoot)
        {
            double value = (double) yottapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.YottapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from YottapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromYottapoundsForcePerCubicInch(QuantityValue yottapoundsforcepercubicinch)
        {
            double value = (double) yottapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.YottapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromZettanewtonsPerCubicCentimeter(QuantityValue zettanewtonspercubiccentimeter)
        {
            double value = (double) zettanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZettanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromZettanewtonsPerCubicMeter(QuantityValue zettanewtonspercubicmeter)
        {
            double value = (double) zettanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZettanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromZettanewtonsPerCubicMillimeter(QuantityValue zettanewtonspercubicmillimeter)
        {
            double value = (double) zettanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZettanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromZettapoundsForcePerCubicFoot(QuantityValue zettapoundsforcepercubicfoot)
        {
            double value = (double) zettapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.ZettapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificWeight FromZettapoundsForcePerCubicInch(QuantityValue zettapoundsforcepercubicinch)
        {
            double value = (double) zettapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.ZettapoundForcePerCubicInch);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificWeightUnit" /> to <see cref="SpecificWeight" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificWeight unit value.</returns>
        public static SpecificWeight From(QuantityValue value, SpecificWeightUnit fromUnit)
        {
            return new SpecificWeight((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificWeight Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificWeight Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<SpecificWeight, SpecificWeightUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificWeight result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out SpecificWeight result)
        {
            return QuantityParser.Default.TryParse<SpecificWeight, SpecificWeightUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificWeightUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificWeightUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<SpecificWeightUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.SpecificWeightUnit)"/>
        public static bool TryParseUnit(string str, out SpecificWeightUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out SpecificWeightUnit unit)
        {
            return UnitParser.Default.TryParse<SpecificWeightUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static SpecificWeight operator -(SpecificWeight right)
        {
            return new SpecificWeight(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificWeight"/> from adding two <see cref="SpecificWeight"/>.</summary>
        public static SpecificWeight operator +(SpecificWeight left, SpecificWeight right)
        {
            return new SpecificWeight(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificWeight"/> from subtracting two <see cref="SpecificWeight"/>.</summary>
        public static SpecificWeight operator -(SpecificWeight left, SpecificWeight right)
        {
            return new SpecificWeight(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificWeight"/> from multiplying value and <see cref="SpecificWeight"/>.</summary>
        public static SpecificWeight operator *(double left, SpecificWeight right)
        {
            return new SpecificWeight(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificWeight"/> from multiplying value and <see cref="SpecificWeight"/>.</summary>
        public static SpecificWeight operator *(SpecificWeight left, double right)
        {
            return new SpecificWeight(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="SpecificWeight"/> from dividing <see cref="SpecificWeight"/> by value.</summary>
        public static SpecificWeight operator /(SpecificWeight left, double right)
        {
            return new SpecificWeight(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="SpecificWeight"/> by <see cref="SpecificWeight"/>.</summary>
        public static double operator /(SpecificWeight left, SpecificWeight right)
        {
            return left.NewtonsPerCubicMeter / right.NewtonsPerCubicMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(SpecificWeight left, SpecificWeight right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(SpecificWeight left, SpecificWeight right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(SpecificWeight left, SpecificWeight right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(SpecificWeight left, SpecificWeight right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificWeight, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(SpecificWeight left, SpecificWeight right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificWeight, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(SpecificWeight left, SpecificWeight right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificWeight objSpecificWeight)) throw new ArgumentException("Expected type SpecificWeight.", nameof(obj));

            return CompareTo(objSpecificWeight);
        }

        /// <inheritdoc />
        public int CompareTo(SpecificWeight other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificWeight, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificWeight objSpecificWeight))
                return false;

            return Equals(objSpecificWeight);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificWeight, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(SpecificWeight other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificWeight within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificWeight other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificWeight.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificWeightUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            if (firstUnitInfo is null)
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
                if (firstUnitInfo is null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }
            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is SpecificWeightUnit unitAsSpecificWeightUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificWeightUnit)} is supported.", nameof(unit));

            return As(unitAsSpecificWeightUnit);
        }

        /// <summary>
        ///     Converts this SpecificWeight to another SpecificWeight with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificWeight with the specified unit.</returns>
        public SpecificWeight ToUnit(SpecificWeightUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new SpecificWeight(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is SpecificWeightUnit unitAsSpecificWeightUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificWeightUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsSpecificWeightUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public SpecificWeight ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<SpecificWeightUnit> IQuantity<SpecificWeightUnit>.ToUnit(SpecificWeightUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<SpecificWeightUnit> IQuantity<SpecificWeightUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificWeightUnit.CentinewtonPerCubicCentimeter: return (_value*1000000) * 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMeter: return (_value) * 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMillimeter: return (_value*1000000000) * 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-2d;
                case SpecificWeightUnit.DecanewtonPerCubicCentimeter: return (_value*1000000) * 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMeter: return (_value) * 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMillimeter: return (_value*1000000000) * 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e1d;
                case SpecificWeightUnit.DecinewtonPerCubicCentimeter: return (_value*1000000) * 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMeter: return (_value) * 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMillimeter: return (_value*1000000000) * 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-1d;
                case SpecificWeightUnit.ExanewtonPerCubicCentimeter: return (_value*1000000) * 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMeter: return (_value) * 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMillimeter: return (_value*1000000000) * 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e18d;
                case SpecificWeightUnit.FemtonewtonPerCubicCentimeter: return (_value*1000000) * 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMeter: return (_value) * 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-15d;
                case SpecificWeightUnit.GiganewtonPerCubicCentimeter: return (_value*1000000) * 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMeter: return (_value) * 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMillimeter: return (_value*1000000000) * 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e9d;
                case SpecificWeightUnit.HectonewtonPerCubicCentimeter: return (_value*1000000) * 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMeter: return (_value) * 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMillimeter: return (_value*1000000000) * 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e2d;
                case SpecificWeightUnit.KilogramForcePerCubicCentimeter: return _value*9.80665e6;
                case SpecificWeightUnit.KilogramForcePerCubicMeter: return _value*9.80665;
                case SpecificWeightUnit.KilogramForcePerCubicMillimeter: return _value*9.80665e9;
                case SpecificWeightUnit.KilonewtonPerCubicCentimeter: return (_value*1000000) * 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMeter: return (_value) * 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMillimeter: return (_value*1000000000) * 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e3d;
                case SpecificWeightUnit.MeganewtonPerCubicCentimeter: return (_value*1000000) * 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMeter: return (_value) * 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMillimeter: return (_value*1000000000) * 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e6d;
                case SpecificWeightUnit.MicronewtonPerCubicCentimeter: return (_value*1000000) * 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMeter: return (_value) * 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMillimeter: return (_value*1000000000) * 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-6d;
                case SpecificWeightUnit.MillinewtonPerCubicCentimeter: return (_value*1000000) * 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMeter: return (_value) * 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMillimeter: return (_value*1000000000) * 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-3d;
                case SpecificWeightUnit.NanonewtonPerCubicCentimeter: return (_value*1000000) * 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMeter: return (_value) * 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-9d;
                case SpecificWeightUnit.NewtonPerCubicCentimeter: return _value*1000000;
                case SpecificWeightUnit.NewtonPerCubicMeter: return _value;
                case SpecificWeightUnit.NewtonPerCubicMillimeter: return _value*1000000000;
                case SpecificWeightUnit.PetanewtonPerCubicCentimeter: return (_value*1000000) * 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMeter: return (_value) * 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMillimeter: return (_value*1000000000) * 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e15d;
                case SpecificWeightUnit.PiconewtonPerCubicCentimeter: return (_value*1000000) * 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMeter: return (_value) * 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMillimeter: return (_value*1000000000) * 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-12d;
                case SpecificWeightUnit.PoundForcePerCubicFoot: return _value*1.570874638462462e2;
                case SpecificWeightUnit.PoundForcePerCubicInch: return _value*2.714471375263134e5;
                case SpecificWeightUnit.QutranewtonPerCubicCentimeter: return (_value*1000000) * 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMeter: return (_value) * 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMillimeter: return (_value*1000000000) * 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e27d;
                case SpecificWeightUnit.TeranewtonPerCubicCentimeter: return (_value*1000000) * 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMeter: return (_value) * 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMillimeter: return (_value*1000000000) * 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e12d;
                case SpecificWeightUnit.TonneForcePerCubicCentimeter: return _value*9.80665e9;
                case SpecificWeightUnit.TonneForcePerCubicMeter: return _value*9.80665e3;
                case SpecificWeightUnit.TonneForcePerCubicMillimeter: return _value*9.80665e12;
                case SpecificWeightUnit.VettanewtonPerCubicCentimeter: return (_value*1000000) * 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMeter: return (_value) * 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMillimeter: return (_value*1000000000) * 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e30d;
                case SpecificWeightUnit.YottanewtonPerCubicCentimeter: return (_value*1000000) * 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMeter: return (_value) * 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMillimeter: return (_value*1000000000) * 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e24d;
                case SpecificWeightUnit.ZettanewtonPerCubicCentimeter: return (_value*1000000) * 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMeter: return (_value) * 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMillimeter: return (_value*1000000000) * 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificWeightUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificWeightUnit.CentinewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMeter: return (baseUnitValue) / 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-2d;
                case SpecificWeightUnit.DecanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMeter: return (baseUnitValue) / 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e1d;
                case SpecificWeightUnit.DecinewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMeter: return (baseUnitValue) / 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-1d;
                case SpecificWeightUnit.ExanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMeter: return (baseUnitValue) / 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e18d;
                case SpecificWeightUnit.FemtonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMeter: return (baseUnitValue) / 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-15d;
                case SpecificWeightUnit.GiganewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMeter: return (baseUnitValue) / 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e9d;
                case SpecificWeightUnit.HectonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMeter: return (baseUnitValue) / 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e2d;
                case SpecificWeightUnit.KilogramForcePerCubicCentimeter: return baseUnitValue/9.80665e6;
                case SpecificWeightUnit.KilogramForcePerCubicMeter: return baseUnitValue/9.80665;
                case SpecificWeightUnit.KilogramForcePerCubicMillimeter: return baseUnitValue/9.80665e9;
                case SpecificWeightUnit.KilonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMeter: return (baseUnitValue) / 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e3d;
                case SpecificWeightUnit.MeganewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMeter: return (baseUnitValue) / 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e6d;
                case SpecificWeightUnit.MicronewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMeter: return (baseUnitValue) / 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-6d;
                case SpecificWeightUnit.MillinewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMeter: return (baseUnitValue) / 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-3d;
                case SpecificWeightUnit.NanonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMeter: return (baseUnitValue) / 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-9d;
                case SpecificWeightUnit.NewtonPerCubicCentimeter: return baseUnitValue*0.000001;
                case SpecificWeightUnit.NewtonPerCubicMeter: return baseUnitValue;
                case SpecificWeightUnit.NewtonPerCubicMillimeter: return baseUnitValue*0.000000001;
                case SpecificWeightUnit.PetanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMeter: return (baseUnitValue) / 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e15d;
                case SpecificWeightUnit.PiconewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMeter: return (baseUnitValue) / 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-12d;
                case SpecificWeightUnit.PoundForcePerCubicFoot: return baseUnitValue/1.570874638462462e2;
                case SpecificWeightUnit.PoundForcePerCubicInch: return baseUnitValue/2.714471375263134e5;
                case SpecificWeightUnit.QutranewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMeter: return (baseUnitValue) / 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e27d;
                case SpecificWeightUnit.TeranewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMeter: return (baseUnitValue) / 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e12d;
                case SpecificWeightUnit.TonneForcePerCubicCentimeter: return baseUnitValue/9.80665e9;
                case SpecificWeightUnit.TonneForcePerCubicMeter: return baseUnitValue/9.80665e3;
                case SpecificWeightUnit.TonneForcePerCubicMillimeter: return baseUnitValue/9.80665e12;
                case SpecificWeightUnit.VettanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMeter: return (baseUnitValue) / 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e30d;
                case SpecificWeightUnit.YottanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMeter: return (baseUnitValue) / 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e24d;
                case SpecificWeightUnit.ZettanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMeter: return (baseUnitValue) / 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<SpecificWeightUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificWeight)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificWeight)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificWeight)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(SpecificWeight))
                return this;
            else if(conversionType == typeof(SpecificWeightUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return SpecificWeight.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return SpecificWeight.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(SpecificWeight)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
