//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In thermodynamics, the specific volume of a substance is the ratio of the substance's volume to its mass. It is the reciprocal of density and an intrinsic property of matter as well.
    /// </summary>
    public partial class SpecificVolume : IQuantity<SpecificVolumeUnit>, IEquatable<SpecificVolume>, IComparable, IComparable<SpecificVolume>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificVolumeUnit? _unit;

        static SpecificVolume()
        {
            BaseDimensions = new BaseDimensions(3, -1, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<SpecificVolumeUnit>(QuantityType.SpecificVolume,
                new UnitInfo<SpecificVolumeUnit>[] {
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.CenticubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.CubicFootPerPound, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.CubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.DecacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.DecicubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.ExacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.FemtocubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.GigacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.HectocubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.KilocubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.MegacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.MicrocubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.MillicubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.NanocubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.PetacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.PicocubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.QutracubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.TeracubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.VettacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.YottacubicMeterPerKilogram, BaseUnits.Undefined),
                    new UnitInfo<SpecificVolumeUnit>(SpecificVolumeUnit.ZettacubicMeterPerKilogram, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificVolume(double numericValue, SpecificVolumeUnit unit)
        {
            if(unit == SpecificVolumeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public SpecificVolume(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            // for custom units, sometimes we don't find the base unit, this grabs the first off the list.
            if(Equals(firstUnitInfo, null ))
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
            }

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<SpecificVolumeUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificVolume, which is CubicMeterPerKilogram. All conversions go via this value.
        /// </summary>
        public static SpecificVolumeUnit BaseUnit { get; } = SpecificVolumeUnit.CubicMeterPerKilogram;

        /// <summary>
        /// Represents the largest possible value of SpecificVolume
        /// </summary>
        public static SpecificVolume MaxValue { get; } = new SpecificVolume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificVolume
        /// </summary>
        public static SpecificVolume MinValue { get; } = new SpecificVolume(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.SpecificVolume;

        /// <summary>
        ///     All units of measurement for the SpecificVolume quantity.
        /// </summary>
        public static SpecificVolumeUnit[] Units { get; } = Enum.GetValues(typeof(SpecificVolumeUnit)).Cast<SpecificVolumeUnit>().Except(new SpecificVolumeUnit[]{ SpecificVolumeUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerKilogram.
        /// </summary>
        public static SpecificVolume Zero { get; } = new SpecificVolume(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public SpecificVolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<SpecificVolumeUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificVolume.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificVolume.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificVolume in CenticubicMetersPerKilogram.
        /// </summary>
        public double CenticubicMetersPerKilogram => As(SpecificVolumeUnit.CenticubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in CubicFeetPerPound.
        /// </summary>
        public double CubicFeetPerPound => As(SpecificVolumeUnit.CubicFootPerPound);

        /// <summary>
        ///     Get SpecificVolume in CubicMetersPerKilogram.
        /// </summary>
        public double CubicMetersPerKilogram => As(SpecificVolumeUnit.CubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in DecacubicMetersPerKilogram.
        /// </summary>
        public double DecacubicMetersPerKilogram => As(SpecificVolumeUnit.DecacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in DecicubicMetersPerKilogram.
        /// </summary>
        public double DecicubicMetersPerKilogram => As(SpecificVolumeUnit.DecicubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in ExacubicMetersPerKilogram.
        /// </summary>
        public double ExacubicMetersPerKilogram => As(SpecificVolumeUnit.ExacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in FemtocubicMetersPerKilogram.
        /// </summary>
        public double FemtocubicMetersPerKilogram => As(SpecificVolumeUnit.FemtocubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in GigacubicMetersPerKilogram.
        /// </summary>
        public double GigacubicMetersPerKilogram => As(SpecificVolumeUnit.GigacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in HectocubicMetersPerKilogram.
        /// </summary>
        public double HectocubicMetersPerKilogram => As(SpecificVolumeUnit.HectocubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in KilocubicMetersPerKilogram.
        /// </summary>
        public double KilocubicMetersPerKilogram => As(SpecificVolumeUnit.KilocubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in MegacubicMetersPerKilogram.
        /// </summary>
        public double MegacubicMetersPerKilogram => As(SpecificVolumeUnit.MegacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in MicrocubicMetersPerKilogram.
        /// </summary>
        public double MicrocubicMetersPerKilogram => As(SpecificVolumeUnit.MicrocubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in MillicubicMetersPerKilogram.
        /// </summary>
        public double MillicubicMetersPerKilogram => As(SpecificVolumeUnit.MillicubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in NanocubicMetersPerKilogram.
        /// </summary>
        public double NanocubicMetersPerKilogram => As(SpecificVolumeUnit.NanocubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in PetacubicMetersPerKilogram.
        /// </summary>
        public double PetacubicMetersPerKilogram => As(SpecificVolumeUnit.PetacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in PicocubicMetersPerKilogram.
        /// </summary>
        public double PicocubicMetersPerKilogram => As(SpecificVolumeUnit.PicocubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in QutracubicMetersPerKilogram.
        /// </summary>
        public double QutracubicMetersPerKilogram => As(SpecificVolumeUnit.QutracubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in TeracubicMetersPerKilogram.
        /// </summary>
        public double TeracubicMetersPerKilogram => As(SpecificVolumeUnit.TeracubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in VettacubicMetersPerKilogram.
        /// </summary>
        public double VettacubicMetersPerKilogram => As(SpecificVolumeUnit.VettacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in YottacubicMetersPerKilogram.
        /// </summary>
        public double YottacubicMetersPerKilogram => As(SpecificVolumeUnit.YottacubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in ZettacubicMetersPerKilogram.
        /// </summary>
        public double ZettacubicMetersPerKilogram => As(SpecificVolumeUnit.ZettacubicMeterPerKilogram);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificVolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(SpecificVolumeUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificVolume from CenticubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromCenticubicMetersPerKilogram(QuantityValue centicubicmetersperkilogram)
        {
            double value = (double) centicubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.CenticubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from CubicFeetPerPound.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromCubicFeetPerPound(QuantityValue cubicfeetperpound)
        {
            double value = (double) cubicfeetperpound;
            return new SpecificVolume(value, SpecificVolumeUnit.CubicFootPerPound);
        }
        /// <summary>
        ///     Get SpecificVolume from CubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromCubicMetersPerKilogram(QuantityValue cubicmetersperkilogram)
        {
            double value = (double) cubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.CubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from DecacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromDecacubicMetersPerKilogram(QuantityValue decacubicmetersperkilogram)
        {
            double value = (double) decacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.DecacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from DecicubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromDecicubicMetersPerKilogram(QuantityValue decicubicmetersperkilogram)
        {
            double value = (double) decicubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.DecicubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from ExacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromExacubicMetersPerKilogram(QuantityValue exacubicmetersperkilogram)
        {
            double value = (double) exacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.ExacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from FemtocubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromFemtocubicMetersPerKilogram(QuantityValue femtocubicmetersperkilogram)
        {
            double value = (double) femtocubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.FemtocubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from GigacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromGigacubicMetersPerKilogram(QuantityValue gigacubicmetersperkilogram)
        {
            double value = (double) gigacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.GigacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from HectocubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromHectocubicMetersPerKilogram(QuantityValue hectocubicmetersperkilogram)
        {
            double value = (double) hectocubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.HectocubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from KilocubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromKilocubicMetersPerKilogram(QuantityValue kilocubicmetersperkilogram)
        {
            double value = (double) kilocubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.KilocubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from MegacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromMegacubicMetersPerKilogram(QuantityValue megacubicmetersperkilogram)
        {
            double value = (double) megacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.MegacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from MicrocubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromMicrocubicMetersPerKilogram(QuantityValue microcubicmetersperkilogram)
        {
            double value = (double) microcubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.MicrocubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from MillicubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromMillicubicMetersPerKilogram(QuantityValue millicubicmetersperkilogram)
        {
            double value = (double) millicubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.MillicubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from NanocubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromNanocubicMetersPerKilogram(QuantityValue nanocubicmetersperkilogram)
        {
            double value = (double) nanocubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.NanocubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from PetacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromPetacubicMetersPerKilogram(QuantityValue petacubicmetersperkilogram)
        {
            double value = (double) petacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.PetacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from PicocubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromPicocubicMetersPerKilogram(QuantityValue picocubicmetersperkilogram)
        {
            double value = (double) picocubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.PicocubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from QutracubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromQutracubicMetersPerKilogram(QuantityValue qutracubicmetersperkilogram)
        {
            double value = (double) qutracubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.QutracubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from TeracubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromTeracubicMetersPerKilogram(QuantityValue teracubicmetersperkilogram)
        {
            double value = (double) teracubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.TeracubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from VettacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromVettacubicMetersPerKilogram(QuantityValue vettacubicmetersperkilogram)
        {
            double value = (double) vettacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.VettacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from YottacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromYottacubicMetersPerKilogram(QuantityValue yottacubicmetersperkilogram)
        {
            double value = (double) yottacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.YottacubicMeterPerKilogram);
        }
        /// <summary>
        ///     Get SpecificVolume from ZettacubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromZettacubicMetersPerKilogram(QuantityValue zettacubicmetersperkilogram)
        {
            double value = (double) zettacubicmetersperkilogram;
            return new SpecificVolume(value, SpecificVolumeUnit.ZettacubicMeterPerKilogram);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificVolumeUnit" /> to <see cref="SpecificVolume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificVolume unit value.</returns>
        public static SpecificVolume From(QuantityValue value, SpecificVolumeUnit fromUnit)
        {
            return new SpecificVolume((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificVolume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificVolume Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<SpecificVolume, SpecificVolumeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificVolume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out SpecificVolume result)
        {
            return QuantityParser.Default.TryParse<SpecificVolume, SpecificVolumeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificVolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static SpecificVolumeUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<SpecificVolumeUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.SpecificVolumeUnit)"/>
        public static bool TryParseUnit(string str, out SpecificVolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out SpecificVolumeUnit unit)
        {
            return UnitParser.Default.TryParse<SpecificVolumeUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static SpecificVolume operator -(SpecificVolume right)
        {
            return new SpecificVolume(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from adding two <see cref="SpecificVolume"/>.</summary>
        public static SpecificVolume operator +(SpecificVolume left, SpecificVolume right)
        {
            return new SpecificVolume(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from subtracting two <see cref="SpecificVolume"/>.</summary>
        public static SpecificVolume operator -(SpecificVolume left, SpecificVolume right)
        {
            return new SpecificVolume(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from multiplying value and <see cref="SpecificVolume"/>.</summary>
        public static SpecificVolume operator *(double left, SpecificVolume right)
        {
            return new SpecificVolume(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from multiplying value and <see cref="SpecificVolume"/>.</summary>
        public static SpecificVolume operator *(SpecificVolume left, double right)
        {
            return new SpecificVolume(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from dividing <see cref="SpecificVolume"/> by value.</summary>
        public static SpecificVolume operator /(SpecificVolume left, double right)
        {
            return new SpecificVolume(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="SpecificVolume"/> by <see cref="SpecificVolume"/>.</summary>
        public static double operator /(SpecificVolume left, SpecificVolume right)
        {
            return left.CubicMetersPerKilogram / right.CubicMetersPerKilogram;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(SpecificVolume left, SpecificVolume right)
        {
            if(left is null || right is null )
                return false;
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(SpecificVolume left, SpecificVolume right)
        {
             if(left is null || right is null )
                return false;
           return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(SpecificVolume left, SpecificVolume right)
        {
             if(left is null || right is null )
                return false;
           return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(SpecificVolume left, SpecificVolume right)
        {
              if(left is null || right is null )
                return false;
          return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificVolume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(SpecificVolume left, SpecificVolume right)
        {
             if(left is null && right is null )
                return true;
            if( left is null )
                return false;
           return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(SpecificVolume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(SpecificVolume left, SpecificVolume right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificVolume objSpecificVolume)) throw new ArgumentException("Expected type SpecificVolume.", nameof(obj));

            return CompareTo(objSpecificVolume);
        }

        /// <inheritdoc />
        public int CompareTo(SpecificVolume other)
        {
            if(other is null) throw new ArgumentNullException();

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificVolume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificVolume objSpecificVolume))
                return false;

            return Equals(objSpecificVolume);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(SpecificVolume, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(SpecificVolume other)
        {
            if(other is null)
                return false;

            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificVolume within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificVolume other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificVolume.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificVolumeUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            
            var firstUnitInfo = unitInfos.FirstOrDefault(u => u.Value.Equals(BaseUnit));
            if (firstUnitInfo is null)
            {
                firstUnitInfo = unitInfos.FirstOrDefault();
                if (firstUnitInfo is null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
            }
            
            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is SpecificVolumeUnit unitAsSpecificVolumeUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificVolumeUnit)} is supported.", nameof(unit));

            return As(unitAsSpecificVolumeUnit);
        }

        /// <summary>
        ///     Converts this SpecificVolume to another SpecificVolume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificVolume with the specified unit.</returns>
        public SpecificVolume ToUnit(SpecificVolumeUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new SpecificVolume(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is SpecificVolumeUnit unitAsSpecificVolumeUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(SpecificVolumeUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsSpecificVolumeUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public SpecificVolume ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));
            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault(u=> u.Value.Equals(BaseUnit));
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            
            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<SpecificVolumeUnit> IQuantity<SpecificVolumeUnit>.ToUnit(SpecificVolumeUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<SpecificVolumeUnit> IQuantity<SpecificVolumeUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificVolumeUnit.CenticubicMeterPerKilogram: return (_value) * 1e-2d;
                case SpecificVolumeUnit.CubicFootPerPound: return _value/16.01846353;
                case SpecificVolumeUnit.CubicMeterPerKilogram: return _value;
                case SpecificVolumeUnit.DecacubicMeterPerKilogram: return (_value) * 1e1d;
                case SpecificVolumeUnit.DecicubicMeterPerKilogram: return (_value) * 1e-1d;
                case SpecificVolumeUnit.ExacubicMeterPerKilogram: return (_value) * 1e18d;
                case SpecificVolumeUnit.FemtocubicMeterPerKilogram: return (_value) * 1e-15d;
                case SpecificVolumeUnit.GigacubicMeterPerKilogram: return (_value) * 1e9d;
                case SpecificVolumeUnit.HectocubicMeterPerKilogram: return (_value) * 1e2d;
                case SpecificVolumeUnit.KilocubicMeterPerKilogram: return (_value) * 1e3d;
                case SpecificVolumeUnit.MegacubicMeterPerKilogram: return (_value) * 1e6d;
                case SpecificVolumeUnit.MicrocubicMeterPerKilogram: return (_value) * 1e-6d;
                case SpecificVolumeUnit.MillicubicMeterPerKilogram: return (_value) * 1e-3d;
                case SpecificVolumeUnit.NanocubicMeterPerKilogram: return (_value) * 1e-9d;
                case SpecificVolumeUnit.PetacubicMeterPerKilogram: return (_value) * 1e15d;
                case SpecificVolumeUnit.PicocubicMeterPerKilogram: return (_value) * 1e-12d;
                case SpecificVolumeUnit.QutracubicMeterPerKilogram: return (_value) * 1e27d;
                case SpecificVolumeUnit.TeracubicMeterPerKilogram: return (_value) * 1e12d;
                case SpecificVolumeUnit.VettacubicMeterPerKilogram: return (_value) * 1e30d;
                case SpecificVolumeUnit.YottacubicMeterPerKilogram: return (_value) * 1e24d;
                case SpecificVolumeUnit.ZettacubicMeterPerKilogram: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificVolumeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificVolumeUnit.CenticubicMeterPerKilogram: return (baseUnitValue) / 1e-2d;
                case SpecificVolumeUnit.CubicFootPerPound: return baseUnitValue*16.01846353;
                case SpecificVolumeUnit.CubicMeterPerKilogram: return baseUnitValue;
                case SpecificVolumeUnit.DecacubicMeterPerKilogram: return (baseUnitValue) / 1e1d;
                case SpecificVolumeUnit.DecicubicMeterPerKilogram: return (baseUnitValue) / 1e-1d;
                case SpecificVolumeUnit.ExacubicMeterPerKilogram: return (baseUnitValue) / 1e18d;
                case SpecificVolumeUnit.FemtocubicMeterPerKilogram: return (baseUnitValue) / 1e-15d;
                case SpecificVolumeUnit.GigacubicMeterPerKilogram: return (baseUnitValue) / 1e9d;
                case SpecificVolumeUnit.HectocubicMeterPerKilogram: return (baseUnitValue) / 1e2d;
                case SpecificVolumeUnit.KilocubicMeterPerKilogram: return (baseUnitValue) / 1e3d;
                case SpecificVolumeUnit.MegacubicMeterPerKilogram: return (baseUnitValue) / 1e6d;
                case SpecificVolumeUnit.MicrocubicMeterPerKilogram: return (baseUnitValue) / 1e-6d;
                case SpecificVolumeUnit.MillicubicMeterPerKilogram: return (baseUnitValue) / 1e-3d;
                case SpecificVolumeUnit.NanocubicMeterPerKilogram: return (baseUnitValue) / 1e-9d;
                case SpecificVolumeUnit.PetacubicMeterPerKilogram: return (baseUnitValue) / 1e15d;
                case SpecificVolumeUnit.PicocubicMeterPerKilogram: return (baseUnitValue) / 1e-12d;
                case SpecificVolumeUnit.QutracubicMeterPerKilogram: return (baseUnitValue) / 1e27d;
                case SpecificVolumeUnit.TeracubicMeterPerKilogram: return (baseUnitValue) / 1e12d;
                case SpecificVolumeUnit.VettacubicMeterPerKilogram: return (baseUnitValue) / 1e30d;
                case SpecificVolumeUnit.YottacubicMeterPerKilogram: return (baseUnitValue) / 1e24d;
                case SpecificVolumeUnit.ZettacubicMeterPerKilogram: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<SpecificVolumeUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificVolume)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificVolume)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(SpecificVolume)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(SpecificVolume))
                return this;
            else if(conversionType == typeof(SpecificVolumeUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return SpecificVolume.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return SpecificVolume.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(SpecificVolume)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
