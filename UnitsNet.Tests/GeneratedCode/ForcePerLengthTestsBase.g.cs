//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ForcePerLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ForcePerLengthTestsBase
    {
        protected abstract double CentinewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double DecanewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double DecinewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double ExanewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double FemtonewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double GiganewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double HectonewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double KilogramsForcePerMeterInOneNewtonPerMeter { get; }
        protected abstract double KilonewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double MeganewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double MicronewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double MillinewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double NanonewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double NewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double PetanewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double PiconewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double QutranewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double TeranewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double VettanewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double YottanewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double ZettanewtonsPerMeterInOneNewtonPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double ExanewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double FemtonewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GiganewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double HectonewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PetanewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PiconewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double QutranewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double TeranewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double VettanewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double YottanewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double ZettanewtonsPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ForcePerLength((double)0.0, ForcePerLengthUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ForcePerLength(double.PositiveInfinity, ForcePerLengthUnit.NewtonPerMeter));
            Assert.Throws<ArgumentException>(() => new ForcePerLength(double.NegativeInfinity, ForcePerLengthUnit.NewtonPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ForcePerLength(double.NaN, ForcePerLengthUnit.NewtonPerMeter));
        }

        [Fact]
        public void NewtonPerMeterToForcePerLengthUnits()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(CentinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.CentinewtonsPerMeter, CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.DecanewtonsPerMeter, DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.DecinewtonsPerMeter, DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(ExanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.ExanewtonsPerMeter, ExanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(FemtonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.FemtonewtonsPerMeter, FemtonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(GiganewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.GiganewtonsPerMeter, GiganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(HectonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.HectonewtonsPerMeter, HectonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerMeterInOneNewtonPerMeter, newtonpermeter.KilogramsForcePerMeter, KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.KilonewtonsPerMeter, KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.MeganewtonsPerMeter, MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.MicronewtonsPerMeter, MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.MillinewtonsPerMeter, MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.NanonewtonsPerMeter, NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(PetanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.PetanewtonsPerMeter, PetanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(PiconewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.PiconewtonsPerMeter, PiconewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(QutranewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.QutranewtonsPerMeter, QutranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(TeranewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.TeranewtonsPerMeter, TeranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(VettanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.VettanewtonsPerMeter, VettanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(YottanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.YottanewtonsPerMeter, YottanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(ZettanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.ZettanewtonsPerMeter, ZettanewtonsPerMeterTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.CentinewtonPerMeter).CentinewtonsPerMeter, CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.DecanewtonPerMeter).DecanewtonsPerMeter, DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.DecinewtonPerMeter).DecinewtonsPerMeter, DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.ExanewtonPerMeter).ExanewtonsPerMeter, ExanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.FemtonewtonPerMeter).FemtonewtonsPerMeter, FemtonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.GiganewtonPerMeter).GiganewtonsPerMeter, GiganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.HectonewtonPerMeter).HectonewtonsPerMeter, HectonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.KilogramForcePerMeter).KilogramsForcePerMeter, KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.KilonewtonPerMeter).KilonewtonsPerMeter, KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.MeganewtonPerMeter).MeganewtonsPerMeter, MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.MicronewtonPerMeter).MicronewtonsPerMeter, MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.MillinewtonPerMeter).MillinewtonsPerMeter, MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.NanonewtonPerMeter).NanonewtonsPerMeter, NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.NewtonPerMeter).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.PetanewtonPerMeter).PetanewtonsPerMeter, PetanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.PiconewtonPerMeter).PiconewtonsPerMeter, PiconewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.QutranewtonPerMeter).QutranewtonsPerMeter, QutranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.TeranewtonPerMeter).TeranewtonsPerMeter, TeranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.VettanewtonPerMeter).VettanewtonsPerMeter, VettanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.YottanewtonPerMeter).YottanewtonsPerMeter, YottanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.From(1, ForcePerLengthUnit.ZettanewtonPerMeter).ZettanewtonsPerMeter, ZettanewtonsPerMeterTolerance);
        }

        [Fact]
        public void FromNewtonsPerMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ForcePerLength.FromNewtonsPerMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ForcePerLength.FromNewtonsPerMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonsPerMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ForcePerLength.FromNewtonsPerMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(CentinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.CentinewtonPerMeter), CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecanewtonPerMeter), DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecinewtonPerMeter), DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(ExanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.ExanewtonPerMeter), ExanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(FemtonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.FemtonewtonPerMeter), FemtonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(GiganewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.GiganewtonPerMeter), GiganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(HectonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.HectonewtonPerMeter), HectonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilogramForcePerMeter), KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilonewtonPerMeter), KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MeganewtonPerMeter), MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MicronewtonPerMeter), MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MillinewtonPerMeter), MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NanonewtonPerMeter), NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NewtonPerMeter), NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(PetanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.PetanewtonPerMeter), PetanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(PiconewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.PiconewtonPerMeter), PiconewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(QutranewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.QutranewtonPerMeter), QutranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(TeranewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.TeranewtonPerMeter), TeranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(VettanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.VettanewtonPerMeter), VettanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(YottanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.YottanewtonPerMeter), YottanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(ZettanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.ZettanewtonPerMeter), ZettanewtonsPerMeterTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);

            var centinewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.CentinewtonPerMeter);
            AssertEx.EqualTolerance(CentinewtonsPerMeterInOneNewtonPerMeter, (double)centinewtonpermeterQuantity.Value, CentinewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.CentinewtonPerMeter, centinewtonpermeterQuantity.Unit);

            var decanewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.DecanewtonPerMeter);
            AssertEx.EqualTolerance(DecanewtonsPerMeterInOneNewtonPerMeter, (double)decanewtonpermeterQuantity.Value, DecanewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.DecanewtonPerMeter, decanewtonpermeterQuantity.Unit);

            var decinewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.DecinewtonPerMeter);
            AssertEx.EqualTolerance(DecinewtonsPerMeterInOneNewtonPerMeter, (double)decinewtonpermeterQuantity.Value, DecinewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.DecinewtonPerMeter, decinewtonpermeterQuantity.Unit);

            var exanewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.ExanewtonPerMeter);
            AssertEx.EqualTolerance(ExanewtonsPerMeterInOneNewtonPerMeter, (double)exanewtonpermeterQuantity.Value, ExanewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.ExanewtonPerMeter, exanewtonpermeterQuantity.Unit);

            var femtonewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.FemtonewtonPerMeter);
            AssertEx.EqualTolerance(FemtonewtonsPerMeterInOneNewtonPerMeter, (double)femtonewtonpermeterQuantity.Value, FemtonewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.FemtonewtonPerMeter, femtonewtonpermeterQuantity.Unit);

            var giganewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.GiganewtonPerMeter);
            AssertEx.EqualTolerance(GiganewtonsPerMeterInOneNewtonPerMeter, (double)giganewtonpermeterQuantity.Value, GiganewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.GiganewtonPerMeter, giganewtonpermeterQuantity.Unit);

            var hectonewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.HectonewtonPerMeter);
            AssertEx.EqualTolerance(HectonewtonsPerMeterInOneNewtonPerMeter, (double)hectonewtonpermeterQuantity.Value, HectonewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.HectonewtonPerMeter, hectonewtonpermeterQuantity.Unit);

            var kilogramforcepermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.KilogramForcePerMeter);
            AssertEx.EqualTolerance(KilogramsForcePerMeterInOneNewtonPerMeter, (double)kilogramforcepermeterQuantity.Value, KilogramsForcePerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.KilogramForcePerMeter, kilogramforcepermeterQuantity.Unit);

            var kilonewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.KilonewtonPerMeter);
            AssertEx.EqualTolerance(KilonewtonsPerMeterInOneNewtonPerMeter, (double)kilonewtonpermeterQuantity.Value, KilonewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.KilonewtonPerMeter, kilonewtonpermeterQuantity.Unit);

            var meganewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.MeganewtonPerMeter);
            AssertEx.EqualTolerance(MeganewtonsPerMeterInOneNewtonPerMeter, (double)meganewtonpermeterQuantity.Value, MeganewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.MeganewtonPerMeter, meganewtonpermeterQuantity.Unit);

            var micronewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.MicronewtonPerMeter);
            AssertEx.EqualTolerance(MicronewtonsPerMeterInOneNewtonPerMeter, (double)micronewtonpermeterQuantity.Value, MicronewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.MicronewtonPerMeter, micronewtonpermeterQuantity.Unit);

            var millinewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.MillinewtonPerMeter);
            AssertEx.EqualTolerance(MillinewtonsPerMeterInOneNewtonPerMeter, (double)millinewtonpermeterQuantity.Value, MillinewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.MillinewtonPerMeter, millinewtonpermeterQuantity.Unit);

            var nanonewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.NanonewtonPerMeter);
            AssertEx.EqualTolerance(NanonewtonsPerMeterInOneNewtonPerMeter, (double)nanonewtonpermeterQuantity.Value, NanonewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.NanonewtonPerMeter, nanonewtonpermeterQuantity.Unit);

            var newtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.NewtonPerMeter);
            AssertEx.EqualTolerance(NewtonsPerMeterInOneNewtonPerMeter, (double)newtonpermeterQuantity.Value, NewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.NewtonPerMeter, newtonpermeterQuantity.Unit);

            var petanewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.PetanewtonPerMeter);
            AssertEx.EqualTolerance(PetanewtonsPerMeterInOneNewtonPerMeter, (double)petanewtonpermeterQuantity.Value, PetanewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.PetanewtonPerMeter, petanewtonpermeterQuantity.Unit);

            var piconewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.PiconewtonPerMeter);
            AssertEx.EqualTolerance(PiconewtonsPerMeterInOneNewtonPerMeter, (double)piconewtonpermeterQuantity.Value, PiconewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.PiconewtonPerMeter, piconewtonpermeterQuantity.Unit);

            var qutranewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.QutranewtonPerMeter);
            AssertEx.EqualTolerance(QutranewtonsPerMeterInOneNewtonPerMeter, (double)qutranewtonpermeterQuantity.Value, QutranewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.QutranewtonPerMeter, qutranewtonpermeterQuantity.Unit);

            var teranewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.TeranewtonPerMeter);
            AssertEx.EqualTolerance(TeranewtonsPerMeterInOneNewtonPerMeter, (double)teranewtonpermeterQuantity.Value, TeranewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.TeranewtonPerMeter, teranewtonpermeterQuantity.Unit);

            var vettanewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.VettanewtonPerMeter);
            AssertEx.EqualTolerance(VettanewtonsPerMeterInOneNewtonPerMeter, (double)vettanewtonpermeterQuantity.Value, VettanewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.VettanewtonPerMeter, vettanewtonpermeterQuantity.Unit);

            var yottanewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.YottanewtonPerMeter);
            AssertEx.EqualTolerance(YottanewtonsPerMeterInOneNewtonPerMeter, (double)yottanewtonpermeterQuantity.Value, YottanewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.YottanewtonPerMeter, yottanewtonpermeterQuantity.Unit);

            var zettanewtonpermeterQuantity = newtonpermeter.ToUnit(ForcePerLengthUnit.ZettanewtonPerMeter);
            AssertEx.EqualTolerance(ZettanewtonsPerMeterInOneNewtonPerMeter, (double)zettanewtonpermeterQuantity.Value, ZettanewtonsPerMeterTolerance);
            Assert.Equal(ForcePerLengthUnit.ZettanewtonPerMeter, zettanewtonpermeterQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(1, ForcePerLength.FromCentinewtonsPerMeter(newtonpermeter.CentinewtonsPerMeter).NewtonsPerMeter, CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecanewtonsPerMeter(newtonpermeter.DecanewtonsPerMeter).NewtonsPerMeter, DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecinewtonsPerMeter(newtonpermeter.DecinewtonsPerMeter).NewtonsPerMeter, DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromExanewtonsPerMeter(newtonpermeter.ExanewtonsPerMeter).NewtonsPerMeter, ExanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromFemtonewtonsPerMeter(newtonpermeter.FemtonewtonsPerMeter).NewtonsPerMeter, FemtonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromGiganewtonsPerMeter(newtonpermeter.GiganewtonsPerMeter).NewtonsPerMeter, GiganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromHectonewtonsPerMeter(newtonpermeter.HectonewtonsPerMeter).NewtonsPerMeter, HectonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilogramsForcePerMeter(newtonpermeter.KilogramsForcePerMeter).NewtonsPerMeter, KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilonewtonsPerMeter(newtonpermeter.KilonewtonsPerMeter).NewtonsPerMeter, KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMeganewtonsPerMeter(newtonpermeter.MeganewtonsPerMeter).NewtonsPerMeter, MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMicronewtonsPerMeter(newtonpermeter.MicronewtonsPerMeter).NewtonsPerMeter, MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMillinewtonsPerMeter(newtonpermeter.MillinewtonsPerMeter).NewtonsPerMeter, MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNanonewtonsPerMeter(newtonpermeter.NanonewtonsPerMeter).NewtonsPerMeter, NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNewtonsPerMeter(newtonpermeter.NewtonsPerMeter).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromPetanewtonsPerMeter(newtonpermeter.PetanewtonsPerMeter).NewtonsPerMeter, PetanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromPiconewtonsPerMeter(newtonpermeter.PiconewtonsPerMeter).NewtonsPerMeter, PiconewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromQutranewtonsPerMeter(newtonpermeter.QutranewtonsPerMeter).NewtonsPerMeter, QutranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromTeranewtonsPerMeter(newtonpermeter.TeranewtonsPerMeter).NewtonsPerMeter, TeranewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromVettanewtonsPerMeter(newtonpermeter.VettanewtonsPerMeter).NewtonsPerMeter, VettanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromYottanewtonsPerMeter(newtonpermeter.YottanewtonsPerMeter).NewtonsPerMeter, YottanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromZettanewtonsPerMeter(newtonpermeter.ZettanewtonsPerMeter).NewtonsPerMeter, ZettanewtonsPerMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ForcePerLength v = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ForcePerLength.FromNewtonsPerMeter(3)-v).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ForcePerLength.FromNewtonsPerMeter(10)/5).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, ForcePerLength.FromNewtonsPerMeter(10)/ForcePerLength.FromNewtonsPerMeter(5), NewtonsPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ForcePerLength oneNewtonPerMeter = ForcePerLength.FromNewtonsPerMeter(1);
            ForcePerLength twoNewtonsPerMeter = ForcePerLength.FromNewtonsPerMeter(2);

            Assert.True(oneNewtonPerMeter < twoNewtonsPerMeter);
            Assert.True(oneNewtonPerMeter <= twoNewtonsPerMeter);
            Assert.True(twoNewtonsPerMeter > oneNewtonPerMeter);
            Assert.True(twoNewtonsPerMeter >= oneNewtonPerMeter);

            Assert.False(oneNewtonPerMeter > twoNewtonsPerMeter);
            Assert.False(oneNewtonPerMeter >= twoNewtonsPerMeter);
            Assert.False(twoNewtonsPerMeter < oneNewtonPerMeter);
            Assert.False(twoNewtonsPerMeter <= oneNewtonPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.Equal(0, newtonpermeter.CompareTo(newtonpermeter));
            Assert.True(newtonpermeter.CompareTo(ForcePerLength.Zero) > 0);
            Assert.True(ForcePerLength.Zero.CompareTo(newtonpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.Throws<ArgumentException>(() => newtonpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => newtonpermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ForcePerLength.FromNewtonsPerMeter(1);
            var b = ForcePerLength.FromNewtonsPerMeter(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = ForcePerLength.FromNewtonsPerMeter(1);
            var b = ForcePerLength.FromNewtonsPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.True(v.Equals(ForcePerLength.FromNewtonsPerMeter(1), NewtonsPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ForcePerLength.Zero, NewtonsPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.False(newtonpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.False(newtonpermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ForcePerLengthUnit.Undefined, ForcePerLength.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ForcePerLengthUnit)).Cast<ForcePerLengthUnit>();
            foreach(var unit in units)
            {
                if(unit == ForcePerLengthUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ForcePerLength.BaseDimensions is null);
        }
    }
}
