//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Energy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyTestsBase
    {
        protected abstract double BritishThermalUnitsInOneJoule { get; }
        protected abstract double CaloriesInOneJoule { get; }
        protected abstract double DecathermsEcInOneJoule { get; }
        protected abstract double DecathermsImperialInOneJoule { get; }
        protected abstract double DecathermsUsInOneJoule { get; }
        protected abstract double ElectronVoltsInOneJoule { get; }
        protected abstract double ErgsInOneJoule { get; }
        protected abstract double ExabritishThermalUnitsInOneJoule { get; }
        protected abstract double ExajoulesInOneJoule { get; }
        protected abstract double ExawattHoursInOneJoule { get; }
        protected abstract double FootPoundsInOneJoule { get; }
        protected abstract double GigabritishThermalUnitsInOneJoule { get; }
        protected abstract double GigajoulesInOneJoule { get; }
        protected abstract double GigawattHoursInOneJoule { get; }
        protected abstract double JoulesInOneJoule { get; }
        protected abstract double KilobritishThermalUnitsInOneJoule { get; }
        protected abstract double KilocaloriesInOneJoule { get; }
        protected abstract double KilojoulesInOneJoule { get; }
        protected abstract double KilowattHoursInOneJoule { get; }
        protected abstract double MegabritishThermalUnitsInOneJoule { get; }
        protected abstract double MegajoulesInOneJoule { get; }
        protected abstract double MegawattHoursInOneJoule { get; }
        protected abstract double PetabritishThermalUnitsInOneJoule { get; }
        protected abstract double PetajoulesInOneJoule { get; }
        protected abstract double PetawattHoursInOneJoule { get; }
        protected abstract double QutrabritishThermalUnitsInOneJoule { get; }
        protected abstract double QutrajoulesInOneJoule { get; }
        protected abstract double QutrawattHoursInOneJoule { get; }
        protected abstract double TerabritishThermalUnitsInOneJoule { get; }
        protected abstract double TerajoulesInOneJoule { get; }
        protected abstract double TerawattHoursInOneJoule { get; }
        protected abstract double ThermsEcInOneJoule { get; }
        protected abstract double ThermsImperialInOneJoule { get; }
        protected abstract double ThermsUsInOneJoule { get; }
        protected abstract double VettabritishThermalUnitsInOneJoule { get; }
        protected abstract double VettajoulesInOneJoule { get; }
        protected abstract double VettawattHoursInOneJoule { get; }
        protected abstract double WattHoursInOneJoule { get; }
        protected abstract double YottabritishThermalUnitsInOneJoule { get; }
        protected abstract double YottajoulesInOneJoule { get; }
        protected abstract double YottawattHoursInOneJoule { get; }
        protected abstract double ZettabritishThermalUnitsInOneJoule { get; }
        protected abstract double ZettajoulesInOneJoule { get; }
        protected abstract double ZettawattHoursInOneJoule { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double CaloriesTolerance { get { return 1e-5; } }
        protected virtual double DecathermsEcTolerance { get { return 1e-5; } }
        protected virtual double DecathermsImperialTolerance { get { return 1e-5; } }
        protected virtual double DecathermsUsTolerance { get { return 1e-5; } }
        protected virtual double ElectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double ErgsTolerance { get { return 1e-5; } }
        protected virtual double ExabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double ExajoulesTolerance { get { return 1e-5; } }
        protected virtual double ExawattHoursTolerance { get { return 1e-5; } }
        protected virtual double FootPoundsTolerance { get { return 1e-5; } }
        protected virtual double GigabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursTolerance { get { return 1e-5; } }
        protected virtual double JoulesTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursTolerance { get { return 1e-5; } }
        protected virtual double MegabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursTolerance { get { return 1e-5; } }
        protected virtual double PetabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double PetajoulesTolerance { get { return 1e-5; } }
        protected virtual double PetawattHoursTolerance { get { return 1e-5; } }
        protected virtual double QutrabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double QutrajoulesTolerance { get { return 1e-5; } }
        protected virtual double QutrawattHoursTolerance { get { return 1e-5; } }
        protected virtual double TerabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double TerajoulesTolerance { get { return 1e-5; } }
        protected virtual double TerawattHoursTolerance { get { return 1e-5; } }
        protected virtual double ThermsEcTolerance { get { return 1e-5; } }
        protected virtual double ThermsImperialTolerance { get { return 1e-5; } }
        protected virtual double ThermsUsTolerance { get { return 1e-5; } }
        protected virtual double VettabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double VettajoulesTolerance { get { return 1e-5; } }
        protected virtual double VettawattHoursTolerance { get { return 1e-5; } }
        protected virtual double WattHoursTolerance { get { return 1e-5; } }
        protected virtual double YottabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double YottajoulesTolerance { get { return 1e-5; } }
        protected virtual double YottawattHoursTolerance { get { return 1e-5; } }
        protected virtual double ZettabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double ZettajoulesTolerance { get { return 1e-5; } }
        protected virtual double ZettawattHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Energy((double)0.0, EnergyUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Energy(double.PositiveInfinity, EnergyUnit.Joule));
            Assert.Throws<ArgumentException>(() => new Energy(double.NegativeInfinity, EnergyUnit.Joule));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Energy(double.NaN, EnergyUnit.Joule));
        }

        [Fact]
        public void JouleToEnergyUnits()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.BritishThermalUnits, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.Calories, CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.DecathermsEc, DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.DecathermsImperial, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.DecathermsUs, DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.ElectronVolts, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.Ergs, ErgsTolerance);
            AssertEx.EqualTolerance(ExabritishThermalUnitsInOneJoule, joule.ExabritishThermalUnits, ExabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(ExajoulesInOneJoule, joule.Exajoules, ExajoulesTolerance);
            AssertEx.EqualTolerance(ExawattHoursInOneJoule, joule.ExawattHours, ExawattHoursTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.FootPounds, FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, joule.Gigajoules, GigajoulesTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.GigawattHours, GigawattHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.Kilocalories, KilocaloriesTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.Kilojoules, KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.KilowattHours, KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.Megajoules, MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.MegawattHours, MegawattHoursTolerance);
            AssertEx.EqualTolerance(PetabritishThermalUnitsInOneJoule, joule.PetabritishThermalUnits, PetabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(PetajoulesInOneJoule, joule.Petajoules, PetajoulesTolerance);
            AssertEx.EqualTolerance(PetawattHoursInOneJoule, joule.PetawattHours, PetawattHoursTolerance);
            AssertEx.EqualTolerance(QutrabritishThermalUnitsInOneJoule, joule.QutrabritishThermalUnits, QutrabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(QutrajoulesInOneJoule, joule.Qutrajoules, QutrajoulesTolerance);
            AssertEx.EqualTolerance(QutrawattHoursInOneJoule, joule.QutrawattHours, QutrawattHoursTolerance);
            AssertEx.EqualTolerance(TerabritishThermalUnitsInOneJoule, joule.TerabritishThermalUnits, TerabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(TerajoulesInOneJoule, joule.Terajoules, TerajoulesTolerance);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, joule.TerawattHours, TerawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.ThermsEc, ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.ThermsImperial, ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.ThermsUs, ThermsUsTolerance);
            AssertEx.EqualTolerance(VettabritishThermalUnitsInOneJoule, joule.VettabritishThermalUnits, VettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(VettajoulesInOneJoule, joule.Vettajoules, VettajoulesTolerance);
            AssertEx.EqualTolerance(VettawattHoursInOneJoule, joule.VettawattHours, VettawattHoursTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.WattHours, WattHoursTolerance);
            AssertEx.EqualTolerance(YottabritishThermalUnitsInOneJoule, joule.YottabritishThermalUnits, YottabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(YottajoulesInOneJoule, joule.Yottajoules, YottajoulesTolerance);
            AssertEx.EqualTolerance(YottawattHoursInOneJoule, joule.YottawattHours, YottawattHoursTolerance);
            AssertEx.EqualTolerance(ZettabritishThermalUnitsInOneJoule, joule.ZettabritishThermalUnits, ZettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(ZettajoulesInOneJoule, joule.Zettajoules, ZettajoulesTolerance);
            AssertEx.EqualTolerance(ZettawattHoursInOneJoule, joule.ZettawattHours, ZettawattHoursTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.BritishThermalUnit).BritishThermalUnits, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Calorie).Calories, CaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.DecathermEc).DecathermsEc, DecathermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.DecathermImperial).DecathermsImperial, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.DecathermUs).DecathermsUs, DecathermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ElectronVolt).ElectronVolts, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Erg).Ergs, ErgsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ExabritishThermalUnit).ExabritishThermalUnits, ExabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Exajoule).Exajoules, ExajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ExawattHour).ExawattHours, ExawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.FootPound).FootPounds, FootPoundsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.GigabritishThermalUnit).GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Gigajoule).Gigajoules, GigajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.GigawattHour).GigawattHours, GigawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Joule).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.KilobritishThermalUnit).KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Kilocalorie).Kilocalories, KilocaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Kilojoule).Kilojoules, KilojoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.KilowattHour).KilowattHours, KilowattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.MegabritishThermalUnit).MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Megajoule).Megajoules, MegajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.MegawattHour).MegawattHours, MegawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.PetabritishThermalUnit).PetabritishThermalUnits, PetabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Petajoule).Petajoules, PetajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.PetawattHour).PetawattHours, PetawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.QutrabritishThermalUnit).QutrabritishThermalUnits, QutrabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Qutrajoule).Qutrajoules, QutrajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.QutrawattHour).QutrawattHours, QutrawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.TerabritishThermalUnit).TerabritishThermalUnits, TerabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Terajoule).Terajoules, TerajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.TerawattHour).TerawattHours, TerawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ThermEc).ThermsEc, ThermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ThermImperial).ThermsImperial, ThermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ThermUs).ThermsUs, ThermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.VettabritishThermalUnit).VettabritishThermalUnits, VettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Vettajoule).Vettajoules, VettajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.VettawattHour).VettawattHours, VettawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.WattHour).WattHours, WattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.YottabritishThermalUnit).YottabritishThermalUnits, YottabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Yottajoule).Yottajoules, YottajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.YottawattHour).YottawattHours, YottawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ZettabritishThermalUnit).ZettabritishThermalUnits, ZettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Zettajoule).Zettajoules, ZettajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ZettawattHour).ZettawattHours, ZettawattHoursTolerance);
        }

        [Fact]
        public void FromJoules_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Energy.FromJoules(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Energy.FromJoules(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoules_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Energy.FromJoules(double.NaN));
        }

        [Fact]
        public void As()
        {
            var joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.As(EnergyUnit.BritishThermalUnit), BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.As(EnergyUnit.Calorie), CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.As(EnergyUnit.DecathermEc), DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.As(EnergyUnit.DecathermImperial), DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.As(EnergyUnit.DecathermUs), DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.As(EnergyUnit.ElectronVolt), ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.As(EnergyUnit.Erg), ErgsTolerance);
            AssertEx.EqualTolerance(ExabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.ExabritishThermalUnit), ExabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(ExajoulesInOneJoule, joule.As(EnergyUnit.Exajoule), ExajoulesTolerance);
            AssertEx.EqualTolerance(ExawattHoursInOneJoule, joule.As(EnergyUnit.ExawattHour), ExawattHoursTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.As(EnergyUnit.FootPound), FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.GigabritishThermalUnit), GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, joule.As(EnergyUnit.Gigajoule), GigajoulesTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.As(EnergyUnit.GigawattHour), GigawattHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.As(EnergyUnit.Joule), JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.As(EnergyUnit.KilobritishThermalUnit), KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.As(EnergyUnit.Kilocalorie), KilocaloriesTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.As(EnergyUnit.Kilojoule), KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.As(EnergyUnit.KilowattHour), KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.MegabritishThermalUnit), MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.As(EnergyUnit.Megajoule), MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.As(EnergyUnit.MegawattHour), MegawattHoursTolerance);
            AssertEx.EqualTolerance(PetabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.PetabritishThermalUnit), PetabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(PetajoulesInOneJoule, joule.As(EnergyUnit.Petajoule), PetajoulesTolerance);
            AssertEx.EqualTolerance(PetawattHoursInOneJoule, joule.As(EnergyUnit.PetawattHour), PetawattHoursTolerance);
            AssertEx.EqualTolerance(QutrabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.QutrabritishThermalUnit), QutrabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(QutrajoulesInOneJoule, joule.As(EnergyUnit.Qutrajoule), QutrajoulesTolerance);
            AssertEx.EqualTolerance(QutrawattHoursInOneJoule, joule.As(EnergyUnit.QutrawattHour), QutrawattHoursTolerance);
            AssertEx.EqualTolerance(TerabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.TerabritishThermalUnit), TerabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(TerajoulesInOneJoule, joule.As(EnergyUnit.Terajoule), TerajoulesTolerance);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, joule.As(EnergyUnit.TerawattHour), TerawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.As(EnergyUnit.ThermEc), ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.As(EnergyUnit.ThermImperial), ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.As(EnergyUnit.ThermUs), ThermsUsTolerance);
            AssertEx.EqualTolerance(VettabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.VettabritishThermalUnit), VettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(VettajoulesInOneJoule, joule.As(EnergyUnit.Vettajoule), VettajoulesTolerance);
            AssertEx.EqualTolerance(VettawattHoursInOneJoule, joule.As(EnergyUnit.VettawattHour), VettawattHoursTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.As(EnergyUnit.WattHour), WattHoursTolerance);
            AssertEx.EqualTolerance(YottabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.YottabritishThermalUnit), YottabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(YottajoulesInOneJoule, joule.As(EnergyUnit.Yottajoule), YottajoulesTolerance);
            AssertEx.EqualTolerance(YottawattHoursInOneJoule, joule.As(EnergyUnit.YottawattHour), YottawattHoursTolerance);
            AssertEx.EqualTolerance(ZettabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.ZettabritishThermalUnit), ZettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(ZettajoulesInOneJoule, joule.As(EnergyUnit.Zettajoule), ZettajoulesTolerance);
            AssertEx.EqualTolerance(ZettawattHoursInOneJoule, joule.As(EnergyUnit.ZettawattHour), ZettawattHoursTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var joule = Energy.FromJoules(1);

            var britishthermalunitQuantity = joule.ToUnit(EnergyUnit.BritishThermalUnit);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, (double)britishthermalunitQuantity.Value, BritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.BritishThermalUnit, britishthermalunitQuantity.Unit);

            var calorieQuantity = joule.ToUnit(EnergyUnit.Calorie);
            AssertEx.EqualTolerance(CaloriesInOneJoule, (double)calorieQuantity.Value, CaloriesTolerance);
            Assert.Equal(EnergyUnit.Calorie, calorieQuantity.Unit);

            var decathermecQuantity = joule.ToUnit(EnergyUnit.DecathermEc);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, (double)decathermecQuantity.Value, DecathermsEcTolerance);
            Assert.Equal(EnergyUnit.DecathermEc, decathermecQuantity.Unit);

            var decathermimperialQuantity = joule.ToUnit(EnergyUnit.DecathermImperial);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, (double)decathermimperialQuantity.Value, DecathermsImperialTolerance);
            Assert.Equal(EnergyUnit.DecathermImperial, decathermimperialQuantity.Unit);

            var decathermusQuantity = joule.ToUnit(EnergyUnit.DecathermUs);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, (double)decathermusQuantity.Value, DecathermsUsTolerance);
            Assert.Equal(EnergyUnit.DecathermUs, decathermusQuantity.Unit);

            var electronvoltQuantity = joule.ToUnit(EnergyUnit.ElectronVolt);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, (double)electronvoltQuantity.Value, ElectronVoltsTolerance);
            Assert.Equal(EnergyUnit.ElectronVolt, electronvoltQuantity.Unit);

            var ergQuantity = joule.ToUnit(EnergyUnit.Erg);
            AssertEx.EqualTolerance(ErgsInOneJoule, (double)ergQuantity.Value, ErgsTolerance);
            Assert.Equal(EnergyUnit.Erg, ergQuantity.Unit);

            var exabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.ExabritishThermalUnit);
            AssertEx.EqualTolerance(ExabritishThermalUnitsInOneJoule, (double)exabritishthermalunitQuantity.Value, ExabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.ExabritishThermalUnit, exabritishthermalunitQuantity.Unit);

            var exajouleQuantity = joule.ToUnit(EnergyUnit.Exajoule);
            AssertEx.EqualTolerance(ExajoulesInOneJoule, (double)exajouleQuantity.Value, ExajoulesTolerance);
            Assert.Equal(EnergyUnit.Exajoule, exajouleQuantity.Unit);

            var exawatthourQuantity = joule.ToUnit(EnergyUnit.ExawattHour);
            AssertEx.EqualTolerance(ExawattHoursInOneJoule, (double)exawatthourQuantity.Value, ExawattHoursTolerance);
            Assert.Equal(EnergyUnit.ExawattHour, exawatthourQuantity.Unit);

            var footpoundQuantity = joule.ToUnit(EnergyUnit.FootPound);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, (double)footpoundQuantity.Value, FootPoundsTolerance);
            Assert.Equal(EnergyUnit.FootPound, footpoundQuantity.Unit);

            var gigabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.GigabritishThermalUnit);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, (double)gigabritishthermalunitQuantity.Value, GigabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.GigabritishThermalUnit, gigabritishthermalunitQuantity.Unit);

            var gigajouleQuantity = joule.ToUnit(EnergyUnit.Gigajoule);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, (double)gigajouleQuantity.Value, GigajoulesTolerance);
            Assert.Equal(EnergyUnit.Gigajoule, gigajouleQuantity.Unit);

            var gigawatthourQuantity = joule.ToUnit(EnergyUnit.GigawattHour);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, (double)gigawatthourQuantity.Value, GigawattHoursTolerance);
            Assert.Equal(EnergyUnit.GigawattHour, gigawatthourQuantity.Unit);

            var jouleQuantity = joule.ToUnit(EnergyUnit.Joule);
            AssertEx.EqualTolerance(JoulesInOneJoule, (double)jouleQuantity.Value, JoulesTolerance);
            Assert.Equal(EnergyUnit.Joule, jouleQuantity.Unit);

            var kilobritishthermalunitQuantity = joule.ToUnit(EnergyUnit.KilobritishThermalUnit);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, (double)kilobritishthermalunitQuantity.Value, KilobritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.KilobritishThermalUnit, kilobritishthermalunitQuantity.Unit);

            var kilocalorieQuantity = joule.ToUnit(EnergyUnit.Kilocalorie);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, (double)kilocalorieQuantity.Value, KilocaloriesTolerance);
            Assert.Equal(EnergyUnit.Kilocalorie, kilocalorieQuantity.Unit);

            var kilojouleQuantity = joule.ToUnit(EnergyUnit.Kilojoule);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, (double)kilojouleQuantity.Value, KilojoulesTolerance);
            Assert.Equal(EnergyUnit.Kilojoule, kilojouleQuantity.Unit);

            var kilowatthourQuantity = joule.ToUnit(EnergyUnit.KilowattHour);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, (double)kilowatthourQuantity.Value, KilowattHoursTolerance);
            Assert.Equal(EnergyUnit.KilowattHour, kilowatthourQuantity.Unit);

            var megabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.MegabritishThermalUnit);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, (double)megabritishthermalunitQuantity.Value, MegabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.MegabritishThermalUnit, megabritishthermalunitQuantity.Unit);

            var megajouleQuantity = joule.ToUnit(EnergyUnit.Megajoule);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, (double)megajouleQuantity.Value, MegajoulesTolerance);
            Assert.Equal(EnergyUnit.Megajoule, megajouleQuantity.Unit);

            var megawatthourQuantity = joule.ToUnit(EnergyUnit.MegawattHour);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, (double)megawatthourQuantity.Value, MegawattHoursTolerance);
            Assert.Equal(EnergyUnit.MegawattHour, megawatthourQuantity.Unit);

            var petabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.PetabritishThermalUnit);
            AssertEx.EqualTolerance(PetabritishThermalUnitsInOneJoule, (double)petabritishthermalunitQuantity.Value, PetabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.PetabritishThermalUnit, petabritishthermalunitQuantity.Unit);

            var petajouleQuantity = joule.ToUnit(EnergyUnit.Petajoule);
            AssertEx.EqualTolerance(PetajoulesInOneJoule, (double)petajouleQuantity.Value, PetajoulesTolerance);
            Assert.Equal(EnergyUnit.Petajoule, petajouleQuantity.Unit);

            var petawatthourQuantity = joule.ToUnit(EnergyUnit.PetawattHour);
            AssertEx.EqualTolerance(PetawattHoursInOneJoule, (double)petawatthourQuantity.Value, PetawattHoursTolerance);
            Assert.Equal(EnergyUnit.PetawattHour, petawatthourQuantity.Unit);

            var qutrabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.QutrabritishThermalUnit);
            AssertEx.EqualTolerance(QutrabritishThermalUnitsInOneJoule, (double)qutrabritishthermalunitQuantity.Value, QutrabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.QutrabritishThermalUnit, qutrabritishthermalunitQuantity.Unit);

            var qutrajouleQuantity = joule.ToUnit(EnergyUnit.Qutrajoule);
            AssertEx.EqualTolerance(QutrajoulesInOneJoule, (double)qutrajouleQuantity.Value, QutrajoulesTolerance);
            Assert.Equal(EnergyUnit.Qutrajoule, qutrajouleQuantity.Unit);

            var qutrawatthourQuantity = joule.ToUnit(EnergyUnit.QutrawattHour);
            AssertEx.EqualTolerance(QutrawattHoursInOneJoule, (double)qutrawatthourQuantity.Value, QutrawattHoursTolerance);
            Assert.Equal(EnergyUnit.QutrawattHour, qutrawatthourQuantity.Unit);

            var terabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.TerabritishThermalUnit);
            AssertEx.EqualTolerance(TerabritishThermalUnitsInOneJoule, (double)terabritishthermalunitQuantity.Value, TerabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.TerabritishThermalUnit, terabritishthermalunitQuantity.Unit);

            var terajouleQuantity = joule.ToUnit(EnergyUnit.Terajoule);
            AssertEx.EqualTolerance(TerajoulesInOneJoule, (double)terajouleQuantity.Value, TerajoulesTolerance);
            Assert.Equal(EnergyUnit.Terajoule, terajouleQuantity.Unit);

            var terawatthourQuantity = joule.ToUnit(EnergyUnit.TerawattHour);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, (double)terawatthourQuantity.Value, TerawattHoursTolerance);
            Assert.Equal(EnergyUnit.TerawattHour, terawatthourQuantity.Unit);

            var thermecQuantity = joule.ToUnit(EnergyUnit.ThermEc);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, (double)thermecQuantity.Value, ThermsEcTolerance);
            Assert.Equal(EnergyUnit.ThermEc, thermecQuantity.Unit);

            var thermimperialQuantity = joule.ToUnit(EnergyUnit.ThermImperial);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, (double)thermimperialQuantity.Value, ThermsImperialTolerance);
            Assert.Equal(EnergyUnit.ThermImperial, thermimperialQuantity.Unit);

            var thermusQuantity = joule.ToUnit(EnergyUnit.ThermUs);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, (double)thermusQuantity.Value, ThermsUsTolerance);
            Assert.Equal(EnergyUnit.ThermUs, thermusQuantity.Unit);

            var vettabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.VettabritishThermalUnit);
            AssertEx.EqualTolerance(VettabritishThermalUnitsInOneJoule, (double)vettabritishthermalunitQuantity.Value, VettabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.VettabritishThermalUnit, vettabritishthermalunitQuantity.Unit);

            var vettajouleQuantity = joule.ToUnit(EnergyUnit.Vettajoule);
            AssertEx.EqualTolerance(VettajoulesInOneJoule, (double)vettajouleQuantity.Value, VettajoulesTolerance);
            Assert.Equal(EnergyUnit.Vettajoule, vettajouleQuantity.Unit);

            var vettawatthourQuantity = joule.ToUnit(EnergyUnit.VettawattHour);
            AssertEx.EqualTolerance(VettawattHoursInOneJoule, (double)vettawatthourQuantity.Value, VettawattHoursTolerance);
            Assert.Equal(EnergyUnit.VettawattHour, vettawatthourQuantity.Unit);

            var watthourQuantity = joule.ToUnit(EnergyUnit.WattHour);
            AssertEx.EqualTolerance(WattHoursInOneJoule, (double)watthourQuantity.Value, WattHoursTolerance);
            Assert.Equal(EnergyUnit.WattHour, watthourQuantity.Unit);

            var yottabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.YottabritishThermalUnit);
            AssertEx.EqualTolerance(YottabritishThermalUnitsInOneJoule, (double)yottabritishthermalunitQuantity.Value, YottabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.YottabritishThermalUnit, yottabritishthermalunitQuantity.Unit);

            var yottajouleQuantity = joule.ToUnit(EnergyUnit.Yottajoule);
            AssertEx.EqualTolerance(YottajoulesInOneJoule, (double)yottajouleQuantity.Value, YottajoulesTolerance);
            Assert.Equal(EnergyUnit.Yottajoule, yottajouleQuantity.Unit);

            var yottawatthourQuantity = joule.ToUnit(EnergyUnit.YottawattHour);
            AssertEx.EqualTolerance(YottawattHoursInOneJoule, (double)yottawatthourQuantity.Value, YottawattHoursTolerance);
            Assert.Equal(EnergyUnit.YottawattHour, yottawatthourQuantity.Unit);

            var zettabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.ZettabritishThermalUnit);
            AssertEx.EqualTolerance(ZettabritishThermalUnitsInOneJoule, (double)zettabritishthermalunitQuantity.Value, ZettabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.ZettabritishThermalUnit, zettabritishthermalunitQuantity.Unit);

            var zettajouleQuantity = joule.ToUnit(EnergyUnit.Zettajoule);
            AssertEx.EqualTolerance(ZettajoulesInOneJoule, (double)zettajouleQuantity.Value, ZettajoulesTolerance);
            Assert.Equal(EnergyUnit.Zettajoule, zettajouleQuantity.Unit);

            var zettawatthourQuantity = joule.ToUnit(EnergyUnit.ZettawattHour);
            AssertEx.EqualTolerance(ZettawattHoursInOneJoule, (double)zettawatthourQuantity.Value, ZettawattHoursTolerance);
            Assert.Equal(EnergyUnit.ZettawattHour, zettawatthourQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(1, Energy.FromBritishThermalUnits(joule.BritishThermalUnits).Joules, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromCalories(joule.Calories).Joules, CaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsEc(joule.DecathermsEc).Joules, DecathermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsImperial(joule.DecathermsImperial).Joules, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsUs(joule.DecathermsUs).Joules, DecathermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromElectronVolts(joule.ElectronVolts).Joules, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromErgs(joule.Ergs).Joules, ErgsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromExabritishThermalUnits(joule.ExabritishThermalUnits).Joules, ExabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromExajoules(joule.Exajoules).Joules, ExajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromExawattHours(joule.ExawattHours).Joules, ExawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromFootPounds(joule.FootPounds).Joules, FootPoundsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigabritishThermalUnits(joule.GigabritishThermalUnits).Joules, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigajoules(joule.Gigajoules).Joules, GigajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigawattHours(joule.GigawattHours).Joules, GigawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromJoules(joule.Joules).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilobritishThermalUnits(joule.KilobritishThermalUnits).Joules, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilocalories(joule.Kilocalories).Joules, KilocaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilojoules(joule.Kilojoules).Joules, KilojoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilowattHours(joule.KilowattHours).Joules, KilowattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegabritishThermalUnits(joule.MegabritishThermalUnits).Joules, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegajoules(joule.Megajoules).Joules, MegajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegawattHours(joule.MegawattHours).Joules, MegawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromPetabritishThermalUnits(joule.PetabritishThermalUnits).Joules, PetabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromPetajoules(joule.Petajoules).Joules, PetajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromPetawattHours(joule.PetawattHours).Joules, PetawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromQutrabritishThermalUnits(joule.QutrabritishThermalUnits).Joules, QutrabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromQutrajoules(joule.Qutrajoules).Joules, QutrajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromQutrawattHours(joule.QutrawattHours).Joules, QutrawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromTerabritishThermalUnits(joule.TerabritishThermalUnits).Joules, TerabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromTerajoules(joule.Terajoules).Joules, TerajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromTerawattHours(joule.TerawattHours).Joules, TerawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsEc(joule.ThermsEc).Joules, ThermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsImperial(joule.ThermsImperial).Joules, ThermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsUs(joule.ThermsUs).Joules, ThermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromVettabritishThermalUnits(joule.VettabritishThermalUnits).Joules, VettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromVettajoules(joule.Vettajoules).Joules, VettajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromVettawattHours(joule.VettawattHours).Joules, VettawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromWattHours(joule.WattHours).Joules, WattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromYottabritishThermalUnits(joule.YottabritishThermalUnits).Joules, YottabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromYottajoules(joule.Yottajoules).Joules, YottajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromYottawattHours(joule.YottawattHours).Joules, YottawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromZettabritishThermalUnits(joule.ZettabritishThermalUnits).Joules, ZettabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromZettajoules(joule.Zettajoules).Joules, ZettajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromZettawattHours(joule.ZettawattHours).Joules, ZettawattHoursTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Energy v = Energy.FromJoules(1);
            AssertEx.EqualTolerance(-1, -v.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (Energy.FromJoules(3)-v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (v + v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(10, (v*10).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(10, (10*v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (Energy.FromJoules(10)/5).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, Energy.FromJoules(10)/Energy.FromJoules(5), JoulesTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Energy oneJoule = Energy.FromJoules(1);
            Energy twoJoules = Energy.FromJoules(2);

            Assert.True(oneJoule < twoJoules);
            Assert.True(oneJoule <= twoJoules);
            Assert.True(twoJoules > oneJoule);
            Assert.True(twoJoules >= oneJoule);

            Assert.False(oneJoule > twoJoules);
            Assert.False(oneJoule >= twoJoules);
            Assert.False(twoJoules < oneJoule);
            Assert.False(twoJoules <= oneJoule);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Equal(0, joule.CompareTo(joule));
            Assert.True(joule.CompareTo(Energy.Zero) > 0);
            Assert.True(Energy.Zero.CompareTo(joule) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentException>(() => joule.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentNullException>(() => joule.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Energy.FromJoules(1);
            var b = Energy.FromJoules(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Energy.FromJoules(1);
            var b = Energy.FromJoules(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Energy.FromJoules(1);
            Assert.True(v.Equals(Energy.FromJoules(1), JoulesTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Energy.Zero, JoulesTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(EnergyUnit.Undefined, Energy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(EnergyUnit)).Cast<EnergyUnit>();
            foreach(var unit in units)
            {
                if(unit == EnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Energy.BaseDimensions is null);
        }
    }
}
