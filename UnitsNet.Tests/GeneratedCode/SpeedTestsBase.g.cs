//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Speed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpeedTestsBase
    {
        protected abstract double CentimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double CentimetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double CentimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double DecametersPerHourInOneMeterPerSecond { get; }
        protected abstract double DecametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double DecametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double ExametersPerHourInOneMeterPerSecond { get; }
        protected abstract double ExametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double ExametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double FemtometersPerHourInOneMeterPerSecond { get; }
        protected abstract double FemtometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double FemtometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double FeetPerHourInOneMeterPerSecond { get; }
        protected abstract double FeetPerMinuteInOneMeterPerSecond { get; }
        protected abstract double FeetPerSecondInOneMeterPerSecond { get; }
        protected abstract double GigametersPerHourInOneMeterPerSecond { get; }
        protected abstract double GigametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double GigametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double HectometersPerHourInOneMeterPerSecond { get; }
        protected abstract double HectometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double HectometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double InchesPerHourInOneMeterPerSecond { get; }
        protected abstract double InchesPerMinuteInOneMeterPerSecond { get; }
        protected abstract double InchesPerSecondInOneMeterPerSecond { get; }
        protected abstract double KilometersPerHourInOneMeterPerSecond { get; }
        protected abstract double KilometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double KilometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double KnotsInOneMeterPerSecond { get; }
        protected abstract double MegametersPerHourInOneMeterPerSecond { get; }
        protected abstract double MegametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MegametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MetersPerHourInOneMeterPerSecond { get; }
        protected abstract double MetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerHourInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MilesPerHourInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double NanometersPerHourInOneMeterPerSecond { get; }
        protected abstract double NanometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double NanometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double PetametersPerHourInOneMeterPerSecond { get; }
        protected abstract double PetametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double PetametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double PicometersPerHourInOneMeterPerSecond { get; }
        protected abstract double PicometersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double PicometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double QutrametersPerHourInOneMeterPerSecond { get; }
        protected abstract double QutrametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double QutrametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double TerametersPerHourInOneMeterPerSecond { get; }
        protected abstract double TerametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double TerametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerHourInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerMinuteInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerSecondInOneMeterPerSecond { get; }
        protected abstract double VettametersPerHourInOneMeterPerSecond { get; }
        protected abstract double VettametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double VettametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double YardsPerHourInOneMeterPerSecond { get; }
        protected abstract double YardsPerMinuteInOneMeterPerSecond { get; }
        protected abstract double YardsPerSecondInOneMeterPerSecond { get; }
        protected abstract double YottametersPerHourInOneMeterPerSecond { get; }
        protected abstract double YottametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double YottametersPerSecondInOneMeterPerSecond { get; }
        protected abstract double ZettametersPerHourInOneMeterPerSecond { get; }
        protected abstract double ZettametersPerMinutesInOneMeterPerSecond { get; }
        protected abstract double ZettametersPerSecondInOneMeterPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double DecametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double DecametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double ExametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double ExametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FemtometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double FemtometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double FemtometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double FeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double GigametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double GigametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double HectometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double HectometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double InchesPerHourTolerance { get { return 1e-5; } }
        protected virtual double InchesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KnotsTolerance { get { return 1e-5; } }
        protected virtual double MegametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MegametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double PetametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double PetametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PicometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double PicometersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double PicometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double QutrametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double QutrametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double QutrametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double TerametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double TerametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double VettametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double VettametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double VettametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YardsPerHourTolerance { get { return 1e-5; } }
        protected virtual double YardsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double YardsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YottametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double YottametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double YottametersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ZettametersPerHourTolerance { get { return 1e-5; } }
        protected virtual double ZettametersPerMinutesTolerance { get { return 1e-5; } }
        protected virtual double ZettametersPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Speed((double)0.0, SpeedUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Speed(double.PositiveInfinity, SpeedUnit.MeterPerSecond));
            Assert.Throws<ArgumentException>(() => new Speed(double.NegativeInfinity, SpeedUnit.MeterPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Speed(double.NaN, SpeedUnit.MeterPerSecond));
        }

        [Fact]
        public void MeterPerSecondToSpeedUnits()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, meterpersecond.CentimetersPerHour, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(CentimetersPerMinutesInOneMeterPerSecond, meterpersecond.CentimetersPerMinutes, CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, meterpersecond.CentimetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(DecametersPerHourInOneMeterPerSecond, meterpersecond.DecametersPerHour, DecametersPerHourTolerance);
            AssertEx.EqualTolerance(DecametersPerMinutesInOneMeterPerSecond, meterpersecond.DecametersPerMinutes, DecametersPerMinutesTolerance);
            AssertEx.EqualTolerance(DecametersPerSecondInOneMeterPerSecond, meterpersecond.DecametersPerSecond, DecametersPerSecondTolerance);
            AssertEx.EqualTolerance(DecimetersPerHourInOneMeterPerSecond, meterpersecond.DecimetersPerHour, DecimetersPerHourTolerance);
            AssertEx.EqualTolerance(DecimetersPerMinutesInOneMeterPerSecond, meterpersecond.DecimetersPerMinutes, DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, meterpersecond.DecimetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(ExametersPerHourInOneMeterPerSecond, meterpersecond.ExametersPerHour, ExametersPerHourTolerance);
            AssertEx.EqualTolerance(ExametersPerMinutesInOneMeterPerSecond, meterpersecond.ExametersPerMinutes, ExametersPerMinutesTolerance);
            AssertEx.EqualTolerance(ExametersPerSecondInOneMeterPerSecond, meterpersecond.ExametersPerSecond, ExametersPerSecondTolerance);
            AssertEx.EqualTolerance(FemtometersPerHourInOneMeterPerSecond, meterpersecond.FemtometersPerHour, FemtometersPerHourTolerance);
            AssertEx.EqualTolerance(FemtometersPerMinutesInOneMeterPerSecond, meterpersecond.FemtometersPerMinutes, FemtometersPerMinutesTolerance);
            AssertEx.EqualTolerance(FemtometersPerSecondInOneMeterPerSecond, meterpersecond.FemtometersPerSecond, FemtometersPerSecondTolerance);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, meterpersecond.FeetPerHour, FeetPerHourTolerance);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, meterpersecond.FeetPerMinute, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, meterpersecond.FeetPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(GigametersPerHourInOneMeterPerSecond, meterpersecond.GigametersPerHour, GigametersPerHourTolerance);
            AssertEx.EqualTolerance(GigametersPerMinutesInOneMeterPerSecond, meterpersecond.GigametersPerMinutes, GigametersPerMinutesTolerance);
            AssertEx.EqualTolerance(GigametersPerSecondInOneMeterPerSecond, meterpersecond.GigametersPerSecond, GigametersPerSecondTolerance);
            AssertEx.EqualTolerance(HectometersPerHourInOneMeterPerSecond, meterpersecond.HectometersPerHour, HectometersPerHourTolerance);
            AssertEx.EqualTolerance(HectometersPerMinutesInOneMeterPerSecond, meterpersecond.HectometersPerMinutes, HectometersPerMinutesTolerance);
            AssertEx.EqualTolerance(HectometersPerSecondInOneMeterPerSecond, meterpersecond.HectometersPerSecond, HectometersPerSecondTolerance);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, meterpersecond.InchesPerHour, InchesPerHourTolerance);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, meterpersecond.InchesPerMinute, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, meterpersecond.InchesPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, meterpersecond.KilometersPerHour, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(KilometersPerMinutesInOneMeterPerSecond, meterpersecond.KilometersPerMinutes, KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, meterpersecond.KilometersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, meterpersecond.Knots, KnotsTolerance);
            AssertEx.EqualTolerance(MegametersPerHourInOneMeterPerSecond, meterpersecond.MegametersPerHour, MegametersPerHourTolerance);
            AssertEx.EqualTolerance(MegametersPerMinutesInOneMeterPerSecond, meterpersecond.MegametersPerMinutes, MegametersPerMinutesTolerance);
            AssertEx.EqualTolerance(MegametersPerSecondInOneMeterPerSecond, meterpersecond.MegametersPerSecond, MegametersPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, meterpersecond.MetersPerHour, MetersPerHourTolerance);
            AssertEx.EqualTolerance(MetersPerMinutesInOneMeterPerSecond, meterpersecond.MetersPerMinutes, MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, meterpersecond.MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(MicrometersPerHourInOneMeterPerSecond, meterpersecond.MicrometersPerHour, MicrometersPerHourTolerance);
            AssertEx.EqualTolerance(MicrometersPerMinutesInOneMeterPerSecond, meterpersecond.MicrometersPerMinutes, MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, meterpersecond.MicrometersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, meterpersecond.MilesPerHour, MilesPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, meterpersecond.MillimetersPerHour, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerMinutesInOneMeterPerSecond, meterpersecond.MillimetersPerMinutes, MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, meterpersecond.MillimetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerHourInOneMeterPerSecond, meterpersecond.NanometersPerHour, NanometersPerHourTolerance);
            AssertEx.EqualTolerance(NanometersPerMinutesInOneMeterPerSecond, meterpersecond.NanometersPerMinutes, NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, meterpersecond.NanometersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(PetametersPerHourInOneMeterPerSecond, meterpersecond.PetametersPerHour, PetametersPerHourTolerance);
            AssertEx.EqualTolerance(PetametersPerMinutesInOneMeterPerSecond, meterpersecond.PetametersPerMinutes, PetametersPerMinutesTolerance);
            AssertEx.EqualTolerance(PetametersPerSecondInOneMeterPerSecond, meterpersecond.PetametersPerSecond, PetametersPerSecondTolerance);
            AssertEx.EqualTolerance(PicometersPerHourInOneMeterPerSecond, meterpersecond.PicometersPerHour, PicometersPerHourTolerance);
            AssertEx.EqualTolerance(PicometersPerMinutesInOneMeterPerSecond, meterpersecond.PicometersPerMinutes, PicometersPerMinutesTolerance);
            AssertEx.EqualTolerance(PicometersPerSecondInOneMeterPerSecond, meterpersecond.PicometersPerSecond, PicometersPerSecondTolerance);
            AssertEx.EqualTolerance(QutrametersPerHourInOneMeterPerSecond, meterpersecond.QutrametersPerHour, QutrametersPerHourTolerance);
            AssertEx.EqualTolerance(QutrametersPerMinutesInOneMeterPerSecond, meterpersecond.QutrametersPerMinutes, QutrametersPerMinutesTolerance);
            AssertEx.EqualTolerance(QutrametersPerSecondInOneMeterPerSecond, meterpersecond.QutrametersPerSecond, QutrametersPerSecondTolerance);
            AssertEx.EqualTolerance(TerametersPerHourInOneMeterPerSecond, meterpersecond.TerametersPerHour, TerametersPerHourTolerance);
            AssertEx.EqualTolerance(TerametersPerMinutesInOneMeterPerSecond, meterpersecond.TerametersPerMinutes, TerametersPerMinutesTolerance);
            AssertEx.EqualTolerance(TerametersPerSecondInOneMeterPerSecond, meterpersecond.TerametersPerSecond, TerametersPerSecondTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerHour, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerMinute, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(VettametersPerHourInOneMeterPerSecond, meterpersecond.VettametersPerHour, VettametersPerHourTolerance);
            AssertEx.EqualTolerance(VettametersPerMinutesInOneMeterPerSecond, meterpersecond.VettametersPerMinutes, VettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(VettametersPerSecondInOneMeterPerSecond, meterpersecond.VettametersPerSecond, VettametersPerSecondTolerance);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, meterpersecond.YardsPerHour, YardsPerHourTolerance);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, meterpersecond.YardsPerMinute, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, meterpersecond.YardsPerSecond, YardsPerSecondTolerance);
            AssertEx.EqualTolerance(YottametersPerHourInOneMeterPerSecond, meterpersecond.YottametersPerHour, YottametersPerHourTolerance);
            AssertEx.EqualTolerance(YottametersPerMinutesInOneMeterPerSecond, meterpersecond.YottametersPerMinutes, YottametersPerMinutesTolerance);
            AssertEx.EqualTolerance(YottametersPerSecondInOneMeterPerSecond, meterpersecond.YottametersPerSecond, YottametersPerSecondTolerance);
            AssertEx.EqualTolerance(ZettametersPerHourInOneMeterPerSecond, meterpersecond.ZettametersPerHour, ZettametersPerHourTolerance);
            AssertEx.EqualTolerance(ZettametersPerMinutesInOneMeterPerSecond, meterpersecond.ZettametersPerMinutes, ZettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(ZettametersPerSecondInOneMeterPerSecond, meterpersecond.ZettametersPerSecond, ZettametersPerSecondTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.CentimeterPerHour).CentimetersPerHour, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.CentimeterPerMinute).CentimetersPerMinutes, CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.CentimeterPerSecond).CentimetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.DecameterPerHour).DecametersPerHour, DecametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.DecameterPerMinute).DecametersPerMinutes, DecametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.DecameterPerSecond).DecametersPerSecond, DecametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.DecimeterPerHour).DecimetersPerHour, DecimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.DecimeterPerMinute).DecimetersPerMinutes, DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.DecimeterPerSecond).DecimetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.ExameterPerHour).ExametersPerHour, ExametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.ExameterPerMinute).ExametersPerMinutes, ExametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.ExameterPerSecond).ExametersPerSecond, ExametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.FemtometerPerHour).FemtometersPerHour, FemtometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.FemtometerPerMinute).FemtometersPerMinutes, FemtometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.FemtometerPerSecond).FemtometersPerSecond, FemtometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.FootPerHour).FeetPerHour, FeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.FootPerMinute).FeetPerMinute, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.FootPerSecond).FeetPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.GigameterPerHour).GigametersPerHour, GigametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.GigameterPerMinute).GigametersPerMinutes, GigametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.GigameterPerSecond).GigametersPerSecond, GigametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.HectometerPerHour).HectometersPerHour, HectometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.HectometerPerMinute).HectometersPerMinutes, HectometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.HectometerPerSecond).HectometersPerSecond, HectometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.InchPerHour).InchesPerHour, InchesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.InchPerMinute).InchesPerMinute, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.InchPerSecond).InchesPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.KilometerPerHour).KilometersPerHour, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.KilometerPerMinute).KilometersPerMinutes, KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.KilometerPerSecond).KilometersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.Knot).Knots, KnotsTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MegameterPerHour).MegametersPerHour, MegametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MegameterPerMinute).MegametersPerMinutes, MegametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MegameterPerSecond).MegametersPerSecond, MegametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MeterPerHour).MetersPerHour, MetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MeterPerMinute).MetersPerMinutes, MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MeterPerSecond).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MicrometerPerHour).MicrometersPerHour, MicrometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MicrometerPerMinute).MicrometersPerMinutes, MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MicrometerPerSecond).MicrometersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MilePerHour).MilesPerHour, MilesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MillimeterPerHour).MillimetersPerHour, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MillimeterPerMinute).MillimetersPerMinutes, MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.MillimeterPerSecond).MillimetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.NanometerPerHour).NanometersPerHour, NanometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.NanometerPerMinute).NanometersPerMinutes, NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.NanometerPerSecond).NanometersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.PetameterPerHour).PetametersPerHour, PetametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.PetameterPerMinute).PetametersPerMinutes, PetametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.PetameterPerSecond).PetametersPerSecond, PetametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.PicometerPerHour).PicometersPerHour, PicometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.PicometerPerMinute).PicometersPerMinutes, PicometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.PicometerPerSecond).PicometersPerSecond, PicometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.QutrameterPerHour).QutrametersPerHour, QutrametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.QutrameterPerMinute).QutrametersPerMinutes, QutrametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.QutrameterPerSecond).QutrametersPerSecond, QutrametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.TerameterPerHour).TerametersPerHour, TerametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.TerameterPerMinute).TerametersPerMinutes, TerametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.TerameterPerSecond).TerametersPerSecond, TerametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.UsSurveyFootPerHour).UsSurveyFeetPerHour, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.UsSurveyFootPerMinute).UsSurveyFeetPerMinute, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.UsSurveyFootPerSecond).UsSurveyFeetPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.VettameterPerHour).VettametersPerHour, VettametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.VettameterPerMinute).VettametersPerMinutes, VettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.VettameterPerSecond).VettametersPerSecond, VettametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.YardPerHour).YardsPerHour, YardsPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.YardPerMinute).YardsPerMinute, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.YardPerSecond).YardsPerSecond, YardsPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.YottameterPerHour).YottametersPerHour, YottametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.YottameterPerMinute).YottametersPerMinutes, YottametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.YottameterPerSecond).YottametersPerSecond, YottametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.ZettameterPerHour).ZettametersPerHour, ZettametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.ZettameterPerMinute).ZettametersPerMinutes, ZettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.From(1, SpeedUnit.ZettameterPerSecond).ZettametersPerSecond, ZettametersPerSecondTolerance);
        }

        [Fact]
        public void FromMetersPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Speed.FromMetersPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Speed.FromMetersPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromMetersPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Speed.FromMetersPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerHour), CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(CentimetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerMinute), CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerSecond), CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(DecametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecameterPerHour), DecametersPerHourTolerance);
            AssertEx.EqualTolerance(DecametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecameterPerMinute), DecametersPerMinutesTolerance);
            AssertEx.EqualTolerance(DecametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecameterPerSecond), DecametersPerSecondTolerance);
            AssertEx.EqualTolerance(DecimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerHour), DecimetersPerHourTolerance);
            AssertEx.EqualTolerance(DecimetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerMinute), DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerSecond), DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(ExametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.ExameterPerHour), ExametersPerHourTolerance);
            AssertEx.EqualTolerance(ExametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.ExameterPerMinute), ExametersPerMinutesTolerance);
            AssertEx.EqualTolerance(ExametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.ExameterPerSecond), ExametersPerSecondTolerance);
            AssertEx.EqualTolerance(FemtometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FemtometerPerHour), FemtometersPerHourTolerance);
            AssertEx.EqualTolerance(FemtometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FemtometerPerMinute), FemtometersPerMinutesTolerance);
            AssertEx.EqualTolerance(FemtometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FemtometerPerSecond), FemtometersPerSecondTolerance);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerHour), FeetPerHourTolerance);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerMinute), FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerSecond), FeetPerSecondTolerance);
            AssertEx.EqualTolerance(GigametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.GigameterPerHour), GigametersPerHourTolerance);
            AssertEx.EqualTolerance(GigametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.GigameterPerMinute), GigametersPerMinutesTolerance);
            AssertEx.EqualTolerance(GigametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.GigameterPerSecond), GigametersPerSecondTolerance);
            AssertEx.EqualTolerance(HectometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.HectometerPerHour), HectometersPerHourTolerance);
            AssertEx.EqualTolerance(HectometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.HectometerPerMinute), HectometersPerMinutesTolerance);
            AssertEx.EqualTolerance(HectometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.HectometerPerSecond), HectometersPerSecondTolerance);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerHour), InchesPerHourTolerance);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerMinute), InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerSecond), InchesPerSecondTolerance);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerHour), KilometersPerHourTolerance);
            AssertEx.EqualTolerance(KilometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerMinute), KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerSecond), KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, meterpersecond.As(SpeedUnit.Knot), KnotsTolerance);
            AssertEx.EqualTolerance(MegametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MegameterPerHour), MegametersPerHourTolerance);
            AssertEx.EqualTolerance(MegametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MegameterPerMinute), MegametersPerMinutesTolerance);
            AssertEx.EqualTolerance(MegametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MegameterPerSecond), MegametersPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerHour), MetersPerHourTolerance);
            AssertEx.EqualTolerance(MetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerMinute), MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerSecond), MetersPerSecondTolerance);
            AssertEx.EqualTolerance(MicrometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerHour), MicrometersPerHourTolerance);
            AssertEx.EqualTolerance(MicrometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerMinute), MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerSecond), MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MilePerHour), MilesPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerHour), MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerMinute), MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerSecond), MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerHour), NanometersPerHourTolerance);
            AssertEx.EqualTolerance(NanometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerMinute), NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerSecond), NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(PetametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.PetameterPerHour), PetametersPerHourTolerance);
            AssertEx.EqualTolerance(PetametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.PetameterPerMinute), PetametersPerMinutesTolerance);
            AssertEx.EqualTolerance(PetametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.PetameterPerSecond), PetametersPerSecondTolerance);
            AssertEx.EqualTolerance(PicometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.PicometerPerHour), PicometersPerHourTolerance);
            AssertEx.EqualTolerance(PicometersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.PicometerPerMinute), PicometersPerMinutesTolerance);
            AssertEx.EqualTolerance(PicometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.PicometerPerSecond), PicometersPerSecondTolerance);
            AssertEx.EqualTolerance(QutrametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.QutrameterPerHour), QutrametersPerHourTolerance);
            AssertEx.EqualTolerance(QutrametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.QutrameterPerMinute), QutrametersPerMinutesTolerance);
            AssertEx.EqualTolerance(QutrametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.QutrameterPerSecond), QutrametersPerSecondTolerance);
            AssertEx.EqualTolerance(TerametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.TerameterPerHour), TerametersPerHourTolerance);
            AssertEx.EqualTolerance(TerametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.TerameterPerMinute), TerametersPerMinutesTolerance);
            AssertEx.EqualTolerance(TerametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.TerameterPerSecond), TerametersPerSecondTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerHour), UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerMinute), UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerSecond), UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(VettametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.VettameterPerHour), VettametersPerHourTolerance);
            AssertEx.EqualTolerance(VettametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.VettameterPerMinute), VettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(VettametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.VettameterPerSecond), VettametersPerSecondTolerance);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerHour), YardsPerHourTolerance);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerMinute), YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerSecond), YardsPerSecondTolerance);
            AssertEx.EqualTolerance(YottametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YottameterPerHour), YottametersPerHourTolerance);
            AssertEx.EqualTolerance(YottametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YottameterPerMinute), YottametersPerMinutesTolerance);
            AssertEx.EqualTolerance(YottametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YottameterPerSecond), YottametersPerSecondTolerance);
            AssertEx.EqualTolerance(ZettametersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.ZettameterPerHour), ZettametersPerHourTolerance);
            AssertEx.EqualTolerance(ZettametersPerMinutesInOneMeterPerSecond, meterpersecond.As(SpeedUnit.ZettameterPerMinute), ZettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(ZettametersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.ZettameterPerSecond), ZettametersPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var meterpersecond = Speed.FromMetersPerSecond(1);

            var centimeterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.CentimeterPerHour);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, (double)centimeterperhourQuantity.Value, CentimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerHour, centimeterperhourQuantity.Unit);

            var centimeterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.CentimeterPerMinute);
            AssertEx.EqualTolerance(CentimetersPerMinutesInOneMeterPerSecond, (double)centimeterperminuteQuantity.Value, CentimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerMinute, centimeterperminuteQuantity.Unit);

            var centimeterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.CentimeterPerSecond);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, (double)centimeterpersecondQuantity.Value, CentimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerSecond, centimeterpersecondQuantity.Unit);

            var decameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.DecameterPerHour);
            AssertEx.EqualTolerance(DecametersPerHourInOneMeterPerSecond, (double)decameterperhourQuantity.Value, DecametersPerHourTolerance);
            Assert.Equal(SpeedUnit.DecameterPerHour, decameterperhourQuantity.Unit);

            var decameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.DecameterPerMinute);
            AssertEx.EqualTolerance(DecametersPerMinutesInOneMeterPerSecond, (double)decameterperminuteQuantity.Value, DecametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.DecameterPerMinute, decameterperminuteQuantity.Unit);

            var decameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.DecameterPerSecond);
            AssertEx.EqualTolerance(DecametersPerSecondInOneMeterPerSecond, (double)decameterpersecondQuantity.Value, DecametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.DecameterPerSecond, decameterpersecondQuantity.Unit);

            var decimeterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.DecimeterPerHour);
            AssertEx.EqualTolerance(DecimetersPerHourInOneMeterPerSecond, (double)decimeterperhourQuantity.Value, DecimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerHour, decimeterperhourQuantity.Unit);

            var decimeterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.DecimeterPerMinute);
            AssertEx.EqualTolerance(DecimetersPerMinutesInOneMeterPerSecond, (double)decimeterperminuteQuantity.Value, DecimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerMinute, decimeterperminuteQuantity.Unit);

            var decimeterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.DecimeterPerSecond);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, (double)decimeterpersecondQuantity.Value, DecimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerSecond, decimeterpersecondQuantity.Unit);

            var exameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.ExameterPerHour);
            AssertEx.EqualTolerance(ExametersPerHourInOneMeterPerSecond, (double)exameterperhourQuantity.Value, ExametersPerHourTolerance);
            Assert.Equal(SpeedUnit.ExameterPerHour, exameterperhourQuantity.Unit);

            var exameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.ExameterPerMinute);
            AssertEx.EqualTolerance(ExametersPerMinutesInOneMeterPerSecond, (double)exameterperminuteQuantity.Value, ExametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.ExameterPerMinute, exameterperminuteQuantity.Unit);

            var exameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.ExameterPerSecond);
            AssertEx.EqualTolerance(ExametersPerSecondInOneMeterPerSecond, (double)exameterpersecondQuantity.Value, ExametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.ExameterPerSecond, exameterpersecondQuantity.Unit);

            var femtometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.FemtometerPerHour);
            AssertEx.EqualTolerance(FemtometersPerHourInOneMeterPerSecond, (double)femtometerperhourQuantity.Value, FemtometersPerHourTolerance);
            Assert.Equal(SpeedUnit.FemtometerPerHour, femtometerperhourQuantity.Unit);

            var femtometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.FemtometerPerMinute);
            AssertEx.EqualTolerance(FemtometersPerMinutesInOneMeterPerSecond, (double)femtometerperminuteQuantity.Value, FemtometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.FemtometerPerMinute, femtometerperminuteQuantity.Unit);

            var femtometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.FemtometerPerSecond);
            AssertEx.EqualTolerance(FemtometersPerSecondInOneMeterPerSecond, (double)femtometerpersecondQuantity.Value, FemtometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.FemtometerPerSecond, femtometerpersecondQuantity.Unit);

            var footperhourQuantity = meterpersecond.ToUnit(SpeedUnit.FootPerHour);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, (double)footperhourQuantity.Value, FeetPerHourTolerance);
            Assert.Equal(SpeedUnit.FootPerHour, footperhourQuantity.Unit);

            var footperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.FootPerMinute);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, (double)footperminuteQuantity.Value, FeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.FootPerMinute, footperminuteQuantity.Unit);

            var footpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.FootPerSecond);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, (double)footpersecondQuantity.Value, FeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.FootPerSecond, footpersecondQuantity.Unit);

            var gigameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.GigameterPerHour);
            AssertEx.EqualTolerance(GigametersPerHourInOneMeterPerSecond, (double)gigameterperhourQuantity.Value, GigametersPerHourTolerance);
            Assert.Equal(SpeedUnit.GigameterPerHour, gigameterperhourQuantity.Unit);

            var gigameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.GigameterPerMinute);
            AssertEx.EqualTolerance(GigametersPerMinutesInOneMeterPerSecond, (double)gigameterperminuteQuantity.Value, GigametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.GigameterPerMinute, gigameterperminuteQuantity.Unit);

            var gigameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.GigameterPerSecond);
            AssertEx.EqualTolerance(GigametersPerSecondInOneMeterPerSecond, (double)gigameterpersecondQuantity.Value, GigametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.GigameterPerSecond, gigameterpersecondQuantity.Unit);

            var hectometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.HectometerPerHour);
            AssertEx.EqualTolerance(HectometersPerHourInOneMeterPerSecond, (double)hectometerperhourQuantity.Value, HectometersPerHourTolerance);
            Assert.Equal(SpeedUnit.HectometerPerHour, hectometerperhourQuantity.Unit);

            var hectometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.HectometerPerMinute);
            AssertEx.EqualTolerance(HectometersPerMinutesInOneMeterPerSecond, (double)hectometerperminuteQuantity.Value, HectometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.HectometerPerMinute, hectometerperminuteQuantity.Unit);

            var hectometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.HectometerPerSecond);
            AssertEx.EqualTolerance(HectometersPerSecondInOneMeterPerSecond, (double)hectometerpersecondQuantity.Value, HectometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.HectometerPerSecond, hectometerpersecondQuantity.Unit);

            var inchperhourQuantity = meterpersecond.ToUnit(SpeedUnit.InchPerHour);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, (double)inchperhourQuantity.Value, InchesPerHourTolerance);
            Assert.Equal(SpeedUnit.InchPerHour, inchperhourQuantity.Unit);

            var inchperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.InchPerMinute);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, (double)inchperminuteQuantity.Value, InchesPerMinuteTolerance);
            Assert.Equal(SpeedUnit.InchPerMinute, inchperminuteQuantity.Unit);

            var inchpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.InchPerSecond);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, (double)inchpersecondQuantity.Value, InchesPerSecondTolerance);
            Assert.Equal(SpeedUnit.InchPerSecond, inchpersecondQuantity.Unit);

            var kilometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.KilometerPerHour);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, (double)kilometerperhourQuantity.Value, KilometersPerHourTolerance);
            Assert.Equal(SpeedUnit.KilometerPerHour, kilometerperhourQuantity.Unit);

            var kilometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.KilometerPerMinute);
            AssertEx.EqualTolerance(KilometersPerMinutesInOneMeterPerSecond, (double)kilometerperminuteQuantity.Value, KilometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.KilometerPerMinute, kilometerperminuteQuantity.Unit);

            var kilometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.KilometerPerSecond);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, (double)kilometerpersecondQuantity.Value, KilometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.KilometerPerSecond, kilometerpersecondQuantity.Unit);

            var knotQuantity = meterpersecond.ToUnit(SpeedUnit.Knot);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, (double)knotQuantity.Value, KnotsTolerance);
            Assert.Equal(SpeedUnit.Knot, knotQuantity.Unit);

            var megameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MegameterPerHour);
            AssertEx.EqualTolerance(MegametersPerHourInOneMeterPerSecond, (double)megameterperhourQuantity.Value, MegametersPerHourTolerance);
            Assert.Equal(SpeedUnit.MegameterPerHour, megameterperhourQuantity.Unit);

            var megameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MegameterPerMinute);
            AssertEx.EqualTolerance(MegametersPerMinutesInOneMeterPerSecond, (double)megameterperminuteQuantity.Value, MegametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MegameterPerMinute, megameterperminuteQuantity.Unit);

            var megameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MegameterPerSecond);
            AssertEx.EqualTolerance(MegametersPerSecondInOneMeterPerSecond, (double)megameterpersecondQuantity.Value, MegametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MegameterPerSecond, megameterpersecondQuantity.Unit);

            var meterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MeterPerHour);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, (double)meterperhourQuantity.Value, MetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MeterPerHour, meterperhourQuantity.Unit);

            var meterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MeterPerMinute);
            AssertEx.EqualTolerance(MetersPerMinutesInOneMeterPerSecond, (double)meterperminuteQuantity.Value, MetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MeterPerMinute, meterperminuteQuantity.Unit);

            var meterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MeterPerSecond);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, (double)meterpersecondQuantity.Value, MetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MeterPerSecond, meterpersecondQuantity.Unit);

            var micrometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MicrometerPerHour);
            AssertEx.EqualTolerance(MicrometersPerHourInOneMeterPerSecond, (double)micrometerperhourQuantity.Value, MicrometersPerHourTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerHour, micrometerperhourQuantity.Unit);

            var micrometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MicrometerPerMinute);
            AssertEx.EqualTolerance(MicrometersPerMinutesInOneMeterPerSecond, (double)micrometerperminuteQuantity.Value, MicrometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerMinute, micrometerperminuteQuantity.Unit);

            var micrometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MicrometerPerSecond);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, (double)micrometerpersecondQuantity.Value, MicrometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerSecond, micrometerpersecondQuantity.Unit);

            var mileperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MilePerHour);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, (double)mileperhourQuantity.Value, MilesPerHourTolerance);
            Assert.Equal(SpeedUnit.MilePerHour, mileperhourQuantity.Unit);

            var millimeterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.MillimeterPerHour);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, (double)millimeterperhourQuantity.Value, MillimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerHour, millimeterperhourQuantity.Unit);

            var millimeterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.MillimeterPerMinute);
            AssertEx.EqualTolerance(MillimetersPerMinutesInOneMeterPerSecond, (double)millimeterperminuteQuantity.Value, MillimetersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerMinute, millimeterperminuteQuantity.Unit);

            var millimeterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.MillimeterPerSecond);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, (double)millimeterpersecondQuantity.Value, MillimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerSecond, millimeterpersecondQuantity.Unit);

            var nanometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.NanometerPerHour);
            AssertEx.EqualTolerance(NanometersPerHourInOneMeterPerSecond, (double)nanometerperhourQuantity.Value, NanometersPerHourTolerance);
            Assert.Equal(SpeedUnit.NanometerPerHour, nanometerperhourQuantity.Unit);

            var nanometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.NanometerPerMinute);
            AssertEx.EqualTolerance(NanometersPerMinutesInOneMeterPerSecond, (double)nanometerperminuteQuantity.Value, NanometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.NanometerPerMinute, nanometerperminuteQuantity.Unit);

            var nanometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.NanometerPerSecond);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, (double)nanometerpersecondQuantity.Value, NanometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.NanometerPerSecond, nanometerpersecondQuantity.Unit);

            var petameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.PetameterPerHour);
            AssertEx.EqualTolerance(PetametersPerHourInOneMeterPerSecond, (double)petameterperhourQuantity.Value, PetametersPerHourTolerance);
            Assert.Equal(SpeedUnit.PetameterPerHour, petameterperhourQuantity.Unit);

            var petameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.PetameterPerMinute);
            AssertEx.EqualTolerance(PetametersPerMinutesInOneMeterPerSecond, (double)petameterperminuteQuantity.Value, PetametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.PetameterPerMinute, petameterperminuteQuantity.Unit);

            var petameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.PetameterPerSecond);
            AssertEx.EqualTolerance(PetametersPerSecondInOneMeterPerSecond, (double)petameterpersecondQuantity.Value, PetametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.PetameterPerSecond, petameterpersecondQuantity.Unit);

            var picometerperhourQuantity = meterpersecond.ToUnit(SpeedUnit.PicometerPerHour);
            AssertEx.EqualTolerance(PicometersPerHourInOneMeterPerSecond, (double)picometerperhourQuantity.Value, PicometersPerHourTolerance);
            Assert.Equal(SpeedUnit.PicometerPerHour, picometerperhourQuantity.Unit);

            var picometerperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.PicometerPerMinute);
            AssertEx.EqualTolerance(PicometersPerMinutesInOneMeterPerSecond, (double)picometerperminuteQuantity.Value, PicometersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.PicometerPerMinute, picometerperminuteQuantity.Unit);

            var picometerpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.PicometerPerSecond);
            AssertEx.EqualTolerance(PicometersPerSecondInOneMeterPerSecond, (double)picometerpersecondQuantity.Value, PicometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.PicometerPerSecond, picometerpersecondQuantity.Unit);

            var qutrameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.QutrameterPerHour);
            AssertEx.EqualTolerance(QutrametersPerHourInOneMeterPerSecond, (double)qutrameterperhourQuantity.Value, QutrametersPerHourTolerance);
            Assert.Equal(SpeedUnit.QutrameterPerHour, qutrameterperhourQuantity.Unit);

            var qutrameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.QutrameterPerMinute);
            AssertEx.EqualTolerance(QutrametersPerMinutesInOneMeterPerSecond, (double)qutrameterperminuteQuantity.Value, QutrametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.QutrameterPerMinute, qutrameterperminuteQuantity.Unit);

            var qutrameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.QutrameterPerSecond);
            AssertEx.EqualTolerance(QutrametersPerSecondInOneMeterPerSecond, (double)qutrameterpersecondQuantity.Value, QutrametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.QutrameterPerSecond, qutrameterpersecondQuantity.Unit);

            var terameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.TerameterPerHour);
            AssertEx.EqualTolerance(TerametersPerHourInOneMeterPerSecond, (double)terameterperhourQuantity.Value, TerametersPerHourTolerance);
            Assert.Equal(SpeedUnit.TerameterPerHour, terameterperhourQuantity.Unit);

            var terameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.TerameterPerMinute);
            AssertEx.EqualTolerance(TerametersPerMinutesInOneMeterPerSecond, (double)terameterperminuteQuantity.Value, TerametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.TerameterPerMinute, terameterperminuteQuantity.Unit);

            var terameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.TerameterPerSecond);
            AssertEx.EqualTolerance(TerametersPerSecondInOneMeterPerSecond, (double)terameterpersecondQuantity.Value, TerametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.TerameterPerSecond, terameterpersecondQuantity.Unit);

            var ussurveyfootperhourQuantity = meterpersecond.ToUnit(SpeedUnit.UsSurveyFootPerHour);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, (double)ussurveyfootperhourQuantity.Value, UsSurveyFeetPerHourTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerHour, ussurveyfootperhourQuantity.Unit);

            var ussurveyfootperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.UsSurveyFootPerMinute);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, (double)ussurveyfootperminuteQuantity.Value, UsSurveyFeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerMinute, ussurveyfootperminuteQuantity.Unit);

            var ussurveyfootpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.UsSurveyFootPerSecond);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, (double)ussurveyfootpersecondQuantity.Value, UsSurveyFeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerSecond, ussurveyfootpersecondQuantity.Unit);

            var vettameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.VettameterPerHour);
            AssertEx.EqualTolerance(VettametersPerHourInOneMeterPerSecond, (double)vettameterperhourQuantity.Value, VettametersPerHourTolerance);
            Assert.Equal(SpeedUnit.VettameterPerHour, vettameterperhourQuantity.Unit);

            var vettameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.VettameterPerMinute);
            AssertEx.EqualTolerance(VettametersPerMinutesInOneMeterPerSecond, (double)vettameterperminuteQuantity.Value, VettametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.VettameterPerMinute, vettameterperminuteQuantity.Unit);

            var vettameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.VettameterPerSecond);
            AssertEx.EqualTolerance(VettametersPerSecondInOneMeterPerSecond, (double)vettameterpersecondQuantity.Value, VettametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.VettameterPerSecond, vettameterpersecondQuantity.Unit);

            var yardperhourQuantity = meterpersecond.ToUnit(SpeedUnit.YardPerHour);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, (double)yardperhourQuantity.Value, YardsPerHourTolerance);
            Assert.Equal(SpeedUnit.YardPerHour, yardperhourQuantity.Unit);

            var yardperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.YardPerMinute);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, (double)yardperminuteQuantity.Value, YardsPerMinuteTolerance);
            Assert.Equal(SpeedUnit.YardPerMinute, yardperminuteQuantity.Unit);

            var yardpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.YardPerSecond);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, (double)yardpersecondQuantity.Value, YardsPerSecondTolerance);
            Assert.Equal(SpeedUnit.YardPerSecond, yardpersecondQuantity.Unit);

            var yottameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.YottameterPerHour);
            AssertEx.EqualTolerance(YottametersPerHourInOneMeterPerSecond, (double)yottameterperhourQuantity.Value, YottametersPerHourTolerance);
            Assert.Equal(SpeedUnit.YottameterPerHour, yottameterperhourQuantity.Unit);

            var yottameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.YottameterPerMinute);
            AssertEx.EqualTolerance(YottametersPerMinutesInOneMeterPerSecond, (double)yottameterperminuteQuantity.Value, YottametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.YottameterPerMinute, yottameterperminuteQuantity.Unit);

            var yottameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.YottameterPerSecond);
            AssertEx.EqualTolerance(YottametersPerSecondInOneMeterPerSecond, (double)yottameterpersecondQuantity.Value, YottametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.YottameterPerSecond, yottameterpersecondQuantity.Unit);

            var zettameterperhourQuantity = meterpersecond.ToUnit(SpeedUnit.ZettameterPerHour);
            AssertEx.EqualTolerance(ZettametersPerHourInOneMeterPerSecond, (double)zettameterperhourQuantity.Value, ZettametersPerHourTolerance);
            Assert.Equal(SpeedUnit.ZettameterPerHour, zettameterperhourQuantity.Unit);

            var zettameterperminuteQuantity = meterpersecond.ToUnit(SpeedUnit.ZettameterPerMinute);
            AssertEx.EqualTolerance(ZettametersPerMinutesInOneMeterPerSecond, (double)zettameterperminuteQuantity.Value, ZettametersPerMinutesTolerance);
            Assert.Equal(SpeedUnit.ZettameterPerMinute, zettameterperminuteQuantity.Unit);

            var zettameterpersecondQuantity = meterpersecond.ToUnit(SpeedUnit.ZettameterPerSecond);
            AssertEx.EqualTolerance(ZettametersPerSecondInOneMeterPerSecond, (double)zettameterpersecondQuantity.Value, ZettametersPerSecondTolerance);
            Assert.Equal(SpeedUnit.ZettameterPerSecond, zettameterpersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerHour(meterpersecond.CentimetersPerHour).MetersPerSecond, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerMinutes(meterpersecond.CentimetersPerMinutes).MetersPerSecond, CentimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerSecond(meterpersecond.CentimetersPerSecond).MetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecametersPerHour(meterpersecond.DecametersPerHour).MetersPerSecond, DecametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecametersPerMinutes(meterpersecond.DecametersPerMinutes).MetersPerSecond, DecametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecametersPerSecond(meterpersecond.DecametersPerSecond).MetersPerSecond, DecametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerHour(meterpersecond.DecimetersPerHour).MetersPerSecond, DecimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerMinutes(meterpersecond.DecimetersPerMinutes).MetersPerSecond, DecimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerSecond(meterpersecond.DecimetersPerSecond).MetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromExametersPerHour(meterpersecond.ExametersPerHour).MetersPerSecond, ExametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromExametersPerMinutes(meterpersecond.ExametersPerMinutes).MetersPerSecond, ExametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromExametersPerSecond(meterpersecond.ExametersPerSecond).MetersPerSecond, ExametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFemtometersPerHour(meterpersecond.FemtometersPerHour).MetersPerSecond, FemtometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFemtometersPerMinutes(meterpersecond.FemtometersPerMinutes).MetersPerSecond, FemtometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFemtometersPerSecond(meterpersecond.FemtometersPerSecond).MetersPerSecond, FemtometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerHour(meterpersecond.FeetPerHour).MetersPerSecond, FeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerMinute(meterpersecond.FeetPerMinute).MetersPerSecond, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerSecond(meterpersecond.FeetPerSecond).MetersPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromGigametersPerHour(meterpersecond.GigametersPerHour).MetersPerSecond, GigametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromGigametersPerMinutes(meterpersecond.GigametersPerMinutes).MetersPerSecond, GigametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromGigametersPerSecond(meterpersecond.GigametersPerSecond).MetersPerSecond, GigametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromHectometersPerHour(meterpersecond.HectometersPerHour).MetersPerSecond, HectometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromHectometersPerMinutes(meterpersecond.HectometersPerMinutes).MetersPerSecond, HectometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromHectometersPerSecond(meterpersecond.HectometersPerSecond).MetersPerSecond, HectometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerHour(meterpersecond.InchesPerHour).MetersPerSecond, InchesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerMinute(meterpersecond.InchesPerMinute).MetersPerSecond, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerSecond(meterpersecond.InchesPerSecond).MetersPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerHour(meterpersecond.KilometersPerHour).MetersPerSecond, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerMinutes(meterpersecond.KilometersPerMinutes).MetersPerSecond, KilometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerSecond(meterpersecond.KilometersPerSecond).MetersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKnots(meterpersecond.Knots).MetersPerSecond, KnotsTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMegametersPerHour(meterpersecond.MegametersPerHour).MetersPerSecond, MegametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMegametersPerMinutes(meterpersecond.MegametersPerMinutes).MetersPerSecond, MegametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMegametersPerSecond(meterpersecond.MegametersPerSecond).MetersPerSecond, MegametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerHour(meterpersecond.MetersPerHour).MetersPerSecond, MetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerMinutes(meterpersecond.MetersPerMinutes).MetersPerSecond, MetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerSecond(meterpersecond.MetersPerSecond).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerHour(meterpersecond.MicrometersPerHour).MetersPerSecond, MicrometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerMinutes(meterpersecond.MicrometersPerMinutes).MetersPerSecond, MicrometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerSecond(meterpersecond.MicrometersPerSecond).MetersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMilesPerHour(meterpersecond.MilesPerHour).MetersPerSecond, MilesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerHour(meterpersecond.MillimetersPerHour).MetersPerSecond, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerMinutes(meterpersecond.MillimetersPerMinutes).MetersPerSecond, MillimetersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerSecond(meterpersecond.MillimetersPerSecond).MetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerHour(meterpersecond.NanometersPerHour).MetersPerSecond, NanometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerMinutes(meterpersecond.NanometersPerMinutes).MetersPerSecond, NanometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerSecond(meterpersecond.NanometersPerSecond).MetersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromPetametersPerHour(meterpersecond.PetametersPerHour).MetersPerSecond, PetametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromPetametersPerMinutes(meterpersecond.PetametersPerMinutes).MetersPerSecond, PetametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromPetametersPerSecond(meterpersecond.PetametersPerSecond).MetersPerSecond, PetametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromPicometersPerHour(meterpersecond.PicometersPerHour).MetersPerSecond, PicometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromPicometersPerMinutes(meterpersecond.PicometersPerMinutes).MetersPerSecond, PicometersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromPicometersPerSecond(meterpersecond.PicometersPerSecond).MetersPerSecond, PicometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromQutrametersPerHour(meterpersecond.QutrametersPerHour).MetersPerSecond, QutrametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromQutrametersPerMinutes(meterpersecond.QutrametersPerMinutes).MetersPerSecond, QutrametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromQutrametersPerSecond(meterpersecond.QutrametersPerSecond).MetersPerSecond, QutrametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromTerametersPerHour(meterpersecond.TerametersPerHour).MetersPerSecond, TerametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromTerametersPerMinutes(meterpersecond.TerametersPerMinutes).MetersPerSecond, TerametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromTerametersPerSecond(meterpersecond.TerametersPerSecond).MetersPerSecond, TerametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerHour(meterpersecond.UsSurveyFeetPerHour).MetersPerSecond, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerMinute(meterpersecond.UsSurveyFeetPerMinute).MetersPerSecond, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerSecond(meterpersecond.UsSurveyFeetPerSecond).MetersPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromVettametersPerHour(meterpersecond.VettametersPerHour).MetersPerSecond, VettametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromVettametersPerMinutes(meterpersecond.VettametersPerMinutes).MetersPerSecond, VettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromVettametersPerSecond(meterpersecond.VettametersPerSecond).MetersPerSecond, VettametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerHour(meterpersecond.YardsPerHour).MetersPerSecond, YardsPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerMinute(meterpersecond.YardsPerMinute).MetersPerSecond, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerSecond(meterpersecond.YardsPerSecond).MetersPerSecond, YardsPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYottametersPerHour(meterpersecond.YottametersPerHour).MetersPerSecond, YottametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYottametersPerMinutes(meterpersecond.YottametersPerMinutes).MetersPerSecond, YottametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYottametersPerSecond(meterpersecond.YottametersPerSecond).MetersPerSecond, YottametersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromZettametersPerHour(meterpersecond.ZettametersPerHour).MetersPerSecond, ZettametersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromZettametersPerMinutes(meterpersecond.ZettametersPerMinutes).MetersPerSecond, ZettametersPerMinutesTolerance);
            AssertEx.EqualTolerance(1, Speed.FromZettametersPerSecond(meterpersecond.ZettametersPerSecond).MetersPerSecond, ZettametersPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Speed v = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (Speed.FromMetersPerSecond(3)-v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (Speed.FromMetersPerSecond(10)/5).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, Speed.FromMetersPerSecond(10)/Speed.FromMetersPerSecond(5), MetersPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Speed oneMeterPerSecond = Speed.FromMetersPerSecond(1);
            Speed twoMetersPerSecond = Speed.FromMetersPerSecond(2);

            Assert.True(oneMeterPerSecond < twoMetersPerSecond);
            Assert.True(oneMeterPerSecond <= twoMetersPerSecond);
            Assert.True(twoMetersPerSecond > oneMeterPerSecond);
            Assert.True(twoMetersPerSecond >= oneMeterPerSecond);

            Assert.False(oneMeterPerSecond > twoMetersPerSecond);
            Assert.False(oneMeterPerSecond >= twoMetersPerSecond);
            Assert.False(twoMetersPerSecond < oneMeterPerSecond);
            Assert.False(twoMetersPerSecond <= oneMeterPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Equal(0, meterpersecond.CompareTo(meterpersecond));
            Assert.True(meterpersecond.CompareTo(Speed.Zero) > 0);
            Assert.True(Speed.Zero.CompareTo(meterpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentException>(() => meterpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Speed.FromMetersPerSecond(1);
            var b = Speed.FromMetersPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Speed.FromMetersPerSecond(1);
            var b = Speed.FromMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Speed.FromMetersPerSecond(1);
            Assert.True(v.Equals(Speed.FromMetersPerSecond(1), MetersPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Speed.Zero, MetersPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.False(meterpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.False(meterpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpeedUnit.Undefined, Speed.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>();
            foreach(var unit in units)
            {
                if(unit == SpeedUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Speed.BaseDimensions is null);
        }
    }
}
