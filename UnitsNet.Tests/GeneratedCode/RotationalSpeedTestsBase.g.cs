//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalSpeed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalSpeedTestsBase
    {
        protected abstract double CentidegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double CentiradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DecadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double DecaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DecidegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double DeciradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DegreesPerMinuteInOneRadianPerSecond { get; }
        protected abstract double DegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double ExadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double ExaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double FemtodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double FemtoradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double GigadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double GigaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double HectodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double HectoradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double KilodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double KiloradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double MegadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MegaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double MicrodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MicroradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double MillidegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MilliradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double NanodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double NanoradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double PetadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double PetaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double PicodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double PicoradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double QutradegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double QutraradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double RadiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerMinuteInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerSecondInOneRadianPerSecond { get; }
        protected abstract double TeradegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double TeraradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double VettadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double VettaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double YottadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double YottaradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double ZettadegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double ZettaradiansPerSecondInOneRadianPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentidegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CentiradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecidegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DeciradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FemtodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FemtoradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectoradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KiloradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicroradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilliradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanoradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PicodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PicoradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double QutradegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double QutraradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TeradegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TeraradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double VettadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double VettaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YottadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YottaradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ZettadegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ZettaradiansPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalSpeed((double)0.0, RotationalSpeedUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(double.PositiveInfinity, RotationalSpeedUnit.RadianPerSecond));
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(double.NegativeInfinity, RotationalSpeedUnit.RadianPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(double.NaN, RotationalSpeedUnit.RadianPerSecond));
        }

        [Fact]
        public void RadianPerSecondToRotationalSpeedUnits()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(CentidegreesPerSecondInOneRadianPerSecond, radianpersecond.CentidegreesPerSecond, CentidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, radianpersecond.CentiradiansPerSecond, CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DecadegreesPerSecondInOneRadianPerSecond, radianpersecond.DecadegreesPerSecond, DecadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(DecaradiansPerSecondInOneRadianPerSecond, radianpersecond.DecaradiansPerSecond, DecaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DecidegreesPerSecondInOneRadianPerSecond, radianpersecond.DecidegreesPerSecond, DecidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, radianpersecond.DeciradiansPerSecond, DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, radianpersecond.DegreesPerMinute, DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, radianpersecond.DegreesPerSecond, DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(ExadegreesPerSecondInOneRadianPerSecond, radianpersecond.ExadegreesPerSecond, ExadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(ExaradiansPerSecondInOneRadianPerSecond, radianpersecond.ExaradiansPerSecond, ExaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(FemtodegreesPerSecondInOneRadianPerSecond, radianpersecond.FemtodegreesPerSecond, FemtodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(FemtoradiansPerSecondInOneRadianPerSecond, radianpersecond.FemtoradiansPerSecond, FemtoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(GigadegreesPerSecondInOneRadianPerSecond, radianpersecond.GigadegreesPerSecond, GigadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(GigaradiansPerSecondInOneRadianPerSecond, radianpersecond.GigaradiansPerSecond, GigaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(HectodegreesPerSecondInOneRadianPerSecond, radianpersecond.HectodegreesPerSecond, HectodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(HectoradiansPerSecondInOneRadianPerSecond, radianpersecond.HectoradiansPerSecond, HectoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(KilodegreesPerSecondInOneRadianPerSecond, radianpersecond.KilodegreesPerSecond, KilodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(KiloradiansPerSecondInOneRadianPerSecond, radianpersecond.KiloradiansPerSecond, KiloradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MegadegreesPerSecondInOneRadianPerSecond, radianpersecond.MegadegreesPerSecond, MegadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MegaradiansPerSecondInOneRadianPerSecond, radianpersecond.MegaradiansPerSecond, MegaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, radianpersecond.MicrodegreesPerSecond, MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, radianpersecond.MicroradiansPerSecond, MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, radianpersecond.MillidegreesPerSecond, MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, radianpersecond.MilliradiansPerSecond, MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, radianpersecond.NanodegreesPerSecond, NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, radianpersecond.NanoradiansPerSecond, NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(PetadegreesPerSecondInOneRadianPerSecond, radianpersecond.PetadegreesPerSecond, PetadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(PetaradiansPerSecondInOneRadianPerSecond, radianpersecond.PetaradiansPerSecond, PetaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(PicodegreesPerSecondInOneRadianPerSecond, radianpersecond.PicodegreesPerSecond, PicodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(PicoradiansPerSecondInOneRadianPerSecond, radianpersecond.PicoradiansPerSecond, PicoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(QutradegreesPerSecondInOneRadianPerSecond, radianpersecond.QutradegreesPerSecond, QutradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(QutraradiansPerSecondInOneRadianPerSecond, radianpersecond.QutraradiansPerSecond, QutraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, radianpersecond.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, radianpersecond.RevolutionsPerMinute, RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, radianpersecond.RevolutionsPerSecond, RevolutionsPerSecondTolerance);
            AssertEx.EqualTolerance(TeradegreesPerSecondInOneRadianPerSecond, radianpersecond.TeradegreesPerSecond, TeradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(TeraradiansPerSecondInOneRadianPerSecond, radianpersecond.TeraradiansPerSecond, TeraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(VettadegreesPerSecondInOneRadianPerSecond, radianpersecond.VettadegreesPerSecond, VettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(VettaradiansPerSecondInOneRadianPerSecond, radianpersecond.VettaradiansPerSecond, VettaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(YottadegreesPerSecondInOneRadianPerSecond, radianpersecond.YottadegreesPerSecond, YottadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(YottaradiansPerSecondInOneRadianPerSecond, radianpersecond.YottaradiansPerSecond, YottaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(ZettadegreesPerSecondInOneRadianPerSecond, radianpersecond.ZettadegreesPerSecond, ZettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(ZettaradiansPerSecondInOneRadianPerSecond, radianpersecond.ZettaradiansPerSecond, ZettaradiansPerSecondTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.CentidegreePerSecond).CentidegreesPerSecond, CentidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.CentiradianPerSecond).CentiradiansPerSecond, CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.DecadegreePerSecond).DecadegreesPerSecond, DecadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.DecaradianPerSecond).DecaradiansPerSecond, DecaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.DecidegreePerSecond).DecidegreesPerSecond, DecidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.DeciradianPerSecond).DeciradiansPerSecond, DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerMinute).DegreesPerMinute, DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerSecond).DegreesPerSecond, DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.ExadegreePerSecond).ExadegreesPerSecond, ExadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.ExaradianPerSecond).ExaradiansPerSecond, ExaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.FemtodegreePerSecond).FemtodegreesPerSecond, FemtodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.FemtoradianPerSecond).FemtoradiansPerSecond, FemtoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.GigadegreePerSecond).GigadegreesPerSecond, GigadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.GigaradianPerSecond).GigaradiansPerSecond, GigaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.HectodegreePerSecond).HectodegreesPerSecond, HectodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.HectoradianPerSecond).HectoradiansPerSecond, HectoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.KilodegreePerSecond).KilodegreesPerSecond, KilodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.KiloradianPerSecond).KiloradiansPerSecond, KiloradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.MegadegreePerSecond).MegadegreesPerSecond, MegadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.MegaradianPerSecond).MegaradiansPerSecond, MegaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.MicrodegreePerSecond).MicrodegreesPerSecond, MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.MicroradianPerSecond).MicroradiansPerSecond, MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.MillidegreePerSecond).MillidegreesPerSecond, MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.MilliradianPerSecond).MilliradiansPerSecond, MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.NanodegreePerSecond).NanodegreesPerSecond, NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.NanoradianPerSecond).NanoradiansPerSecond, NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.PetadegreePerSecond).PetadegreesPerSecond, PetadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.PetaradianPerSecond).PetaradiansPerSecond, PetaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.PicodegreePerSecond).PicodegreesPerSecond, PicodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.PicoradianPerSecond).PicoradiansPerSecond, PicoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.QutradegreePerSecond).QutradegreesPerSecond, QutradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.QutraradianPerSecond).QutraradiansPerSecond, QutraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.RadianPerSecond).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerMinute).RevolutionsPerMinute, RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerSecond).RevolutionsPerSecond, RevolutionsPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.TeradegreePerSecond).TeradegreesPerSecond, TeradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.TeraradianPerSecond).TeraradiansPerSecond, TeraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.VettadegreePerSecond).VettadegreesPerSecond, VettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.VettaradianPerSecond).VettaradiansPerSecond, VettaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.YottadegreePerSecond).YottadegreesPerSecond, YottadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.YottaradianPerSecond).YottaradiansPerSecond, YottaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.ZettadegreePerSecond).ZettadegreesPerSecond, ZettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.From(1, RotationalSpeedUnit.ZettaradianPerSecond).ZettaradiansPerSecond, ZettaradiansPerSecondTolerance);
        }

        [Fact]
        public void FromRadiansPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalSpeed.FromRadiansPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RotationalSpeed.FromRadiansPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromRadiansPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalSpeed.FromRadiansPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(CentidegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.CentidegreePerSecond), CentidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.CentiradianPerSecond), CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DecadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DecadegreePerSecond), DecadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(DecaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DecaradianPerSecond), DecaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DecidegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DecidegreePerSecond), DecidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DeciradianPerSecond), DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerMinute), DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerSecond), DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(ExadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.ExadegreePerSecond), ExadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(ExaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.ExaradianPerSecond), ExaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(FemtodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.FemtodegreePerSecond), FemtodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(FemtoradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.FemtoradianPerSecond), FemtoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(GigadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.GigadegreePerSecond), GigadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(GigaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.GigaradianPerSecond), GigaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(HectodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.HectodegreePerSecond), HectodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(HectoradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.HectoradianPerSecond), HectoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(KilodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.KilodegreePerSecond), KilodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(KiloradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.KiloradianPerSecond), KiloradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MegadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MegadegreePerSecond), MegadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MegaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MegaradianPerSecond), MegaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicrodegreePerSecond), MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicroradianPerSecond), MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MillidegreePerSecond), MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MilliradianPerSecond), MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanodegreePerSecond), NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanoradianPerSecond), NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(PetadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.PetadegreePerSecond), PetadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(PetaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.PetaradianPerSecond), PetaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(PicodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.PicodegreePerSecond), PicodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(PicoradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.PicoradianPerSecond), PicoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(QutradegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.QutradegreePerSecond), QutradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(QutraradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.QutraradianPerSecond), QutraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RadianPerSecond), RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerMinute), RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerSecond), RevolutionsPerSecondTolerance);
            AssertEx.EqualTolerance(TeradegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.TeradegreePerSecond), TeradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(TeraradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.TeraradianPerSecond), TeraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(VettadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.VettadegreePerSecond), VettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(VettaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.VettaradianPerSecond), VettaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(YottadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.YottadegreePerSecond), YottadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(YottaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.YottaradianPerSecond), YottaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(ZettadegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.ZettadegreePerSecond), ZettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(ZettaradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.ZettaradianPerSecond), ZettaradiansPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);

            var centidegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.CentidegreePerSecond);
            AssertEx.EqualTolerance(CentidegreesPerSecondInOneRadianPerSecond, (double)centidegreepersecondQuantity.Value, CentidegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.CentidegreePerSecond, centidegreepersecondQuantity.Unit);

            var centiradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.CentiradianPerSecond);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, (double)centiradianpersecondQuantity.Value, CentiradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.CentiradianPerSecond, centiradianpersecondQuantity.Unit);

            var decadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DecadegreePerSecond);
            AssertEx.EqualTolerance(DecadegreesPerSecondInOneRadianPerSecond, (double)decadegreepersecondQuantity.Value, DecadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DecadegreePerSecond, decadegreepersecondQuantity.Unit);

            var decaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DecaradianPerSecond);
            AssertEx.EqualTolerance(DecaradiansPerSecondInOneRadianPerSecond, (double)decaradianpersecondQuantity.Value, DecaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DecaradianPerSecond, decaradianpersecondQuantity.Unit);

            var decidegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DecidegreePerSecond);
            AssertEx.EqualTolerance(DecidegreesPerSecondInOneRadianPerSecond, (double)decidegreepersecondQuantity.Value, DecidegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DecidegreePerSecond, decidegreepersecondQuantity.Unit);

            var deciradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DeciradianPerSecond);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, (double)deciradianpersecondQuantity.Value, DeciradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DeciradianPerSecond, deciradianpersecondQuantity.Unit);

            var degreeperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DegreePerMinute);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, (double)degreeperminuteQuantity.Value, DegreesPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerMinute, degreeperminuteQuantity.Unit);

            var degreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DegreePerSecond);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, (double)degreepersecondQuantity.Value, DegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerSecond, degreepersecondQuantity.Unit);

            var exadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.ExadegreePerSecond);
            AssertEx.EqualTolerance(ExadegreesPerSecondInOneRadianPerSecond, (double)exadegreepersecondQuantity.Value, ExadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.ExadegreePerSecond, exadegreepersecondQuantity.Unit);

            var exaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.ExaradianPerSecond);
            AssertEx.EqualTolerance(ExaradiansPerSecondInOneRadianPerSecond, (double)exaradianpersecondQuantity.Value, ExaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.ExaradianPerSecond, exaradianpersecondQuantity.Unit);

            var femtodegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.FemtodegreePerSecond);
            AssertEx.EqualTolerance(FemtodegreesPerSecondInOneRadianPerSecond, (double)femtodegreepersecondQuantity.Value, FemtodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.FemtodegreePerSecond, femtodegreepersecondQuantity.Unit);

            var femtoradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.FemtoradianPerSecond);
            AssertEx.EqualTolerance(FemtoradiansPerSecondInOneRadianPerSecond, (double)femtoradianpersecondQuantity.Value, FemtoradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.FemtoradianPerSecond, femtoradianpersecondQuantity.Unit);

            var gigadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.GigadegreePerSecond);
            AssertEx.EqualTolerance(GigadegreesPerSecondInOneRadianPerSecond, (double)gigadegreepersecondQuantity.Value, GigadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.GigadegreePerSecond, gigadegreepersecondQuantity.Unit);

            var gigaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.GigaradianPerSecond);
            AssertEx.EqualTolerance(GigaradiansPerSecondInOneRadianPerSecond, (double)gigaradianpersecondQuantity.Value, GigaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.GigaradianPerSecond, gigaradianpersecondQuantity.Unit);

            var hectodegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.HectodegreePerSecond);
            AssertEx.EqualTolerance(HectodegreesPerSecondInOneRadianPerSecond, (double)hectodegreepersecondQuantity.Value, HectodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.HectodegreePerSecond, hectodegreepersecondQuantity.Unit);

            var hectoradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.HectoradianPerSecond);
            AssertEx.EqualTolerance(HectoradiansPerSecondInOneRadianPerSecond, (double)hectoradianpersecondQuantity.Value, HectoradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.HectoradianPerSecond, hectoradianpersecondQuantity.Unit);

            var kilodegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.KilodegreePerSecond);
            AssertEx.EqualTolerance(KilodegreesPerSecondInOneRadianPerSecond, (double)kilodegreepersecondQuantity.Value, KilodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.KilodegreePerSecond, kilodegreepersecondQuantity.Unit);

            var kiloradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.KiloradianPerSecond);
            AssertEx.EqualTolerance(KiloradiansPerSecondInOneRadianPerSecond, (double)kiloradianpersecondQuantity.Value, KiloradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.KiloradianPerSecond, kiloradianpersecondQuantity.Unit);

            var megadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MegadegreePerSecond);
            AssertEx.EqualTolerance(MegadegreesPerSecondInOneRadianPerSecond, (double)megadegreepersecondQuantity.Value, MegadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MegadegreePerSecond, megadegreepersecondQuantity.Unit);

            var megaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MegaradianPerSecond);
            AssertEx.EqualTolerance(MegaradiansPerSecondInOneRadianPerSecond, (double)megaradianpersecondQuantity.Value, MegaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MegaradianPerSecond, megaradianpersecondQuantity.Unit);

            var microdegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MicrodegreePerSecond);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, (double)microdegreepersecondQuantity.Value, MicrodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MicrodegreePerSecond, microdegreepersecondQuantity.Unit);

            var microradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MicroradianPerSecond);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, (double)microradianpersecondQuantity.Value, MicroradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MicroradianPerSecond, microradianpersecondQuantity.Unit);

            var millidegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MillidegreePerSecond);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, (double)millidegreepersecondQuantity.Value, MillidegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MillidegreePerSecond, millidegreepersecondQuantity.Unit);

            var milliradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MilliradianPerSecond);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, (double)milliradianpersecondQuantity.Value, MilliradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MilliradianPerSecond, milliradianpersecondQuantity.Unit);

            var nanodegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.NanodegreePerSecond);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, (double)nanodegreepersecondQuantity.Value, NanodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.NanodegreePerSecond, nanodegreepersecondQuantity.Unit);

            var nanoradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.NanoradianPerSecond);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, (double)nanoradianpersecondQuantity.Value, NanoradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.NanoradianPerSecond, nanoradianpersecondQuantity.Unit);

            var petadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.PetadegreePerSecond);
            AssertEx.EqualTolerance(PetadegreesPerSecondInOneRadianPerSecond, (double)petadegreepersecondQuantity.Value, PetadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.PetadegreePerSecond, petadegreepersecondQuantity.Unit);

            var petaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.PetaradianPerSecond);
            AssertEx.EqualTolerance(PetaradiansPerSecondInOneRadianPerSecond, (double)petaradianpersecondQuantity.Value, PetaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.PetaradianPerSecond, petaradianpersecondQuantity.Unit);

            var picodegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.PicodegreePerSecond);
            AssertEx.EqualTolerance(PicodegreesPerSecondInOneRadianPerSecond, (double)picodegreepersecondQuantity.Value, PicodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.PicodegreePerSecond, picodegreepersecondQuantity.Unit);

            var picoradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.PicoradianPerSecond);
            AssertEx.EqualTolerance(PicoradiansPerSecondInOneRadianPerSecond, (double)picoradianpersecondQuantity.Value, PicoradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.PicoradianPerSecond, picoradianpersecondQuantity.Unit);

            var qutradegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.QutradegreePerSecond);
            AssertEx.EqualTolerance(QutradegreesPerSecondInOneRadianPerSecond, (double)qutradegreepersecondQuantity.Value, QutradegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.QutradegreePerSecond, qutradegreepersecondQuantity.Unit);

            var qutraradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.QutraradianPerSecond);
            AssertEx.EqualTolerance(QutraradiansPerSecondInOneRadianPerSecond, (double)qutraradianpersecondQuantity.Value, QutraradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.QutraradianPerSecond, qutraradianpersecondQuantity.Unit);

            var radianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RadianPerSecond);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, (double)radianpersecondQuantity.Value, RadiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.RadianPerSecond, radianpersecondQuantity.Unit);

            var revolutionperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RevolutionPerMinute);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, (double)revolutionperminuteQuantity.Value, RevolutionsPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerMinute, revolutionperminuteQuantity.Unit);

            var revolutionpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RevolutionPerSecond);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, (double)revolutionpersecondQuantity.Value, RevolutionsPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerSecond, revolutionpersecondQuantity.Unit);

            var teradegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.TeradegreePerSecond);
            AssertEx.EqualTolerance(TeradegreesPerSecondInOneRadianPerSecond, (double)teradegreepersecondQuantity.Value, TeradegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.TeradegreePerSecond, teradegreepersecondQuantity.Unit);

            var teraradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.TeraradianPerSecond);
            AssertEx.EqualTolerance(TeraradiansPerSecondInOneRadianPerSecond, (double)teraradianpersecondQuantity.Value, TeraradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.TeraradianPerSecond, teraradianpersecondQuantity.Unit);

            var vettadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.VettadegreePerSecond);
            AssertEx.EqualTolerance(VettadegreesPerSecondInOneRadianPerSecond, (double)vettadegreepersecondQuantity.Value, VettadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.VettadegreePerSecond, vettadegreepersecondQuantity.Unit);

            var vettaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.VettaradianPerSecond);
            AssertEx.EqualTolerance(VettaradiansPerSecondInOneRadianPerSecond, (double)vettaradianpersecondQuantity.Value, VettaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.VettaradianPerSecond, vettaradianpersecondQuantity.Unit);

            var yottadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.YottadegreePerSecond);
            AssertEx.EqualTolerance(YottadegreesPerSecondInOneRadianPerSecond, (double)yottadegreepersecondQuantity.Value, YottadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.YottadegreePerSecond, yottadegreepersecondQuantity.Unit);

            var yottaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.YottaradianPerSecond);
            AssertEx.EqualTolerance(YottaradiansPerSecondInOneRadianPerSecond, (double)yottaradianpersecondQuantity.Value, YottaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.YottaradianPerSecond, yottaradianpersecondQuantity.Unit);

            var zettadegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.ZettadegreePerSecond);
            AssertEx.EqualTolerance(ZettadegreesPerSecondInOneRadianPerSecond, (double)zettadegreepersecondQuantity.Value, ZettadegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.ZettadegreePerSecond, zettadegreepersecondQuantity.Unit);

            var zettaradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.ZettaradianPerSecond);
            AssertEx.EqualTolerance(ZettaradiansPerSecondInOneRadianPerSecond, (double)zettaradianpersecondQuantity.Value, ZettaradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.ZettaradianPerSecond, zettaradianpersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromCentidegreesPerSecond(radianpersecond.CentidegreesPerSecond).RadiansPerSecond, CentidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromCentiradiansPerSecond(radianpersecond.CentiradiansPerSecond).RadiansPerSecond, CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDecadegreesPerSecond(radianpersecond.DecadegreesPerSecond).RadiansPerSecond, DecadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDecaradiansPerSecond(radianpersecond.DecaradiansPerSecond).RadiansPerSecond, DecaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDecidegreesPerSecond(radianpersecond.DecidegreesPerSecond).RadiansPerSecond, DecidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDeciradiansPerSecond(radianpersecond.DeciradiansPerSecond).RadiansPerSecond, DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDegreesPerMinute(radianpersecond.DegreesPerMinute).RadiansPerSecond, DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDegreesPerSecond(radianpersecond.DegreesPerSecond).RadiansPerSecond, DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromExadegreesPerSecond(radianpersecond.ExadegreesPerSecond).RadiansPerSecond, ExadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromExaradiansPerSecond(radianpersecond.ExaradiansPerSecond).RadiansPerSecond, ExaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromFemtodegreesPerSecond(radianpersecond.FemtodegreesPerSecond).RadiansPerSecond, FemtodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromFemtoradiansPerSecond(radianpersecond.FemtoradiansPerSecond).RadiansPerSecond, FemtoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromGigadegreesPerSecond(radianpersecond.GigadegreesPerSecond).RadiansPerSecond, GigadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromGigaradiansPerSecond(radianpersecond.GigaradiansPerSecond).RadiansPerSecond, GigaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromHectodegreesPerSecond(radianpersecond.HectodegreesPerSecond).RadiansPerSecond, HectodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromHectoradiansPerSecond(radianpersecond.HectoradiansPerSecond).RadiansPerSecond, HectoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromKilodegreesPerSecond(radianpersecond.KilodegreesPerSecond).RadiansPerSecond, KilodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromKiloradiansPerSecond(radianpersecond.KiloradiansPerSecond).RadiansPerSecond, KiloradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMegadegreesPerSecond(radianpersecond.MegadegreesPerSecond).RadiansPerSecond, MegadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMegaradiansPerSecond(radianpersecond.MegaradiansPerSecond).RadiansPerSecond, MegaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMicrodegreesPerSecond(radianpersecond.MicrodegreesPerSecond).RadiansPerSecond, MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMicroradiansPerSecond(radianpersecond.MicroradiansPerSecond).RadiansPerSecond, MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMillidegreesPerSecond(radianpersecond.MillidegreesPerSecond).RadiansPerSecond, MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMilliradiansPerSecond(radianpersecond.MilliradiansPerSecond).RadiansPerSecond, MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromNanodegreesPerSecond(radianpersecond.NanodegreesPerSecond).RadiansPerSecond, NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromNanoradiansPerSecond(radianpersecond.NanoradiansPerSecond).RadiansPerSecond, NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromPetadegreesPerSecond(radianpersecond.PetadegreesPerSecond).RadiansPerSecond, PetadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromPetaradiansPerSecond(radianpersecond.PetaradiansPerSecond).RadiansPerSecond, PetaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromPicodegreesPerSecond(radianpersecond.PicodegreesPerSecond).RadiansPerSecond, PicodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromPicoradiansPerSecond(radianpersecond.PicoradiansPerSecond).RadiansPerSecond, PicoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromQutradegreesPerSecond(radianpersecond.QutradegreesPerSecond).RadiansPerSecond, QutradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromQutraradiansPerSecond(radianpersecond.QutraradiansPerSecond).RadiansPerSecond, QutraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRadiansPerSecond(radianpersecond.RadiansPerSecond).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRevolutionsPerMinute(radianpersecond.RevolutionsPerMinute).RadiansPerSecond, RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRevolutionsPerSecond(radianpersecond.RevolutionsPerSecond).RadiansPerSecond, RevolutionsPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromTeradegreesPerSecond(radianpersecond.TeradegreesPerSecond).RadiansPerSecond, TeradegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromTeraradiansPerSecond(radianpersecond.TeraradiansPerSecond).RadiansPerSecond, TeraradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromVettadegreesPerSecond(radianpersecond.VettadegreesPerSecond).RadiansPerSecond, VettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromVettaradiansPerSecond(radianpersecond.VettaradiansPerSecond).RadiansPerSecond, VettaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromYottadegreesPerSecond(radianpersecond.YottadegreesPerSecond).RadiansPerSecond, YottadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromYottaradiansPerSecond(radianpersecond.YottaradiansPerSecond).RadiansPerSecond, YottaradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromZettadegreesPerSecond(radianpersecond.ZettadegreesPerSecond).RadiansPerSecond, ZettadegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromZettaradiansPerSecond(radianpersecond.ZettaradiansPerSecond).RadiansPerSecond, ZettaradiansPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalSpeed v = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RotationalSpeed.FromRadiansPerSecond(3)-v).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RotationalSpeed.FromRadiansPerSecond(10)/5).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, RotationalSpeed.FromRadiansPerSecond(10)/RotationalSpeed.FromRadiansPerSecond(5), RadiansPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalSpeed oneRadianPerSecond = RotationalSpeed.FromRadiansPerSecond(1);
            RotationalSpeed twoRadiansPerSecond = RotationalSpeed.FromRadiansPerSecond(2);

            Assert.True(oneRadianPerSecond < twoRadiansPerSecond);
            Assert.True(oneRadianPerSecond <= twoRadiansPerSecond);
            Assert.True(twoRadiansPerSecond > oneRadianPerSecond);
            Assert.True(twoRadiansPerSecond >= oneRadianPerSecond);

            Assert.False(oneRadianPerSecond > twoRadiansPerSecond);
            Assert.False(oneRadianPerSecond >= twoRadiansPerSecond);
            Assert.False(twoRadiansPerSecond < oneRadianPerSecond);
            Assert.False(twoRadiansPerSecond <= oneRadianPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Equal(0, radianpersecond.CompareTo(radianpersecond));
            Assert.True(radianpersecond.CompareTo(RotationalSpeed.Zero) > 0);
            Assert.True(RotationalSpeed.Zero.CompareTo(radianpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentException>(() => radianpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => radianpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = RotationalSpeed.FromRadiansPerSecond(1);
            var b = RotationalSpeed.FromRadiansPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = RotationalSpeed.FromRadiansPerSecond(1);
            var b = RotationalSpeed.FromRadiansPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.True(v.Equals(RotationalSpeed.FromRadiansPerSecond(1), RadiansPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RotationalSpeed.Zero, RadiansPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.False(radianpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.False(radianpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(RotationalSpeedUnit.Undefined, RotationalSpeed.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RotationalSpeedUnit)).Cast<RotationalSpeedUnit>();
            foreach(var unit in units)
            {
                if(unit == RotationalSpeedUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RotationalSpeed.BaseDimensions is null);
        }
    }
}
