//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Illuminance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IlluminanceTestsBase
    {
        protected abstract double CentiluxInOneLux { get; }
        protected abstract double DecaluxInOneLux { get; }
        protected abstract double DeciluxInOneLux { get; }
        protected abstract double ExaluxInOneLux { get; }
        protected abstract double FemtoluxInOneLux { get; }
        protected abstract double GigaluxInOneLux { get; }
        protected abstract double HectoluxInOneLux { get; }
        protected abstract double KiloluxInOneLux { get; }
        protected abstract double LuxInOneLux { get; }
        protected abstract double MegaluxInOneLux { get; }
        protected abstract double MicroluxInOneLux { get; }
        protected abstract double MilliluxInOneLux { get; }
        protected abstract double NanoluxInOneLux { get; }
        protected abstract double PetaluxInOneLux { get; }
        protected abstract double PicoluxInOneLux { get; }
        protected abstract double QutraluxInOneLux { get; }
        protected abstract double TeraluxInOneLux { get; }
        protected abstract double VettaluxInOneLux { get; }
        protected abstract double YottaluxInOneLux { get; }
        protected abstract double ZettaluxInOneLux { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentiluxTolerance { get { return 1e-5; } }
        protected virtual double DecaluxTolerance { get { return 1e-5; } }
        protected virtual double DeciluxTolerance { get { return 1e-5; } }
        protected virtual double ExaluxTolerance { get { return 1e-5; } }
        protected virtual double FemtoluxTolerance { get { return 1e-5; } }
        protected virtual double GigaluxTolerance { get { return 1e-5; } }
        protected virtual double HectoluxTolerance { get { return 1e-5; } }
        protected virtual double KiloluxTolerance { get { return 1e-5; } }
        protected virtual double LuxTolerance { get { return 1e-5; } }
        protected virtual double MegaluxTolerance { get { return 1e-5; } }
        protected virtual double MicroluxTolerance { get { return 1e-5; } }
        protected virtual double MilliluxTolerance { get { return 1e-5; } }
        protected virtual double NanoluxTolerance { get { return 1e-5; } }
        protected virtual double PetaluxTolerance { get { return 1e-5; } }
        protected virtual double PicoluxTolerance { get { return 1e-5; } }
        protected virtual double QutraluxTolerance { get { return 1e-5; } }
        protected virtual double TeraluxTolerance { get { return 1e-5; } }
        protected virtual double VettaluxTolerance { get { return 1e-5; } }
        protected virtual double YottaluxTolerance { get { return 1e-5; } }
        protected virtual double ZettaluxTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Illuminance((double)0.0, IlluminanceUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Illuminance(double.PositiveInfinity, IlluminanceUnit.Lux));
            Assert.Throws<ArgumentException>(() => new Illuminance(double.NegativeInfinity, IlluminanceUnit.Lux));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Illuminance(double.NaN, IlluminanceUnit.Lux));
        }

        [Fact]
        public void LuxToIlluminanceUnits()
        {
            Illuminance lux = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(CentiluxInOneLux, lux.Centilux, CentiluxTolerance);
            AssertEx.EqualTolerance(DecaluxInOneLux, lux.Decalux, DecaluxTolerance);
            AssertEx.EqualTolerance(DeciluxInOneLux, lux.Decilux, DeciluxTolerance);
            AssertEx.EqualTolerance(ExaluxInOneLux, lux.Exalux, ExaluxTolerance);
            AssertEx.EqualTolerance(FemtoluxInOneLux, lux.Femtolux, FemtoluxTolerance);
            AssertEx.EqualTolerance(GigaluxInOneLux, lux.Gigalux, GigaluxTolerance);
            AssertEx.EqualTolerance(HectoluxInOneLux, lux.Hectolux, HectoluxTolerance);
            AssertEx.EqualTolerance(KiloluxInOneLux, lux.Kilolux, KiloluxTolerance);
            AssertEx.EqualTolerance(LuxInOneLux, lux.Lux, LuxTolerance);
            AssertEx.EqualTolerance(MegaluxInOneLux, lux.Megalux, MegaluxTolerance);
            AssertEx.EqualTolerance(MicroluxInOneLux, lux.Microlux, MicroluxTolerance);
            AssertEx.EqualTolerance(MilliluxInOneLux, lux.Millilux, MilliluxTolerance);
            AssertEx.EqualTolerance(NanoluxInOneLux, lux.Nanolux, NanoluxTolerance);
            AssertEx.EqualTolerance(PetaluxInOneLux, lux.Petalux, PetaluxTolerance);
            AssertEx.EqualTolerance(PicoluxInOneLux, lux.Picolux, PicoluxTolerance);
            AssertEx.EqualTolerance(QutraluxInOneLux, lux.Qutralux, QutraluxTolerance);
            AssertEx.EqualTolerance(TeraluxInOneLux, lux.Teralux, TeraluxTolerance);
            AssertEx.EqualTolerance(VettaluxInOneLux, lux.Vettalux, VettaluxTolerance);
            AssertEx.EqualTolerance(YottaluxInOneLux, lux.Yottalux, YottaluxTolerance);
            AssertEx.EqualTolerance(ZettaluxInOneLux, lux.Zettalux, ZettaluxTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Centilux).Centilux, CentiluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Decalux).Decalux, DecaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Decilux).Decilux, DeciluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Exalux).Exalux, ExaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Femtolux).Femtolux, FemtoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Gigalux).Gigalux, GigaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Hectolux).Hectolux, HectoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Kilolux).Kilolux, KiloluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Lux).Lux, LuxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Megalux).Megalux, MegaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Microlux).Microlux, MicroluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Millilux).Millilux, MilliluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Nanolux).Nanolux, NanoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Petalux).Petalux, PetaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Picolux).Picolux, PicoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Qutralux).Qutralux, QutraluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Teralux).Teralux, TeraluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Vettalux).Vettalux, VettaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Yottalux).Yottalux, YottaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Zettalux).Zettalux, ZettaluxTolerance);
        }

        [Fact]
        public void FromLux_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Illuminance.FromLux(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Illuminance.FromLux(double.NegativeInfinity));
        }

        [Fact]
        public void FromLux_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Illuminance.FromLux(double.NaN));
        }

        [Fact]
        public void As()
        {
            var lux = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(CentiluxInOneLux, lux.As(IlluminanceUnit.Centilux), CentiluxTolerance);
            AssertEx.EqualTolerance(DecaluxInOneLux, lux.As(IlluminanceUnit.Decalux), DecaluxTolerance);
            AssertEx.EqualTolerance(DeciluxInOneLux, lux.As(IlluminanceUnit.Decilux), DeciluxTolerance);
            AssertEx.EqualTolerance(ExaluxInOneLux, lux.As(IlluminanceUnit.Exalux), ExaluxTolerance);
            AssertEx.EqualTolerance(FemtoluxInOneLux, lux.As(IlluminanceUnit.Femtolux), FemtoluxTolerance);
            AssertEx.EqualTolerance(GigaluxInOneLux, lux.As(IlluminanceUnit.Gigalux), GigaluxTolerance);
            AssertEx.EqualTolerance(HectoluxInOneLux, lux.As(IlluminanceUnit.Hectolux), HectoluxTolerance);
            AssertEx.EqualTolerance(KiloluxInOneLux, lux.As(IlluminanceUnit.Kilolux), KiloluxTolerance);
            AssertEx.EqualTolerance(LuxInOneLux, lux.As(IlluminanceUnit.Lux), LuxTolerance);
            AssertEx.EqualTolerance(MegaluxInOneLux, lux.As(IlluminanceUnit.Megalux), MegaluxTolerance);
            AssertEx.EqualTolerance(MicroluxInOneLux, lux.As(IlluminanceUnit.Microlux), MicroluxTolerance);
            AssertEx.EqualTolerance(MilliluxInOneLux, lux.As(IlluminanceUnit.Millilux), MilliluxTolerance);
            AssertEx.EqualTolerance(NanoluxInOneLux, lux.As(IlluminanceUnit.Nanolux), NanoluxTolerance);
            AssertEx.EqualTolerance(PetaluxInOneLux, lux.As(IlluminanceUnit.Petalux), PetaluxTolerance);
            AssertEx.EqualTolerance(PicoluxInOneLux, lux.As(IlluminanceUnit.Picolux), PicoluxTolerance);
            AssertEx.EqualTolerance(QutraluxInOneLux, lux.As(IlluminanceUnit.Qutralux), QutraluxTolerance);
            AssertEx.EqualTolerance(TeraluxInOneLux, lux.As(IlluminanceUnit.Teralux), TeraluxTolerance);
            AssertEx.EqualTolerance(VettaluxInOneLux, lux.As(IlluminanceUnit.Vettalux), VettaluxTolerance);
            AssertEx.EqualTolerance(YottaluxInOneLux, lux.As(IlluminanceUnit.Yottalux), YottaluxTolerance);
            AssertEx.EqualTolerance(ZettaluxInOneLux, lux.As(IlluminanceUnit.Zettalux), ZettaluxTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var lux = Illuminance.FromLux(1);

            var centiluxQuantity = lux.ToUnit(IlluminanceUnit.Centilux);
            AssertEx.EqualTolerance(CentiluxInOneLux, (double)centiluxQuantity.Value, CentiluxTolerance);
            Assert.Equal(IlluminanceUnit.Centilux, centiluxQuantity.Unit);

            var decaluxQuantity = lux.ToUnit(IlluminanceUnit.Decalux);
            AssertEx.EqualTolerance(DecaluxInOneLux, (double)decaluxQuantity.Value, DecaluxTolerance);
            Assert.Equal(IlluminanceUnit.Decalux, decaluxQuantity.Unit);

            var deciluxQuantity = lux.ToUnit(IlluminanceUnit.Decilux);
            AssertEx.EqualTolerance(DeciluxInOneLux, (double)deciluxQuantity.Value, DeciluxTolerance);
            Assert.Equal(IlluminanceUnit.Decilux, deciluxQuantity.Unit);

            var exaluxQuantity = lux.ToUnit(IlluminanceUnit.Exalux);
            AssertEx.EqualTolerance(ExaluxInOneLux, (double)exaluxQuantity.Value, ExaluxTolerance);
            Assert.Equal(IlluminanceUnit.Exalux, exaluxQuantity.Unit);

            var femtoluxQuantity = lux.ToUnit(IlluminanceUnit.Femtolux);
            AssertEx.EqualTolerance(FemtoluxInOneLux, (double)femtoluxQuantity.Value, FemtoluxTolerance);
            Assert.Equal(IlluminanceUnit.Femtolux, femtoluxQuantity.Unit);

            var gigaluxQuantity = lux.ToUnit(IlluminanceUnit.Gigalux);
            AssertEx.EqualTolerance(GigaluxInOneLux, (double)gigaluxQuantity.Value, GigaluxTolerance);
            Assert.Equal(IlluminanceUnit.Gigalux, gigaluxQuantity.Unit);

            var hectoluxQuantity = lux.ToUnit(IlluminanceUnit.Hectolux);
            AssertEx.EqualTolerance(HectoluxInOneLux, (double)hectoluxQuantity.Value, HectoluxTolerance);
            Assert.Equal(IlluminanceUnit.Hectolux, hectoluxQuantity.Unit);

            var kiloluxQuantity = lux.ToUnit(IlluminanceUnit.Kilolux);
            AssertEx.EqualTolerance(KiloluxInOneLux, (double)kiloluxQuantity.Value, KiloluxTolerance);
            Assert.Equal(IlluminanceUnit.Kilolux, kiloluxQuantity.Unit);

            var luxQuantity = lux.ToUnit(IlluminanceUnit.Lux);
            AssertEx.EqualTolerance(LuxInOneLux, (double)luxQuantity.Value, LuxTolerance);
            Assert.Equal(IlluminanceUnit.Lux, luxQuantity.Unit);

            var megaluxQuantity = lux.ToUnit(IlluminanceUnit.Megalux);
            AssertEx.EqualTolerance(MegaluxInOneLux, (double)megaluxQuantity.Value, MegaluxTolerance);
            Assert.Equal(IlluminanceUnit.Megalux, megaluxQuantity.Unit);

            var microluxQuantity = lux.ToUnit(IlluminanceUnit.Microlux);
            AssertEx.EqualTolerance(MicroluxInOneLux, (double)microluxQuantity.Value, MicroluxTolerance);
            Assert.Equal(IlluminanceUnit.Microlux, microluxQuantity.Unit);

            var milliluxQuantity = lux.ToUnit(IlluminanceUnit.Millilux);
            AssertEx.EqualTolerance(MilliluxInOneLux, (double)milliluxQuantity.Value, MilliluxTolerance);
            Assert.Equal(IlluminanceUnit.Millilux, milliluxQuantity.Unit);

            var nanoluxQuantity = lux.ToUnit(IlluminanceUnit.Nanolux);
            AssertEx.EqualTolerance(NanoluxInOneLux, (double)nanoluxQuantity.Value, NanoluxTolerance);
            Assert.Equal(IlluminanceUnit.Nanolux, nanoluxQuantity.Unit);

            var petaluxQuantity = lux.ToUnit(IlluminanceUnit.Petalux);
            AssertEx.EqualTolerance(PetaluxInOneLux, (double)petaluxQuantity.Value, PetaluxTolerance);
            Assert.Equal(IlluminanceUnit.Petalux, petaluxQuantity.Unit);

            var picoluxQuantity = lux.ToUnit(IlluminanceUnit.Picolux);
            AssertEx.EqualTolerance(PicoluxInOneLux, (double)picoluxQuantity.Value, PicoluxTolerance);
            Assert.Equal(IlluminanceUnit.Picolux, picoluxQuantity.Unit);

            var qutraluxQuantity = lux.ToUnit(IlluminanceUnit.Qutralux);
            AssertEx.EqualTolerance(QutraluxInOneLux, (double)qutraluxQuantity.Value, QutraluxTolerance);
            Assert.Equal(IlluminanceUnit.Qutralux, qutraluxQuantity.Unit);

            var teraluxQuantity = lux.ToUnit(IlluminanceUnit.Teralux);
            AssertEx.EqualTolerance(TeraluxInOneLux, (double)teraluxQuantity.Value, TeraluxTolerance);
            Assert.Equal(IlluminanceUnit.Teralux, teraluxQuantity.Unit);

            var vettaluxQuantity = lux.ToUnit(IlluminanceUnit.Vettalux);
            AssertEx.EqualTolerance(VettaluxInOneLux, (double)vettaluxQuantity.Value, VettaluxTolerance);
            Assert.Equal(IlluminanceUnit.Vettalux, vettaluxQuantity.Unit);

            var yottaluxQuantity = lux.ToUnit(IlluminanceUnit.Yottalux);
            AssertEx.EqualTolerance(YottaluxInOneLux, (double)yottaluxQuantity.Value, YottaluxTolerance);
            Assert.Equal(IlluminanceUnit.Yottalux, yottaluxQuantity.Unit);

            var zettaluxQuantity = lux.ToUnit(IlluminanceUnit.Zettalux);
            AssertEx.EqualTolerance(ZettaluxInOneLux, (double)zettaluxQuantity.Value, ZettaluxTolerance);
            Assert.Equal(IlluminanceUnit.Zettalux, zettaluxQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Illuminance lux = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(1, Illuminance.FromCentilux(lux.Centilux).Lux, CentiluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromDecalux(lux.Decalux).Lux, DecaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromDecilux(lux.Decilux).Lux, DeciluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromExalux(lux.Exalux).Lux, ExaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromFemtolux(lux.Femtolux).Lux, FemtoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromGigalux(lux.Gigalux).Lux, GigaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromHectolux(lux.Hectolux).Lux, HectoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromKilolux(lux.Kilolux).Lux, KiloluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromLux(lux.Lux).Lux, LuxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromMegalux(lux.Megalux).Lux, MegaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromMicrolux(lux.Microlux).Lux, MicroluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromMillilux(lux.Millilux).Lux, MilliluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromNanolux(lux.Nanolux).Lux, NanoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromPetalux(lux.Petalux).Lux, PetaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromPicolux(lux.Picolux).Lux, PicoluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromQutralux(lux.Qutralux).Lux, QutraluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromTeralux(lux.Teralux).Lux, TeraluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromVettalux(lux.Vettalux).Lux, VettaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromYottalux(lux.Yottalux).Lux, YottaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromZettalux(lux.Zettalux).Lux, ZettaluxTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Illuminance v = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(-1, -v.Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (Illuminance.FromLux(3)-v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (v + v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(10, (v*10).Lux, LuxTolerance);
            AssertEx.EqualTolerance(10, (10*v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (Illuminance.FromLux(10)/5).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, Illuminance.FromLux(10)/Illuminance.FromLux(5), LuxTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Illuminance oneLux = Illuminance.FromLux(1);
            Illuminance twoLux = Illuminance.FromLux(2);

            Assert.True(oneLux < twoLux);
            Assert.True(oneLux <= twoLux);
            Assert.True(twoLux > oneLux);
            Assert.True(twoLux >= oneLux);

            Assert.False(oneLux > twoLux);
            Assert.False(oneLux >= twoLux);
            Assert.False(twoLux < oneLux);
            Assert.False(twoLux <= oneLux);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.Equal(0, lux.CompareTo(lux));
            Assert.True(lux.CompareTo(Illuminance.Zero) > 0);
            Assert.True(Illuminance.Zero.CompareTo(lux) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.Throws<ArgumentException>(() => lux.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.Throws<ArgumentNullException>(() => lux.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Illuminance.FromLux(1);
            var b = Illuminance.FromLux(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Illuminance.FromLux(1);
            var b = Illuminance.FromLux(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Illuminance.FromLux(1);
            Assert.True(v.Equals(Illuminance.FromLux(1), LuxTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Illuminance.Zero, LuxTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.False(lux.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.False(lux.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(IlluminanceUnit.Undefined, Illuminance.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(IlluminanceUnit)).Cast<IlluminanceUnit>();
            foreach(var unit in units)
            {
                if(unit == IlluminanceUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Illuminance.BaseDimensions is null);
        }
    }
}
