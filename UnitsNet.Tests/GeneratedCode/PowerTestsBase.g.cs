//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Power.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PowerTestsBase
    {
        protected abstract double BoilerHorsepowerInOneWatt { get; }
        protected abstract double BritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double CentiwattsInOneWatt { get; }
        protected abstract double DecawattsInOneWatt { get; }
        protected abstract double DeciwattsInOneWatt { get; }
        protected abstract double ElectricalHorsepowerInOneWatt { get; }
        protected abstract double ExawattsInOneWatt { get; }
        protected abstract double FemtowattsInOneWatt { get; }
        protected abstract double GigawattsInOneWatt { get; }
        protected abstract double HectowattsInOneWatt { get; }
        protected abstract double HydraulicHorsepowerInOneWatt { get; }
        protected abstract double KilobritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double KilowattsInOneWatt { get; }
        protected abstract double MechanicalHorsepowerInOneWatt { get; }
        protected abstract double MegawattsInOneWatt { get; }
        protected abstract double MetricHorsepowerInOneWatt { get; }
        protected abstract double MicrowattsInOneWatt { get; }
        protected abstract double MilliwattsInOneWatt { get; }
        protected abstract double NanowattsInOneWatt { get; }
        protected abstract double PetawattsInOneWatt { get; }
        protected abstract double PicowattsInOneWatt { get; }
        protected abstract double QutrawattsInOneWatt { get; }
        protected abstract double TerawattsInOneWatt { get; }
        protected abstract double VettawattsInOneWatt { get; }
        protected abstract double WattsInOneWatt { get; }
        protected abstract double YottawattsInOneWatt { get; }
        protected abstract double ZettawattsInOneWatt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BoilerHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double CentiwattsTolerance { get { return 1e-5; } }
        protected virtual double DecawattsTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsTolerance { get { return 1e-5; } }
        protected virtual double ElectricalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double ExawattsTolerance { get { return 1e-5; } }
        protected virtual double FemtowattsTolerance { get { return 1e-5; } }
        protected virtual double GigawattsTolerance { get { return 1e-5; } }
        protected virtual double HectowattsTolerance { get { return 1e-5; } }
        protected virtual double HydraulicHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilowattsTolerance { get { return 1e-5; } }
        protected virtual double MechanicalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MegawattsTolerance { get { return 1e-5; } }
        protected virtual double MetricHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsTolerance { get { return 1e-5; } }
        protected virtual double NanowattsTolerance { get { return 1e-5; } }
        protected virtual double PetawattsTolerance { get { return 1e-5; } }
        protected virtual double PicowattsTolerance { get { return 1e-5; } }
        protected virtual double QutrawattsTolerance { get { return 1e-5; } }
        protected virtual double TerawattsTolerance { get { return 1e-5; } }
        protected virtual double VettawattsTolerance { get { return 1e-5; } }
        protected virtual double WattsTolerance { get { return 1e-5; } }
        protected virtual double YottawattsTolerance { get { return 1e-5; } }
        protected virtual double ZettawattsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Power((double)0.0, PowerUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Power(double.PositiveInfinity, PowerUnit.Watt));
            Assert.Throws<ArgumentException>(() => new Power(double.NegativeInfinity, PowerUnit.Watt));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Power(double.NaN, PowerUnit.Watt));
        }

        [Fact]
        public void WattToPowerUnits()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.BoilerHorsepower, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(CentiwattsInOneWatt, watt.Centiwatts, CentiwattsTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.Decawatts, DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.Deciwatts, DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.ElectricalHorsepower, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(ExawattsInOneWatt, watt.Exawatts, ExawattsTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.Femtowatts, FemtowattsTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.Gigawatts, GigawattsTolerance);
            AssertEx.EqualTolerance(HectowattsInOneWatt, watt.Hectowatts, HectowattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.HydraulicHorsepower, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.Kilowatts, KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.MechanicalHorsepower, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.Megawatts, MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.MetricHorsepower, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.Microwatts, MicrowattsTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.Milliwatts, MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.Nanowatts, NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.Petawatts, PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.Picowatts, PicowattsTolerance);
            AssertEx.EqualTolerance(QutrawattsInOneWatt, watt.Qutrawatts, QutrawattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.Terawatts, TerawattsTolerance);
            AssertEx.EqualTolerance(VettawattsInOneWatt, watt.Vettawatts, VettawattsTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.Watts, WattsTolerance);
            AssertEx.EqualTolerance(YottawattsInOneWatt, watt.Yottawatts, YottawattsTolerance);
            AssertEx.EqualTolerance(ZettawattsInOneWatt, watt.Zettawatts, ZettawattsTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.BoilerHorsepower).BoilerHorsepower, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.BritishThermalUnitPerHour).BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Centiwatt).Centiwatts, CentiwattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Decawatt).Decawatts, DecawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Deciwatt).Deciwatts, DeciwattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.ElectricalHorsepower).ElectricalHorsepower, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Exawatt).Exawatts, ExawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Femtowatt).Femtowatts, FemtowattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Gigawatt).Gigawatts, GigawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Hectowatt).Hectowatts, HectowattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.HydraulicHorsepower).HydraulicHorsepower, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.KilobritishThermalUnitPerHour).KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Kilowatt).Kilowatts, KilowattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.MechanicalHorsepower).MechanicalHorsepower, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Megawatt).Megawatts, MegawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.MetricHorsepower).MetricHorsepower, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Microwatt).Microwatts, MicrowattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Milliwatt).Milliwatts, MilliwattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Nanowatt).Nanowatts, NanowattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Petawatt).Petawatts, PetawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Picowatt).Picowatts, PicowattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Qutrawatt).Qutrawatts, QutrawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Terawatt).Terawatts, TerawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Vettawatt).Vettawatts, VettawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Watt).Watts, WattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Yottawatt).Yottawatts, YottawattsTolerance);
            AssertEx.EqualTolerance(1, Power.From(1, PowerUnit.Zettawatt).Zettawatts, ZettawattsTolerance);
        }

        [Fact]
        public void FromWatts_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Power.FromWatts(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Power.FromWatts(double.NegativeInfinity));
        }

        [Fact]
        public void FromWatts_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Power.FromWatts(double.NaN));
        }

        [Fact]
        public void As()
        {
            var watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.As(PowerUnit.BoilerHorsepower), BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.BritishThermalUnitPerHour), BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(CentiwattsInOneWatt, watt.As(PowerUnit.Centiwatt), CentiwattsTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.As(PowerUnit.Decawatt), DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.As(PowerUnit.Deciwatt), DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.As(PowerUnit.ElectricalHorsepower), ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(ExawattsInOneWatt, watt.As(PowerUnit.Exawatt), ExawattsTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.As(PowerUnit.Femtowatt), FemtowattsTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.As(PowerUnit.Gigawatt), GigawattsTolerance);
            AssertEx.EqualTolerance(HectowattsInOneWatt, watt.As(PowerUnit.Hectowatt), HectowattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.As(PowerUnit.HydraulicHorsepower), HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.KilobritishThermalUnitPerHour), KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.As(PowerUnit.Kilowatt), KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.As(PowerUnit.MechanicalHorsepower), MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.As(PowerUnit.Megawatt), MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.As(PowerUnit.MetricHorsepower), MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.As(PowerUnit.Microwatt), MicrowattsTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.As(PowerUnit.Milliwatt), MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.As(PowerUnit.Nanowatt), NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.As(PowerUnit.Petawatt), PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.As(PowerUnit.Picowatt), PicowattsTolerance);
            AssertEx.EqualTolerance(QutrawattsInOneWatt, watt.As(PowerUnit.Qutrawatt), QutrawattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.As(PowerUnit.Terawatt), TerawattsTolerance);
            AssertEx.EqualTolerance(VettawattsInOneWatt, watt.As(PowerUnit.Vettawatt), VettawattsTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.As(PowerUnit.Watt), WattsTolerance);
            AssertEx.EqualTolerance(YottawattsInOneWatt, watt.As(PowerUnit.Yottawatt), YottawattsTolerance);
            AssertEx.EqualTolerance(ZettawattsInOneWatt, watt.As(PowerUnit.Zettawatt), ZettawattsTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var watt = Power.FromWatts(1);

            var boilerhorsepowerQuantity = watt.ToUnit(PowerUnit.BoilerHorsepower);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, (double)boilerhorsepowerQuantity.Value, BoilerHorsepowerTolerance);
            Assert.Equal(PowerUnit.BoilerHorsepower, boilerhorsepowerQuantity.Unit);

            var britishthermalunitperhourQuantity = watt.ToUnit(PowerUnit.BritishThermalUnitPerHour);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, (double)britishthermalunitperhourQuantity.Value, BritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.BritishThermalUnitPerHour, britishthermalunitperhourQuantity.Unit);

            var centiwattQuantity = watt.ToUnit(PowerUnit.Centiwatt);
            AssertEx.EqualTolerance(CentiwattsInOneWatt, (double)centiwattQuantity.Value, CentiwattsTolerance);
            Assert.Equal(PowerUnit.Centiwatt, centiwattQuantity.Unit);

            var decawattQuantity = watt.ToUnit(PowerUnit.Decawatt);
            AssertEx.EqualTolerance(DecawattsInOneWatt, (double)decawattQuantity.Value, DecawattsTolerance);
            Assert.Equal(PowerUnit.Decawatt, decawattQuantity.Unit);

            var deciwattQuantity = watt.ToUnit(PowerUnit.Deciwatt);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, (double)deciwattQuantity.Value, DeciwattsTolerance);
            Assert.Equal(PowerUnit.Deciwatt, deciwattQuantity.Unit);

            var electricalhorsepowerQuantity = watt.ToUnit(PowerUnit.ElectricalHorsepower);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, (double)electricalhorsepowerQuantity.Value, ElectricalHorsepowerTolerance);
            Assert.Equal(PowerUnit.ElectricalHorsepower, electricalhorsepowerQuantity.Unit);

            var exawattQuantity = watt.ToUnit(PowerUnit.Exawatt);
            AssertEx.EqualTolerance(ExawattsInOneWatt, (double)exawattQuantity.Value, ExawattsTolerance);
            Assert.Equal(PowerUnit.Exawatt, exawattQuantity.Unit);

            var femtowattQuantity = watt.ToUnit(PowerUnit.Femtowatt);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, (double)femtowattQuantity.Value, FemtowattsTolerance);
            Assert.Equal(PowerUnit.Femtowatt, femtowattQuantity.Unit);

            var gigawattQuantity = watt.ToUnit(PowerUnit.Gigawatt);
            AssertEx.EqualTolerance(GigawattsInOneWatt, (double)gigawattQuantity.Value, GigawattsTolerance);
            Assert.Equal(PowerUnit.Gigawatt, gigawattQuantity.Unit);

            var hectowattQuantity = watt.ToUnit(PowerUnit.Hectowatt);
            AssertEx.EqualTolerance(HectowattsInOneWatt, (double)hectowattQuantity.Value, HectowattsTolerance);
            Assert.Equal(PowerUnit.Hectowatt, hectowattQuantity.Unit);

            var hydraulichorsepowerQuantity = watt.ToUnit(PowerUnit.HydraulicHorsepower);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, (double)hydraulichorsepowerQuantity.Value, HydraulicHorsepowerTolerance);
            Assert.Equal(PowerUnit.HydraulicHorsepower, hydraulichorsepowerQuantity.Unit);

            var kilobritishthermalunitperhourQuantity = watt.ToUnit(PowerUnit.KilobritishThermalUnitPerHour);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, (double)kilobritishthermalunitperhourQuantity.Value, KilobritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, kilobritishthermalunitperhourQuantity.Unit);

            var kilowattQuantity = watt.ToUnit(PowerUnit.Kilowatt);
            AssertEx.EqualTolerance(KilowattsInOneWatt, (double)kilowattQuantity.Value, KilowattsTolerance);
            Assert.Equal(PowerUnit.Kilowatt, kilowattQuantity.Unit);

            var mechanicalhorsepowerQuantity = watt.ToUnit(PowerUnit.MechanicalHorsepower);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, (double)mechanicalhorsepowerQuantity.Value, MechanicalHorsepowerTolerance);
            Assert.Equal(PowerUnit.MechanicalHorsepower, mechanicalhorsepowerQuantity.Unit);

            var megawattQuantity = watt.ToUnit(PowerUnit.Megawatt);
            AssertEx.EqualTolerance(MegawattsInOneWatt, (double)megawattQuantity.Value, MegawattsTolerance);
            Assert.Equal(PowerUnit.Megawatt, megawattQuantity.Unit);

            var metrichorsepowerQuantity = watt.ToUnit(PowerUnit.MetricHorsepower);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, (double)metrichorsepowerQuantity.Value, MetricHorsepowerTolerance);
            Assert.Equal(PowerUnit.MetricHorsepower, metrichorsepowerQuantity.Unit);

            var microwattQuantity = watt.ToUnit(PowerUnit.Microwatt);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, (double)microwattQuantity.Value, MicrowattsTolerance);
            Assert.Equal(PowerUnit.Microwatt, microwattQuantity.Unit);

            var milliwattQuantity = watt.ToUnit(PowerUnit.Milliwatt);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, (double)milliwattQuantity.Value, MilliwattsTolerance);
            Assert.Equal(PowerUnit.Milliwatt, milliwattQuantity.Unit);

            var nanowattQuantity = watt.ToUnit(PowerUnit.Nanowatt);
            AssertEx.EqualTolerance(NanowattsInOneWatt, (double)nanowattQuantity.Value, NanowattsTolerance);
            Assert.Equal(PowerUnit.Nanowatt, nanowattQuantity.Unit);

            var petawattQuantity = watt.ToUnit(PowerUnit.Petawatt);
            AssertEx.EqualTolerance(PetawattsInOneWatt, (double)petawattQuantity.Value, PetawattsTolerance);
            Assert.Equal(PowerUnit.Petawatt, petawattQuantity.Unit);

            var picowattQuantity = watt.ToUnit(PowerUnit.Picowatt);
            AssertEx.EqualTolerance(PicowattsInOneWatt, (double)picowattQuantity.Value, PicowattsTolerance);
            Assert.Equal(PowerUnit.Picowatt, picowattQuantity.Unit);

            var qutrawattQuantity = watt.ToUnit(PowerUnit.Qutrawatt);
            AssertEx.EqualTolerance(QutrawattsInOneWatt, (double)qutrawattQuantity.Value, QutrawattsTolerance);
            Assert.Equal(PowerUnit.Qutrawatt, qutrawattQuantity.Unit);

            var terawattQuantity = watt.ToUnit(PowerUnit.Terawatt);
            AssertEx.EqualTolerance(TerawattsInOneWatt, (double)terawattQuantity.Value, TerawattsTolerance);
            Assert.Equal(PowerUnit.Terawatt, terawattQuantity.Unit);

            var vettawattQuantity = watt.ToUnit(PowerUnit.Vettawatt);
            AssertEx.EqualTolerance(VettawattsInOneWatt, (double)vettawattQuantity.Value, VettawattsTolerance);
            Assert.Equal(PowerUnit.Vettawatt, vettawattQuantity.Unit);

            var wattQuantity = watt.ToUnit(PowerUnit.Watt);
            AssertEx.EqualTolerance(WattsInOneWatt, (double)wattQuantity.Value, WattsTolerance);
            Assert.Equal(PowerUnit.Watt, wattQuantity.Unit);

            var yottawattQuantity = watt.ToUnit(PowerUnit.Yottawatt);
            AssertEx.EqualTolerance(YottawattsInOneWatt, (double)yottawattQuantity.Value, YottawattsTolerance);
            Assert.Equal(PowerUnit.Yottawatt, yottawattQuantity.Unit);

            var zettawattQuantity = watt.ToUnit(PowerUnit.Zettawatt);
            AssertEx.EqualTolerance(ZettawattsInOneWatt, (double)zettawattQuantity.Value, ZettawattsTolerance);
            Assert.Equal(PowerUnit.Zettawatt, zettawattQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(1, Power.FromBoilerHorsepower(watt.BoilerHorsepower).Watts, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromBritishThermalUnitsPerHour(watt.BritishThermalUnitsPerHour).Watts, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromCentiwatts(watt.Centiwatts).Watts, CentiwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromDecawatts(watt.Decawatts).Watts, DecawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromDeciwatts(watt.Deciwatts).Watts, DeciwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromElectricalHorsepower(watt.ElectricalHorsepower).Watts, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromExawatts(watt.Exawatts).Watts, ExawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromFemtowatts(watt.Femtowatts).Watts, FemtowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromGigawatts(watt.Gigawatts).Watts, GigawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromHectowatts(watt.Hectowatts).Watts, HectowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromHydraulicHorsepower(watt.HydraulicHorsepower).Watts, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilobritishThermalUnitsPerHour(watt.KilobritishThermalUnitsPerHour).Watts, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilowatts(watt.Kilowatts).Watts, KilowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMechanicalHorsepower(watt.MechanicalHorsepower).Watts, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegawatts(watt.Megawatts).Watts, MegawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMetricHorsepower(watt.MetricHorsepower).Watts, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromMicrowatts(watt.Microwatts).Watts, MicrowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMilliwatts(watt.Milliwatts).Watts, MilliwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromNanowatts(watt.Nanowatts).Watts, NanowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromPetawatts(watt.Petawatts).Watts, PetawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromPicowatts(watt.Picowatts).Watts, PicowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromQutrawatts(watt.Qutrawatts).Watts, QutrawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromTerawatts(watt.Terawatts).Watts, TerawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromVettawatts(watt.Vettawatts).Watts, VettawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromWatts(watt.Watts).Watts, WattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromYottawatts(watt.Yottawatts).Watts, YottawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromZettawatts(watt.Zettawatts).Watts, ZettawattsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Power v = Power.FromWatts(1);
            AssertEx.EqualTolerance(-1, -v.Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (Power.FromWatts(3)-v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Watts, WattsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (Power.FromWatts(10)/5).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, Power.FromWatts(10)/Power.FromWatts(5), WattsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Power oneWatt = Power.FromWatts(1);
            Power twoWatts = Power.FromWatts(2);

            Assert.True(oneWatt < twoWatts);
            Assert.True(oneWatt <= twoWatts);
            Assert.True(twoWatts > oneWatt);
            Assert.True(twoWatts >= oneWatt);

            Assert.False(oneWatt > twoWatts);
            Assert.False(oneWatt >= twoWatts);
            Assert.False(twoWatts < oneWatt);
            Assert.False(twoWatts <= oneWatt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Power watt = Power.FromWatts(1);
            Assert.Equal(0, watt.CompareTo(watt));
            Assert.True(watt.CompareTo(Power.Zero) > 0);
            Assert.True(Power.Zero.CompareTo(watt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentException>(() => watt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentNullException>(() => watt.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Power.FromWatts(1);
            var b = Power.FromWatts(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Power.FromWatts(1);
            var b = Power.FromWatts(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Power.FromWatts(1);
            Assert.True(v.Equals(Power.FromWatts(1), WattsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Power.Zero, WattsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(PowerUnit.Undefined, Power.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PowerUnit)).Cast<PowerUnit>();
            foreach(var unit in units)
            {
                if(unit == PowerUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Power.BaseDimensions is null);
        }
    }
}
