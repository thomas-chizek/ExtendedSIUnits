//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificVolume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificVolumeTestsBase
    {
        protected abstract double CenticubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double CubicFeetPerPoundInOneCubicMeterPerKilogram { get; }
        protected abstract double CubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double DecacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double DecicubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double ExacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double FemtocubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double GigacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double HectocubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double KilocubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double MegacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double MicrocubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double MillicubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double NanocubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double PetacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double PicocubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double QutracubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double TeracubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double VettacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double YottacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }
        protected abstract double ZettacubicMetersPerKilogramInOneCubicMeterPerKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CenticubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetPerPoundTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecicubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double ExacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double FemtocubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MicrocubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MillicubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double NanocubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PetacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PicocubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double QutracubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double TeracubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double VettacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double YottacubicMetersPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double ZettacubicMetersPerKilogramTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificVolume((double)0.0, SpecificVolumeUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificVolume(double.PositiveInfinity, SpecificVolumeUnit.CubicMeterPerKilogram));
            Assert.Throws<ArgumentException>(() => new SpecificVolume(double.NegativeInfinity, SpecificVolumeUnit.CubicMeterPerKilogram));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificVolume(double.NaN, SpecificVolumeUnit.CubicMeterPerKilogram));
        }

        [Fact]
        public void CubicMeterPerKilogramToSpecificVolumeUnits()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            AssertEx.EqualTolerance(CenticubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.CenticubicMetersPerKilogram, CenticubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(CubicFeetPerPoundInOneCubicMeterPerKilogram, cubicmeterperkilogram.CubicFeetPerPound, CubicFeetPerPoundTolerance);
            AssertEx.EqualTolerance(CubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(DecacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.DecacubicMetersPerKilogram, DecacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(DecicubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.DecicubicMetersPerKilogram, DecicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(ExacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.ExacubicMetersPerKilogram, ExacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(FemtocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.FemtocubicMetersPerKilogram, FemtocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(GigacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.GigacubicMetersPerKilogram, GigacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(HectocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.HectocubicMetersPerKilogram, HectocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.KilocubicMetersPerKilogram, KilocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(MegacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.MegacubicMetersPerKilogram, MegacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.MicrocubicMetersPerKilogram, MicrocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(MillicubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.MillicubicMetersPerKilogram, MillicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(NanocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.NanocubicMetersPerKilogram, NanocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(PetacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.PetacubicMetersPerKilogram, PetacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(PicocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.PicocubicMetersPerKilogram, PicocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(QutracubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.QutracubicMetersPerKilogram, QutracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(TeracubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.TeracubicMetersPerKilogram, TeracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(VettacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.VettacubicMetersPerKilogram, VettacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(YottacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.YottacubicMetersPerKilogram, YottacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(ZettacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.ZettacubicMetersPerKilogram, ZettacubicMetersPerKilogramTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.CenticubicMeterPerKilogram).CenticubicMetersPerKilogram, CenticubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.CubicFootPerPound).CubicFeetPerPound, CubicFeetPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.CubicMeterPerKilogram).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.DecacubicMeterPerKilogram).DecacubicMetersPerKilogram, DecacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.DecicubicMeterPerKilogram).DecicubicMetersPerKilogram, DecicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.ExacubicMeterPerKilogram).ExacubicMetersPerKilogram, ExacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.FemtocubicMeterPerKilogram).FemtocubicMetersPerKilogram, FemtocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.GigacubicMeterPerKilogram).GigacubicMetersPerKilogram, GigacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.HectocubicMeterPerKilogram).HectocubicMetersPerKilogram, HectocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.KilocubicMeterPerKilogram).KilocubicMetersPerKilogram, KilocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.MegacubicMeterPerKilogram).MegacubicMetersPerKilogram, MegacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.MicrocubicMeterPerKilogram).MicrocubicMetersPerKilogram, MicrocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.MillicubicMeterPerKilogram).MillicubicMetersPerKilogram, MillicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.NanocubicMeterPerKilogram).NanocubicMetersPerKilogram, NanocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.PetacubicMeterPerKilogram).PetacubicMetersPerKilogram, PetacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.PicocubicMeterPerKilogram).PicocubicMetersPerKilogram, PicocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.QutracubicMeterPerKilogram).QutracubicMetersPerKilogram, QutracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.TeracubicMeterPerKilogram).TeracubicMetersPerKilogram, TeracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.VettacubicMeterPerKilogram).VettacubicMetersPerKilogram, VettacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.YottacubicMeterPerKilogram).YottacubicMetersPerKilogram, YottacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.From(1, SpecificVolumeUnit.ZettacubicMeterPerKilogram).ZettacubicMetersPerKilogram, ZettacubicMetersPerKilogramTolerance);
        }

        [Fact]
        public void FromCubicMetersPerKilogram_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificVolume.FromCubicMetersPerKilogram(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => SpecificVolume.FromCubicMetersPerKilogram(double.NegativeInfinity));
        }

        [Fact]
        public void FromCubicMetersPerKilogram_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificVolume.FromCubicMetersPerKilogram(double.NaN));
        }

        [Fact]
        public void As()
        {
            var cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            AssertEx.EqualTolerance(CenticubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.CenticubicMeterPerKilogram), CenticubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(CubicFeetPerPoundInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.CubicFootPerPound), CubicFeetPerPoundTolerance);
            AssertEx.EqualTolerance(CubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.CubicMeterPerKilogram), CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(DecacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.DecacubicMeterPerKilogram), DecacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(DecicubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.DecicubicMeterPerKilogram), DecicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(ExacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.ExacubicMeterPerKilogram), ExacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(FemtocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.FemtocubicMeterPerKilogram), FemtocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(GigacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.GigacubicMeterPerKilogram), GigacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(HectocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.HectocubicMeterPerKilogram), HectocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.KilocubicMeterPerKilogram), KilocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(MegacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.MegacubicMeterPerKilogram), MegacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.MicrocubicMeterPerKilogram), MicrocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(MillicubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.MillicubicMeterPerKilogram), MillicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(NanocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.NanocubicMeterPerKilogram), NanocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(PetacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.PetacubicMeterPerKilogram), PetacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(PicocubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.PicocubicMeterPerKilogram), PicocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(QutracubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.QutracubicMeterPerKilogram), QutracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(TeracubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.TeracubicMeterPerKilogram), TeracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(VettacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.VettacubicMeterPerKilogram), VettacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(YottacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.YottacubicMeterPerKilogram), YottacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(ZettacubicMetersPerKilogramInOneCubicMeterPerKilogram, cubicmeterperkilogram.As(SpecificVolumeUnit.ZettacubicMeterPerKilogram), ZettacubicMetersPerKilogramTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);

            var centicubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.CenticubicMeterPerKilogram);
            AssertEx.EqualTolerance(CenticubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)centicubicmeterperkilogramQuantity.Value, CenticubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.CenticubicMeterPerKilogram, centicubicmeterperkilogramQuantity.Unit);

            var cubicfootperpoundQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.CubicFootPerPound);
            AssertEx.EqualTolerance(CubicFeetPerPoundInOneCubicMeterPerKilogram, (double)cubicfootperpoundQuantity.Value, CubicFeetPerPoundTolerance);
            Assert.Equal(SpecificVolumeUnit.CubicFootPerPound, cubicfootperpoundQuantity.Unit);

            var cubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.CubicMeterPerKilogram);
            AssertEx.EqualTolerance(CubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)cubicmeterperkilogramQuantity.Value, CubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.CubicMeterPerKilogram, cubicmeterperkilogramQuantity.Unit);

            var decacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.DecacubicMeterPerKilogram);
            AssertEx.EqualTolerance(DecacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)decacubicmeterperkilogramQuantity.Value, DecacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.DecacubicMeterPerKilogram, decacubicmeterperkilogramQuantity.Unit);

            var decicubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.DecicubicMeterPerKilogram);
            AssertEx.EqualTolerance(DecicubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)decicubicmeterperkilogramQuantity.Value, DecicubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.DecicubicMeterPerKilogram, decicubicmeterperkilogramQuantity.Unit);

            var exacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.ExacubicMeterPerKilogram);
            AssertEx.EqualTolerance(ExacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)exacubicmeterperkilogramQuantity.Value, ExacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.ExacubicMeterPerKilogram, exacubicmeterperkilogramQuantity.Unit);

            var femtocubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.FemtocubicMeterPerKilogram);
            AssertEx.EqualTolerance(FemtocubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)femtocubicmeterperkilogramQuantity.Value, FemtocubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.FemtocubicMeterPerKilogram, femtocubicmeterperkilogramQuantity.Unit);

            var gigacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.GigacubicMeterPerKilogram);
            AssertEx.EqualTolerance(GigacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)gigacubicmeterperkilogramQuantity.Value, GigacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.GigacubicMeterPerKilogram, gigacubicmeterperkilogramQuantity.Unit);

            var hectocubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.HectocubicMeterPerKilogram);
            AssertEx.EqualTolerance(HectocubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)hectocubicmeterperkilogramQuantity.Value, HectocubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.HectocubicMeterPerKilogram, hectocubicmeterperkilogramQuantity.Unit);

            var kilocubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.KilocubicMeterPerKilogram);
            AssertEx.EqualTolerance(KilocubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)kilocubicmeterperkilogramQuantity.Value, KilocubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.KilocubicMeterPerKilogram, kilocubicmeterperkilogramQuantity.Unit);

            var megacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.MegacubicMeterPerKilogram);
            AssertEx.EqualTolerance(MegacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)megacubicmeterperkilogramQuantity.Value, MegacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.MegacubicMeterPerKilogram, megacubicmeterperkilogramQuantity.Unit);

            var microcubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.MicrocubicMeterPerKilogram);
            AssertEx.EqualTolerance(MicrocubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)microcubicmeterperkilogramQuantity.Value, MicrocubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.MicrocubicMeterPerKilogram, microcubicmeterperkilogramQuantity.Unit);

            var millicubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.MillicubicMeterPerKilogram);
            AssertEx.EqualTolerance(MillicubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)millicubicmeterperkilogramQuantity.Value, MillicubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.MillicubicMeterPerKilogram, millicubicmeterperkilogramQuantity.Unit);

            var nanocubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.NanocubicMeterPerKilogram);
            AssertEx.EqualTolerance(NanocubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)nanocubicmeterperkilogramQuantity.Value, NanocubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.NanocubicMeterPerKilogram, nanocubicmeterperkilogramQuantity.Unit);

            var petacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.PetacubicMeterPerKilogram);
            AssertEx.EqualTolerance(PetacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)petacubicmeterperkilogramQuantity.Value, PetacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.PetacubicMeterPerKilogram, petacubicmeterperkilogramQuantity.Unit);

            var picocubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.PicocubicMeterPerKilogram);
            AssertEx.EqualTolerance(PicocubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)picocubicmeterperkilogramQuantity.Value, PicocubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.PicocubicMeterPerKilogram, picocubicmeterperkilogramQuantity.Unit);

            var qutracubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.QutracubicMeterPerKilogram);
            AssertEx.EqualTolerance(QutracubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)qutracubicmeterperkilogramQuantity.Value, QutracubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.QutracubicMeterPerKilogram, qutracubicmeterperkilogramQuantity.Unit);

            var teracubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.TeracubicMeterPerKilogram);
            AssertEx.EqualTolerance(TeracubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)teracubicmeterperkilogramQuantity.Value, TeracubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.TeracubicMeterPerKilogram, teracubicmeterperkilogramQuantity.Unit);

            var vettacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.VettacubicMeterPerKilogram);
            AssertEx.EqualTolerance(VettacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)vettacubicmeterperkilogramQuantity.Value, VettacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.VettacubicMeterPerKilogram, vettacubicmeterperkilogramQuantity.Unit);

            var yottacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.YottacubicMeterPerKilogram);
            AssertEx.EqualTolerance(YottacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)yottacubicmeterperkilogramQuantity.Value, YottacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.YottacubicMeterPerKilogram, yottacubicmeterperkilogramQuantity.Unit);

            var zettacubicmeterperkilogramQuantity = cubicmeterperkilogram.ToUnit(SpecificVolumeUnit.ZettacubicMeterPerKilogram);
            AssertEx.EqualTolerance(ZettacubicMetersPerKilogramInOneCubicMeterPerKilogram, (double)zettacubicmeterperkilogramQuantity.Value, ZettacubicMetersPerKilogramTolerance);
            Assert.Equal(SpecificVolumeUnit.ZettacubicMeterPerKilogram, zettacubicmeterperkilogramQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            AssertEx.EqualTolerance(1, SpecificVolume.FromCenticubicMetersPerKilogram(cubicmeterperkilogram.CenticubicMetersPerKilogram).CubicMetersPerKilogram, CenticubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromCubicFeetPerPound(cubicmeterperkilogram.CubicFeetPerPound).CubicMetersPerKilogram, CubicFeetPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromCubicMetersPerKilogram(cubicmeterperkilogram.CubicMetersPerKilogram).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromDecacubicMetersPerKilogram(cubicmeterperkilogram.DecacubicMetersPerKilogram).CubicMetersPerKilogram, DecacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromDecicubicMetersPerKilogram(cubicmeterperkilogram.DecicubicMetersPerKilogram).CubicMetersPerKilogram, DecicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromExacubicMetersPerKilogram(cubicmeterperkilogram.ExacubicMetersPerKilogram).CubicMetersPerKilogram, ExacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromFemtocubicMetersPerKilogram(cubicmeterperkilogram.FemtocubicMetersPerKilogram).CubicMetersPerKilogram, FemtocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromGigacubicMetersPerKilogram(cubicmeterperkilogram.GigacubicMetersPerKilogram).CubicMetersPerKilogram, GigacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromHectocubicMetersPerKilogram(cubicmeterperkilogram.HectocubicMetersPerKilogram).CubicMetersPerKilogram, HectocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromKilocubicMetersPerKilogram(cubicmeterperkilogram.KilocubicMetersPerKilogram).CubicMetersPerKilogram, KilocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromMegacubicMetersPerKilogram(cubicmeterperkilogram.MegacubicMetersPerKilogram).CubicMetersPerKilogram, MegacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromMicrocubicMetersPerKilogram(cubicmeterperkilogram.MicrocubicMetersPerKilogram).CubicMetersPerKilogram, MicrocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromMillicubicMetersPerKilogram(cubicmeterperkilogram.MillicubicMetersPerKilogram).CubicMetersPerKilogram, MillicubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromNanocubicMetersPerKilogram(cubicmeterperkilogram.NanocubicMetersPerKilogram).CubicMetersPerKilogram, NanocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromPetacubicMetersPerKilogram(cubicmeterperkilogram.PetacubicMetersPerKilogram).CubicMetersPerKilogram, PetacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromPicocubicMetersPerKilogram(cubicmeterperkilogram.PicocubicMetersPerKilogram).CubicMetersPerKilogram, PicocubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromQutracubicMetersPerKilogram(cubicmeterperkilogram.QutracubicMetersPerKilogram).CubicMetersPerKilogram, QutracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromTeracubicMetersPerKilogram(cubicmeterperkilogram.TeracubicMetersPerKilogram).CubicMetersPerKilogram, TeracubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromVettacubicMetersPerKilogram(cubicmeterperkilogram.VettacubicMetersPerKilogram).CubicMetersPerKilogram, VettacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromYottacubicMetersPerKilogram(cubicmeterperkilogram.YottacubicMetersPerKilogram).CubicMetersPerKilogram, YottacubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificVolume.FromZettacubicMetersPerKilogram(cubicmeterperkilogram.ZettacubicMetersPerKilogram).CubicMetersPerKilogram, ZettacubicMetersPerKilogramTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificVolume v = SpecificVolume.FromCubicMetersPerKilogram(1);
            AssertEx.EqualTolerance(-1, -v.CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificVolume.FromCubicMetersPerKilogram(3)-v).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificVolume.FromCubicMetersPerKilogram(10)/5).CubicMetersPerKilogram, CubicMetersPerKilogramTolerance);
            AssertEx.EqualTolerance(2, SpecificVolume.FromCubicMetersPerKilogram(10)/SpecificVolume.FromCubicMetersPerKilogram(5), CubicMetersPerKilogramTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificVolume oneCubicMeterPerKilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            SpecificVolume twoCubicMetersPerKilogram = SpecificVolume.FromCubicMetersPerKilogram(2);

            Assert.True(oneCubicMeterPerKilogram < twoCubicMetersPerKilogram);
            Assert.True(oneCubicMeterPerKilogram <= twoCubicMetersPerKilogram);
            Assert.True(twoCubicMetersPerKilogram > oneCubicMeterPerKilogram);
            Assert.True(twoCubicMetersPerKilogram >= oneCubicMeterPerKilogram);

            Assert.False(oneCubicMeterPerKilogram > twoCubicMetersPerKilogram);
            Assert.False(oneCubicMeterPerKilogram >= twoCubicMetersPerKilogram);
            Assert.False(twoCubicMetersPerKilogram < oneCubicMeterPerKilogram);
            Assert.False(twoCubicMetersPerKilogram <= oneCubicMeterPerKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            Assert.Equal(0, cubicmeterperkilogram.CompareTo(cubicmeterperkilogram));
            Assert.True(cubicmeterperkilogram.CompareTo(SpecificVolume.Zero) > 0);
            Assert.True(SpecificVolume.Zero.CompareTo(cubicmeterperkilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            Assert.Throws<ArgumentException>(() => cubicmeterperkilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeterperkilogram.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = SpecificVolume.FromCubicMetersPerKilogram(1);
            var b = SpecificVolume.FromCubicMetersPerKilogram(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = SpecificVolume.FromCubicMetersPerKilogram(1);
            var b = SpecificVolume.FromCubicMetersPerKilogram(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = SpecificVolume.FromCubicMetersPerKilogram(1);
            Assert.True(v.Equals(SpecificVolume.FromCubicMetersPerKilogram(1), CubicMetersPerKilogramTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(SpecificVolume.Zero, CubicMetersPerKilogramTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            Assert.False(cubicmeterperkilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificVolume cubicmeterperkilogram = SpecificVolume.FromCubicMetersPerKilogram(1);
            Assert.False(cubicmeterperkilogram.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpecificVolumeUnit.Undefined, SpecificVolume.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpecificVolumeUnit)).Cast<SpecificVolumeUnit>();
            foreach(var unit in units)
            {
                if(unit == SpecificVolumeUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificVolume.BaseDimensions is null);
        }
    }
}
