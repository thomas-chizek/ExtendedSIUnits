//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ApparentEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ApparentEnergyTestsBase
    {
        protected abstract double KilovoltampereHoursInOneVoltampereHour { get; }
        protected abstract double MegavoltampereHoursInOneVoltampereHour { get; }
        protected abstract double VoltampereHoursInOneVoltampereHour { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilovoltampereHoursTolerance { get { return 1e-5; } }
        protected virtual double MegavoltampereHoursTolerance { get { return 1e-5; } }
        protected virtual double VoltampereHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ApparentEnergy((double)0.0, ApparentEnergyUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ApparentEnergy(double.PositiveInfinity, ApparentEnergyUnit.VoltampereHour));
            Assert.Throws<ArgumentException>(() => new ApparentEnergy(double.NegativeInfinity, ApparentEnergyUnit.VoltampereHour));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ApparentEnergy(double.NaN, ApparentEnergyUnit.VoltampereHour));
        }

        [Fact]
        public void VoltampereHourToApparentEnergyUnits()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            AssertEx.EqualTolerance(KilovoltampereHoursInOneVoltampereHour, voltamperehour.KilovoltampereHours, KilovoltampereHoursTolerance);
            AssertEx.EqualTolerance(MegavoltampereHoursInOneVoltampereHour, voltamperehour.MegavoltampereHours, MegavoltampereHoursTolerance);
            AssertEx.EqualTolerance(VoltampereHoursInOneVoltampereHour, voltamperehour.VoltampereHours, VoltampereHoursTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ApparentEnergy.From(1, ApparentEnergyUnit.KilovoltampereHour).KilovoltampereHours, KilovoltampereHoursTolerance);
            AssertEx.EqualTolerance(1, ApparentEnergy.From(1, ApparentEnergyUnit.MegavoltampereHour).MegavoltampereHours, MegavoltampereHoursTolerance);
            AssertEx.EqualTolerance(1, ApparentEnergy.From(1, ApparentEnergyUnit.VoltampereHour).VoltampereHours, VoltampereHoursTolerance);
        }

        [Fact]
        public void FromVoltampereHours_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ApparentEnergy.FromVoltampereHours(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ApparentEnergy.FromVoltampereHours(double.NegativeInfinity));
        }

        [Fact]
        public void FromVoltampereHours_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ApparentEnergy.FromVoltampereHours(double.NaN));
        }

        [Fact]
        public void As()
        {
            var voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            AssertEx.EqualTolerance(KilovoltampereHoursInOneVoltampereHour, voltamperehour.As(ApparentEnergyUnit.KilovoltampereHour), KilovoltampereHoursTolerance);
            AssertEx.EqualTolerance(MegavoltampereHoursInOneVoltampereHour, voltamperehour.As(ApparentEnergyUnit.MegavoltampereHour), MegavoltampereHoursTolerance);
            AssertEx.EqualTolerance(VoltampereHoursInOneVoltampereHour, voltamperehour.As(ApparentEnergyUnit.VoltampereHour), VoltampereHoursTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var voltamperehour = ApparentEnergy.FromVoltampereHours(1);

            var kilovoltamperehourQuantity = voltamperehour.ToUnit(ApparentEnergyUnit.KilovoltampereHour);
            AssertEx.EqualTolerance(KilovoltampereHoursInOneVoltampereHour, (double)kilovoltamperehourQuantity.Value, KilovoltampereHoursTolerance);
            Assert.Equal(ApparentEnergyUnit.KilovoltampereHour, kilovoltamperehourQuantity.Unit);

            var megavoltamperehourQuantity = voltamperehour.ToUnit(ApparentEnergyUnit.MegavoltampereHour);
            AssertEx.EqualTolerance(MegavoltampereHoursInOneVoltampereHour, (double)megavoltamperehourQuantity.Value, MegavoltampereHoursTolerance);
            Assert.Equal(ApparentEnergyUnit.MegavoltampereHour, megavoltamperehourQuantity.Unit);

            var voltamperehourQuantity = voltamperehour.ToUnit(ApparentEnergyUnit.VoltampereHour);
            AssertEx.EqualTolerance(VoltampereHoursInOneVoltampereHour, (double)voltamperehourQuantity.Value, VoltampereHoursTolerance);
            Assert.Equal(ApparentEnergyUnit.VoltampereHour, voltamperehourQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            AssertEx.EqualTolerance(1, ApparentEnergy.FromKilovoltampereHours(voltamperehour.KilovoltampereHours).VoltampereHours, KilovoltampereHoursTolerance);
            AssertEx.EqualTolerance(1, ApparentEnergy.FromMegavoltampereHours(voltamperehour.MegavoltampereHours).VoltampereHours, MegavoltampereHoursTolerance);
            AssertEx.EqualTolerance(1, ApparentEnergy.FromVoltampereHours(voltamperehour.VoltampereHours).VoltampereHours, VoltampereHoursTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ApparentEnergy v = ApparentEnergy.FromVoltampereHours(1);
            AssertEx.EqualTolerance(-1, -v.VoltampereHours, VoltampereHoursTolerance);
            AssertEx.EqualTolerance(2, (ApparentEnergy.FromVoltampereHours(3)-v).VoltampereHours, VoltampereHoursTolerance);
            AssertEx.EqualTolerance(2, (v + v).VoltampereHours, VoltampereHoursTolerance);
            AssertEx.EqualTolerance(10, (v*10).VoltampereHours, VoltampereHoursTolerance);
            AssertEx.EqualTolerance(10, (10*v).VoltampereHours, VoltampereHoursTolerance);
            AssertEx.EqualTolerance(2, (ApparentEnergy.FromVoltampereHours(10)/5).VoltampereHours, VoltampereHoursTolerance);
            AssertEx.EqualTolerance(2, ApparentEnergy.FromVoltampereHours(10)/ApparentEnergy.FromVoltampereHours(5), VoltampereHoursTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ApparentEnergy oneVoltampereHour = ApparentEnergy.FromVoltampereHours(1);
            ApparentEnergy twoVoltampereHours = ApparentEnergy.FromVoltampereHours(2);

            Assert.True(oneVoltampereHour < twoVoltampereHours);
            Assert.True(oneVoltampereHour <= twoVoltampereHours);
            Assert.True(twoVoltampereHours > oneVoltampereHour);
            Assert.True(twoVoltampereHours >= oneVoltampereHour);

            Assert.False(oneVoltampereHour > twoVoltampereHours);
            Assert.False(oneVoltampereHour >= twoVoltampereHours);
            Assert.False(twoVoltampereHours < oneVoltampereHour);
            Assert.False(twoVoltampereHours <= oneVoltampereHour);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            Assert.Equal(0, voltamperehour.CompareTo(voltamperehour));
            Assert.True(voltamperehour.CompareTo(ApparentEnergy.Zero) > 0);
            Assert.True(ApparentEnergy.Zero.CompareTo(voltamperehour) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            Assert.Throws<ArgumentException>(() => voltamperehour.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            Assert.Throws<ArgumentNullException>(() => voltamperehour.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ApparentEnergy.FromVoltampereHours(1);
            var b = ApparentEnergy.FromVoltampereHours(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = ApparentEnergy.FromVoltampereHours(1);
            var b = ApparentEnergy.FromVoltampereHours(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = ApparentEnergy.FromVoltampereHours(1);
            Assert.True(v.Equals(ApparentEnergy.FromVoltampereHours(1), VoltampereHoursTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ApparentEnergy.Zero, VoltampereHoursTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            Assert.False(voltamperehour.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ApparentEnergy voltamperehour = ApparentEnergy.FromVoltampereHours(1);
            Assert.False(voltamperehour.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ApparentEnergyUnit.Undefined, ApparentEnergy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ApparentEnergyUnit)).Cast<ApparentEnergyUnit>();
            foreach(var unit in units)
            {
                if(unit == ApparentEnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ApparentEnergy.BaseDimensions is null);
        }
    }
}
