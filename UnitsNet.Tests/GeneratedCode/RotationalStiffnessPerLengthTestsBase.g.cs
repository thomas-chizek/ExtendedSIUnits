//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalStiffnessPerLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalStiffnessPerLengthTestsBase
    {
        protected abstract double AttonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double CentinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double DecanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double DecinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double ExanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double FemtonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double GiganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double HectonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double KilonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double MeganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double MicronewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double MillinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double NanonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double NewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double PetanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double PiconewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double QutranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double TeranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double VettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double YoctonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double YottanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double ZeptonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }
        protected abstract double ZettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AttonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double CentinewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double ExanewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double FemtonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GiganewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double HectonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PetanewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PiconewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double QutranewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double TeranewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double VettanewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double YoctonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double YottanewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double ZeptonewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
        protected virtual double ZettanewtonMetersPerRadianPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffnessPerLength((double)0.0, RotationalStiffnessPerLengthUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffnessPerLength(double.PositiveInfinity, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter));
            Assert.Throws<ArgumentException>(() => new RotationalStiffnessPerLength(double.NegativeInfinity, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffnessPerLength(double.NaN, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter));
        }

        [Fact]
        public void NewtonMeterPerRadianPerMeterToRotationalStiffnessPerLengthUnits()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            AssertEx.EqualTolerance(AttonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.AttonewtonMetersPerRadianPerMeter, AttonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(CentinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.CentinewtonMetersPerRadianPerMeter, CentinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(DecanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.DecanewtonMetersPerRadianPerMeter, DecanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(DecinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.DecinewtonMetersPerRadianPerMeter, DecinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(ExanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.ExanewtonMetersPerRadianPerMeter, ExanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(FemtonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.FemtonewtonMetersPerRadianPerMeter, FemtonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(GiganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.GiganewtonMetersPerRadianPerMeter, GiganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(HectonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.HectonewtonMetersPerRadianPerMeter, HectonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.KilonewtonMetersPerRadianPerMeter, KilonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.MeganewtonMetersPerRadianPerMeter, MeganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(MicronewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.MicronewtonMetersPerRadianPerMeter, MicronewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(MillinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.MillinewtonMetersPerRadianPerMeter, MillinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(NanonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.NanonewtonMetersPerRadianPerMeter, NanonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(PetanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.PetanewtonMetersPerRadianPerMeter, PetanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(PiconewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.PiconewtonMetersPerRadianPerMeter, PiconewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(QutranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.QutranewtonMetersPerRadianPerMeter, QutranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(TeranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.TeranewtonMetersPerRadianPerMeter, TeranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(VettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.VettanewtonMetersPerRadianPerMeter, VettanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(YoctonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.YoctonewtonMetersPerRadianPerMeter, YoctonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(YottanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.YottanewtonMetersPerRadianPerMeter, YottanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(ZeptonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.ZeptonewtonMetersPerRadianPerMeter, ZeptonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(ZettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.ZettanewtonMetersPerRadianPerMeter, ZettanewtonMetersPerRadianPerMeterTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.AttonewtonMeterPerRadianPerMeter).AttonewtonMetersPerRadianPerMeter, AttonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.CentinewtonMeterPerRadianPerMeter).CentinewtonMetersPerRadianPerMeter, CentinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.DecanewtonMeterPerRadianPerMeter).DecanewtonMetersPerRadianPerMeter, DecanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.DecinewtonMeterPerRadianPerMeter).DecinewtonMetersPerRadianPerMeter, DecinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.ExanewtonMeterPerRadianPerMeter).ExanewtonMetersPerRadianPerMeter, ExanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.FemtonewtonMeterPerRadianPerMeter).FemtonewtonMetersPerRadianPerMeter, FemtonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.GiganewtonMeterPerRadianPerMeter).GiganewtonMetersPerRadianPerMeter, GiganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.HectonewtonMeterPerRadianPerMeter).HectonewtonMetersPerRadianPerMeter, HectonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.KilonewtonMeterPerRadianPerMeter).KilonewtonMetersPerRadianPerMeter, KilonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.MeganewtonMeterPerRadianPerMeter).MeganewtonMetersPerRadianPerMeter, MeganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.MicronewtonMeterPerRadianPerMeter).MicronewtonMetersPerRadianPerMeter, MicronewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.MillinewtonMeterPerRadianPerMeter).MillinewtonMetersPerRadianPerMeter, MillinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.NanonewtonMeterPerRadianPerMeter).NanonewtonMetersPerRadianPerMeter, NanonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.PetanewtonMeterPerRadianPerMeter).PetanewtonMetersPerRadianPerMeter, PetanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.PiconewtonMeterPerRadianPerMeter).PiconewtonMetersPerRadianPerMeter, PiconewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.QutranewtonMeterPerRadianPerMeter).QutranewtonMetersPerRadianPerMeter, QutranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.TeranewtonMeterPerRadianPerMeter).TeranewtonMetersPerRadianPerMeter, TeranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.VettanewtonMeterPerRadianPerMeter).VettanewtonMetersPerRadianPerMeter, VettanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.YoctonewtonMeterPerRadianPerMeter).YoctonewtonMetersPerRadianPerMeter, YoctonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.YottanewtonMeterPerRadianPerMeter).YottanewtonMetersPerRadianPerMeter, YottanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.ZeptonewtonMeterPerRadianPerMeter).ZeptonewtonMetersPerRadianPerMeter, ZeptonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.From(1, RotationalStiffnessPerLengthUnit.ZettanewtonMeterPerRadianPerMeter).ZettanewtonMetersPerRadianPerMeter, ZettanewtonMetersPerRadianPerMeterTolerance);
        }

        [Fact]
        public void FromNewtonMetersPerRadianPerMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonMetersPerRadianPerMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            AssertEx.EqualTolerance(AttonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.AttonewtonMeterPerRadianPerMeter), AttonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(CentinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.CentinewtonMeterPerRadianPerMeter), CentinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(DecanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.DecanewtonMeterPerRadianPerMeter), DecanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(DecinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.DecinewtonMeterPerRadianPerMeter), DecinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(ExanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.ExanewtonMeterPerRadianPerMeter), ExanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(FemtonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.FemtonewtonMeterPerRadianPerMeter), FemtonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(GiganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.GiganewtonMeterPerRadianPerMeter), GiganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(HectonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.HectonewtonMeterPerRadianPerMeter), HectonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.KilonewtonMeterPerRadianPerMeter), KilonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.MeganewtonMeterPerRadianPerMeter), MeganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(MicronewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.MicronewtonMeterPerRadianPerMeter), MicronewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(MillinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.MillinewtonMeterPerRadianPerMeter), MillinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(NanonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.NanonewtonMeterPerRadianPerMeter), NanonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter), NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(PetanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.PetanewtonMeterPerRadianPerMeter), PetanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(PiconewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.PiconewtonMeterPerRadianPerMeter), PiconewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(QutranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.QutranewtonMeterPerRadianPerMeter), QutranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(TeranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.TeranewtonMeterPerRadianPerMeter), TeranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(VettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.VettanewtonMeterPerRadianPerMeter), VettanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(YoctonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.YoctonewtonMeterPerRadianPerMeter), YoctonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(YottanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.YottanewtonMeterPerRadianPerMeter), YottanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(ZeptonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.ZeptonewtonMeterPerRadianPerMeter), ZeptonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(ZettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, newtonmeterperradianpermeter.As(RotationalStiffnessPerLengthUnit.ZettanewtonMeterPerRadianPerMeter), ZettanewtonMetersPerRadianPerMeterTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);

            var attonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.AttonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(AttonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)attonewtonmeterperradianpermeterQuantity.Value, AttonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.AttonewtonMeterPerRadianPerMeter, attonewtonmeterperradianpermeterQuantity.Unit);

            var centinewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.CentinewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(CentinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)centinewtonmeterperradianpermeterQuantity.Value, CentinewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.CentinewtonMeterPerRadianPerMeter, centinewtonmeterperradianpermeterQuantity.Unit);

            var decanewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.DecanewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(DecanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)decanewtonmeterperradianpermeterQuantity.Value, DecanewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.DecanewtonMeterPerRadianPerMeter, decanewtonmeterperradianpermeterQuantity.Unit);

            var decinewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.DecinewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(DecinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)decinewtonmeterperradianpermeterQuantity.Value, DecinewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.DecinewtonMeterPerRadianPerMeter, decinewtonmeterperradianpermeterQuantity.Unit);

            var exanewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.ExanewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(ExanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)exanewtonmeterperradianpermeterQuantity.Value, ExanewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.ExanewtonMeterPerRadianPerMeter, exanewtonmeterperradianpermeterQuantity.Unit);

            var femtonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.FemtonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(FemtonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)femtonewtonmeterperradianpermeterQuantity.Value, FemtonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.FemtonewtonMeterPerRadianPerMeter, femtonewtonmeterperradianpermeterQuantity.Unit);

            var giganewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.GiganewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(GiganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)giganewtonmeterperradianpermeterQuantity.Value, GiganewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.GiganewtonMeterPerRadianPerMeter, giganewtonmeterperradianpermeterQuantity.Unit);

            var hectonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.HectonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(HectonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)hectonewtonmeterperradianpermeterQuantity.Value, HectonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.HectonewtonMeterPerRadianPerMeter, hectonewtonmeterperradianpermeterQuantity.Unit);

            var kilonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.KilonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)kilonewtonmeterperradianpermeterQuantity.Value, KilonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.KilonewtonMeterPerRadianPerMeter, kilonewtonmeterperradianpermeterQuantity.Unit);

            var meganewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.MeganewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)meganewtonmeterperradianpermeterQuantity.Value, MeganewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.MeganewtonMeterPerRadianPerMeter, meganewtonmeterperradianpermeterQuantity.Unit);

            var micronewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.MicronewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(MicronewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)micronewtonmeterperradianpermeterQuantity.Value, MicronewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.MicronewtonMeterPerRadianPerMeter, micronewtonmeterperradianpermeterQuantity.Unit);

            var millinewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.MillinewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(MillinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)millinewtonmeterperradianpermeterQuantity.Value, MillinewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.MillinewtonMeterPerRadianPerMeter, millinewtonmeterperradianpermeterQuantity.Unit);

            var nanonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.NanonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(NanonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)nanonewtonmeterperradianpermeterQuantity.Value, NanonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.NanonewtonMeterPerRadianPerMeter, nanonewtonmeterperradianpermeterQuantity.Unit);

            var newtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(NewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)newtonmeterperradianpermeterQuantity.Value, NewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.NewtonMeterPerRadianPerMeter, newtonmeterperradianpermeterQuantity.Unit);

            var petanewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.PetanewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(PetanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)petanewtonmeterperradianpermeterQuantity.Value, PetanewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.PetanewtonMeterPerRadianPerMeter, petanewtonmeterperradianpermeterQuantity.Unit);

            var piconewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.PiconewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(PiconewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)piconewtonmeterperradianpermeterQuantity.Value, PiconewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.PiconewtonMeterPerRadianPerMeter, piconewtonmeterperradianpermeterQuantity.Unit);

            var qutranewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.QutranewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(QutranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)qutranewtonmeterperradianpermeterQuantity.Value, QutranewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.QutranewtonMeterPerRadianPerMeter, qutranewtonmeterperradianpermeterQuantity.Unit);

            var teranewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.TeranewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(TeranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)teranewtonmeterperradianpermeterQuantity.Value, TeranewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.TeranewtonMeterPerRadianPerMeter, teranewtonmeterperradianpermeterQuantity.Unit);

            var vettanewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.VettanewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(VettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)vettanewtonmeterperradianpermeterQuantity.Value, VettanewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.VettanewtonMeterPerRadianPerMeter, vettanewtonmeterperradianpermeterQuantity.Unit);

            var yoctonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.YoctonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(YoctonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)yoctonewtonmeterperradianpermeterQuantity.Value, YoctonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.YoctonewtonMeterPerRadianPerMeter, yoctonewtonmeterperradianpermeterQuantity.Unit);

            var yottanewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.YottanewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(YottanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)yottanewtonmeterperradianpermeterQuantity.Value, YottanewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.YottanewtonMeterPerRadianPerMeter, yottanewtonmeterperradianpermeterQuantity.Unit);

            var zeptonewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.ZeptonewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(ZeptonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)zeptonewtonmeterperradianpermeterQuantity.Value, ZeptonewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.ZeptonewtonMeterPerRadianPerMeter, zeptonewtonmeterperradianpermeterQuantity.Unit);

            var zettanewtonmeterperradianpermeterQuantity = newtonmeterperradianpermeter.ToUnit(RotationalStiffnessPerLengthUnit.ZettanewtonMeterPerRadianPerMeter);
            AssertEx.EqualTolerance(ZettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter, (double)zettanewtonmeterperradianpermeterQuantity.Value, ZettanewtonMetersPerRadianPerMeterTolerance);
            Assert.Equal(RotationalStiffnessPerLengthUnit.ZettanewtonMeterPerRadianPerMeter, zettanewtonmeterperradianpermeterQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromAttonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.AttonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, AttonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromCentinewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.CentinewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, CentinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromDecanewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.DecanewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, DecanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromDecinewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.DecinewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, DecinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromExanewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.ExanewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, ExanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromFemtonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.FemtonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, FemtonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromGiganewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.GiganewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, GiganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromHectonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.HectonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, HectonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromKilonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.KilonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, KilonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromMeganewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.MeganewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, MeganewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromMicronewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.MicronewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, MicronewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromMillinewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.MillinewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, MillinewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromNanonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.NanonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, NanonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.NewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromPetanewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.PetanewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, PetanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromPiconewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.PiconewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, PiconewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromQutranewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.QutranewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, QutranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromTeranewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.TeranewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, TeranewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromVettanewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.VettanewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, VettanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromYoctonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.YoctonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, YoctonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromYottanewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.YottanewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, YottanewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromZeptonewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.ZeptonewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, ZeptonewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffnessPerLength.FromZettanewtonMetersPerRadianPerMeter(newtonmeterperradianpermeter.ZettanewtonMetersPerRadianPerMeter).NewtonMetersPerRadianPerMeter, ZettanewtonMetersPerRadianPerMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalStiffnessPerLength v = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(2, (RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(3)-v).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(2, (RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(10)/5).NewtonMetersPerRadianPerMeter, NewtonMetersPerRadianPerMeterTolerance);
            AssertEx.EqualTolerance(2, RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(10)/RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(5), NewtonMetersPerRadianPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalStiffnessPerLength oneNewtonMeterPerRadianPerMeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            RotationalStiffnessPerLength twoNewtonMetersPerRadianPerMeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(2);

            Assert.True(oneNewtonMeterPerRadianPerMeter < twoNewtonMetersPerRadianPerMeter);
            Assert.True(oneNewtonMeterPerRadianPerMeter <= twoNewtonMetersPerRadianPerMeter);
            Assert.True(twoNewtonMetersPerRadianPerMeter > oneNewtonMeterPerRadianPerMeter);
            Assert.True(twoNewtonMetersPerRadianPerMeter >= oneNewtonMeterPerRadianPerMeter);

            Assert.False(oneNewtonMeterPerRadianPerMeter > twoNewtonMetersPerRadianPerMeter);
            Assert.False(oneNewtonMeterPerRadianPerMeter >= twoNewtonMetersPerRadianPerMeter);
            Assert.False(twoNewtonMetersPerRadianPerMeter < oneNewtonMeterPerRadianPerMeter);
            Assert.False(twoNewtonMetersPerRadianPerMeter <= oneNewtonMeterPerRadianPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            Assert.Equal(0, newtonmeterperradianpermeter.CompareTo(newtonmeterperradianpermeter));
            Assert.True(newtonmeterperradianpermeter.CompareTo(RotationalStiffnessPerLength.Zero) > 0);
            Assert.True(RotationalStiffnessPerLength.Zero.CompareTo(newtonmeterperradianpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            Assert.Throws<ArgumentException>(() => newtonmeterperradianpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeterperradianpermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            var b = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            var b = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            Assert.True(v.Equals(RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1), NewtonMetersPerRadianPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RotationalStiffnessPerLength.Zero, NewtonMetersPerRadianPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            Assert.False(newtonmeterperradianpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalStiffnessPerLength newtonmeterperradianpermeter = RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(1);
            Assert.False(newtonmeterperradianpermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(RotationalStiffnessPerLengthUnit.Undefined, RotationalStiffnessPerLength.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RotationalStiffnessPerLengthUnit)).Cast<RotationalStiffnessPerLengthUnit>();
            foreach(var unit in units)
            {
                if(unit == RotationalStiffnessPerLengthUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RotationalStiffnessPerLength.BaseDimensions is null);
        }
    }
}
