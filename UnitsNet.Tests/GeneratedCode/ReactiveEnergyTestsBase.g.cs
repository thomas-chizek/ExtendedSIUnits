//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ReactiveEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ReactiveEnergyTestsBase
    {
        protected abstract double AttovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double CentivoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double DecavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double DecivoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double ExavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double FemtovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double GigavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double HectovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double KilovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double MegavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double MicrovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double MillivoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double NanovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double PetavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double PicovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double QutravoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double TeravoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double VettavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double VoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double YoctovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double YottavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double ZeptovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double ZettavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AttovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double CentivoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double DecavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double DecivoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double ExavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double FemtovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double GigavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double HectovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double KilovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double MegavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double MillivoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double NanovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double PetavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double PicovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double QutravoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double TeravoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double VettavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double VoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double YoctovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double YottavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double ZeptovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double ZettavoltampereReactiveHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ReactiveEnergy((double)0.0, ReactiveEnergyUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ReactiveEnergy(double.PositiveInfinity, ReactiveEnergyUnit.VoltampereReactiveHour));
            Assert.Throws<ArgumentException>(() => new ReactiveEnergy(double.NegativeInfinity, ReactiveEnergyUnit.VoltampereReactiveHour));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ReactiveEnergy(double.NaN, ReactiveEnergyUnit.VoltampereReactiveHour));
        }

        [Fact]
        public void VoltampereReactiveHourToReactiveEnergyUnits()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            AssertEx.EqualTolerance(AttovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.AttovoltampereReactiveHours, AttovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(CentivoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.CentivoltampereReactiveHours, CentivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(DecavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.DecavoltampereReactiveHours, DecavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(DecivoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.DecivoltampereReactiveHours, DecivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(ExavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.ExavoltampereReactiveHours, ExavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(FemtovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.FemtovoltampereReactiveHours, FemtovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(GigavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.GigavoltampereReactiveHours, GigavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(HectovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.HectovoltampereReactiveHours, HectovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(KilovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.KilovoltampereReactiveHours, KilovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MegavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.MegavoltampereReactiveHours, MegavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MicrovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.MicrovoltampereReactiveHours, MicrovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MillivoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.MillivoltampereReactiveHours, MillivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(NanovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.NanovoltampereReactiveHours, NanovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(PetavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.PetavoltampereReactiveHours, PetavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(PicovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.PicovoltampereReactiveHours, PicovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(QutravoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.QutravoltampereReactiveHours, QutravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(TeravoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.TeravoltampereReactiveHours, TeravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(VettavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.VettavoltampereReactiveHours, VettavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(VoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(YoctovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.YoctovoltampereReactiveHours, YoctovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(YottavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.YottavoltampereReactiveHours, YottavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(ZeptovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.ZeptovoltampereReactiveHours, ZeptovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(ZettavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.ZettavoltampereReactiveHours, ZettavoltampereReactiveHoursTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.AttovoltampereReactiveHour).AttovoltampereReactiveHours, AttovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.CentivoltampereReactiveHour).CentivoltampereReactiveHours, CentivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.DecavoltampereReactiveHour).DecavoltampereReactiveHours, DecavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.DecivoltampereReactiveHour).DecivoltampereReactiveHours, DecivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.ExavoltampereReactiveHour).ExavoltampereReactiveHours, ExavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.FemtovoltampereReactiveHour).FemtovoltampereReactiveHours, FemtovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.GigavoltampereReactiveHour).GigavoltampereReactiveHours, GigavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.HectovoltampereReactiveHour).HectovoltampereReactiveHours, HectovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.KilovoltampereReactiveHour).KilovoltampereReactiveHours, KilovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.MegavoltampereReactiveHour).MegavoltampereReactiveHours, MegavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.MicrovoltampereReactiveHour).MicrovoltampereReactiveHours, MicrovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.MillivoltampereReactiveHour).MillivoltampereReactiveHours, MillivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.NanovoltampereReactiveHour).NanovoltampereReactiveHours, NanovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.PetavoltampereReactiveHour).PetavoltampereReactiveHours, PetavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.PicovoltampereReactiveHour).PicovoltampereReactiveHours, PicovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.QutravoltampereReactiveHour).QutravoltampereReactiveHours, QutravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.TeravoltampereReactiveHour).TeravoltampereReactiveHours, TeravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.VettavoltampereReactiveHour).VettavoltampereReactiveHours, VettavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.VoltampereReactiveHour).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.YoctovoltampereReactiveHour).YoctovoltampereReactiveHours, YoctovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.YottavoltampereReactiveHour).YottavoltampereReactiveHours, YottavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.ZeptovoltampereReactiveHour).ZeptovoltampereReactiveHours, ZeptovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.From(1, ReactiveEnergyUnit.ZettavoltampereReactiveHour).ZettavoltampereReactiveHours, ZettavoltampereReactiveHoursTolerance);
        }

        [Fact]
        public void FromVoltampereReactiveHours_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ReactiveEnergy.FromVoltampereReactiveHours(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ReactiveEnergy.FromVoltampereReactiveHours(double.NegativeInfinity));
        }

        [Fact]
        public void FromVoltampereReactiveHours_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ReactiveEnergy.FromVoltampereReactiveHours(double.NaN));
        }

        [Fact]
        public void As()
        {
            var voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            AssertEx.EqualTolerance(AttovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.AttovoltampereReactiveHour), AttovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(CentivoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.CentivoltampereReactiveHour), CentivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(DecavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.DecavoltampereReactiveHour), DecavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(DecivoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.DecivoltampereReactiveHour), DecivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(ExavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.ExavoltampereReactiveHour), ExavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(FemtovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.FemtovoltampereReactiveHour), FemtovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(GigavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.GigavoltampereReactiveHour), GigavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(HectovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.HectovoltampereReactiveHour), HectovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(KilovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.KilovoltampereReactiveHour), KilovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MegavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.MegavoltampereReactiveHour), MegavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MicrovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.MicrovoltampereReactiveHour), MicrovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MillivoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.MillivoltampereReactiveHour), MillivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(NanovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.NanovoltampereReactiveHour), NanovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(PetavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.PetavoltampereReactiveHour), PetavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(PicovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.PicovoltampereReactiveHour), PicovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(QutravoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.QutravoltampereReactiveHour), QutravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(TeravoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.TeravoltampereReactiveHour), TeravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(VettavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.VettavoltampereReactiveHour), VettavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(VoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.VoltampereReactiveHour), VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(YoctovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.YoctovoltampereReactiveHour), YoctovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(YottavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.YottavoltampereReactiveHour), YottavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(ZeptovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.ZeptovoltampereReactiveHour), ZeptovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(ZettavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ReactiveEnergyUnit.ZettavoltampereReactiveHour), ZettavoltampereReactiveHoursTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);

            var attovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.AttovoltampereReactiveHour);
            AssertEx.EqualTolerance(AttovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)attovoltamperereactivehourQuantity.Value, AttovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.AttovoltampereReactiveHour, attovoltamperereactivehourQuantity.Unit);

            var centivoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.CentivoltampereReactiveHour);
            AssertEx.EqualTolerance(CentivoltampereReactiveHoursInOneVoltampereReactiveHour, (double)centivoltamperereactivehourQuantity.Value, CentivoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.CentivoltampereReactiveHour, centivoltamperereactivehourQuantity.Unit);

            var decavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.DecavoltampereReactiveHour);
            AssertEx.EqualTolerance(DecavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)decavoltamperereactivehourQuantity.Value, DecavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.DecavoltampereReactiveHour, decavoltamperereactivehourQuantity.Unit);

            var decivoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.DecivoltampereReactiveHour);
            AssertEx.EqualTolerance(DecivoltampereReactiveHoursInOneVoltampereReactiveHour, (double)decivoltamperereactivehourQuantity.Value, DecivoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.DecivoltampereReactiveHour, decivoltamperereactivehourQuantity.Unit);

            var exavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.ExavoltampereReactiveHour);
            AssertEx.EqualTolerance(ExavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)exavoltamperereactivehourQuantity.Value, ExavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.ExavoltampereReactiveHour, exavoltamperereactivehourQuantity.Unit);

            var femtovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.FemtovoltampereReactiveHour);
            AssertEx.EqualTolerance(FemtovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)femtovoltamperereactivehourQuantity.Value, FemtovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.FemtovoltampereReactiveHour, femtovoltamperereactivehourQuantity.Unit);

            var gigavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.GigavoltampereReactiveHour);
            AssertEx.EqualTolerance(GigavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)gigavoltamperereactivehourQuantity.Value, GigavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.GigavoltampereReactiveHour, gigavoltamperereactivehourQuantity.Unit);

            var hectovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.HectovoltampereReactiveHour);
            AssertEx.EqualTolerance(HectovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)hectovoltamperereactivehourQuantity.Value, HectovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.HectovoltampereReactiveHour, hectovoltamperereactivehourQuantity.Unit);

            var kilovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.KilovoltampereReactiveHour);
            AssertEx.EqualTolerance(KilovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)kilovoltamperereactivehourQuantity.Value, KilovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.KilovoltampereReactiveHour, kilovoltamperereactivehourQuantity.Unit);

            var megavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.MegavoltampereReactiveHour);
            AssertEx.EqualTolerance(MegavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)megavoltamperereactivehourQuantity.Value, MegavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.MegavoltampereReactiveHour, megavoltamperereactivehourQuantity.Unit);

            var microvoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.MicrovoltampereReactiveHour);
            AssertEx.EqualTolerance(MicrovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)microvoltamperereactivehourQuantity.Value, MicrovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.MicrovoltampereReactiveHour, microvoltamperereactivehourQuantity.Unit);

            var millivoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.MillivoltampereReactiveHour);
            AssertEx.EqualTolerance(MillivoltampereReactiveHoursInOneVoltampereReactiveHour, (double)millivoltamperereactivehourQuantity.Value, MillivoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.MillivoltampereReactiveHour, millivoltamperereactivehourQuantity.Unit);

            var nanovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.NanovoltampereReactiveHour);
            AssertEx.EqualTolerance(NanovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)nanovoltamperereactivehourQuantity.Value, NanovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.NanovoltampereReactiveHour, nanovoltamperereactivehourQuantity.Unit);

            var petavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.PetavoltampereReactiveHour);
            AssertEx.EqualTolerance(PetavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)petavoltamperereactivehourQuantity.Value, PetavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.PetavoltampereReactiveHour, petavoltamperereactivehourQuantity.Unit);

            var picovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.PicovoltampereReactiveHour);
            AssertEx.EqualTolerance(PicovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)picovoltamperereactivehourQuantity.Value, PicovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.PicovoltampereReactiveHour, picovoltamperereactivehourQuantity.Unit);

            var qutravoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.QutravoltampereReactiveHour);
            AssertEx.EqualTolerance(QutravoltampereReactiveHoursInOneVoltampereReactiveHour, (double)qutravoltamperereactivehourQuantity.Value, QutravoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.QutravoltampereReactiveHour, qutravoltamperereactivehourQuantity.Unit);

            var teravoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.TeravoltampereReactiveHour);
            AssertEx.EqualTolerance(TeravoltampereReactiveHoursInOneVoltampereReactiveHour, (double)teravoltamperereactivehourQuantity.Value, TeravoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.TeravoltampereReactiveHour, teravoltamperereactivehourQuantity.Unit);

            var vettavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.VettavoltampereReactiveHour);
            AssertEx.EqualTolerance(VettavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)vettavoltamperereactivehourQuantity.Value, VettavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.VettavoltampereReactiveHour, vettavoltamperereactivehourQuantity.Unit);

            var voltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.VoltampereReactiveHour);
            AssertEx.EqualTolerance(VoltampereReactiveHoursInOneVoltampereReactiveHour, (double)voltamperereactivehourQuantity.Value, VoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.VoltampereReactiveHour, voltamperereactivehourQuantity.Unit);

            var yoctovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.YoctovoltampereReactiveHour);
            AssertEx.EqualTolerance(YoctovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)yoctovoltamperereactivehourQuantity.Value, YoctovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.YoctovoltampereReactiveHour, yoctovoltamperereactivehourQuantity.Unit);

            var yottavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.YottavoltampereReactiveHour);
            AssertEx.EqualTolerance(YottavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)yottavoltamperereactivehourQuantity.Value, YottavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.YottavoltampereReactiveHour, yottavoltamperereactivehourQuantity.Unit);

            var zeptovoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.ZeptovoltampereReactiveHour);
            AssertEx.EqualTolerance(ZeptovoltampereReactiveHoursInOneVoltampereReactiveHour, (double)zeptovoltamperereactivehourQuantity.Value, ZeptovoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.ZeptovoltampereReactiveHour, zeptovoltamperereactivehourQuantity.Unit);

            var zettavoltamperereactivehourQuantity = voltamperereactivehour.ToUnit(ReactiveEnergyUnit.ZettavoltampereReactiveHour);
            AssertEx.EqualTolerance(ZettavoltampereReactiveHoursInOneVoltampereReactiveHour, (double)zettavoltamperereactivehourQuantity.Value, ZettavoltampereReactiveHoursTolerance);
            Assert.Equal(ReactiveEnergyUnit.ZettavoltampereReactiveHour, zettavoltamperereactivehourQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromAttovoltampereReactiveHours(voltamperereactivehour.AttovoltampereReactiveHours).VoltampereReactiveHours, AttovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromCentivoltampereReactiveHours(voltamperereactivehour.CentivoltampereReactiveHours).VoltampereReactiveHours, CentivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromDecavoltampereReactiveHours(voltamperereactivehour.DecavoltampereReactiveHours).VoltampereReactiveHours, DecavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromDecivoltampereReactiveHours(voltamperereactivehour.DecivoltampereReactiveHours).VoltampereReactiveHours, DecivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromExavoltampereReactiveHours(voltamperereactivehour.ExavoltampereReactiveHours).VoltampereReactiveHours, ExavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromFemtovoltampereReactiveHours(voltamperereactivehour.FemtovoltampereReactiveHours).VoltampereReactiveHours, FemtovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromGigavoltampereReactiveHours(voltamperereactivehour.GigavoltampereReactiveHours).VoltampereReactiveHours, GigavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromHectovoltampereReactiveHours(voltamperereactivehour.HectovoltampereReactiveHours).VoltampereReactiveHours, HectovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromKilovoltampereReactiveHours(voltamperereactivehour.KilovoltampereReactiveHours).VoltampereReactiveHours, KilovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromMegavoltampereReactiveHours(voltamperereactivehour.MegavoltampereReactiveHours).VoltampereReactiveHours, MegavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromMicrovoltampereReactiveHours(voltamperereactivehour.MicrovoltampereReactiveHours).VoltampereReactiveHours, MicrovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromMillivoltampereReactiveHours(voltamperereactivehour.MillivoltampereReactiveHours).VoltampereReactiveHours, MillivoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromNanovoltampereReactiveHours(voltamperereactivehour.NanovoltampereReactiveHours).VoltampereReactiveHours, NanovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromPetavoltampereReactiveHours(voltamperereactivehour.PetavoltampereReactiveHours).VoltampereReactiveHours, PetavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromPicovoltampereReactiveHours(voltamperereactivehour.PicovoltampereReactiveHours).VoltampereReactiveHours, PicovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromQutravoltampereReactiveHours(voltamperereactivehour.QutravoltampereReactiveHours).VoltampereReactiveHours, QutravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromTeravoltampereReactiveHours(voltamperereactivehour.TeravoltampereReactiveHours).VoltampereReactiveHours, TeravoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromVettavoltampereReactiveHours(voltamperereactivehour.VettavoltampereReactiveHours).VoltampereReactiveHours, VettavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromVoltampereReactiveHours(voltamperereactivehour.VoltampereReactiveHours).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromYoctovoltampereReactiveHours(voltamperereactivehour.YoctovoltampereReactiveHours).VoltampereReactiveHours, YoctovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromYottavoltampereReactiveHours(voltamperereactivehour.YottavoltampereReactiveHours).VoltampereReactiveHours, YottavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromZeptovoltampereReactiveHours(voltamperereactivehour.ZeptovoltampereReactiveHours).VoltampereReactiveHours, ZeptovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(1, ReactiveEnergy.FromZettavoltampereReactiveHours(voltamperereactivehour.ZettavoltampereReactiveHours).VoltampereReactiveHours, ZettavoltampereReactiveHoursTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ReactiveEnergy v = ReactiveEnergy.FromVoltampereReactiveHours(1);
            AssertEx.EqualTolerance(-1, -v.VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(2, (ReactiveEnergy.FromVoltampereReactiveHours(3)-v).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(2, (v + v).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(10, (v*10).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(10, (10*v).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(2, (ReactiveEnergy.FromVoltampereReactiveHours(10)/5).VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(2, ReactiveEnergy.FromVoltampereReactiveHours(10)/ReactiveEnergy.FromVoltampereReactiveHours(5), VoltampereReactiveHoursTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ReactiveEnergy oneVoltampereReactiveHour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            ReactiveEnergy twoVoltampereReactiveHours = ReactiveEnergy.FromVoltampereReactiveHours(2);

            Assert.True(oneVoltampereReactiveHour < twoVoltampereReactiveHours);
            Assert.True(oneVoltampereReactiveHour <= twoVoltampereReactiveHours);
            Assert.True(twoVoltampereReactiveHours > oneVoltampereReactiveHour);
            Assert.True(twoVoltampereReactiveHours >= oneVoltampereReactiveHour);

            Assert.False(oneVoltampereReactiveHour > twoVoltampereReactiveHours);
            Assert.False(oneVoltampereReactiveHour >= twoVoltampereReactiveHours);
            Assert.False(twoVoltampereReactiveHours < oneVoltampereReactiveHour);
            Assert.False(twoVoltampereReactiveHours <= oneVoltampereReactiveHour);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Equal(0, voltamperereactivehour.CompareTo(voltamperereactivehour));
            Assert.True(voltamperereactivehour.CompareTo(ReactiveEnergy.Zero) > 0);
            Assert.True(ReactiveEnergy.Zero.CompareTo(voltamperereactivehour) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Throws<ArgumentException>(() => voltamperereactivehour.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Throws<ArgumentNullException>(() => voltamperereactivehour.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ReactiveEnergy.FromVoltampereReactiveHours(1);
            var b = ReactiveEnergy.FromVoltampereReactiveHours(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = ReactiveEnergy.FromVoltampereReactiveHours(1);
            var b = ReactiveEnergy.FromVoltampereReactiveHours(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = ReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.True(v.Equals(ReactiveEnergy.FromVoltampereReactiveHours(1), VoltampereReactiveHoursTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ReactiveEnergy.Zero, VoltampereReactiveHoursTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.False(voltamperereactivehour.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ReactiveEnergy voltamperereactivehour = ReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.False(voltamperereactivehour.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ReactiveEnergyUnit.Undefined, ReactiveEnergy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ReactiveEnergyUnit)).Cast<ReactiveEnergyUnit>();
            foreach(var unit in units)
            {
                if(unit == ReactiveEnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ReactiveEnergy.BaseDimensions is null);
        }
    }
}
