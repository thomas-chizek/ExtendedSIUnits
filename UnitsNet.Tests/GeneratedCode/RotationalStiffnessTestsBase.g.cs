//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalStiffness.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalStiffnessTestsBase
    {
        protected abstract double CentinewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double DecanewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double DecinewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double ExanewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double FemtonewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double GiganewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double HectonewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double KilonewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double MeganewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double MicronewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double MillinewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double NanonewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double NewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double PetanewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double PiconewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double QutranewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double TeranewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double VettanewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double YottanewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }
        protected abstract double ZettanewtonMetersPerRadianInOneNewtonMeterPerRadian { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double ExanewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double FemtonewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double GiganewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double HectonewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double PetanewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double PiconewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double QutranewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double TeranewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double VettanewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double YottanewtonMetersPerRadianTolerance { get { return 1e-5; } }
        protected virtual double ZettanewtonMetersPerRadianTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffness((double)0.0, RotationalStiffnessUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffness(double.PositiveInfinity, RotationalStiffnessUnit.NewtonMeterPerRadian));
            Assert.Throws<ArgumentException>(() => new RotationalStiffness(double.NegativeInfinity, RotationalStiffnessUnit.NewtonMeterPerRadian));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalStiffness(double.NaN, RotationalStiffnessUnit.NewtonMeterPerRadian));
        }

        [Fact]
        public void NewtonMeterPerRadianToRotationalStiffnessUnits()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(CentinewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.CentinewtonMetersPerRadian, CentinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(DecanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.DecanewtonMetersPerRadian, DecanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(DecinewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.DecinewtonMetersPerRadian, DecinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(ExanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.ExanewtonMetersPerRadian, ExanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(FemtonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.FemtonewtonMetersPerRadian, FemtonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(GiganewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.GiganewtonMetersPerRadian, GiganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(HectonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.HectonewtonMetersPerRadian, HectonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.KilonewtonMetersPerRadian, KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MeganewtonMetersPerRadian, MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MicronewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MicronewtonMetersPerRadian, MicronewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MillinewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.MillinewtonMetersPerRadian, MillinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(NanonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.NanonewtonMetersPerRadian, NanonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(PetanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.PetanewtonMetersPerRadian, PetanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(PiconewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.PiconewtonMetersPerRadian, PiconewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(QutranewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.QutranewtonMetersPerRadian, QutranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(TeranewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.TeranewtonMetersPerRadian, TeranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(VettanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.VettanewtonMetersPerRadian, VettanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(YottanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.YottanewtonMetersPerRadian, YottanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(ZettanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.ZettanewtonMetersPerRadian, ZettanewtonMetersPerRadianTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.CentinewtonMeterPerRadian).CentinewtonMetersPerRadian, CentinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.DecanewtonMeterPerRadian).DecanewtonMetersPerRadian, DecanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.DecinewtonMeterPerRadian).DecinewtonMetersPerRadian, DecinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.ExanewtonMeterPerRadian).ExanewtonMetersPerRadian, ExanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.FemtonewtonMeterPerRadian).FemtonewtonMetersPerRadian, FemtonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.GiganewtonMeterPerRadian).GiganewtonMetersPerRadian, GiganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.HectonewtonMeterPerRadian).HectonewtonMetersPerRadian, HectonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.KilonewtonMeterPerRadian).KilonewtonMetersPerRadian, KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.MeganewtonMeterPerRadian).MeganewtonMetersPerRadian, MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.MicronewtonMeterPerRadian).MicronewtonMetersPerRadian, MicronewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.MillinewtonMeterPerRadian).MillinewtonMetersPerRadian, MillinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.NanonewtonMeterPerRadian).NanonewtonMetersPerRadian, NanonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.NewtonMeterPerRadian).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.PetanewtonMeterPerRadian).PetanewtonMetersPerRadian, PetanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.PiconewtonMeterPerRadian).PiconewtonMetersPerRadian, PiconewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.QutranewtonMeterPerRadian).QutranewtonMetersPerRadian, QutranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.TeranewtonMeterPerRadian).TeranewtonMetersPerRadian, TeranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.VettanewtonMeterPerRadian).VettanewtonMetersPerRadian, VettanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.YottanewtonMeterPerRadian).YottanewtonMetersPerRadian, YottanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.From(1, RotationalStiffnessUnit.ZettanewtonMeterPerRadian).ZettanewtonMetersPerRadian, ZettanewtonMetersPerRadianTolerance);
        }

        [Fact]
        public void FromNewtonMetersPerRadian_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalStiffness.FromNewtonMetersPerRadian(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RotationalStiffness.FromNewtonMetersPerRadian(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonMetersPerRadian_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalStiffness.FromNewtonMetersPerRadian(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(CentinewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.CentinewtonMeterPerRadian), CentinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(DecanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecanewtonMeterPerRadian), DecanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(DecinewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.DecinewtonMeterPerRadian), DecinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(ExanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.ExanewtonMeterPerRadian), ExanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(FemtonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.FemtonewtonMeterPerRadian), FemtonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(GiganewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.GiganewtonMeterPerRadian), GiganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(HectonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.HectonewtonMeterPerRadian), HectonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.KilonewtonMeterPerRadian), KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MeganewtonMeterPerRadian), MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MicronewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MicronewtonMeterPerRadian), MicronewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(MillinewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.MillinewtonMeterPerRadian), MillinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(NanonewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NanonewtonMeterPerRadian), NanonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.NewtonMeterPerRadian), NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(PetanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.PetanewtonMeterPerRadian), PetanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(PiconewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.PiconewtonMeterPerRadian), PiconewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(QutranewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.QutranewtonMeterPerRadian), QutranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(TeranewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.TeranewtonMeterPerRadian), TeranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(VettanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.VettanewtonMeterPerRadian), VettanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(YottanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.YottanewtonMeterPerRadian), YottanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(ZettanewtonMetersPerRadianInOneNewtonMeterPerRadian, newtonmeterperradian.As(RotationalStiffnessUnit.ZettanewtonMeterPerRadian), ZettanewtonMetersPerRadianTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);

            var centinewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.CentinewtonMeterPerRadian);
            AssertEx.EqualTolerance(CentinewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)centinewtonmeterperradianQuantity.Value, CentinewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.CentinewtonMeterPerRadian, centinewtonmeterperradianQuantity.Unit);

            var decanewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecanewtonMeterPerRadian);
            AssertEx.EqualTolerance(DecanewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)decanewtonmeterperradianQuantity.Value, DecanewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecanewtonMeterPerRadian, decanewtonmeterperradianQuantity.Unit);

            var decinewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.DecinewtonMeterPerRadian);
            AssertEx.EqualTolerance(DecinewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)decinewtonmeterperradianQuantity.Value, DecinewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.DecinewtonMeterPerRadian, decinewtonmeterperradianQuantity.Unit);

            var exanewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.ExanewtonMeterPerRadian);
            AssertEx.EqualTolerance(ExanewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)exanewtonmeterperradianQuantity.Value, ExanewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.ExanewtonMeterPerRadian, exanewtonmeterperradianQuantity.Unit);

            var femtonewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.FemtonewtonMeterPerRadian);
            AssertEx.EqualTolerance(FemtonewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)femtonewtonmeterperradianQuantity.Value, FemtonewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.FemtonewtonMeterPerRadian, femtonewtonmeterperradianQuantity.Unit);

            var giganewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.GiganewtonMeterPerRadian);
            AssertEx.EqualTolerance(GiganewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)giganewtonmeterperradianQuantity.Value, GiganewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.GiganewtonMeterPerRadian, giganewtonmeterperradianQuantity.Unit);

            var hectonewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.HectonewtonMeterPerRadian);
            AssertEx.EqualTolerance(HectonewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)hectonewtonmeterperradianQuantity.Value, HectonewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.HectonewtonMeterPerRadian, hectonewtonmeterperradianQuantity.Unit);

            var kilonewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.KilonewtonMeterPerRadian);
            AssertEx.EqualTolerance(KilonewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)kilonewtonmeterperradianQuantity.Value, KilonewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.KilonewtonMeterPerRadian, kilonewtonmeterperradianQuantity.Unit);

            var meganewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MeganewtonMeterPerRadian);
            AssertEx.EqualTolerance(MeganewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)meganewtonmeterperradianQuantity.Value, MeganewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MeganewtonMeterPerRadian, meganewtonmeterperradianQuantity.Unit);

            var micronewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MicronewtonMeterPerRadian);
            AssertEx.EqualTolerance(MicronewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)micronewtonmeterperradianQuantity.Value, MicronewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MicronewtonMeterPerRadian, micronewtonmeterperradianQuantity.Unit);

            var millinewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.MillinewtonMeterPerRadian);
            AssertEx.EqualTolerance(MillinewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)millinewtonmeterperradianQuantity.Value, MillinewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.MillinewtonMeterPerRadian, millinewtonmeterperradianQuantity.Unit);

            var nanonewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NanonewtonMeterPerRadian);
            AssertEx.EqualTolerance(NanonewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)nanonewtonmeterperradianQuantity.Value, NanonewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NanonewtonMeterPerRadian, nanonewtonmeterperradianQuantity.Unit);

            var newtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.NewtonMeterPerRadian);
            AssertEx.EqualTolerance(NewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)newtonmeterperradianQuantity.Value, NewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.NewtonMeterPerRadian, newtonmeterperradianQuantity.Unit);

            var petanewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.PetanewtonMeterPerRadian);
            AssertEx.EqualTolerance(PetanewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)petanewtonmeterperradianQuantity.Value, PetanewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.PetanewtonMeterPerRadian, petanewtonmeterperradianQuantity.Unit);

            var piconewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.PiconewtonMeterPerRadian);
            AssertEx.EqualTolerance(PiconewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)piconewtonmeterperradianQuantity.Value, PiconewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.PiconewtonMeterPerRadian, piconewtonmeterperradianQuantity.Unit);

            var qutranewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.QutranewtonMeterPerRadian);
            AssertEx.EqualTolerance(QutranewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)qutranewtonmeterperradianQuantity.Value, QutranewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.QutranewtonMeterPerRadian, qutranewtonmeterperradianQuantity.Unit);

            var teranewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.TeranewtonMeterPerRadian);
            AssertEx.EqualTolerance(TeranewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)teranewtonmeterperradianQuantity.Value, TeranewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.TeranewtonMeterPerRadian, teranewtonmeterperradianQuantity.Unit);

            var vettanewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.VettanewtonMeterPerRadian);
            AssertEx.EqualTolerance(VettanewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)vettanewtonmeterperradianQuantity.Value, VettanewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.VettanewtonMeterPerRadian, vettanewtonmeterperradianQuantity.Unit);

            var yottanewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.YottanewtonMeterPerRadian);
            AssertEx.EqualTolerance(YottanewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)yottanewtonmeterperradianQuantity.Value, YottanewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.YottanewtonMeterPerRadian, yottanewtonmeterperradianQuantity.Unit);

            var zettanewtonmeterperradianQuantity = newtonmeterperradian.ToUnit(RotationalStiffnessUnit.ZettanewtonMeterPerRadian);
            AssertEx.EqualTolerance(ZettanewtonMetersPerRadianInOneNewtonMeterPerRadian, (double)zettanewtonmeterperradianQuantity.Value, ZettanewtonMetersPerRadianTolerance);
            Assert.Equal(RotationalStiffnessUnit.ZettanewtonMeterPerRadian, zettanewtonmeterperradianQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromCentinewtonMetersPerRadian(newtonmeterperradian.CentinewtonMetersPerRadian).NewtonMetersPerRadian, CentinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecanewtonMetersPerRadian(newtonmeterperradian.DecanewtonMetersPerRadian).NewtonMetersPerRadian, DecanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromDecinewtonMetersPerRadian(newtonmeterperradian.DecinewtonMetersPerRadian).NewtonMetersPerRadian, DecinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromExanewtonMetersPerRadian(newtonmeterperradian.ExanewtonMetersPerRadian).NewtonMetersPerRadian, ExanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromFemtonewtonMetersPerRadian(newtonmeterperradian.FemtonewtonMetersPerRadian).NewtonMetersPerRadian, FemtonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromGiganewtonMetersPerRadian(newtonmeterperradian.GiganewtonMetersPerRadian).NewtonMetersPerRadian, GiganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromHectonewtonMetersPerRadian(newtonmeterperradian.HectonewtonMetersPerRadian).NewtonMetersPerRadian, HectonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromKilonewtonMetersPerRadian(newtonmeterperradian.KilonewtonMetersPerRadian).NewtonMetersPerRadian, KilonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMeganewtonMetersPerRadian(newtonmeterperradian.MeganewtonMetersPerRadian).NewtonMetersPerRadian, MeganewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMicronewtonMetersPerRadian(newtonmeterperradian.MicronewtonMetersPerRadian).NewtonMetersPerRadian, MicronewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromMillinewtonMetersPerRadian(newtonmeterperradian.MillinewtonMetersPerRadian).NewtonMetersPerRadian, MillinewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNanonewtonMetersPerRadian(newtonmeterperradian.NanonewtonMetersPerRadian).NewtonMetersPerRadian, NanonewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromNewtonMetersPerRadian(newtonmeterperradian.NewtonMetersPerRadian).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromPetanewtonMetersPerRadian(newtonmeterperradian.PetanewtonMetersPerRadian).NewtonMetersPerRadian, PetanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromPiconewtonMetersPerRadian(newtonmeterperradian.PiconewtonMetersPerRadian).NewtonMetersPerRadian, PiconewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromQutranewtonMetersPerRadian(newtonmeterperradian.QutranewtonMetersPerRadian).NewtonMetersPerRadian, QutranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromTeranewtonMetersPerRadian(newtonmeterperradian.TeranewtonMetersPerRadian).NewtonMetersPerRadian, TeranewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromVettanewtonMetersPerRadian(newtonmeterperradian.VettanewtonMetersPerRadian).NewtonMetersPerRadian, VettanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromYottanewtonMetersPerRadian(newtonmeterperradian.YottanewtonMetersPerRadian).NewtonMetersPerRadian, YottanewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(1, RotationalStiffness.FromZettanewtonMetersPerRadian(newtonmeterperradian.ZettanewtonMetersPerRadian).NewtonMetersPerRadian, ZettanewtonMetersPerRadianTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalStiffness v = RotationalStiffness.FromNewtonMetersPerRadian(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, (RotationalStiffness.FromNewtonMetersPerRadian(3)-v).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, (RotationalStiffness.FromNewtonMetersPerRadian(10)/5).NewtonMetersPerRadian, NewtonMetersPerRadianTolerance);
            AssertEx.EqualTolerance(2, RotationalStiffness.FromNewtonMetersPerRadian(10)/RotationalStiffness.FromNewtonMetersPerRadian(5), NewtonMetersPerRadianTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalStiffness oneNewtonMeterPerRadian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            RotationalStiffness twoNewtonMetersPerRadian = RotationalStiffness.FromNewtonMetersPerRadian(2);

            Assert.True(oneNewtonMeterPerRadian < twoNewtonMetersPerRadian);
            Assert.True(oneNewtonMeterPerRadian <= twoNewtonMetersPerRadian);
            Assert.True(twoNewtonMetersPerRadian > oneNewtonMeterPerRadian);
            Assert.True(twoNewtonMetersPerRadian >= oneNewtonMeterPerRadian);

            Assert.False(oneNewtonMeterPerRadian > twoNewtonMetersPerRadian);
            Assert.False(oneNewtonMeterPerRadian >= twoNewtonMetersPerRadian);
            Assert.False(twoNewtonMetersPerRadian < oneNewtonMeterPerRadian);
            Assert.False(twoNewtonMetersPerRadian <= oneNewtonMeterPerRadian);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.Equal(0, newtonmeterperradian.CompareTo(newtonmeterperradian));
            Assert.True(newtonmeterperradian.CompareTo(RotationalStiffness.Zero) > 0);
            Assert.True(RotationalStiffness.Zero.CompareTo(newtonmeterperradian) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.Throws<ArgumentException>(() => newtonmeterperradian.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeterperradian.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = RotationalStiffness.FromNewtonMetersPerRadian(1);
            var b = RotationalStiffness.FromNewtonMetersPerRadian(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = RotationalStiffness.FromNewtonMetersPerRadian(1);
            var b = RotationalStiffness.FromNewtonMetersPerRadian(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.True(v.Equals(RotationalStiffness.FromNewtonMetersPerRadian(1), NewtonMetersPerRadianTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RotationalStiffness.Zero, NewtonMetersPerRadianTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.False(newtonmeterperradian.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalStiffness newtonmeterperradian = RotationalStiffness.FromNewtonMetersPerRadian(1);
            Assert.False(newtonmeterperradian.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(RotationalStiffnessUnit.Undefined, RotationalStiffness.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RotationalStiffnessUnit)).Cast<RotationalStiffnessUnit>();
            foreach(var unit in units)
            {
                if(unit == RotationalStiffnessUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RotationalStiffness.BaseDimensions is null);
        }
    }
}
