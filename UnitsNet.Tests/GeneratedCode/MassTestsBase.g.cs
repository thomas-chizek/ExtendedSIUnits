//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Mass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassTestsBase
    {
        protected abstract double CentigramsInOneKilogram { get; }
        protected abstract double DecagramsInOneKilogram { get; }
        protected abstract double DecigramsInOneKilogram { get; }
        protected abstract double ExagramsInOneKilogram { get; }
        protected abstract double ExatonnesInOneKilogram { get; }
        protected abstract double FemtogramsInOneKilogram { get; }
        protected abstract double GigagramsInOneKilogram { get; }
        protected abstract double GigatonnesInOneKilogram { get; }
        protected abstract double GrainsInOneKilogram { get; }
        protected abstract double GramsInOneKilogram { get; }
        protected abstract double HectogramsInOneKilogram { get; }
        protected abstract double KilogramsInOneKilogram { get; }
        protected abstract double KilopoundsInOneKilogram { get; }
        protected abstract double KilotonnesInOneKilogram { get; }
        protected abstract double LongHundredweightInOneKilogram { get; }
        protected abstract double LongTonsInOneKilogram { get; }
        protected abstract double MegagramsInOneKilogram { get; }
        protected abstract double MegapoundsInOneKilogram { get; }
        protected abstract double MegatonnesInOneKilogram { get; }
        protected abstract double MicrogramsInOneKilogram { get; }
        protected abstract double MilligramsInOneKilogram { get; }
        protected abstract double NanogramsInOneKilogram { get; }
        protected abstract double OuncesInOneKilogram { get; }
        protected abstract double PetagramsInOneKilogram { get; }
        protected abstract double PetatonnesInOneKilogram { get; }
        protected abstract double PicogramsInOneKilogram { get; }
        protected abstract double PoundsInOneKilogram { get; }
        protected abstract double QutragramsInOneKilogram { get; }
        protected abstract double QutratonnesInOneKilogram { get; }
        protected abstract double ShortHundredweightInOneKilogram { get; }
        protected abstract double ShortTonsInOneKilogram { get; }
        protected abstract double SlugsInOneKilogram { get; }
        protected abstract double StoneInOneKilogram { get; }
        protected abstract double TeragramsInOneKilogram { get; }
        protected abstract double TeratonnesInOneKilogram { get; }
        protected abstract double TonnesInOneKilogram { get; }
        protected abstract double VettagramsInOneKilogram { get; }
        protected abstract double VettatonnesInOneKilogram { get; }
        protected abstract double YottagramsInOneKilogram { get; }
        protected abstract double YottatonnesInOneKilogram { get; }
        protected abstract double ZettagramsInOneKilogram { get; }
        protected abstract double ZettatonnesInOneKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsTolerance { get { return 1e-5; } }
        protected virtual double DecagramsTolerance { get { return 1e-5; } }
        protected virtual double DecigramsTolerance { get { return 1e-5; } }
        protected virtual double ExagramsTolerance { get { return 1e-5; } }
        protected virtual double ExatonnesTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsTolerance { get { return 1e-5; } }
        protected virtual double GigagramsTolerance { get { return 1e-5; } }
        protected virtual double GigatonnesTolerance { get { return 1e-5; } }
        protected virtual double GrainsTolerance { get { return 1e-5; } }
        protected virtual double GramsTolerance { get { return 1e-5; } }
        protected virtual double HectogramsTolerance { get { return 1e-5; } }
        protected virtual double KilogramsTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsTolerance { get { return 1e-5; } }
        protected virtual double KilotonnesTolerance { get { return 1e-5; } }
        protected virtual double LongHundredweightTolerance { get { return 1e-5; } }
        protected virtual double LongTonsTolerance { get { return 1e-5; } }
        protected virtual double MegagramsTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsTolerance { get { return 1e-5; } }
        protected virtual double MegatonnesTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsTolerance { get { return 1e-5; } }
        protected virtual double MilligramsTolerance { get { return 1e-5; } }
        protected virtual double NanogramsTolerance { get { return 1e-5; } }
        protected virtual double OuncesTolerance { get { return 1e-5; } }
        protected virtual double PetagramsTolerance { get { return 1e-5; } }
        protected virtual double PetatonnesTolerance { get { return 1e-5; } }
        protected virtual double PicogramsTolerance { get { return 1e-5; } }
        protected virtual double PoundsTolerance { get { return 1e-5; } }
        protected virtual double QutragramsTolerance { get { return 1e-5; } }
        protected virtual double QutratonnesTolerance { get { return 1e-5; } }
        protected virtual double ShortHundredweightTolerance { get { return 1e-5; } }
        protected virtual double ShortTonsTolerance { get { return 1e-5; } }
        protected virtual double SlugsTolerance { get { return 1e-5; } }
        protected virtual double StoneTolerance { get { return 1e-5; } }
        protected virtual double TeragramsTolerance { get { return 1e-5; } }
        protected virtual double TeratonnesTolerance { get { return 1e-5; } }
        protected virtual double TonnesTolerance { get { return 1e-5; } }
        protected virtual double VettagramsTolerance { get { return 1e-5; } }
        protected virtual double VettatonnesTolerance { get { return 1e-5; } }
        protected virtual double YottagramsTolerance { get { return 1e-5; } }
        protected virtual double YottatonnesTolerance { get { return 1e-5; } }
        protected virtual double ZettagramsTolerance { get { return 1e-5; } }
        protected virtual double ZettatonnesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Mass((double)0.0, MassUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Mass(double.PositiveInfinity, MassUnit.Kilogram));
            Assert.Throws<ArgumentException>(() => new Mass(double.NegativeInfinity, MassUnit.Kilogram));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Mass(double.NaN, MassUnit.Kilogram));
        }

        [Fact]
        public void KilogramToMassUnits()
        {
            Mass kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, kilogram.Centigrams, CentigramsTolerance);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, kilogram.Decagrams, DecagramsTolerance);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, kilogram.Decigrams, DecigramsTolerance);
            AssertEx.EqualTolerance(ExagramsInOneKilogram, kilogram.Exagrams, ExagramsTolerance);
            AssertEx.EqualTolerance(ExatonnesInOneKilogram, kilogram.Exatonnes, ExatonnesTolerance);
            AssertEx.EqualTolerance(FemtogramsInOneKilogram, kilogram.Femtograms, FemtogramsTolerance);
            AssertEx.EqualTolerance(GigagramsInOneKilogram, kilogram.Gigagrams, GigagramsTolerance);
            AssertEx.EqualTolerance(GigatonnesInOneKilogram, kilogram.Gigatonnes, GigatonnesTolerance);
            AssertEx.EqualTolerance(GrainsInOneKilogram, kilogram.Grains, GrainsTolerance);
            AssertEx.EqualTolerance(GramsInOneKilogram, kilogram.Grams, GramsTolerance);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, kilogram.Hectograms, HectogramsTolerance);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, kilogram.Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, kilogram.Kilopounds, KilopoundsTolerance);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, kilogram.Kilotonnes, KilotonnesTolerance);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, kilogram.LongHundredweight, LongHundredweightTolerance);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, kilogram.LongTons, LongTonsTolerance);
            AssertEx.EqualTolerance(MegagramsInOneKilogram, kilogram.Megagrams, MegagramsTolerance);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, kilogram.Megapounds, MegapoundsTolerance);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, kilogram.Megatonnes, MegatonnesTolerance);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, kilogram.Micrograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, kilogram.Milligrams, MilligramsTolerance);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, kilogram.Nanograms, NanogramsTolerance);
            AssertEx.EqualTolerance(OuncesInOneKilogram, kilogram.Ounces, OuncesTolerance);
            AssertEx.EqualTolerance(PetagramsInOneKilogram, kilogram.Petagrams, PetagramsTolerance);
            AssertEx.EqualTolerance(PetatonnesInOneKilogram, kilogram.Petatonnes, PetatonnesTolerance);
            AssertEx.EqualTolerance(PicogramsInOneKilogram, kilogram.Picograms, PicogramsTolerance);
            AssertEx.EqualTolerance(PoundsInOneKilogram, kilogram.Pounds, PoundsTolerance);
            AssertEx.EqualTolerance(QutragramsInOneKilogram, kilogram.Qutragrams, QutragramsTolerance);
            AssertEx.EqualTolerance(QutratonnesInOneKilogram, kilogram.Qutratonnes, QutratonnesTolerance);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, kilogram.ShortHundredweight, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, kilogram.ShortTons, ShortTonsTolerance);
            AssertEx.EqualTolerance(SlugsInOneKilogram, kilogram.Slugs, SlugsTolerance);
            AssertEx.EqualTolerance(StoneInOneKilogram, kilogram.Stone, StoneTolerance);
            AssertEx.EqualTolerance(TeragramsInOneKilogram, kilogram.Teragrams, TeragramsTolerance);
            AssertEx.EqualTolerance(TeratonnesInOneKilogram, kilogram.Teratonnes, TeratonnesTolerance);
            AssertEx.EqualTolerance(TonnesInOneKilogram, kilogram.Tonnes, TonnesTolerance);
            AssertEx.EqualTolerance(VettagramsInOneKilogram, kilogram.Vettagrams, VettagramsTolerance);
            AssertEx.EqualTolerance(VettatonnesInOneKilogram, kilogram.Vettatonnes, VettatonnesTolerance);
            AssertEx.EqualTolerance(YottagramsInOneKilogram, kilogram.Yottagrams, YottagramsTolerance);
            AssertEx.EqualTolerance(YottatonnesInOneKilogram, kilogram.Yottatonnes, YottatonnesTolerance);
            AssertEx.EqualTolerance(ZettagramsInOneKilogram, kilogram.Zettagrams, ZettagramsTolerance);
            AssertEx.EqualTolerance(ZettatonnesInOneKilogram, kilogram.Zettatonnes, ZettatonnesTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Centigram).Centigrams, CentigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Decagram).Decagrams, DecagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Decigram).Decigrams, DecigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Exagram).Exagrams, ExagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Exatonne).Exatonnes, ExatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Femtogram).Femtograms, FemtogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Gigagram).Gigagrams, GigagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Gigatonne).Gigatonnes, GigatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Grain).Grains, GrainsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Gram).Grams, GramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Hectogram).Hectograms, HectogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Kilogram).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Kilopound).Kilopounds, KilopoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Kilotonne).Kilotonnes, KilotonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.LongHundredweight).LongHundredweight, LongHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.LongTon).LongTons, LongTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Megagram).Megagrams, MegagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Megapound).Megapounds, MegapoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Megatonne).Megatonnes, MegatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Microgram).Micrograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Milligram).Milligrams, MilligramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Nanogram).Nanograms, NanogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Ounce).Ounces, OuncesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Petagram).Petagrams, PetagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Petatonne).Petatonnes, PetatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Picogram).Picograms, PicogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Pound).Pounds, PoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Qutragram).Qutragrams, QutragramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Qutratonne).Qutratonnes, QutratonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.ShortHundredweight).ShortHundredweight, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.ShortTon).ShortTons, ShortTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Slug).Slugs, SlugsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Stone).Stone, StoneTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Teragram).Teragrams, TeragramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Teratonne).Teratonnes, TeratonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Tonne).Tonnes, TonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Vettagram).Vettagrams, VettagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Vettatonne).Vettatonnes, VettatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Yottagram).Yottagrams, YottagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Yottatonne).Yottatonnes, YottatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Zettagram).Zettagrams, ZettagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.From(1, MassUnit.Zettatonne).Zettatonnes, ZettatonnesTolerance);
        }

        [Fact]
        public void FromKilograms_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Mass.FromKilograms(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Mass.FromKilograms(double.NegativeInfinity));
        }

        [Fact]
        public void FromKilograms_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Mass.FromKilograms(double.NaN));
        }

        [Fact]
        public void As()
        {
            var kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, kilogram.As(MassUnit.Centigram), CentigramsTolerance);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, kilogram.As(MassUnit.Decagram), DecagramsTolerance);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, kilogram.As(MassUnit.Decigram), DecigramsTolerance);
            AssertEx.EqualTolerance(ExagramsInOneKilogram, kilogram.As(MassUnit.Exagram), ExagramsTolerance);
            AssertEx.EqualTolerance(ExatonnesInOneKilogram, kilogram.As(MassUnit.Exatonne), ExatonnesTolerance);
            AssertEx.EqualTolerance(FemtogramsInOneKilogram, kilogram.As(MassUnit.Femtogram), FemtogramsTolerance);
            AssertEx.EqualTolerance(GigagramsInOneKilogram, kilogram.As(MassUnit.Gigagram), GigagramsTolerance);
            AssertEx.EqualTolerance(GigatonnesInOneKilogram, kilogram.As(MassUnit.Gigatonne), GigatonnesTolerance);
            AssertEx.EqualTolerance(GrainsInOneKilogram, kilogram.As(MassUnit.Grain), GrainsTolerance);
            AssertEx.EqualTolerance(GramsInOneKilogram, kilogram.As(MassUnit.Gram), GramsTolerance);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, kilogram.As(MassUnit.Hectogram), HectogramsTolerance);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, kilogram.As(MassUnit.Kilogram), KilogramsTolerance);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, kilogram.As(MassUnit.Kilopound), KilopoundsTolerance);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, kilogram.As(MassUnit.Kilotonne), KilotonnesTolerance);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, kilogram.As(MassUnit.LongHundredweight), LongHundredweightTolerance);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, kilogram.As(MassUnit.LongTon), LongTonsTolerance);
            AssertEx.EqualTolerance(MegagramsInOneKilogram, kilogram.As(MassUnit.Megagram), MegagramsTolerance);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, kilogram.As(MassUnit.Megapound), MegapoundsTolerance);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, kilogram.As(MassUnit.Megatonne), MegatonnesTolerance);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, kilogram.As(MassUnit.Microgram), MicrogramsTolerance);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, kilogram.As(MassUnit.Milligram), MilligramsTolerance);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, kilogram.As(MassUnit.Nanogram), NanogramsTolerance);
            AssertEx.EqualTolerance(OuncesInOneKilogram, kilogram.As(MassUnit.Ounce), OuncesTolerance);
            AssertEx.EqualTolerance(PetagramsInOneKilogram, kilogram.As(MassUnit.Petagram), PetagramsTolerance);
            AssertEx.EqualTolerance(PetatonnesInOneKilogram, kilogram.As(MassUnit.Petatonne), PetatonnesTolerance);
            AssertEx.EqualTolerance(PicogramsInOneKilogram, kilogram.As(MassUnit.Picogram), PicogramsTolerance);
            AssertEx.EqualTolerance(PoundsInOneKilogram, kilogram.As(MassUnit.Pound), PoundsTolerance);
            AssertEx.EqualTolerance(QutragramsInOneKilogram, kilogram.As(MassUnit.Qutragram), QutragramsTolerance);
            AssertEx.EqualTolerance(QutratonnesInOneKilogram, kilogram.As(MassUnit.Qutratonne), QutratonnesTolerance);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, kilogram.As(MassUnit.ShortHundredweight), ShortHundredweightTolerance);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, kilogram.As(MassUnit.ShortTon), ShortTonsTolerance);
            AssertEx.EqualTolerance(SlugsInOneKilogram, kilogram.As(MassUnit.Slug), SlugsTolerance);
            AssertEx.EqualTolerance(StoneInOneKilogram, kilogram.As(MassUnit.Stone), StoneTolerance);
            AssertEx.EqualTolerance(TeragramsInOneKilogram, kilogram.As(MassUnit.Teragram), TeragramsTolerance);
            AssertEx.EqualTolerance(TeratonnesInOneKilogram, kilogram.As(MassUnit.Teratonne), TeratonnesTolerance);
            AssertEx.EqualTolerance(TonnesInOneKilogram, kilogram.As(MassUnit.Tonne), TonnesTolerance);
            AssertEx.EqualTolerance(VettagramsInOneKilogram, kilogram.As(MassUnit.Vettagram), VettagramsTolerance);
            AssertEx.EqualTolerance(VettatonnesInOneKilogram, kilogram.As(MassUnit.Vettatonne), VettatonnesTolerance);
            AssertEx.EqualTolerance(YottagramsInOneKilogram, kilogram.As(MassUnit.Yottagram), YottagramsTolerance);
            AssertEx.EqualTolerance(YottatonnesInOneKilogram, kilogram.As(MassUnit.Yottatonne), YottatonnesTolerance);
            AssertEx.EqualTolerance(ZettagramsInOneKilogram, kilogram.As(MassUnit.Zettagram), ZettagramsTolerance);
            AssertEx.EqualTolerance(ZettatonnesInOneKilogram, kilogram.As(MassUnit.Zettatonne), ZettatonnesTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var kilogram = Mass.FromKilograms(1);

            var centigramQuantity = kilogram.ToUnit(MassUnit.Centigram);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, (double)centigramQuantity.Value, CentigramsTolerance);
            Assert.Equal(MassUnit.Centigram, centigramQuantity.Unit);

            var decagramQuantity = kilogram.ToUnit(MassUnit.Decagram);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, (double)decagramQuantity.Value, DecagramsTolerance);
            Assert.Equal(MassUnit.Decagram, decagramQuantity.Unit);

            var decigramQuantity = kilogram.ToUnit(MassUnit.Decigram);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, (double)decigramQuantity.Value, DecigramsTolerance);
            Assert.Equal(MassUnit.Decigram, decigramQuantity.Unit);

            var exagramQuantity = kilogram.ToUnit(MassUnit.Exagram);
            AssertEx.EqualTolerance(ExagramsInOneKilogram, (double)exagramQuantity.Value, ExagramsTolerance);
            Assert.Equal(MassUnit.Exagram, exagramQuantity.Unit);

            var exatonneQuantity = kilogram.ToUnit(MassUnit.Exatonne);
            AssertEx.EqualTolerance(ExatonnesInOneKilogram, (double)exatonneQuantity.Value, ExatonnesTolerance);
            Assert.Equal(MassUnit.Exatonne, exatonneQuantity.Unit);

            var femtogramQuantity = kilogram.ToUnit(MassUnit.Femtogram);
            AssertEx.EqualTolerance(FemtogramsInOneKilogram, (double)femtogramQuantity.Value, FemtogramsTolerance);
            Assert.Equal(MassUnit.Femtogram, femtogramQuantity.Unit);

            var gigagramQuantity = kilogram.ToUnit(MassUnit.Gigagram);
            AssertEx.EqualTolerance(GigagramsInOneKilogram, (double)gigagramQuantity.Value, GigagramsTolerance);
            Assert.Equal(MassUnit.Gigagram, gigagramQuantity.Unit);

            var gigatonneQuantity = kilogram.ToUnit(MassUnit.Gigatonne);
            AssertEx.EqualTolerance(GigatonnesInOneKilogram, (double)gigatonneQuantity.Value, GigatonnesTolerance);
            Assert.Equal(MassUnit.Gigatonne, gigatonneQuantity.Unit);

            var grainQuantity = kilogram.ToUnit(MassUnit.Grain);
            AssertEx.EqualTolerance(GrainsInOneKilogram, (double)grainQuantity.Value, GrainsTolerance);
            Assert.Equal(MassUnit.Grain, grainQuantity.Unit);

            var gramQuantity = kilogram.ToUnit(MassUnit.Gram);
            AssertEx.EqualTolerance(GramsInOneKilogram, (double)gramQuantity.Value, GramsTolerance);
            Assert.Equal(MassUnit.Gram, gramQuantity.Unit);

            var hectogramQuantity = kilogram.ToUnit(MassUnit.Hectogram);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, (double)hectogramQuantity.Value, HectogramsTolerance);
            Assert.Equal(MassUnit.Hectogram, hectogramQuantity.Unit);

            var kilogramQuantity = kilogram.ToUnit(MassUnit.Kilogram);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, (double)kilogramQuantity.Value, KilogramsTolerance);
            Assert.Equal(MassUnit.Kilogram, kilogramQuantity.Unit);

            var kilopoundQuantity = kilogram.ToUnit(MassUnit.Kilopound);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, (double)kilopoundQuantity.Value, KilopoundsTolerance);
            Assert.Equal(MassUnit.Kilopound, kilopoundQuantity.Unit);

            var kilotonneQuantity = kilogram.ToUnit(MassUnit.Kilotonne);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, (double)kilotonneQuantity.Value, KilotonnesTolerance);
            Assert.Equal(MassUnit.Kilotonne, kilotonneQuantity.Unit);

            var longhundredweightQuantity = kilogram.ToUnit(MassUnit.LongHundredweight);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, (double)longhundredweightQuantity.Value, LongHundredweightTolerance);
            Assert.Equal(MassUnit.LongHundredweight, longhundredweightQuantity.Unit);

            var longtonQuantity = kilogram.ToUnit(MassUnit.LongTon);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, (double)longtonQuantity.Value, LongTonsTolerance);
            Assert.Equal(MassUnit.LongTon, longtonQuantity.Unit);

            var megagramQuantity = kilogram.ToUnit(MassUnit.Megagram);
            AssertEx.EqualTolerance(MegagramsInOneKilogram, (double)megagramQuantity.Value, MegagramsTolerance);
            Assert.Equal(MassUnit.Megagram, megagramQuantity.Unit);

            var megapoundQuantity = kilogram.ToUnit(MassUnit.Megapound);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, (double)megapoundQuantity.Value, MegapoundsTolerance);
            Assert.Equal(MassUnit.Megapound, megapoundQuantity.Unit);

            var megatonneQuantity = kilogram.ToUnit(MassUnit.Megatonne);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, (double)megatonneQuantity.Value, MegatonnesTolerance);
            Assert.Equal(MassUnit.Megatonne, megatonneQuantity.Unit);

            var microgramQuantity = kilogram.ToUnit(MassUnit.Microgram);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, (double)microgramQuantity.Value, MicrogramsTolerance);
            Assert.Equal(MassUnit.Microgram, microgramQuantity.Unit);

            var milligramQuantity = kilogram.ToUnit(MassUnit.Milligram);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, (double)milligramQuantity.Value, MilligramsTolerance);
            Assert.Equal(MassUnit.Milligram, milligramQuantity.Unit);

            var nanogramQuantity = kilogram.ToUnit(MassUnit.Nanogram);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, (double)nanogramQuantity.Value, NanogramsTolerance);
            Assert.Equal(MassUnit.Nanogram, nanogramQuantity.Unit);

            var ounceQuantity = kilogram.ToUnit(MassUnit.Ounce);
            AssertEx.EqualTolerance(OuncesInOneKilogram, (double)ounceQuantity.Value, OuncesTolerance);
            Assert.Equal(MassUnit.Ounce, ounceQuantity.Unit);

            var petagramQuantity = kilogram.ToUnit(MassUnit.Petagram);
            AssertEx.EqualTolerance(PetagramsInOneKilogram, (double)petagramQuantity.Value, PetagramsTolerance);
            Assert.Equal(MassUnit.Petagram, petagramQuantity.Unit);

            var petatonneQuantity = kilogram.ToUnit(MassUnit.Petatonne);
            AssertEx.EqualTolerance(PetatonnesInOneKilogram, (double)petatonneQuantity.Value, PetatonnesTolerance);
            Assert.Equal(MassUnit.Petatonne, petatonneQuantity.Unit);

            var picogramQuantity = kilogram.ToUnit(MassUnit.Picogram);
            AssertEx.EqualTolerance(PicogramsInOneKilogram, (double)picogramQuantity.Value, PicogramsTolerance);
            Assert.Equal(MassUnit.Picogram, picogramQuantity.Unit);

            var poundQuantity = kilogram.ToUnit(MassUnit.Pound);
            AssertEx.EqualTolerance(PoundsInOneKilogram, (double)poundQuantity.Value, PoundsTolerance);
            Assert.Equal(MassUnit.Pound, poundQuantity.Unit);

            var qutragramQuantity = kilogram.ToUnit(MassUnit.Qutragram);
            AssertEx.EqualTolerance(QutragramsInOneKilogram, (double)qutragramQuantity.Value, QutragramsTolerance);
            Assert.Equal(MassUnit.Qutragram, qutragramQuantity.Unit);

            var qutratonneQuantity = kilogram.ToUnit(MassUnit.Qutratonne);
            AssertEx.EqualTolerance(QutratonnesInOneKilogram, (double)qutratonneQuantity.Value, QutratonnesTolerance);
            Assert.Equal(MassUnit.Qutratonne, qutratonneQuantity.Unit);

            var shorthundredweightQuantity = kilogram.ToUnit(MassUnit.ShortHundredweight);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, (double)shorthundredweightQuantity.Value, ShortHundredweightTolerance);
            Assert.Equal(MassUnit.ShortHundredweight, shorthundredweightQuantity.Unit);

            var shorttonQuantity = kilogram.ToUnit(MassUnit.ShortTon);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, (double)shorttonQuantity.Value, ShortTonsTolerance);
            Assert.Equal(MassUnit.ShortTon, shorttonQuantity.Unit);

            var slugQuantity = kilogram.ToUnit(MassUnit.Slug);
            AssertEx.EqualTolerance(SlugsInOneKilogram, (double)slugQuantity.Value, SlugsTolerance);
            Assert.Equal(MassUnit.Slug, slugQuantity.Unit);

            var stoneQuantity = kilogram.ToUnit(MassUnit.Stone);
            AssertEx.EqualTolerance(StoneInOneKilogram, (double)stoneQuantity.Value, StoneTolerance);
            Assert.Equal(MassUnit.Stone, stoneQuantity.Unit);

            var teragramQuantity = kilogram.ToUnit(MassUnit.Teragram);
            AssertEx.EqualTolerance(TeragramsInOneKilogram, (double)teragramQuantity.Value, TeragramsTolerance);
            Assert.Equal(MassUnit.Teragram, teragramQuantity.Unit);

            var teratonneQuantity = kilogram.ToUnit(MassUnit.Teratonne);
            AssertEx.EqualTolerance(TeratonnesInOneKilogram, (double)teratonneQuantity.Value, TeratonnesTolerance);
            Assert.Equal(MassUnit.Teratonne, teratonneQuantity.Unit);

            var tonneQuantity = kilogram.ToUnit(MassUnit.Tonne);
            AssertEx.EqualTolerance(TonnesInOneKilogram, (double)tonneQuantity.Value, TonnesTolerance);
            Assert.Equal(MassUnit.Tonne, tonneQuantity.Unit);

            var vettagramQuantity = kilogram.ToUnit(MassUnit.Vettagram);
            AssertEx.EqualTolerance(VettagramsInOneKilogram, (double)vettagramQuantity.Value, VettagramsTolerance);
            Assert.Equal(MassUnit.Vettagram, vettagramQuantity.Unit);

            var vettatonneQuantity = kilogram.ToUnit(MassUnit.Vettatonne);
            AssertEx.EqualTolerance(VettatonnesInOneKilogram, (double)vettatonneQuantity.Value, VettatonnesTolerance);
            Assert.Equal(MassUnit.Vettatonne, vettatonneQuantity.Unit);

            var yottagramQuantity = kilogram.ToUnit(MassUnit.Yottagram);
            AssertEx.EqualTolerance(YottagramsInOneKilogram, (double)yottagramQuantity.Value, YottagramsTolerance);
            Assert.Equal(MassUnit.Yottagram, yottagramQuantity.Unit);

            var yottatonneQuantity = kilogram.ToUnit(MassUnit.Yottatonne);
            AssertEx.EqualTolerance(YottatonnesInOneKilogram, (double)yottatonneQuantity.Value, YottatonnesTolerance);
            Assert.Equal(MassUnit.Yottatonne, yottatonneQuantity.Unit);

            var zettagramQuantity = kilogram.ToUnit(MassUnit.Zettagram);
            AssertEx.EqualTolerance(ZettagramsInOneKilogram, (double)zettagramQuantity.Value, ZettagramsTolerance);
            Assert.Equal(MassUnit.Zettagram, zettagramQuantity.Unit);

            var zettatonneQuantity = kilogram.ToUnit(MassUnit.Zettatonne);
            AssertEx.EqualTolerance(ZettatonnesInOneKilogram, (double)zettatonneQuantity.Value, ZettatonnesTolerance);
            Assert.Equal(MassUnit.Zettatonne, zettatonneQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Mass kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(1, Mass.FromCentigrams(kilogram.Centigrams).Kilograms, CentigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromDecagrams(kilogram.Decagrams).Kilograms, DecagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromDecigrams(kilogram.Decigrams).Kilograms, DecigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromExagrams(kilogram.Exagrams).Kilograms, ExagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromExatonnes(kilogram.Exatonnes).Kilograms, ExatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromFemtograms(kilogram.Femtograms).Kilograms, FemtogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGigagrams(kilogram.Gigagrams).Kilograms, GigagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGigatonnes(kilogram.Gigatonnes).Kilograms, GigatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGrains(kilogram.Grains).Kilograms, GrainsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGrams(kilogram.Grams).Kilograms, GramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromHectograms(kilogram.Hectograms).Kilograms, HectogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilograms(kilogram.Kilograms).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilopounds(kilogram.Kilopounds).Kilograms, KilopoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilotonnes(kilogram.Kilotonnes).Kilograms, KilotonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromLongHundredweight(kilogram.LongHundredweight).Kilograms, LongHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.FromLongTons(kilogram.LongTons).Kilograms, LongTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegagrams(kilogram.Megagrams).Kilograms, MegagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegapounds(kilogram.Megapounds).Kilograms, MegapoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegatonnes(kilogram.Megatonnes).Kilograms, MegatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMicrograms(kilogram.Micrograms).Kilograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMilligrams(kilogram.Milligrams).Kilograms, MilligramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromNanograms(kilogram.Nanograms).Kilograms, NanogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromOunces(kilogram.Ounces).Kilograms, OuncesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPetagrams(kilogram.Petagrams).Kilograms, PetagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPetatonnes(kilogram.Petatonnes).Kilograms, PetatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPicograms(kilogram.Picograms).Kilograms, PicogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPounds(kilogram.Pounds).Kilograms, PoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromQutragrams(kilogram.Qutragrams).Kilograms, QutragramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromQutratonnes(kilogram.Qutratonnes).Kilograms, QutratonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromShortHundredweight(kilogram.ShortHundredweight).Kilograms, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.FromShortTons(kilogram.ShortTons).Kilograms, ShortTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromSlugs(kilogram.Slugs).Kilograms, SlugsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromStone(kilogram.Stone).Kilograms, StoneTolerance);
            AssertEx.EqualTolerance(1, Mass.FromTeragrams(kilogram.Teragrams).Kilograms, TeragramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromTeratonnes(kilogram.Teratonnes).Kilograms, TeratonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromTonnes(kilogram.Tonnes).Kilograms, TonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromVettagrams(kilogram.Vettagrams).Kilograms, VettagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromVettatonnes(kilogram.Vettatonnes).Kilograms, VettatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromYottagrams(kilogram.Yottagrams).Kilograms, YottagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromYottatonnes(kilogram.Yottatonnes).Kilograms, YottatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromZettagrams(kilogram.Zettagrams).Kilograms, ZettagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromZettatonnes(kilogram.Zettatonnes).Kilograms, ZettatonnesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Mass v = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(-1, -v.Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (Mass.FromKilograms(3)-v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (Mass.FromKilograms(10)/5).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, Mass.FromKilograms(10)/Mass.FromKilograms(5), KilogramsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Mass oneKilogram = Mass.FromKilograms(1);
            Mass twoKilograms = Mass.FromKilograms(2);

            Assert.True(oneKilogram < twoKilograms);
            Assert.True(oneKilogram <= twoKilograms);
            Assert.True(twoKilograms > oneKilogram);
            Assert.True(twoKilograms >= oneKilogram);

            Assert.False(oneKilogram > twoKilograms);
            Assert.False(oneKilogram >= twoKilograms);
            Assert.False(twoKilograms < oneKilogram);
            Assert.False(twoKilograms <= oneKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Equal(0, kilogram.CompareTo(kilogram));
            Assert.True(kilogram.CompareTo(Mass.Zero) > 0);
            Assert.True(Mass.Zero.CompareTo(kilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Throws<ArgumentException>(() => kilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Throws<ArgumentNullException>(() => kilogram.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Mass.FromKilograms(1);
            var b = Mass.FromKilograms(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Mass.FromKilograms(1);
            var b = Mass.FromKilograms(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Mass.FromKilograms(1);
            Assert.True(v.Equals(Mass.FromKilograms(1), KilogramsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Mass.Zero, KilogramsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.False(kilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.False(kilogram.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MassUnit.Undefined, Mass.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MassUnit)).Cast<MassUnit>();
            foreach(var unit in units)
            {
                if(unit == MassUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Mass.BaseDimensions is null);
        }
    }
}
