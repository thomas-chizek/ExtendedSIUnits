//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ForceChangeRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ForceChangeRateTestsBase
    {
        protected abstract double CentinewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double CentinewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double DecanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double DecanewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double DecinewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double DecinewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double ExanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double ExanewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double FemtonewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double FemtonewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double GiganewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double GiganewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double HectonewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double HectonewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double KilonewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double KilonewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double MeganewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double MeganewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double MicronewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double MicronewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double MillinewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double MillinewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double NanonewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double NanonewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double NewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double NewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double PetanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double PetanewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double PiconewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double PiconewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double QutranewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double QutranewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double TeranewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double TeranewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double VettanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double VettanewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double YottanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double YottanewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double ZettanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double ZettanewtonsPerSecondInOneNewtonPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CentinewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double ExanewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FemtonewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double FemtonewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GiganewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double GiganewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectonewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double HectonewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PetanewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PiconewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PiconewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double QutranewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double QutranewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TeranewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double TeranewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double VettanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double VettanewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YottanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double YottanewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ZettanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double ZettanewtonsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ForceChangeRate((double)0.0, ForceChangeRateUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ForceChangeRate(double.PositiveInfinity, ForceChangeRateUnit.NewtonPerSecond));
            Assert.Throws<ArgumentException>(() => new ForceChangeRate(double.NegativeInfinity, ForceChangeRateUnit.NewtonPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new ForceChangeRate(double.NaN, ForceChangeRateUnit.NewtonPerSecond));
        }

        [Fact]
        public void NewtonPerSecondToForceChangeRateUnits()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(CentinewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.CentinewtonsPerMinute, CentinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(CentinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.CentinewtonsPerSecond, CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.DecanewtonsPerMinute, DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.DecanewtonsPerSecond, DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.DecinewtonsPerMinute, DecinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.DecinewtonsPerSecond, DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(ExanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.ExanewtonsPerMinute, ExanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(ExanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.ExanewtonsPerSecond, ExanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(FemtonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.FemtonewtonsPerMinute, FemtonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(FemtonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.FemtonewtonsPerSecond, FemtonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(GiganewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.GiganewtonsPerMinute, GiganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(GiganewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.GiganewtonsPerSecond, GiganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(HectonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.HectonewtonsPerMinute, HectonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(HectonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.HectonewtonsPerSecond, HectonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.KilonewtonsPerMinute, KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.KilonewtonsPerSecond, KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.MeganewtonsPerMinute, MeganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.MeganewtonsPerSecond, MeganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.MicronewtonsPerMinute, MicronewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.MicronewtonsPerSecond, MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.MillinewtonsPerMinute, MillinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.MillinewtonsPerSecond, MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.NanonewtonsPerMinute, NanonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.NanonewtonsPerSecond, NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.NewtonsPerMinute, NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(NewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(PetanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.PetanewtonsPerMinute, PetanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(PetanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.PetanewtonsPerSecond, PetanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(PiconewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.PiconewtonsPerMinute, PiconewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(PiconewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.PiconewtonsPerSecond, PiconewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(QutranewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.QutranewtonsPerMinute, QutranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(QutranewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.QutranewtonsPerSecond, QutranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(TeranewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.TeranewtonsPerMinute, TeranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(TeranewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.TeranewtonsPerSecond, TeranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(VettanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.VettanewtonsPerMinute, VettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(VettanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.VettanewtonsPerSecond, VettanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(YottanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.YottanewtonsPerMinute, YottanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(YottanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.YottanewtonsPerSecond, YottanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(ZettanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.ZettanewtonsPerMinute, ZettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(ZettanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.ZettanewtonsPerSecond, ZettanewtonsPerSecondTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.CentinewtonPerMinute).CentinewtonsPerMinute, CentinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.CentinewtonPerSecond).CentinewtonsPerSecond, CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.DecanewtonPerMinute).DecanewtonsPerMinute, DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.DecanewtonPerSecond).DecanewtonsPerSecond, DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.DecinewtonPerMinute).DecinewtonsPerMinute, DecinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.DecinewtonPerSecond).DecinewtonsPerSecond, DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.ExanewtonPerMinute).ExanewtonsPerMinute, ExanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.ExanewtonPerSecond).ExanewtonsPerSecond, ExanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.FemtonewtonPerMinute).FemtonewtonsPerMinute, FemtonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.FemtonewtonPerSecond).FemtonewtonsPerSecond, FemtonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.GiganewtonPerMinute).GiganewtonsPerMinute, GiganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.GiganewtonPerSecond).GiganewtonsPerSecond, GiganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.HectonewtonPerMinute).HectonewtonsPerMinute, HectonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.HectonewtonPerSecond).HectonewtonsPerSecond, HectonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.KilonewtonPerMinute).KilonewtonsPerMinute, KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.KilonewtonPerSecond).KilonewtonsPerSecond, KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.MeganewtonPerMinute).MeganewtonsPerMinute, MeganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.MeganewtonPerSecond).MeganewtonsPerSecond, MeganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.MicronewtonPerMinute).MicronewtonsPerMinute, MicronewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.MicronewtonPerSecond).MicronewtonsPerSecond, MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.MillinewtonPerMinute).MillinewtonsPerMinute, MillinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.MillinewtonPerSecond).MillinewtonsPerSecond, MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.NanonewtonPerMinute).NanonewtonsPerMinute, NanonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.NanonewtonPerSecond).NanonewtonsPerSecond, NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.NewtonPerMinute).NewtonsPerMinute, NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.NewtonPerSecond).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.PetanewtonPerMinute).PetanewtonsPerMinute, PetanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.PetanewtonPerSecond).PetanewtonsPerSecond, PetanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.PiconewtonPerMinute).PiconewtonsPerMinute, PiconewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.PiconewtonPerSecond).PiconewtonsPerSecond, PiconewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.QutranewtonPerMinute).QutranewtonsPerMinute, QutranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.QutranewtonPerSecond).QutranewtonsPerSecond, QutranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.TeranewtonPerMinute).TeranewtonsPerMinute, TeranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.TeranewtonPerSecond).TeranewtonsPerSecond, TeranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.VettanewtonPerMinute).VettanewtonsPerMinute, VettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.VettanewtonPerSecond).VettanewtonsPerSecond, VettanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.YottanewtonPerMinute).YottanewtonsPerMinute, YottanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.YottanewtonPerSecond).YottanewtonsPerSecond, YottanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.ZettanewtonPerMinute).ZettanewtonsPerMinute, ZettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.From(1, ForceChangeRateUnit.ZettanewtonPerSecond).ZettanewtonsPerSecond, ZettanewtonsPerSecondTolerance);
        }

        [Fact]
        public void FromNewtonsPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ForceChangeRate.FromNewtonsPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => ForceChangeRate.FromNewtonsPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonsPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => ForceChangeRate.FromNewtonsPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(CentinewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.CentinewtonPerMinute), CentinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(CentinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.CentinewtonPerSecond), CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecanewtonPerMinute), DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecanewtonPerSecond), DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecinewtonPerMinute), DecinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecinewtonPerSecond), DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(ExanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.ExanewtonPerMinute), ExanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(ExanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.ExanewtonPerSecond), ExanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(FemtonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.FemtonewtonPerMinute), FemtonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(FemtonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.FemtonewtonPerSecond), FemtonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(GiganewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.GiganewtonPerMinute), GiganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(GiganewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.GiganewtonPerSecond), GiganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(HectonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.HectonewtonPerMinute), HectonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(HectonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.HectonewtonPerSecond), HectonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.KilonewtonPerMinute), KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.KilonewtonPerSecond), KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MeganewtonPerMinute), MeganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MeganewtonPerSecond), MeganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MicronewtonPerMinute), MicronewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MicronewtonPerSecond), MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MillinewtonPerMinute), MillinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MillinewtonPerSecond), MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NanonewtonPerMinute), NanonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NanonewtonPerSecond), NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NewtonPerMinute), NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(NewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NewtonPerSecond), NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(PetanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.PetanewtonPerMinute), PetanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(PetanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.PetanewtonPerSecond), PetanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(PiconewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.PiconewtonPerMinute), PiconewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(PiconewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.PiconewtonPerSecond), PiconewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(QutranewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.QutranewtonPerMinute), QutranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(QutranewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.QutranewtonPerSecond), QutranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(TeranewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.TeranewtonPerMinute), TeranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(TeranewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.TeranewtonPerSecond), TeranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(VettanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.VettanewtonPerMinute), VettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(VettanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.VettanewtonPerSecond), VettanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(YottanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.YottanewtonPerMinute), YottanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(YottanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.YottanewtonPerSecond), YottanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(ZettanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.ZettanewtonPerMinute), ZettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(ZettanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.ZettanewtonPerSecond), ZettanewtonsPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);

            var centinewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.CentinewtonPerMinute);
            AssertEx.EqualTolerance(CentinewtonsPerMinuteInOneNewtonPerSecond, (double)centinewtonperminuteQuantity.Value, CentinewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.CentinewtonPerMinute, centinewtonperminuteQuantity.Unit);

            var centinewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.CentinewtonPerSecond);
            AssertEx.EqualTolerance(CentinewtonsPerSecondInOneNewtonPerSecond, (double)centinewtonpersecondQuantity.Value, CentinewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.CentinewtonPerSecond, centinewtonpersecondQuantity.Unit);

            var decanewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.DecanewtonPerMinute);
            AssertEx.EqualTolerance(DecanewtonsPerMinuteInOneNewtonPerSecond, (double)decanewtonperminuteQuantity.Value, DecanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.DecanewtonPerMinute, decanewtonperminuteQuantity.Unit);

            var decanewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.DecanewtonPerSecond);
            AssertEx.EqualTolerance(DecanewtonsPerSecondInOneNewtonPerSecond, (double)decanewtonpersecondQuantity.Value, DecanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.DecanewtonPerSecond, decanewtonpersecondQuantity.Unit);

            var decinewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.DecinewtonPerMinute);
            AssertEx.EqualTolerance(DecinewtonsPerMinuteInOneNewtonPerSecond, (double)decinewtonperminuteQuantity.Value, DecinewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.DecinewtonPerMinute, decinewtonperminuteQuantity.Unit);

            var decinewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.DecinewtonPerSecond);
            AssertEx.EqualTolerance(DecinewtonsPerSecondInOneNewtonPerSecond, (double)decinewtonpersecondQuantity.Value, DecinewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.DecinewtonPerSecond, decinewtonpersecondQuantity.Unit);

            var exanewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.ExanewtonPerMinute);
            AssertEx.EqualTolerance(ExanewtonsPerMinuteInOneNewtonPerSecond, (double)exanewtonperminuteQuantity.Value, ExanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.ExanewtonPerMinute, exanewtonperminuteQuantity.Unit);

            var exanewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.ExanewtonPerSecond);
            AssertEx.EqualTolerance(ExanewtonsPerSecondInOneNewtonPerSecond, (double)exanewtonpersecondQuantity.Value, ExanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.ExanewtonPerSecond, exanewtonpersecondQuantity.Unit);

            var femtonewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.FemtonewtonPerMinute);
            AssertEx.EqualTolerance(FemtonewtonsPerMinuteInOneNewtonPerSecond, (double)femtonewtonperminuteQuantity.Value, FemtonewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.FemtonewtonPerMinute, femtonewtonperminuteQuantity.Unit);

            var femtonewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.FemtonewtonPerSecond);
            AssertEx.EqualTolerance(FemtonewtonsPerSecondInOneNewtonPerSecond, (double)femtonewtonpersecondQuantity.Value, FemtonewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.FemtonewtonPerSecond, femtonewtonpersecondQuantity.Unit);

            var giganewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.GiganewtonPerMinute);
            AssertEx.EqualTolerance(GiganewtonsPerMinuteInOneNewtonPerSecond, (double)giganewtonperminuteQuantity.Value, GiganewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.GiganewtonPerMinute, giganewtonperminuteQuantity.Unit);

            var giganewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.GiganewtonPerSecond);
            AssertEx.EqualTolerance(GiganewtonsPerSecondInOneNewtonPerSecond, (double)giganewtonpersecondQuantity.Value, GiganewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.GiganewtonPerSecond, giganewtonpersecondQuantity.Unit);

            var hectonewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.HectonewtonPerMinute);
            AssertEx.EqualTolerance(HectonewtonsPerMinuteInOneNewtonPerSecond, (double)hectonewtonperminuteQuantity.Value, HectonewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.HectonewtonPerMinute, hectonewtonperminuteQuantity.Unit);

            var hectonewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.HectonewtonPerSecond);
            AssertEx.EqualTolerance(HectonewtonsPerSecondInOneNewtonPerSecond, (double)hectonewtonpersecondQuantity.Value, HectonewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.HectonewtonPerSecond, hectonewtonpersecondQuantity.Unit);

            var kilonewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.KilonewtonPerMinute);
            AssertEx.EqualTolerance(KilonewtonsPerMinuteInOneNewtonPerSecond, (double)kilonewtonperminuteQuantity.Value, KilonewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.KilonewtonPerMinute, kilonewtonperminuteQuantity.Unit);

            var kilonewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.KilonewtonPerSecond);
            AssertEx.EqualTolerance(KilonewtonsPerSecondInOneNewtonPerSecond, (double)kilonewtonpersecondQuantity.Value, KilonewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.KilonewtonPerSecond, kilonewtonpersecondQuantity.Unit);

            var meganewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.MeganewtonPerMinute);
            AssertEx.EqualTolerance(MeganewtonsPerMinuteInOneNewtonPerSecond, (double)meganewtonperminuteQuantity.Value, MeganewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.MeganewtonPerMinute, meganewtonperminuteQuantity.Unit);

            var meganewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.MeganewtonPerSecond);
            AssertEx.EqualTolerance(MeganewtonsPerSecondInOneNewtonPerSecond, (double)meganewtonpersecondQuantity.Value, MeganewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.MeganewtonPerSecond, meganewtonpersecondQuantity.Unit);

            var micronewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.MicronewtonPerMinute);
            AssertEx.EqualTolerance(MicronewtonsPerMinuteInOneNewtonPerSecond, (double)micronewtonperminuteQuantity.Value, MicronewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.MicronewtonPerMinute, micronewtonperminuteQuantity.Unit);

            var micronewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.MicronewtonPerSecond);
            AssertEx.EqualTolerance(MicronewtonsPerSecondInOneNewtonPerSecond, (double)micronewtonpersecondQuantity.Value, MicronewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.MicronewtonPerSecond, micronewtonpersecondQuantity.Unit);

            var millinewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.MillinewtonPerMinute);
            AssertEx.EqualTolerance(MillinewtonsPerMinuteInOneNewtonPerSecond, (double)millinewtonperminuteQuantity.Value, MillinewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.MillinewtonPerMinute, millinewtonperminuteQuantity.Unit);

            var millinewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.MillinewtonPerSecond);
            AssertEx.EqualTolerance(MillinewtonsPerSecondInOneNewtonPerSecond, (double)millinewtonpersecondQuantity.Value, MillinewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.MillinewtonPerSecond, millinewtonpersecondQuantity.Unit);

            var nanonewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.NanonewtonPerMinute);
            AssertEx.EqualTolerance(NanonewtonsPerMinuteInOneNewtonPerSecond, (double)nanonewtonperminuteQuantity.Value, NanonewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.NanonewtonPerMinute, nanonewtonperminuteQuantity.Unit);

            var nanonewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.NanonewtonPerSecond);
            AssertEx.EqualTolerance(NanonewtonsPerSecondInOneNewtonPerSecond, (double)nanonewtonpersecondQuantity.Value, NanonewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.NanonewtonPerSecond, nanonewtonpersecondQuantity.Unit);

            var newtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.NewtonPerMinute);
            AssertEx.EqualTolerance(NewtonsPerMinuteInOneNewtonPerSecond, (double)newtonperminuteQuantity.Value, NewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.NewtonPerMinute, newtonperminuteQuantity.Unit);

            var newtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.NewtonPerSecond);
            AssertEx.EqualTolerance(NewtonsPerSecondInOneNewtonPerSecond, (double)newtonpersecondQuantity.Value, NewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.NewtonPerSecond, newtonpersecondQuantity.Unit);

            var petanewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.PetanewtonPerMinute);
            AssertEx.EqualTolerance(PetanewtonsPerMinuteInOneNewtonPerSecond, (double)petanewtonperminuteQuantity.Value, PetanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.PetanewtonPerMinute, petanewtonperminuteQuantity.Unit);

            var petanewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.PetanewtonPerSecond);
            AssertEx.EqualTolerance(PetanewtonsPerSecondInOneNewtonPerSecond, (double)petanewtonpersecondQuantity.Value, PetanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.PetanewtonPerSecond, petanewtonpersecondQuantity.Unit);

            var piconewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.PiconewtonPerMinute);
            AssertEx.EqualTolerance(PiconewtonsPerMinuteInOneNewtonPerSecond, (double)piconewtonperminuteQuantity.Value, PiconewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.PiconewtonPerMinute, piconewtonperminuteQuantity.Unit);

            var piconewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.PiconewtonPerSecond);
            AssertEx.EqualTolerance(PiconewtonsPerSecondInOneNewtonPerSecond, (double)piconewtonpersecondQuantity.Value, PiconewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.PiconewtonPerSecond, piconewtonpersecondQuantity.Unit);

            var qutranewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.QutranewtonPerMinute);
            AssertEx.EqualTolerance(QutranewtonsPerMinuteInOneNewtonPerSecond, (double)qutranewtonperminuteQuantity.Value, QutranewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.QutranewtonPerMinute, qutranewtonperminuteQuantity.Unit);

            var qutranewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.QutranewtonPerSecond);
            AssertEx.EqualTolerance(QutranewtonsPerSecondInOneNewtonPerSecond, (double)qutranewtonpersecondQuantity.Value, QutranewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.QutranewtonPerSecond, qutranewtonpersecondQuantity.Unit);

            var teranewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.TeranewtonPerMinute);
            AssertEx.EqualTolerance(TeranewtonsPerMinuteInOneNewtonPerSecond, (double)teranewtonperminuteQuantity.Value, TeranewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.TeranewtonPerMinute, teranewtonperminuteQuantity.Unit);

            var teranewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.TeranewtonPerSecond);
            AssertEx.EqualTolerance(TeranewtonsPerSecondInOneNewtonPerSecond, (double)teranewtonpersecondQuantity.Value, TeranewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.TeranewtonPerSecond, teranewtonpersecondQuantity.Unit);

            var vettanewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.VettanewtonPerMinute);
            AssertEx.EqualTolerance(VettanewtonsPerMinuteInOneNewtonPerSecond, (double)vettanewtonperminuteQuantity.Value, VettanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.VettanewtonPerMinute, vettanewtonperminuteQuantity.Unit);

            var vettanewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.VettanewtonPerSecond);
            AssertEx.EqualTolerance(VettanewtonsPerSecondInOneNewtonPerSecond, (double)vettanewtonpersecondQuantity.Value, VettanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.VettanewtonPerSecond, vettanewtonpersecondQuantity.Unit);

            var yottanewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.YottanewtonPerMinute);
            AssertEx.EqualTolerance(YottanewtonsPerMinuteInOneNewtonPerSecond, (double)yottanewtonperminuteQuantity.Value, YottanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.YottanewtonPerMinute, yottanewtonperminuteQuantity.Unit);

            var yottanewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.YottanewtonPerSecond);
            AssertEx.EqualTolerance(YottanewtonsPerSecondInOneNewtonPerSecond, (double)yottanewtonpersecondQuantity.Value, YottanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.YottanewtonPerSecond, yottanewtonpersecondQuantity.Unit);

            var zettanewtonperminuteQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.ZettanewtonPerMinute);
            AssertEx.EqualTolerance(ZettanewtonsPerMinuteInOneNewtonPerSecond, (double)zettanewtonperminuteQuantity.Value, ZettanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.ZettanewtonPerMinute, zettanewtonperminuteQuantity.Unit);

            var zettanewtonpersecondQuantity = newtonpersecond.ToUnit(ForceChangeRateUnit.ZettanewtonPerSecond);
            AssertEx.EqualTolerance(ZettanewtonsPerSecondInOneNewtonPerSecond, (double)zettanewtonpersecondQuantity.Value, ZettanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.ZettanewtonPerSecond, zettanewtonpersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromCentinewtonsPerMinute(newtonpersecond.CentinewtonsPerMinute).NewtonsPerSecond, CentinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromCentinewtonsPerSecond(newtonpersecond.CentinewtonsPerSecond).NewtonsPerSecond, CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecanewtonsPerMinute(newtonpersecond.DecanewtonsPerMinute).NewtonsPerSecond, DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecanewtonsPerSecond(newtonpersecond.DecanewtonsPerSecond).NewtonsPerSecond, DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecinewtonsPerMinute(newtonpersecond.DecinewtonsPerMinute).NewtonsPerSecond, DecinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecinewtonsPerSecond(newtonpersecond.DecinewtonsPerSecond).NewtonsPerSecond, DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromExanewtonsPerMinute(newtonpersecond.ExanewtonsPerMinute).NewtonsPerSecond, ExanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromExanewtonsPerSecond(newtonpersecond.ExanewtonsPerSecond).NewtonsPerSecond, ExanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromFemtonewtonsPerMinute(newtonpersecond.FemtonewtonsPerMinute).NewtonsPerSecond, FemtonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromFemtonewtonsPerSecond(newtonpersecond.FemtonewtonsPerSecond).NewtonsPerSecond, FemtonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromGiganewtonsPerMinute(newtonpersecond.GiganewtonsPerMinute).NewtonsPerSecond, GiganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromGiganewtonsPerSecond(newtonpersecond.GiganewtonsPerSecond).NewtonsPerSecond, GiganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromHectonewtonsPerMinute(newtonpersecond.HectonewtonsPerMinute).NewtonsPerSecond, HectonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromHectonewtonsPerSecond(newtonpersecond.HectonewtonsPerSecond).NewtonsPerSecond, HectonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromKilonewtonsPerMinute(newtonpersecond.KilonewtonsPerMinute).NewtonsPerSecond, KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromKilonewtonsPerSecond(newtonpersecond.KilonewtonsPerSecond).NewtonsPerSecond, KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMeganewtonsPerMinute(newtonpersecond.MeganewtonsPerMinute).NewtonsPerSecond, MeganewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMeganewtonsPerSecond(newtonpersecond.MeganewtonsPerSecond).NewtonsPerSecond, MeganewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMicronewtonsPerMinute(newtonpersecond.MicronewtonsPerMinute).NewtonsPerSecond, MicronewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMicronewtonsPerSecond(newtonpersecond.MicronewtonsPerSecond).NewtonsPerSecond, MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMillinewtonsPerMinute(newtonpersecond.MillinewtonsPerMinute).NewtonsPerSecond, MillinewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMillinewtonsPerSecond(newtonpersecond.MillinewtonsPerSecond).NewtonsPerSecond, MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNanonewtonsPerMinute(newtonpersecond.NanonewtonsPerMinute).NewtonsPerSecond, NanonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNanonewtonsPerSecond(newtonpersecond.NanonewtonsPerSecond).NewtonsPerSecond, NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNewtonsPerMinute(newtonpersecond.NewtonsPerMinute).NewtonsPerSecond, NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNewtonsPerSecond(newtonpersecond.NewtonsPerSecond).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromPetanewtonsPerMinute(newtonpersecond.PetanewtonsPerMinute).NewtonsPerSecond, PetanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromPetanewtonsPerSecond(newtonpersecond.PetanewtonsPerSecond).NewtonsPerSecond, PetanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromPiconewtonsPerMinute(newtonpersecond.PiconewtonsPerMinute).NewtonsPerSecond, PiconewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromPiconewtonsPerSecond(newtonpersecond.PiconewtonsPerSecond).NewtonsPerSecond, PiconewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromQutranewtonsPerMinute(newtonpersecond.QutranewtonsPerMinute).NewtonsPerSecond, QutranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromQutranewtonsPerSecond(newtonpersecond.QutranewtonsPerSecond).NewtonsPerSecond, QutranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromTeranewtonsPerMinute(newtonpersecond.TeranewtonsPerMinute).NewtonsPerSecond, TeranewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromTeranewtonsPerSecond(newtonpersecond.TeranewtonsPerSecond).NewtonsPerSecond, TeranewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromVettanewtonsPerMinute(newtonpersecond.VettanewtonsPerMinute).NewtonsPerSecond, VettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromVettanewtonsPerSecond(newtonpersecond.VettanewtonsPerSecond).NewtonsPerSecond, VettanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromYottanewtonsPerMinute(newtonpersecond.YottanewtonsPerMinute).NewtonsPerSecond, YottanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromYottanewtonsPerSecond(newtonpersecond.YottanewtonsPerSecond).NewtonsPerSecond, YottanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromZettanewtonsPerMinute(newtonpersecond.ZettanewtonsPerMinute).NewtonsPerSecond, ZettanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromZettanewtonsPerSecond(newtonpersecond.ZettanewtonsPerSecond).NewtonsPerSecond, ZettanewtonsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ForceChangeRate v = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (ForceChangeRate.FromNewtonsPerSecond(3)-v).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (ForceChangeRate.FromNewtonsPerSecond(10)/5).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, ForceChangeRate.FromNewtonsPerSecond(10)/ForceChangeRate.FromNewtonsPerSecond(5), NewtonsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ForceChangeRate oneNewtonPerSecond = ForceChangeRate.FromNewtonsPerSecond(1);
            ForceChangeRate twoNewtonsPerSecond = ForceChangeRate.FromNewtonsPerSecond(2);

            Assert.True(oneNewtonPerSecond < twoNewtonsPerSecond);
            Assert.True(oneNewtonPerSecond <= twoNewtonsPerSecond);
            Assert.True(twoNewtonsPerSecond > oneNewtonPerSecond);
            Assert.True(twoNewtonsPerSecond >= oneNewtonPerSecond);

            Assert.False(oneNewtonPerSecond > twoNewtonsPerSecond);
            Assert.False(oneNewtonPerSecond >= twoNewtonsPerSecond);
            Assert.False(twoNewtonsPerSecond < oneNewtonPerSecond);
            Assert.False(twoNewtonsPerSecond <= oneNewtonPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Equal(0, newtonpersecond.CompareTo(newtonpersecond));
            Assert.True(newtonpersecond.CompareTo(ForceChangeRate.Zero) > 0);
            Assert.True(ForceChangeRate.Zero.CompareTo(newtonpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Throws<ArgumentException>(() => newtonpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => newtonpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = ForceChangeRate.FromNewtonsPerSecond(1);
            var b = ForceChangeRate.FromNewtonsPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = ForceChangeRate.FromNewtonsPerSecond(1);
            var b = ForceChangeRate.FromNewtonsPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.True(v.Equals(ForceChangeRate.FromNewtonsPerSecond(1), NewtonsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ForceChangeRate.Zero, NewtonsPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.False(newtonpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.False(newtonpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(ForceChangeRateUnit.Undefined, ForceChangeRate.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ForceChangeRateUnit)).Cast<ForceChangeRateUnit>();
            foreach(var unit in units)
            {
                if(unit == ForceChangeRateUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ForceChangeRate.BaseDimensions is null);
        }
    }
}
