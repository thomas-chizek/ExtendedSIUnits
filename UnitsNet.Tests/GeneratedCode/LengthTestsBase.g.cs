//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Length.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LengthTestsBase
    {
        protected abstract double AttometersInOneMeter { get; }
        protected abstract double CentimetersInOneMeter { get; }
        protected abstract double DecalightSecondsInOneMeter { get; }
        protected abstract double DecalightYearsInOneMeter { get; }
        protected abstract double DecametersInOneMeter { get; }
        protected abstract double DecimetersInOneMeter { get; }
        protected abstract double DtpPicasInOneMeter { get; }
        protected abstract double DtpPointsInOneMeter { get; }
        protected abstract double ExalightSecondsInOneMeter { get; }
        protected abstract double ExalightYearsInOneMeter { get; }
        protected abstract double ExametersInOneMeter { get; }
        protected abstract double FathomsInOneMeter { get; }
        protected abstract double FemtometersInOneMeter { get; }
        protected abstract double FeetInOneMeter { get; }
        protected abstract double GigalightSecondsInOneMeter { get; }
        protected abstract double GigalightYearsInOneMeter { get; }
        protected abstract double GigametersInOneMeter { get; }
        protected abstract double HandsInOneMeter { get; }
        protected abstract double HectometersInOneMeter { get; }
        protected abstract double InchesInOneMeter { get; }
        protected abstract double KilolightSecondsInOneMeter { get; }
        protected abstract double KilolightYearsInOneMeter { get; }
        protected abstract double KilometersInOneMeter { get; }
        protected abstract double LightSecondsInOneMeter { get; }
        protected abstract double LightYearsInOneMeter { get; }
        protected abstract double MegalightSecondsInOneMeter { get; }
        protected abstract double MegalightYearsInOneMeter { get; }
        protected abstract double MegametersInOneMeter { get; }
        protected abstract double MetersInOneMeter { get; }
        protected abstract double MicroinchesInOneMeter { get; }
        protected abstract double MicrolightSecondsInOneMeter { get; }
        protected abstract double MicrolightYearsInOneMeter { get; }
        protected abstract double MicrometersInOneMeter { get; }
        protected abstract double MilsInOneMeter { get; }
        protected abstract double MilesInOneMeter { get; }
        protected abstract double MillilightSecondsInOneMeter { get; }
        protected abstract double MillilightYearsInOneMeter { get; }
        protected abstract double MillimetersInOneMeter { get; }
        protected abstract double NanometersInOneMeter { get; }
        protected abstract double NauticalMilesInOneMeter { get; }
        protected abstract double PetalightSecondsInOneMeter { get; }
        protected abstract double PetalightYearsInOneMeter { get; }
        protected abstract double PetametersInOneMeter { get; }
        protected abstract double PicometersInOneMeter { get; }
        protected abstract double PrinterPicasInOneMeter { get; }
        protected abstract double PrinterPointsInOneMeter { get; }
        protected abstract double QutrametersInOneMeter { get; }
        protected abstract double ShacklesInOneMeter { get; }
        protected abstract double TeralightSecondsInOneMeter { get; }
        protected abstract double TeralightYearsInOneMeter { get; }
        protected abstract double TerametersInOneMeter { get; }
        protected abstract double TwipsInOneMeter { get; }
        protected abstract double UsSurveyFeetInOneMeter { get; }
        protected abstract double VettametersInOneMeter { get; }
        protected abstract double YardsInOneMeter { get; }
        protected abstract double YoctometersInOneMeter { get; }
        protected abstract double YottalightSecondsInOneMeter { get; }
        protected abstract double YottalightYearsInOneMeter { get; }
        protected abstract double YottametersInOneMeter { get; }
        protected abstract double ZeptometersInOneMeter { get; }
        protected abstract double ZettalightSecondsInOneMeter { get; }
        protected abstract double ZettalightYearsInOneMeter { get; }
        protected abstract double ZettametersInOneMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AttometersTolerance { get { return 1e-5; } }
        protected virtual double CentimetersTolerance { get { return 1e-5; } }
        protected virtual double DecalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double DecalightYearsTolerance { get { return 1e-5; } }
        protected virtual double DecametersTolerance { get { return 1e-5; } }
        protected virtual double DecimetersTolerance { get { return 1e-5; } }
        protected virtual double DtpPicasTolerance { get { return 1e-5; } }
        protected virtual double DtpPointsTolerance { get { return 1e-5; } }
        protected virtual double ExalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double ExalightYearsTolerance { get { return 1e-5; } }
        protected virtual double ExametersTolerance { get { return 1e-5; } }
        protected virtual double FathomsTolerance { get { return 1e-5; } }
        protected virtual double FemtometersTolerance { get { return 1e-5; } }
        protected virtual double FeetTolerance { get { return 1e-5; } }
        protected virtual double GigalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double GigalightYearsTolerance { get { return 1e-5; } }
        protected virtual double GigametersTolerance { get { return 1e-5; } }
        protected virtual double HandsTolerance { get { return 1e-5; } }
        protected virtual double HectometersTolerance { get { return 1e-5; } }
        protected virtual double InchesTolerance { get { return 1e-5; } }
        protected virtual double KilolightSecondsTolerance { get { return 1e-5; } }
        protected virtual double KilolightYearsTolerance { get { return 1e-5; } }
        protected virtual double KilometersTolerance { get { return 1e-5; } }
        protected virtual double LightSecondsTolerance { get { return 1e-5; } }
        protected virtual double LightYearsTolerance { get { return 1e-5; } }
        protected virtual double MegalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double MegalightYearsTolerance { get { return 1e-5; } }
        protected virtual double MegametersTolerance { get { return 1e-5; } }
        protected virtual double MetersTolerance { get { return 1e-5; } }
        protected virtual double MicroinchesTolerance { get { return 1e-5; } }
        protected virtual double MicrolightSecondsTolerance { get { return 1e-5; } }
        protected virtual double MicrolightYearsTolerance { get { return 1e-5; } }
        protected virtual double MicrometersTolerance { get { return 1e-5; } }
        protected virtual double MilsTolerance { get { return 1e-5; } }
        protected virtual double MilesTolerance { get { return 1e-5; } }
        protected virtual double MillilightSecondsTolerance { get { return 1e-5; } }
        protected virtual double MillilightYearsTolerance { get { return 1e-5; } }
        protected virtual double MillimetersTolerance { get { return 1e-5; } }
        protected virtual double NanometersTolerance { get { return 1e-5; } }
        protected virtual double NauticalMilesTolerance { get { return 1e-5; } }
        protected virtual double PetalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double PetalightYearsTolerance { get { return 1e-5; } }
        protected virtual double PetametersTolerance { get { return 1e-5; } }
        protected virtual double PicometersTolerance { get { return 1e-5; } }
        protected virtual double PrinterPicasTolerance { get { return 1e-5; } }
        protected virtual double PrinterPointsTolerance { get { return 1e-5; } }
        protected virtual double QutrametersTolerance { get { return 1e-5; } }
        protected virtual double ShacklesTolerance { get { return 1e-5; } }
        protected virtual double TeralightSecondsTolerance { get { return 1e-5; } }
        protected virtual double TeralightYearsTolerance { get { return 1e-5; } }
        protected virtual double TerametersTolerance { get { return 1e-5; } }
        protected virtual double TwipsTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetTolerance { get { return 1e-5; } }
        protected virtual double VettametersTolerance { get { return 1e-5; } }
        protected virtual double YardsTolerance { get { return 1e-5; } }
        protected virtual double YoctometersTolerance { get { return 1e-5; } }
        protected virtual double YottalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double YottalightYearsTolerance { get { return 1e-5; } }
        protected virtual double YottametersTolerance { get { return 1e-5; } }
        protected virtual double ZeptometersTolerance { get { return 1e-5; } }
        protected virtual double ZettalightSecondsTolerance { get { return 1e-5; } }
        protected virtual double ZettalightYearsTolerance { get { return 1e-5; } }
        protected virtual double ZettametersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Length((double)0.0, LengthUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Length(double.PositiveInfinity, LengthUnit.Meter));
            Assert.Throws<ArgumentException>(() => new Length(double.NegativeInfinity, LengthUnit.Meter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Length(double.NaN, LengthUnit.Meter));
        }

        [Fact]
        public void MeterToLengthUnits()
        {
            Length meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(AttometersInOneMeter, meter.Attometers, AttometersTolerance);
            AssertEx.EqualTolerance(CentimetersInOneMeter, meter.Centimeters, CentimetersTolerance);
            AssertEx.EqualTolerance(DecalightSecondsInOneMeter, meter.DecalightSeconds, DecalightSecondsTolerance);
            AssertEx.EqualTolerance(DecalightYearsInOneMeter, meter.DecalightYears, DecalightYearsTolerance);
            AssertEx.EqualTolerance(DecametersInOneMeter, meter.Decameters, DecametersTolerance);
            AssertEx.EqualTolerance(DecimetersInOneMeter, meter.Decimeters, DecimetersTolerance);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, meter.DtpPicas, DtpPicasTolerance);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, meter.DtpPoints, DtpPointsTolerance);
            AssertEx.EqualTolerance(ExalightSecondsInOneMeter, meter.ExalightSeconds, ExalightSecondsTolerance);
            AssertEx.EqualTolerance(ExalightYearsInOneMeter, meter.ExalightYears, ExalightYearsTolerance);
            AssertEx.EqualTolerance(ExametersInOneMeter, meter.Exameters, ExametersTolerance);
            AssertEx.EqualTolerance(FathomsInOneMeter, meter.Fathoms, FathomsTolerance);
            AssertEx.EqualTolerance(FemtometersInOneMeter, meter.Femtometers, FemtometersTolerance);
            AssertEx.EqualTolerance(FeetInOneMeter, meter.Feet, FeetTolerance);
            AssertEx.EqualTolerance(GigalightSecondsInOneMeter, meter.GigalightSeconds, GigalightSecondsTolerance);
            AssertEx.EqualTolerance(GigalightYearsInOneMeter, meter.GigalightYears, GigalightYearsTolerance);
            AssertEx.EqualTolerance(GigametersInOneMeter, meter.Gigameters, GigametersTolerance);
            AssertEx.EqualTolerance(HandsInOneMeter, meter.Hands, HandsTolerance);
            AssertEx.EqualTolerance(HectometersInOneMeter, meter.Hectometers, HectometersTolerance);
            AssertEx.EqualTolerance(InchesInOneMeter, meter.Inches, InchesTolerance);
            AssertEx.EqualTolerance(KilolightSecondsInOneMeter, meter.KilolightSeconds, KilolightSecondsTolerance);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, meter.KilolightYears, KilolightYearsTolerance);
            AssertEx.EqualTolerance(KilometersInOneMeter, meter.Kilometers, KilometersTolerance);
            AssertEx.EqualTolerance(LightSecondsInOneMeter, meter.LightSeconds, LightSecondsTolerance);
            AssertEx.EqualTolerance(LightYearsInOneMeter, meter.LightYears, LightYearsTolerance);
            AssertEx.EqualTolerance(MegalightSecondsInOneMeter, meter.MegalightSeconds, MegalightSecondsTolerance);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, meter.MegalightYears, MegalightYearsTolerance);
            AssertEx.EqualTolerance(MegametersInOneMeter, meter.Megameters, MegametersTolerance);
            AssertEx.EqualTolerance(MetersInOneMeter, meter.Meters, MetersTolerance);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, meter.Microinches, MicroinchesTolerance);
            AssertEx.EqualTolerance(MicrolightSecondsInOneMeter, meter.MicrolightSeconds, MicrolightSecondsTolerance);
            AssertEx.EqualTolerance(MicrolightYearsInOneMeter, meter.MicrolightYears, MicrolightYearsTolerance);
            AssertEx.EqualTolerance(MicrometersInOneMeter, meter.Micrometers, MicrometersTolerance);
            AssertEx.EqualTolerance(MilsInOneMeter, meter.Mils, MilsTolerance);
            AssertEx.EqualTolerance(MilesInOneMeter, meter.Miles, MilesTolerance);
            AssertEx.EqualTolerance(MillilightSecondsInOneMeter, meter.MillilightSeconds, MillilightSecondsTolerance);
            AssertEx.EqualTolerance(MillilightYearsInOneMeter, meter.MillilightYears, MillilightYearsTolerance);
            AssertEx.EqualTolerance(MillimetersInOneMeter, meter.Millimeters, MillimetersTolerance);
            AssertEx.EqualTolerance(NanometersInOneMeter, meter.Nanometers, NanometersTolerance);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, meter.NauticalMiles, NauticalMilesTolerance);
            AssertEx.EqualTolerance(PetalightSecondsInOneMeter, meter.PetalightSeconds, PetalightSecondsTolerance);
            AssertEx.EqualTolerance(PetalightYearsInOneMeter, meter.PetalightYears, PetalightYearsTolerance);
            AssertEx.EqualTolerance(PetametersInOneMeter, meter.Petameters, PetametersTolerance);
            AssertEx.EqualTolerance(PicometersInOneMeter, meter.Picometers, PicometersTolerance);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, meter.PrinterPicas, PrinterPicasTolerance);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, meter.PrinterPoints, PrinterPointsTolerance);
            AssertEx.EqualTolerance(QutrametersInOneMeter, meter.Qutrameters, QutrametersTolerance);
            AssertEx.EqualTolerance(ShacklesInOneMeter, meter.Shackles, ShacklesTolerance);
            AssertEx.EqualTolerance(TeralightSecondsInOneMeter, meter.TeralightSeconds, TeralightSecondsTolerance);
            AssertEx.EqualTolerance(TeralightYearsInOneMeter, meter.TeralightYears, TeralightYearsTolerance);
            AssertEx.EqualTolerance(TerametersInOneMeter, meter.Terameters, TerametersTolerance);
            AssertEx.EqualTolerance(TwipsInOneMeter, meter.Twips, TwipsTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, meter.UsSurveyFeet, UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(VettametersInOneMeter, meter.Vettameters, VettametersTolerance);
            AssertEx.EqualTolerance(YardsInOneMeter, meter.Yards, YardsTolerance);
            AssertEx.EqualTolerance(YoctometersInOneMeter, meter.Yoctometers, YoctometersTolerance);
            AssertEx.EqualTolerance(YottalightSecondsInOneMeter, meter.YottalightSeconds, YottalightSecondsTolerance);
            AssertEx.EqualTolerance(YottalightYearsInOneMeter, meter.YottalightYears, YottalightYearsTolerance);
            AssertEx.EqualTolerance(YottametersInOneMeter, meter.Yottameters, YottametersTolerance);
            AssertEx.EqualTolerance(ZeptometersInOneMeter, meter.Zeptometers, ZeptometersTolerance);
            AssertEx.EqualTolerance(ZettalightSecondsInOneMeter, meter.ZettalightSeconds, ZettalightSecondsTolerance);
            AssertEx.EqualTolerance(ZettalightYearsInOneMeter, meter.ZettalightYears, ZettalightYearsTolerance);
            AssertEx.EqualTolerance(ZettametersInOneMeter, meter.Zettameters, ZettametersTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Attometer).Attometers, AttometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Centimeter).Centimeters, CentimetersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.DecalightSecond).DecalightSeconds, DecalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.DecalightYear).DecalightYears, DecalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Decameter).Decameters, DecametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Decimeter).Decimeters, DecimetersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.DtpPica).DtpPicas, DtpPicasTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.DtpPoint).DtpPoints, DtpPointsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.ExalightSecond).ExalightSeconds, ExalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.ExalightYear).ExalightYears, ExalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Exameter).Exameters, ExametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Fathom).Fathoms, FathomsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Femtometer).Femtometers, FemtometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Foot).Feet, FeetTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.GigalightSecond).GigalightSeconds, GigalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.GigalightYear).GigalightYears, GigalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Gigameter).Gigameters, GigametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Hand).Hands, HandsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Hectometer).Hectometers, HectometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Inch).Inches, InchesTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.KilolightSecond).KilolightSeconds, KilolightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.KilolightYear).KilolightYears, KilolightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Kilometer).Kilometers, KilometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.LightSecond).LightSeconds, LightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.LightYear).LightYears, LightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.MegalightSecond).MegalightSeconds, MegalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.MegalightYear).MegalightYears, MegalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Megameter).Megameters, MegametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Meter).Meters, MetersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Microinch).Microinches, MicroinchesTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.MicrolightSecond).MicrolightSeconds, MicrolightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.MicrolightYear).MicrolightYears, MicrolightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Micrometer).Micrometers, MicrometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Mil).Mils, MilsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Mile).Miles, MilesTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.MillilightSecond).MillilightSeconds, MillilightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.MillilightYear).MillilightYears, MillilightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Millimeter).Millimeters, MillimetersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Nanometer).Nanometers, NanometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.NauticalMile).NauticalMiles, NauticalMilesTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.PetalightSecond).PetalightSeconds, PetalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.PetalightYear).PetalightYears, PetalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Petameter).Petameters, PetametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Picometer).Picometers, PicometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.PrinterPica).PrinterPicas, PrinterPicasTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.PrinterPoint).PrinterPoints, PrinterPointsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Qutrameter).Qutrameters, QutrametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Shackle).Shackles, ShacklesTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.TeralightSecond).TeralightSeconds, TeralightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.TeralightYear).TeralightYears, TeralightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Terameter).Terameters, TerametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Twip).Twips, TwipsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.UsSurveyFoot).UsSurveyFeet, UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Vettameter).Vettameters, VettametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Yard).Yards, YardsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Yoctometer).Yoctometers, YoctometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.YottalightSecond).YottalightSeconds, YottalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.YottalightYear).YottalightYears, YottalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Yottameter).Yottameters, YottametersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Zeptometer).Zeptometers, ZeptometersTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.ZettalightSecond).ZettalightSeconds, ZettalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.ZettalightYear).ZettalightYears, ZettalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.From(1, LengthUnit.Zettameter).Zettameters, ZettametersTolerance);
        }

        [Fact]
        public void FromMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Length.FromMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Length.FromMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Length.FromMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(AttometersInOneMeter, meter.As(LengthUnit.Attometer), AttometersTolerance);
            AssertEx.EqualTolerance(CentimetersInOneMeter, meter.As(LengthUnit.Centimeter), CentimetersTolerance);
            AssertEx.EqualTolerance(DecalightSecondsInOneMeter, meter.As(LengthUnit.DecalightSecond), DecalightSecondsTolerance);
            AssertEx.EqualTolerance(DecalightYearsInOneMeter, meter.As(LengthUnit.DecalightYear), DecalightYearsTolerance);
            AssertEx.EqualTolerance(DecametersInOneMeter, meter.As(LengthUnit.Decameter), DecametersTolerance);
            AssertEx.EqualTolerance(DecimetersInOneMeter, meter.As(LengthUnit.Decimeter), DecimetersTolerance);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, meter.As(LengthUnit.DtpPica), DtpPicasTolerance);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, meter.As(LengthUnit.DtpPoint), DtpPointsTolerance);
            AssertEx.EqualTolerance(ExalightSecondsInOneMeter, meter.As(LengthUnit.ExalightSecond), ExalightSecondsTolerance);
            AssertEx.EqualTolerance(ExalightYearsInOneMeter, meter.As(LengthUnit.ExalightYear), ExalightYearsTolerance);
            AssertEx.EqualTolerance(ExametersInOneMeter, meter.As(LengthUnit.Exameter), ExametersTolerance);
            AssertEx.EqualTolerance(FathomsInOneMeter, meter.As(LengthUnit.Fathom), FathomsTolerance);
            AssertEx.EqualTolerance(FemtometersInOneMeter, meter.As(LengthUnit.Femtometer), FemtometersTolerance);
            AssertEx.EqualTolerance(FeetInOneMeter, meter.As(LengthUnit.Foot), FeetTolerance);
            AssertEx.EqualTolerance(GigalightSecondsInOneMeter, meter.As(LengthUnit.GigalightSecond), GigalightSecondsTolerance);
            AssertEx.EqualTolerance(GigalightYearsInOneMeter, meter.As(LengthUnit.GigalightYear), GigalightYearsTolerance);
            AssertEx.EqualTolerance(GigametersInOneMeter, meter.As(LengthUnit.Gigameter), GigametersTolerance);
            AssertEx.EqualTolerance(HandsInOneMeter, meter.As(LengthUnit.Hand), HandsTolerance);
            AssertEx.EqualTolerance(HectometersInOneMeter, meter.As(LengthUnit.Hectometer), HectometersTolerance);
            AssertEx.EqualTolerance(InchesInOneMeter, meter.As(LengthUnit.Inch), InchesTolerance);
            AssertEx.EqualTolerance(KilolightSecondsInOneMeter, meter.As(LengthUnit.KilolightSecond), KilolightSecondsTolerance);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, meter.As(LengthUnit.KilolightYear), KilolightYearsTolerance);
            AssertEx.EqualTolerance(KilometersInOneMeter, meter.As(LengthUnit.Kilometer), KilometersTolerance);
            AssertEx.EqualTolerance(LightSecondsInOneMeter, meter.As(LengthUnit.LightSecond), LightSecondsTolerance);
            AssertEx.EqualTolerance(LightYearsInOneMeter, meter.As(LengthUnit.LightYear), LightYearsTolerance);
            AssertEx.EqualTolerance(MegalightSecondsInOneMeter, meter.As(LengthUnit.MegalightSecond), MegalightSecondsTolerance);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, meter.As(LengthUnit.MegalightYear), MegalightYearsTolerance);
            AssertEx.EqualTolerance(MegametersInOneMeter, meter.As(LengthUnit.Megameter), MegametersTolerance);
            AssertEx.EqualTolerance(MetersInOneMeter, meter.As(LengthUnit.Meter), MetersTolerance);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, meter.As(LengthUnit.Microinch), MicroinchesTolerance);
            AssertEx.EqualTolerance(MicrolightSecondsInOneMeter, meter.As(LengthUnit.MicrolightSecond), MicrolightSecondsTolerance);
            AssertEx.EqualTolerance(MicrolightYearsInOneMeter, meter.As(LengthUnit.MicrolightYear), MicrolightYearsTolerance);
            AssertEx.EqualTolerance(MicrometersInOneMeter, meter.As(LengthUnit.Micrometer), MicrometersTolerance);
            AssertEx.EqualTolerance(MilsInOneMeter, meter.As(LengthUnit.Mil), MilsTolerance);
            AssertEx.EqualTolerance(MilesInOneMeter, meter.As(LengthUnit.Mile), MilesTolerance);
            AssertEx.EqualTolerance(MillilightSecondsInOneMeter, meter.As(LengthUnit.MillilightSecond), MillilightSecondsTolerance);
            AssertEx.EqualTolerance(MillilightYearsInOneMeter, meter.As(LengthUnit.MillilightYear), MillilightYearsTolerance);
            AssertEx.EqualTolerance(MillimetersInOneMeter, meter.As(LengthUnit.Millimeter), MillimetersTolerance);
            AssertEx.EqualTolerance(NanometersInOneMeter, meter.As(LengthUnit.Nanometer), NanometersTolerance);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, meter.As(LengthUnit.NauticalMile), NauticalMilesTolerance);
            AssertEx.EqualTolerance(PetalightSecondsInOneMeter, meter.As(LengthUnit.PetalightSecond), PetalightSecondsTolerance);
            AssertEx.EqualTolerance(PetalightYearsInOneMeter, meter.As(LengthUnit.PetalightYear), PetalightYearsTolerance);
            AssertEx.EqualTolerance(PetametersInOneMeter, meter.As(LengthUnit.Petameter), PetametersTolerance);
            AssertEx.EqualTolerance(PicometersInOneMeter, meter.As(LengthUnit.Picometer), PicometersTolerance);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, meter.As(LengthUnit.PrinterPica), PrinterPicasTolerance);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, meter.As(LengthUnit.PrinterPoint), PrinterPointsTolerance);
            AssertEx.EqualTolerance(QutrametersInOneMeter, meter.As(LengthUnit.Qutrameter), QutrametersTolerance);
            AssertEx.EqualTolerance(ShacklesInOneMeter, meter.As(LengthUnit.Shackle), ShacklesTolerance);
            AssertEx.EqualTolerance(TeralightSecondsInOneMeter, meter.As(LengthUnit.TeralightSecond), TeralightSecondsTolerance);
            AssertEx.EqualTolerance(TeralightYearsInOneMeter, meter.As(LengthUnit.TeralightYear), TeralightYearsTolerance);
            AssertEx.EqualTolerance(TerametersInOneMeter, meter.As(LengthUnit.Terameter), TerametersTolerance);
            AssertEx.EqualTolerance(TwipsInOneMeter, meter.As(LengthUnit.Twip), TwipsTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, meter.As(LengthUnit.UsSurveyFoot), UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(VettametersInOneMeter, meter.As(LengthUnit.Vettameter), VettametersTolerance);
            AssertEx.EqualTolerance(YardsInOneMeter, meter.As(LengthUnit.Yard), YardsTolerance);
            AssertEx.EqualTolerance(YoctometersInOneMeter, meter.As(LengthUnit.Yoctometer), YoctometersTolerance);
            AssertEx.EqualTolerance(YottalightSecondsInOneMeter, meter.As(LengthUnit.YottalightSecond), YottalightSecondsTolerance);
            AssertEx.EqualTolerance(YottalightYearsInOneMeter, meter.As(LengthUnit.YottalightYear), YottalightYearsTolerance);
            AssertEx.EqualTolerance(YottametersInOneMeter, meter.As(LengthUnit.Yottameter), YottametersTolerance);
            AssertEx.EqualTolerance(ZeptometersInOneMeter, meter.As(LengthUnit.Zeptometer), ZeptometersTolerance);
            AssertEx.EqualTolerance(ZettalightSecondsInOneMeter, meter.As(LengthUnit.ZettalightSecond), ZettalightSecondsTolerance);
            AssertEx.EqualTolerance(ZettalightYearsInOneMeter, meter.As(LengthUnit.ZettalightYear), ZettalightYearsTolerance);
            AssertEx.EqualTolerance(ZettametersInOneMeter, meter.As(LengthUnit.Zettameter), ZettametersTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var meter = Length.FromMeters(1);

            var attometerQuantity = meter.ToUnit(LengthUnit.Attometer);
            AssertEx.EqualTolerance(AttometersInOneMeter, (double)attometerQuantity.Value, AttometersTolerance);
            Assert.Equal(LengthUnit.Attometer, attometerQuantity.Unit);

            var centimeterQuantity = meter.ToUnit(LengthUnit.Centimeter);
            AssertEx.EqualTolerance(CentimetersInOneMeter, (double)centimeterQuantity.Value, CentimetersTolerance);
            Assert.Equal(LengthUnit.Centimeter, centimeterQuantity.Unit);

            var decalightsecondQuantity = meter.ToUnit(LengthUnit.DecalightSecond);
            AssertEx.EqualTolerance(DecalightSecondsInOneMeter, (double)decalightsecondQuantity.Value, DecalightSecondsTolerance);
            Assert.Equal(LengthUnit.DecalightSecond, decalightsecondQuantity.Unit);

            var decalightyearQuantity = meter.ToUnit(LengthUnit.DecalightYear);
            AssertEx.EqualTolerance(DecalightYearsInOneMeter, (double)decalightyearQuantity.Value, DecalightYearsTolerance);
            Assert.Equal(LengthUnit.DecalightYear, decalightyearQuantity.Unit);

            var decameterQuantity = meter.ToUnit(LengthUnit.Decameter);
            AssertEx.EqualTolerance(DecametersInOneMeter, (double)decameterQuantity.Value, DecametersTolerance);
            Assert.Equal(LengthUnit.Decameter, decameterQuantity.Unit);

            var decimeterQuantity = meter.ToUnit(LengthUnit.Decimeter);
            AssertEx.EqualTolerance(DecimetersInOneMeter, (double)decimeterQuantity.Value, DecimetersTolerance);
            Assert.Equal(LengthUnit.Decimeter, decimeterQuantity.Unit);

            var dtppicaQuantity = meter.ToUnit(LengthUnit.DtpPica);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, (double)dtppicaQuantity.Value, DtpPicasTolerance);
            Assert.Equal(LengthUnit.DtpPica, dtppicaQuantity.Unit);

            var dtppointQuantity = meter.ToUnit(LengthUnit.DtpPoint);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, (double)dtppointQuantity.Value, DtpPointsTolerance);
            Assert.Equal(LengthUnit.DtpPoint, dtppointQuantity.Unit);

            var exalightsecondQuantity = meter.ToUnit(LengthUnit.ExalightSecond);
            AssertEx.EqualTolerance(ExalightSecondsInOneMeter, (double)exalightsecondQuantity.Value, ExalightSecondsTolerance);
            Assert.Equal(LengthUnit.ExalightSecond, exalightsecondQuantity.Unit);

            var exalightyearQuantity = meter.ToUnit(LengthUnit.ExalightYear);
            AssertEx.EqualTolerance(ExalightYearsInOneMeter, (double)exalightyearQuantity.Value, ExalightYearsTolerance);
            Assert.Equal(LengthUnit.ExalightYear, exalightyearQuantity.Unit);

            var exameterQuantity = meter.ToUnit(LengthUnit.Exameter);
            AssertEx.EqualTolerance(ExametersInOneMeter, (double)exameterQuantity.Value, ExametersTolerance);
            Assert.Equal(LengthUnit.Exameter, exameterQuantity.Unit);

            var fathomQuantity = meter.ToUnit(LengthUnit.Fathom);
            AssertEx.EqualTolerance(FathomsInOneMeter, (double)fathomQuantity.Value, FathomsTolerance);
            Assert.Equal(LengthUnit.Fathom, fathomQuantity.Unit);

            var femtometerQuantity = meter.ToUnit(LengthUnit.Femtometer);
            AssertEx.EqualTolerance(FemtometersInOneMeter, (double)femtometerQuantity.Value, FemtometersTolerance);
            Assert.Equal(LengthUnit.Femtometer, femtometerQuantity.Unit);

            var footQuantity = meter.ToUnit(LengthUnit.Foot);
            AssertEx.EqualTolerance(FeetInOneMeter, (double)footQuantity.Value, FeetTolerance);
            Assert.Equal(LengthUnit.Foot, footQuantity.Unit);

            var gigalightsecondQuantity = meter.ToUnit(LengthUnit.GigalightSecond);
            AssertEx.EqualTolerance(GigalightSecondsInOneMeter, (double)gigalightsecondQuantity.Value, GigalightSecondsTolerance);
            Assert.Equal(LengthUnit.GigalightSecond, gigalightsecondQuantity.Unit);

            var gigalightyearQuantity = meter.ToUnit(LengthUnit.GigalightYear);
            AssertEx.EqualTolerance(GigalightYearsInOneMeter, (double)gigalightyearQuantity.Value, GigalightYearsTolerance);
            Assert.Equal(LengthUnit.GigalightYear, gigalightyearQuantity.Unit);

            var gigameterQuantity = meter.ToUnit(LengthUnit.Gigameter);
            AssertEx.EqualTolerance(GigametersInOneMeter, (double)gigameterQuantity.Value, GigametersTolerance);
            Assert.Equal(LengthUnit.Gigameter, gigameterQuantity.Unit);

            var handQuantity = meter.ToUnit(LengthUnit.Hand);
            AssertEx.EqualTolerance(HandsInOneMeter, (double)handQuantity.Value, HandsTolerance);
            Assert.Equal(LengthUnit.Hand, handQuantity.Unit);

            var hectometerQuantity = meter.ToUnit(LengthUnit.Hectometer);
            AssertEx.EqualTolerance(HectometersInOneMeter, (double)hectometerQuantity.Value, HectometersTolerance);
            Assert.Equal(LengthUnit.Hectometer, hectometerQuantity.Unit);

            var inchQuantity = meter.ToUnit(LengthUnit.Inch);
            AssertEx.EqualTolerance(InchesInOneMeter, (double)inchQuantity.Value, InchesTolerance);
            Assert.Equal(LengthUnit.Inch, inchQuantity.Unit);

            var kilolightsecondQuantity = meter.ToUnit(LengthUnit.KilolightSecond);
            AssertEx.EqualTolerance(KilolightSecondsInOneMeter, (double)kilolightsecondQuantity.Value, KilolightSecondsTolerance);
            Assert.Equal(LengthUnit.KilolightSecond, kilolightsecondQuantity.Unit);

            var kilolightyearQuantity = meter.ToUnit(LengthUnit.KilolightYear);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, (double)kilolightyearQuantity.Value, KilolightYearsTolerance);
            Assert.Equal(LengthUnit.KilolightYear, kilolightyearQuantity.Unit);

            var kilometerQuantity = meter.ToUnit(LengthUnit.Kilometer);
            AssertEx.EqualTolerance(KilometersInOneMeter, (double)kilometerQuantity.Value, KilometersTolerance);
            Assert.Equal(LengthUnit.Kilometer, kilometerQuantity.Unit);

            var lightsecondQuantity = meter.ToUnit(LengthUnit.LightSecond);
            AssertEx.EqualTolerance(LightSecondsInOneMeter, (double)lightsecondQuantity.Value, LightSecondsTolerance);
            Assert.Equal(LengthUnit.LightSecond, lightsecondQuantity.Unit);

            var lightyearQuantity = meter.ToUnit(LengthUnit.LightYear);
            AssertEx.EqualTolerance(LightYearsInOneMeter, (double)lightyearQuantity.Value, LightYearsTolerance);
            Assert.Equal(LengthUnit.LightYear, lightyearQuantity.Unit);

            var megalightsecondQuantity = meter.ToUnit(LengthUnit.MegalightSecond);
            AssertEx.EqualTolerance(MegalightSecondsInOneMeter, (double)megalightsecondQuantity.Value, MegalightSecondsTolerance);
            Assert.Equal(LengthUnit.MegalightSecond, megalightsecondQuantity.Unit);

            var megalightyearQuantity = meter.ToUnit(LengthUnit.MegalightYear);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, (double)megalightyearQuantity.Value, MegalightYearsTolerance);
            Assert.Equal(LengthUnit.MegalightYear, megalightyearQuantity.Unit);

            var megameterQuantity = meter.ToUnit(LengthUnit.Megameter);
            AssertEx.EqualTolerance(MegametersInOneMeter, (double)megameterQuantity.Value, MegametersTolerance);
            Assert.Equal(LengthUnit.Megameter, megameterQuantity.Unit);

            var meterQuantity = meter.ToUnit(LengthUnit.Meter);
            AssertEx.EqualTolerance(MetersInOneMeter, (double)meterQuantity.Value, MetersTolerance);
            Assert.Equal(LengthUnit.Meter, meterQuantity.Unit);

            var microinchQuantity = meter.ToUnit(LengthUnit.Microinch);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, (double)microinchQuantity.Value, MicroinchesTolerance);
            Assert.Equal(LengthUnit.Microinch, microinchQuantity.Unit);

            var microlightsecondQuantity = meter.ToUnit(LengthUnit.MicrolightSecond);
            AssertEx.EqualTolerance(MicrolightSecondsInOneMeter, (double)microlightsecondQuantity.Value, MicrolightSecondsTolerance);
            Assert.Equal(LengthUnit.MicrolightSecond, microlightsecondQuantity.Unit);

            var microlightyearQuantity = meter.ToUnit(LengthUnit.MicrolightYear);
            AssertEx.EqualTolerance(MicrolightYearsInOneMeter, (double)microlightyearQuantity.Value, MicrolightYearsTolerance);
            Assert.Equal(LengthUnit.MicrolightYear, microlightyearQuantity.Unit);

            var micrometerQuantity = meter.ToUnit(LengthUnit.Micrometer);
            AssertEx.EqualTolerance(MicrometersInOneMeter, (double)micrometerQuantity.Value, MicrometersTolerance);
            Assert.Equal(LengthUnit.Micrometer, micrometerQuantity.Unit);

            var milQuantity = meter.ToUnit(LengthUnit.Mil);
            AssertEx.EqualTolerance(MilsInOneMeter, (double)milQuantity.Value, MilsTolerance);
            Assert.Equal(LengthUnit.Mil, milQuantity.Unit);

            var mileQuantity = meter.ToUnit(LengthUnit.Mile);
            AssertEx.EqualTolerance(MilesInOneMeter, (double)mileQuantity.Value, MilesTolerance);
            Assert.Equal(LengthUnit.Mile, mileQuantity.Unit);

            var millilightsecondQuantity = meter.ToUnit(LengthUnit.MillilightSecond);
            AssertEx.EqualTolerance(MillilightSecondsInOneMeter, (double)millilightsecondQuantity.Value, MillilightSecondsTolerance);
            Assert.Equal(LengthUnit.MillilightSecond, millilightsecondQuantity.Unit);

            var millilightyearQuantity = meter.ToUnit(LengthUnit.MillilightYear);
            AssertEx.EqualTolerance(MillilightYearsInOneMeter, (double)millilightyearQuantity.Value, MillilightYearsTolerance);
            Assert.Equal(LengthUnit.MillilightYear, millilightyearQuantity.Unit);

            var millimeterQuantity = meter.ToUnit(LengthUnit.Millimeter);
            AssertEx.EqualTolerance(MillimetersInOneMeter, (double)millimeterQuantity.Value, MillimetersTolerance);
            Assert.Equal(LengthUnit.Millimeter, millimeterQuantity.Unit);

            var nanometerQuantity = meter.ToUnit(LengthUnit.Nanometer);
            AssertEx.EqualTolerance(NanometersInOneMeter, (double)nanometerQuantity.Value, NanometersTolerance);
            Assert.Equal(LengthUnit.Nanometer, nanometerQuantity.Unit);

            var nauticalmileQuantity = meter.ToUnit(LengthUnit.NauticalMile);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, (double)nauticalmileQuantity.Value, NauticalMilesTolerance);
            Assert.Equal(LengthUnit.NauticalMile, nauticalmileQuantity.Unit);

            var petalightsecondQuantity = meter.ToUnit(LengthUnit.PetalightSecond);
            AssertEx.EqualTolerance(PetalightSecondsInOneMeter, (double)petalightsecondQuantity.Value, PetalightSecondsTolerance);
            Assert.Equal(LengthUnit.PetalightSecond, petalightsecondQuantity.Unit);

            var petalightyearQuantity = meter.ToUnit(LengthUnit.PetalightYear);
            AssertEx.EqualTolerance(PetalightYearsInOneMeter, (double)petalightyearQuantity.Value, PetalightYearsTolerance);
            Assert.Equal(LengthUnit.PetalightYear, petalightyearQuantity.Unit);

            var petameterQuantity = meter.ToUnit(LengthUnit.Petameter);
            AssertEx.EqualTolerance(PetametersInOneMeter, (double)petameterQuantity.Value, PetametersTolerance);
            Assert.Equal(LengthUnit.Petameter, petameterQuantity.Unit);

            var picometerQuantity = meter.ToUnit(LengthUnit.Picometer);
            AssertEx.EqualTolerance(PicometersInOneMeter, (double)picometerQuantity.Value, PicometersTolerance);
            Assert.Equal(LengthUnit.Picometer, picometerQuantity.Unit);

            var printerpicaQuantity = meter.ToUnit(LengthUnit.PrinterPica);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, (double)printerpicaQuantity.Value, PrinterPicasTolerance);
            Assert.Equal(LengthUnit.PrinterPica, printerpicaQuantity.Unit);

            var printerpointQuantity = meter.ToUnit(LengthUnit.PrinterPoint);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, (double)printerpointQuantity.Value, PrinterPointsTolerance);
            Assert.Equal(LengthUnit.PrinterPoint, printerpointQuantity.Unit);

            var qutrameterQuantity = meter.ToUnit(LengthUnit.Qutrameter);
            AssertEx.EqualTolerance(QutrametersInOneMeter, (double)qutrameterQuantity.Value, QutrametersTolerance);
            Assert.Equal(LengthUnit.Qutrameter, qutrameterQuantity.Unit);

            var shackleQuantity = meter.ToUnit(LengthUnit.Shackle);
            AssertEx.EqualTolerance(ShacklesInOneMeter, (double)shackleQuantity.Value, ShacklesTolerance);
            Assert.Equal(LengthUnit.Shackle, shackleQuantity.Unit);

            var teralightsecondQuantity = meter.ToUnit(LengthUnit.TeralightSecond);
            AssertEx.EqualTolerance(TeralightSecondsInOneMeter, (double)teralightsecondQuantity.Value, TeralightSecondsTolerance);
            Assert.Equal(LengthUnit.TeralightSecond, teralightsecondQuantity.Unit);

            var teralightyearQuantity = meter.ToUnit(LengthUnit.TeralightYear);
            AssertEx.EqualTolerance(TeralightYearsInOneMeter, (double)teralightyearQuantity.Value, TeralightYearsTolerance);
            Assert.Equal(LengthUnit.TeralightYear, teralightyearQuantity.Unit);

            var terameterQuantity = meter.ToUnit(LengthUnit.Terameter);
            AssertEx.EqualTolerance(TerametersInOneMeter, (double)terameterQuantity.Value, TerametersTolerance);
            Assert.Equal(LengthUnit.Terameter, terameterQuantity.Unit);

            var twipQuantity = meter.ToUnit(LengthUnit.Twip);
            AssertEx.EqualTolerance(TwipsInOneMeter, (double)twipQuantity.Value, TwipsTolerance);
            Assert.Equal(LengthUnit.Twip, twipQuantity.Unit);

            var ussurveyfootQuantity = meter.ToUnit(LengthUnit.UsSurveyFoot);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, (double)ussurveyfootQuantity.Value, UsSurveyFeetTolerance);
            Assert.Equal(LengthUnit.UsSurveyFoot, ussurveyfootQuantity.Unit);

            var vettameterQuantity = meter.ToUnit(LengthUnit.Vettameter);
            AssertEx.EqualTolerance(VettametersInOneMeter, (double)vettameterQuantity.Value, VettametersTolerance);
            Assert.Equal(LengthUnit.Vettameter, vettameterQuantity.Unit);

            var yardQuantity = meter.ToUnit(LengthUnit.Yard);
            AssertEx.EqualTolerance(YardsInOneMeter, (double)yardQuantity.Value, YardsTolerance);
            Assert.Equal(LengthUnit.Yard, yardQuantity.Unit);

            var yoctometerQuantity = meter.ToUnit(LengthUnit.Yoctometer);
            AssertEx.EqualTolerance(YoctometersInOneMeter, (double)yoctometerQuantity.Value, YoctometersTolerance);
            Assert.Equal(LengthUnit.Yoctometer, yoctometerQuantity.Unit);

            var yottalightsecondQuantity = meter.ToUnit(LengthUnit.YottalightSecond);
            AssertEx.EqualTolerance(YottalightSecondsInOneMeter, (double)yottalightsecondQuantity.Value, YottalightSecondsTolerance);
            Assert.Equal(LengthUnit.YottalightSecond, yottalightsecondQuantity.Unit);

            var yottalightyearQuantity = meter.ToUnit(LengthUnit.YottalightYear);
            AssertEx.EqualTolerance(YottalightYearsInOneMeter, (double)yottalightyearQuantity.Value, YottalightYearsTolerance);
            Assert.Equal(LengthUnit.YottalightYear, yottalightyearQuantity.Unit);

            var yottameterQuantity = meter.ToUnit(LengthUnit.Yottameter);
            AssertEx.EqualTolerance(YottametersInOneMeter, (double)yottameterQuantity.Value, YottametersTolerance);
            Assert.Equal(LengthUnit.Yottameter, yottameterQuantity.Unit);

            var zeptometerQuantity = meter.ToUnit(LengthUnit.Zeptometer);
            AssertEx.EqualTolerance(ZeptometersInOneMeter, (double)zeptometerQuantity.Value, ZeptometersTolerance);
            Assert.Equal(LengthUnit.Zeptometer, zeptometerQuantity.Unit);

            var zettalightsecondQuantity = meter.ToUnit(LengthUnit.ZettalightSecond);
            AssertEx.EqualTolerance(ZettalightSecondsInOneMeter, (double)zettalightsecondQuantity.Value, ZettalightSecondsTolerance);
            Assert.Equal(LengthUnit.ZettalightSecond, zettalightsecondQuantity.Unit);

            var zettalightyearQuantity = meter.ToUnit(LengthUnit.ZettalightYear);
            AssertEx.EqualTolerance(ZettalightYearsInOneMeter, (double)zettalightyearQuantity.Value, ZettalightYearsTolerance);
            Assert.Equal(LengthUnit.ZettalightYear, zettalightyearQuantity.Unit);

            var zettameterQuantity = meter.ToUnit(LengthUnit.Zettameter);
            AssertEx.EqualTolerance(ZettametersInOneMeter, (double)zettameterQuantity.Value, ZettametersTolerance);
            Assert.Equal(LengthUnit.Zettameter, zettameterQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Length meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(1, Length.FromAttometers(meter.Attometers).Meters, AttometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromCentimeters(meter.Centimeters).Meters, CentimetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromDecalightSeconds(meter.DecalightSeconds).Meters, DecalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromDecalightYears(meter.DecalightYears).Meters, DecalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromDecameters(meter.Decameters).Meters, DecametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromDecimeters(meter.Decimeters).Meters, DecimetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromDtpPicas(meter.DtpPicas).Meters, DtpPicasTolerance);
            AssertEx.EqualTolerance(1, Length.FromDtpPoints(meter.DtpPoints).Meters, DtpPointsTolerance);
            AssertEx.EqualTolerance(1, Length.FromExalightSeconds(meter.ExalightSeconds).Meters, ExalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromExalightYears(meter.ExalightYears).Meters, ExalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromExameters(meter.Exameters).Meters, ExametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromFathoms(meter.Fathoms).Meters, FathomsTolerance);
            AssertEx.EqualTolerance(1, Length.FromFemtometers(meter.Femtometers).Meters, FemtometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromFeet(meter.Feet).Meters, FeetTolerance);
            AssertEx.EqualTolerance(1, Length.FromGigalightSeconds(meter.GigalightSeconds).Meters, GigalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromGigalightYears(meter.GigalightYears).Meters, GigalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromGigameters(meter.Gigameters).Meters, GigametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromHands(meter.Hands).Meters, HandsTolerance);
            AssertEx.EqualTolerance(1, Length.FromHectometers(meter.Hectometers).Meters, HectometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromInches(meter.Inches).Meters, InchesTolerance);
            AssertEx.EqualTolerance(1, Length.FromKilolightSeconds(meter.KilolightSeconds).Meters, KilolightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromKilolightYears(meter.KilolightYears).Meters, KilolightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromKilometers(meter.Kilometers).Meters, KilometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromLightSeconds(meter.LightSeconds).Meters, LightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromLightYears(meter.LightYears).Meters, LightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMegalightSeconds(meter.MegalightSeconds).Meters, MegalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMegalightYears(meter.MegalightYears).Meters, MegalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMegameters(meter.Megameters).Meters, MegametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromMeters(meter.Meters).Meters, MetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromMicroinches(meter.Microinches).Meters, MicroinchesTolerance);
            AssertEx.EqualTolerance(1, Length.FromMicrolightSeconds(meter.MicrolightSeconds).Meters, MicrolightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMicrolightYears(meter.MicrolightYears).Meters, MicrolightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMicrometers(meter.Micrometers).Meters, MicrometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromMils(meter.Mils).Meters, MilsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMiles(meter.Miles).Meters, MilesTolerance);
            AssertEx.EqualTolerance(1, Length.FromMillilightSeconds(meter.MillilightSeconds).Meters, MillilightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMillilightYears(meter.MillilightYears).Meters, MillilightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromMillimeters(meter.Millimeters).Meters, MillimetersTolerance);
            AssertEx.EqualTolerance(1, Length.FromNanometers(meter.Nanometers).Meters, NanometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromNauticalMiles(meter.NauticalMiles).Meters, NauticalMilesTolerance);
            AssertEx.EqualTolerance(1, Length.FromPetalightSeconds(meter.PetalightSeconds).Meters, PetalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromPetalightYears(meter.PetalightYears).Meters, PetalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromPetameters(meter.Petameters).Meters, PetametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromPicometers(meter.Picometers).Meters, PicometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromPrinterPicas(meter.PrinterPicas).Meters, PrinterPicasTolerance);
            AssertEx.EqualTolerance(1, Length.FromPrinterPoints(meter.PrinterPoints).Meters, PrinterPointsTolerance);
            AssertEx.EqualTolerance(1, Length.FromQutrameters(meter.Qutrameters).Meters, QutrametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromShackles(meter.Shackles).Meters, ShacklesTolerance);
            AssertEx.EqualTolerance(1, Length.FromTeralightSeconds(meter.TeralightSeconds).Meters, TeralightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromTeralightYears(meter.TeralightYears).Meters, TeralightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromTerameters(meter.Terameters).Meters, TerametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromTwips(meter.Twips).Meters, TwipsTolerance);
            AssertEx.EqualTolerance(1, Length.FromUsSurveyFeet(meter.UsSurveyFeet).Meters, UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(1, Length.FromVettameters(meter.Vettameters).Meters, VettametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromYards(meter.Yards).Meters, YardsTolerance);
            AssertEx.EqualTolerance(1, Length.FromYoctometers(meter.Yoctometers).Meters, YoctometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromYottalightSeconds(meter.YottalightSeconds).Meters, YottalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromYottalightYears(meter.YottalightYears).Meters, YottalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromYottameters(meter.Yottameters).Meters, YottametersTolerance);
            AssertEx.EqualTolerance(1, Length.FromZeptometers(meter.Zeptometers).Meters, ZeptometersTolerance);
            AssertEx.EqualTolerance(1, Length.FromZettalightSeconds(meter.ZettalightSeconds).Meters, ZettalightSecondsTolerance);
            AssertEx.EqualTolerance(1, Length.FromZettalightYears(meter.ZettalightYears).Meters, ZettalightYearsTolerance);
            AssertEx.EqualTolerance(1, Length.FromZettameters(meter.Zettameters).Meters, ZettametersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Length v = Length.FromMeters(1);
            AssertEx.EqualTolerance(-1, -v.Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, (Length.FromMeters(3)-v).Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).Meters, MetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).Meters, MetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, (Length.FromMeters(10)/5).Meters, MetersTolerance);
            AssertEx.EqualTolerance(2, Length.FromMeters(10)/Length.FromMeters(5), MetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Length oneMeter = Length.FromMeters(1);
            Length twoMeters = Length.FromMeters(2);

            Assert.True(oneMeter < twoMeters);
            Assert.True(oneMeter <= twoMeters);
            Assert.True(twoMeters > oneMeter);
            Assert.True(twoMeters >= oneMeter);

            Assert.False(oneMeter > twoMeters);
            Assert.False(oneMeter >= twoMeters);
            Assert.False(twoMeters < oneMeter);
            Assert.False(twoMeters <= oneMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Length meter = Length.FromMeters(1);
            Assert.Equal(0, meter.CompareTo(meter));
            Assert.True(meter.CompareTo(Length.Zero) > 0);
            Assert.True(Length.Zero.CompareTo(meter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Length meter = Length.FromMeters(1);
            Assert.Throws<ArgumentException>(() => meter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Length meter = Length.FromMeters(1);
            Assert.Throws<ArgumentNullException>(() => meter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Length.FromMeters(1);
            var b = Length.FromMeters(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = Length.FromMeters(1);
            var b = Length.FromMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = Length.FromMeters(1);
            Assert.True(v.Equals(Length.FromMeters(1), MetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Length.Zero, MetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Length meter = Length.FromMeters(1);
            Assert.False(meter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Length meter = Length.FromMeters(1);
            Assert.False(meter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(LengthUnit.Undefined, Length.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>();
            foreach(var unit in units)
            {
                if(unit == LengthUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Length.BaseDimensions is null);
        }
    }
}
