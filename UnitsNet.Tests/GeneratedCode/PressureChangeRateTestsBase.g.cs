//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of PressureChangeRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PressureChangeRateTestsBase
    {
        protected abstract double AtmospheresPerSecondInOnePascalPerSecond { get; }
        protected abstract double CentipascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double CentipascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double DecapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double DecapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double DecipascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double DecipascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double ExapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double ExapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double FemtopascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double FemtopascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double GigapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double GigapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double HectopascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double HectopascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double KilopascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double KilopascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double MegapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double MegapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double MicropascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double MicropascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double MillipascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double MillipascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double NanopascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double NanopascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double PascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double PascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double PetapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double PetapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double PicopascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double PicopascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double QutrapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double QutrapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double TerapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double TerapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double VettapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double VettapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double YottapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double YottapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double ZettapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double ZettapascalsPerSecondInOnePascalPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AtmospheresPerSecondTolerance { get { return 1e-5; } }
        protected virtual double CentipascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CentipascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecipascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecipascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double ExapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FemtopascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double FemtopascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillipascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MillipascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanopascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NanopascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PetapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PicopascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PicopascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double QutrapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double QutrapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double TerapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double VettapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double VettapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YottapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double YottapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ZettapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double ZettapascalsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new PressureChangeRate((double)0.0, PressureChangeRateUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new PressureChangeRate(double.PositiveInfinity, PressureChangeRateUnit.PascalPerSecond));
            Assert.Throws<ArgumentException>(() => new PressureChangeRate(double.NegativeInfinity, PressureChangeRateUnit.PascalPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new PressureChangeRate(double.NaN, PressureChangeRateUnit.PascalPerSecond));
        }

        [Fact]
        public void PascalPerSecondToPressureChangeRateUnits()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            AssertEx.EqualTolerance(AtmospheresPerSecondInOnePascalPerSecond, pascalpersecond.AtmospheresPerSecond, AtmospheresPerSecondTolerance);
            AssertEx.EqualTolerance(CentipascalsPerMinuteInOnePascalPerSecond, pascalpersecond.CentipascalsPerMinute, CentipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(CentipascalsPerSecondInOnePascalPerSecond, pascalpersecond.CentipascalsPerSecond, CentipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(DecapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.DecapascalsPerMinute, DecapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecapascalsPerSecondInOnePascalPerSecond, pascalpersecond.DecapascalsPerSecond, DecapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(DecipascalsPerMinuteInOnePascalPerSecond, pascalpersecond.DecipascalsPerMinute, DecipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecipascalsPerSecondInOnePascalPerSecond, pascalpersecond.DecipascalsPerSecond, DecipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(ExapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.ExapascalsPerMinute, ExapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(ExapascalsPerSecondInOnePascalPerSecond, pascalpersecond.ExapascalsPerSecond, ExapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(FemtopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.FemtopascalsPerMinute, FemtopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(FemtopascalsPerSecondInOnePascalPerSecond, pascalpersecond.FemtopascalsPerSecond, FemtopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(GigapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.GigapascalsPerMinute, GigapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(GigapascalsPerSecondInOnePascalPerSecond, pascalpersecond.GigapascalsPerSecond, GigapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(HectopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.HectopascalsPerMinute, HectopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(HectopascalsPerSecondInOnePascalPerSecond, pascalpersecond.HectopascalsPerSecond, HectopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.KilopascalsPerMinute, KilopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilopascalsPerSecondInOnePascalPerSecond, pascalpersecond.KilopascalsPerSecond, KilopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MegapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.MegapascalsPerMinute, MegapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapascalsPerSecondInOnePascalPerSecond, pascalpersecond.MegapascalsPerSecond, MegapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MicropascalsPerMinuteInOnePascalPerSecond, pascalpersecond.MicropascalsPerMinute, MicropascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MicropascalsPerSecondInOnePascalPerSecond, pascalpersecond.MicropascalsPerSecond, MicropascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MillipascalsPerMinuteInOnePascalPerSecond, pascalpersecond.MillipascalsPerMinute, MillipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MillipascalsPerSecondInOnePascalPerSecond, pascalpersecond.MillipascalsPerSecond, MillipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(NanopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.NanopascalsPerMinute, NanopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(NanopascalsPerSecondInOnePascalPerSecond, pascalpersecond.NanopascalsPerSecond, NanopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PascalsPerMinuteInOnePascalPerSecond, pascalpersecond.PascalsPerMinute, PascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PascalsPerSecondInOnePascalPerSecond, pascalpersecond.PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PetapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.PetapascalsPerMinute, PetapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PetapascalsPerSecondInOnePascalPerSecond, pascalpersecond.PetapascalsPerSecond, PetapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PicopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.PicopascalsPerMinute, PicopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PicopascalsPerSecondInOnePascalPerSecond, pascalpersecond.PicopascalsPerSecond, PicopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(QutrapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.QutrapascalsPerMinute, QutrapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(QutrapascalsPerSecondInOnePascalPerSecond, pascalpersecond.QutrapascalsPerSecond, QutrapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(TerapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.TerapascalsPerMinute, TerapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(TerapascalsPerSecondInOnePascalPerSecond, pascalpersecond.TerapascalsPerSecond, TerapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(VettapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.VettapascalsPerMinute, VettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(VettapascalsPerSecondInOnePascalPerSecond, pascalpersecond.VettapascalsPerSecond, VettapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(YottapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.YottapascalsPerMinute, YottapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(YottapascalsPerSecondInOnePascalPerSecond, pascalpersecond.YottapascalsPerSecond, YottapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(ZettapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.ZettapascalsPerMinute, ZettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(ZettapascalsPerSecondInOnePascalPerSecond, pascalpersecond.ZettapascalsPerSecond, ZettapascalsPerSecondTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.AtmospherePerSecond).AtmospheresPerSecond, AtmospheresPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.CentipascalPerMinute).CentipascalsPerMinute, CentipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.CentipascalPerSecond).CentipascalsPerSecond, CentipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.DecapascalPerMinute).DecapascalsPerMinute, DecapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.DecapascalPerSecond).DecapascalsPerSecond, DecapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.DecipascalPerMinute).DecipascalsPerMinute, DecipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.DecipascalPerSecond).DecipascalsPerSecond, DecipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.ExapascalPerMinute).ExapascalsPerMinute, ExapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.ExapascalPerSecond).ExapascalsPerSecond, ExapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.FemtopascalPerMinute).FemtopascalsPerMinute, FemtopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.FemtopascalPerSecond).FemtopascalsPerSecond, FemtopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.GigapascalPerMinute).GigapascalsPerMinute, GigapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.GigapascalPerSecond).GigapascalsPerSecond, GigapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.HectopascalPerMinute).HectopascalsPerMinute, HectopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.HectopascalPerSecond).HectopascalsPerSecond, HectopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.KilopascalPerMinute).KilopascalsPerMinute, KilopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.KilopascalPerSecond).KilopascalsPerSecond, KilopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.MegapascalPerMinute).MegapascalsPerMinute, MegapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.MegapascalPerSecond).MegapascalsPerSecond, MegapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.MicropascalPerMinute).MicropascalsPerMinute, MicropascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.MicropascalPerSecond).MicropascalsPerSecond, MicropascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.MillipascalPerMinute).MillipascalsPerMinute, MillipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.MillipascalPerSecond).MillipascalsPerSecond, MillipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.NanopascalPerMinute).NanopascalsPerMinute, NanopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.NanopascalPerSecond).NanopascalsPerSecond, NanopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.PascalPerMinute).PascalsPerMinute, PascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.PascalPerSecond).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.PetapascalPerMinute).PetapascalsPerMinute, PetapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.PetapascalPerSecond).PetapascalsPerSecond, PetapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.PicopascalPerMinute).PicopascalsPerMinute, PicopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.PicopascalPerSecond).PicopascalsPerSecond, PicopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.QutrapascalPerMinute).QutrapascalsPerMinute, QutrapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.QutrapascalPerSecond).QutrapascalsPerSecond, QutrapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.TerapascalPerMinute).TerapascalsPerMinute, TerapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.TerapascalPerSecond).TerapascalsPerSecond, TerapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.VettapascalPerMinute).VettapascalsPerMinute, VettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.VettapascalPerSecond).VettapascalsPerSecond, VettapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.YottapascalPerMinute).YottapascalsPerMinute, YottapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.YottapascalPerSecond).YottapascalsPerSecond, YottapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.ZettapascalPerMinute).ZettapascalsPerMinute, ZettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.From(1, PressureChangeRateUnit.ZettapascalPerSecond).ZettapascalsPerSecond, ZettapascalsPerSecondTolerance);
        }

        [Fact]
        public void FromPascalsPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => PressureChangeRate.FromPascalsPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => PressureChangeRate.FromPascalsPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromPascalsPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => PressureChangeRate.FromPascalsPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            AssertEx.EqualTolerance(AtmospheresPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.AtmospherePerSecond), AtmospheresPerSecondTolerance);
            AssertEx.EqualTolerance(CentipascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.CentipascalPerMinute), CentipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(CentipascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.CentipascalPerSecond), CentipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(DecapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.DecapascalPerMinute), DecapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.DecapascalPerSecond), DecapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(DecipascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.DecipascalPerMinute), DecipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecipascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.DecipascalPerSecond), DecipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(ExapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.ExapascalPerMinute), ExapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(ExapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.ExapascalPerSecond), ExapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(FemtopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.FemtopascalPerMinute), FemtopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(FemtopascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.FemtopascalPerSecond), FemtopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(GigapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.GigapascalPerMinute), GigapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(GigapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.GigapascalPerSecond), GigapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(HectopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.HectopascalPerMinute), HectopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(HectopascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.HectopascalPerSecond), HectopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.KilopascalPerMinute), KilopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilopascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.KilopascalPerSecond), KilopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MegapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MegapascalPerMinute), MegapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MegapascalPerSecond), MegapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MicropascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MicropascalPerMinute), MicropascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MicropascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MicropascalPerSecond), MicropascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MillipascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MillipascalPerMinute), MillipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MillipascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MillipascalPerSecond), MillipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(NanopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.NanopascalPerMinute), NanopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(NanopascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.NanopascalPerSecond), NanopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PascalPerMinute), PascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PascalPerSecond), PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PetapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PetapascalPerMinute), PetapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PetapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PetapascalPerSecond), PetapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PicopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PicopascalPerMinute), PicopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PicopascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PicopascalPerSecond), PicopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(QutrapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.QutrapascalPerMinute), QutrapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(QutrapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.QutrapascalPerSecond), QutrapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(TerapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.TerapascalPerMinute), TerapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(TerapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.TerapascalPerSecond), TerapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(VettapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.VettapascalPerMinute), VettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(VettapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.VettapascalPerSecond), VettapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(YottapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.YottapascalPerMinute), YottapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(YottapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.YottapascalPerSecond), YottapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(ZettapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.ZettapascalPerMinute), ZettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(ZettapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.ZettapascalPerSecond), ZettapascalsPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);

            var atmospherepersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.AtmospherePerSecond);
            AssertEx.EqualTolerance(AtmospheresPerSecondInOnePascalPerSecond, (double)atmospherepersecondQuantity.Value, AtmospheresPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.AtmospherePerSecond, atmospherepersecondQuantity.Unit);

            var centipascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.CentipascalPerMinute);
            AssertEx.EqualTolerance(CentipascalsPerMinuteInOnePascalPerSecond, (double)centipascalperminuteQuantity.Value, CentipascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.CentipascalPerMinute, centipascalperminuteQuantity.Unit);

            var centipascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.CentipascalPerSecond);
            AssertEx.EqualTolerance(CentipascalsPerSecondInOnePascalPerSecond, (double)centipascalpersecondQuantity.Value, CentipascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.CentipascalPerSecond, centipascalpersecondQuantity.Unit);

            var decapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.DecapascalPerMinute);
            AssertEx.EqualTolerance(DecapascalsPerMinuteInOnePascalPerSecond, (double)decapascalperminuteQuantity.Value, DecapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.DecapascalPerMinute, decapascalperminuteQuantity.Unit);

            var decapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.DecapascalPerSecond);
            AssertEx.EqualTolerance(DecapascalsPerSecondInOnePascalPerSecond, (double)decapascalpersecondQuantity.Value, DecapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.DecapascalPerSecond, decapascalpersecondQuantity.Unit);

            var decipascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.DecipascalPerMinute);
            AssertEx.EqualTolerance(DecipascalsPerMinuteInOnePascalPerSecond, (double)decipascalperminuteQuantity.Value, DecipascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.DecipascalPerMinute, decipascalperminuteQuantity.Unit);

            var decipascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.DecipascalPerSecond);
            AssertEx.EqualTolerance(DecipascalsPerSecondInOnePascalPerSecond, (double)decipascalpersecondQuantity.Value, DecipascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.DecipascalPerSecond, decipascalpersecondQuantity.Unit);

            var exapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.ExapascalPerMinute);
            AssertEx.EqualTolerance(ExapascalsPerMinuteInOnePascalPerSecond, (double)exapascalperminuteQuantity.Value, ExapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.ExapascalPerMinute, exapascalperminuteQuantity.Unit);

            var exapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.ExapascalPerSecond);
            AssertEx.EqualTolerance(ExapascalsPerSecondInOnePascalPerSecond, (double)exapascalpersecondQuantity.Value, ExapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.ExapascalPerSecond, exapascalpersecondQuantity.Unit);

            var femtopascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.FemtopascalPerMinute);
            AssertEx.EqualTolerance(FemtopascalsPerMinuteInOnePascalPerSecond, (double)femtopascalperminuteQuantity.Value, FemtopascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.FemtopascalPerMinute, femtopascalperminuteQuantity.Unit);

            var femtopascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.FemtopascalPerSecond);
            AssertEx.EqualTolerance(FemtopascalsPerSecondInOnePascalPerSecond, (double)femtopascalpersecondQuantity.Value, FemtopascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.FemtopascalPerSecond, femtopascalpersecondQuantity.Unit);

            var gigapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.GigapascalPerMinute);
            AssertEx.EqualTolerance(GigapascalsPerMinuteInOnePascalPerSecond, (double)gigapascalperminuteQuantity.Value, GigapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.GigapascalPerMinute, gigapascalperminuteQuantity.Unit);

            var gigapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.GigapascalPerSecond);
            AssertEx.EqualTolerance(GigapascalsPerSecondInOnePascalPerSecond, (double)gigapascalpersecondQuantity.Value, GigapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.GigapascalPerSecond, gigapascalpersecondQuantity.Unit);

            var hectopascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.HectopascalPerMinute);
            AssertEx.EqualTolerance(HectopascalsPerMinuteInOnePascalPerSecond, (double)hectopascalperminuteQuantity.Value, HectopascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.HectopascalPerMinute, hectopascalperminuteQuantity.Unit);

            var hectopascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.HectopascalPerSecond);
            AssertEx.EqualTolerance(HectopascalsPerSecondInOnePascalPerSecond, (double)hectopascalpersecondQuantity.Value, HectopascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.HectopascalPerSecond, hectopascalpersecondQuantity.Unit);

            var kilopascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.KilopascalPerMinute);
            AssertEx.EqualTolerance(KilopascalsPerMinuteInOnePascalPerSecond, (double)kilopascalperminuteQuantity.Value, KilopascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.KilopascalPerMinute, kilopascalperminuteQuantity.Unit);

            var kilopascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.KilopascalPerSecond);
            AssertEx.EqualTolerance(KilopascalsPerSecondInOnePascalPerSecond, (double)kilopascalpersecondQuantity.Value, KilopascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.KilopascalPerSecond, kilopascalpersecondQuantity.Unit);

            var megapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.MegapascalPerMinute);
            AssertEx.EqualTolerance(MegapascalsPerMinuteInOnePascalPerSecond, (double)megapascalperminuteQuantity.Value, MegapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.MegapascalPerMinute, megapascalperminuteQuantity.Unit);

            var megapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.MegapascalPerSecond);
            AssertEx.EqualTolerance(MegapascalsPerSecondInOnePascalPerSecond, (double)megapascalpersecondQuantity.Value, MegapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.MegapascalPerSecond, megapascalpersecondQuantity.Unit);

            var micropascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.MicropascalPerMinute);
            AssertEx.EqualTolerance(MicropascalsPerMinuteInOnePascalPerSecond, (double)micropascalperminuteQuantity.Value, MicropascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.MicropascalPerMinute, micropascalperminuteQuantity.Unit);

            var micropascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.MicropascalPerSecond);
            AssertEx.EqualTolerance(MicropascalsPerSecondInOnePascalPerSecond, (double)micropascalpersecondQuantity.Value, MicropascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.MicropascalPerSecond, micropascalpersecondQuantity.Unit);

            var millipascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.MillipascalPerMinute);
            AssertEx.EqualTolerance(MillipascalsPerMinuteInOnePascalPerSecond, (double)millipascalperminuteQuantity.Value, MillipascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.MillipascalPerMinute, millipascalperminuteQuantity.Unit);

            var millipascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.MillipascalPerSecond);
            AssertEx.EqualTolerance(MillipascalsPerSecondInOnePascalPerSecond, (double)millipascalpersecondQuantity.Value, MillipascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.MillipascalPerSecond, millipascalpersecondQuantity.Unit);

            var nanopascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.NanopascalPerMinute);
            AssertEx.EqualTolerance(NanopascalsPerMinuteInOnePascalPerSecond, (double)nanopascalperminuteQuantity.Value, NanopascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.NanopascalPerMinute, nanopascalperminuteQuantity.Unit);

            var nanopascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.NanopascalPerSecond);
            AssertEx.EqualTolerance(NanopascalsPerSecondInOnePascalPerSecond, (double)nanopascalpersecondQuantity.Value, NanopascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.NanopascalPerSecond, nanopascalpersecondQuantity.Unit);

            var pascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.PascalPerMinute);
            AssertEx.EqualTolerance(PascalsPerMinuteInOnePascalPerSecond, (double)pascalperminuteQuantity.Value, PascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.PascalPerMinute, pascalperminuteQuantity.Unit);

            var pascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.PascalPerSecond);
            AssertEx.EqualTolerance(PascalsPerSecondInOnePascalPerSecond, (double)pascalpersecondQuantity.Value, PascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.PascalPerSecond, pascalpersecondQuantity.Unit);

            var petapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.PetapascalPerMinute);
            AssertEx.EqualTolerance(PetapascalsPerMinuteInOnePascalPerSecond, (double)petapascalperminuteQuantity.Value, PetapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.PetapascalPerMinute, petapascalperminuteQuantity.Unit);

            var petapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.PetapascalPerSecond);
            AssertEx.EqualTolerance(PetapascalsPerSecondInOnePascalPerSecond, (double)petapascalpersecondQuantity.Value, PetapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.PetapascalPerSecond, petapascalpersecondQuantity.Unit);

            var picopascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.PicopascalPerMinute);
            AssertEx.EqualTolerance(PicopascalsPerMinuteInOnePascalPerSecond, (double)picopascalperminuteQuantity.Value, PicopascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.PicopascalPerMinute, picopascalperminuteQuantity.Unit);

            var picopascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.PicopascalPerSecond);
            AssertEx.EqualTolerance(PicopascalsPerSecondInOnePascalPerSecond, (double)picopascalpersecondQuantity.Value, PicopascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.PicopascalPerSecond, picopascalpersecondQuantity.Unit);

            var qutrapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.QutrapascalPerMinute);
            AssertEx.EqualTolerance(QutrapascalsPerMinuteInOnePascalPerSecond, (double)qutrapascalperminuteQuantity.Value, QutrapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.QutrapascalPerMinute, qutrapascalperminuteQuantity.Unit);

            var qutrapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.QutrapascalPerSecond);
            AssertEx.EqualTolerance(QutrapascalsPerSecondInOnePascalPerSecond, (double)qutrapascalpersecondQuantity.Value, QutrapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.QutrapascalPerSecond, qutrapascalpersecondQuantity.Unit);

            var terapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.TerapascalPerMinute);
            AssertEx.EqualTolerance(TerapascalsPerMinuteInOnePascalPerSecond, (double)terapascalperminuteQuantity.Value, TerapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.TerapascalPerMinute, terapascalperminuteQuantity.Unit);

            var terapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.TerapascalPerSecond);
            AssertEx.EqualTolerance(TerapascalsPerSecondInOnePascalPerSecond, (double)terapascalpersecondQuantity.Value, TerapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.TerapascalPerSecond, terapascalpersecondQuantity.Unit);

            var vettapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.VettapascalPerMinute);
            AssertEx.EqualTolerance(VettapascalsPerMinuteInOnePascalPerSecond, (double)vettapascalperminuteQuantity.Value, VettapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.VettapascalPerMinute, vettapascalperminuteQuantity.Unit);

            var vettapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.VettapascalPerSecond);
            AssertEx.EqualTolerance(VettapascalsPerSecondInOnePascalPerSecond, (double)vettapascalpersecondQuantity.Value, VettapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.VettapascalPerSecond, vettapascalpersecondQuantity.Unit);

            var yottapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.YottapascalPerMinute);
            AssertEx.EqualTolerance(YottapascalsPerMinuteInOnePascalPerSecond, (double)yottapascalperminuteQuantity.Value, YottapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.YottapascalPerMinute, yottapascalperminuteQuantity.Unit);

            var yottapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.YottapascalPerSecond);
            AssertEx.EqualTolerance(YottapascalsPerSecondInOnePascalPerSecond, (double)yottapascalpersecondQuantity.Value, YottapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.YottapascalPerSecond, yottapascalpersecondQuantity.Unit);

            var zettapascalperminuteQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.ZettapascalPerMinute);
            AssertEx.EqualTolerance(ZettapascalsPerMinuteInOnePascalPerSecond, (double)zettapascalperminuteQuantity.Value, ZettapascalsPerMinuteTolerance);
            Assert.Equal(PressureChangeRateUnit.ZettapascalPerMinute, zettapascalperminuteQuantity.Unit);

            var zettapascalpersecondQuantity = pascalpersecond.ToUnit(PressureChangeRateUnit.ZettapascalPerSecond);
            AssertEx.EqualTolerance(ZettapascalsPerSecondInOnePascalPerSecond, (double)zettapascalpersecondQuantity.Value, ZettapascalsPerSecondTolerance);
            Assert.Equal(PressureChangeRateUnit.ZettapascalPerSecond, zettapascalpersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromAtmospheresPerSecond(pascalpersecond.AtmospheresPerSecond).PascalsPerSecond, AtmospheresPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromCentipascalsPerMinute(pascalpersecond.CentipascalsPerMinute).PascalsPerSecond, CentipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromCentipascalsPerSecond(pascalpersecond.CentipascalsPerSecond).PascalsPerSecond, CentipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromDecapascalsPerMinute(pascalpersecond.DecapascalsPerMinute).PascalsPerSecond, DecapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromDecapascalsPerSecond(pascalpersecond.DecapascalsPerSecond).PascalsPerSecond, DecapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromDecipascalsPerMinute(pascalpersecond.DecipascalsPerMinute).PascalsPerSecond, DecipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromDecipascalsPerSecond(pascalpersecond.DecipascalsPerSecond).PascalsPerSecond, DecipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromExapascalsPerMinute(pascalpersecond.ExapascalsPerMinute).PascalsPerSecond, ExapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromExapascalsPerSecond(pascalpersecond.ExapascalsPerSecond).PascalsPerSecond, ExapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromFemtopascalsPerMinute(pascalpersecond.FemtopascalsPerMinute).PascalsPerSecond, FemtopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromFemtopascalsPerSecond(pascalpersecond.FemtopascalsPerSecond).PascalsPerSecond, FemtopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromGigapascalsPerMinute(pascalpersecond.GigapascalsPerMinute).PascalsPerSecond, GigapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromGigapascalsPerSecond(pascalpersecond.GigapascalsPerSecond).PascalsPerSecond, GigapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromHectopascalsPerMinute(pascalpersecond.HectopascalsPerMinute).PascalsPerSecond, HectopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromHectopascalsPerSecond(pascalpersecond.HectopascalsPerSecond).PascalsPerSecond, HectopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromKilopascalsPerMinute(pascalpersecond.KilopascalsPerMinute).PascalsPerSecond, KilopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromKilopascalsPerSecond(pascalpersecond.KilopascalsPerSecond).PascalsPerSecond, KilopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromMegapascalsPerMinute(pascalpersecond.MegapascalsPerMinute).PascalsPerSecond, MegapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromMegapascalsPerSecond(pascalpersecond.MegapascalsPerSecond).PascalsPerSecond, MegapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromMicropascalsPerMinute(pascalpersecond.MicropascalsPerMinute).PascalsPerSecond, MicropascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromMicropascalsPerSecond(pascalpersecond.MicropascalsPerSecond).PascalsPerSecond, MicropascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromMillipascalsPerMinute(pascalpersecond.MillipascalsPerMinute).PascalsPerSecond, MillipascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromMillipascalsPerSecond(pascalpersecond.MillipascalsPerSecond).PascalsPerSecond, MillipascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromNanopascalsPerMinute(pascalpersecond.NanopascalsPerMinute).PascalsPerSecond, NanopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromNanopascalsPerSecond(pascalpersecond.NanopascalsPerSecond).PascalsPerSecond, NanopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromPascalsPerMinute(pascalpersecond.PascalsPerMinute).PascalsPerSecond, PascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromPascalsPerSecond(pascalpersecond.PascalsPerSecond).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromPetapascalsPerMinute(pascalpersecond.PetapascalsPerMinute).PascalsPerSecond, PetapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromPetapascalsPerSecond(pascalpersecond.PetapascalsPerSecond).PascalsPerSecond, PetapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromPicopascalsPerMinute(pascalpersecond.PicopascalsPerMinute).PascalsPerSecond, PicopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromPicopascalsPerSecond(pascalpersecond.PicopascalsPerSecond).PascalsPerSecond, PicopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromQutrapascalsPerMinute(pascalpersecond.QutrapascalsPerMinute).PascalsPerSecond, QutrapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromQutrapascalsPerSecond(pascalpersecond.QutrapascalsPerSecond).PascalsPerSecond, QutrapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromTerapascalsPerMinute(pascalpersecond.TerapascalsPerMinute).PascalsPerSecond, TerapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromTerapascalsPerSecond(pascalpersecond.TerapascalsPerSecond).PascalsPerSecond, TerapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromVettapascalsPerMinute(pascalpersecond.VettapascalsPerMinute).PascalsPerSecond, VettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromVettapascalsPerSecond(pascalpersecond.VettapascalsPerSecond).PascalsPerSecond, VettapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromYottapascalsPerMinute(pascalpersecond.YottapascalsPerMinute).PascalsPerSecond, YottapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromYottapascalsPerSecond(pascalpersecond.YottapascalsPerSecond).PascalsPerSecond, YottapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromZettapascalsPerMinute(pascalpersecond.ZettapascalsPerMinute).PascalsPerSecond, ZettapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, PressureChangeRate.FromZettapascalsPerSecond(pascalpersecond.ZettapascalsPerSecond).PascalsPerSecond, ZettapascalsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            PressureChangeRate v = PressureChangeRate.FromPascalsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (PressureChangeRate.FromPascalsPerSecond(3)-v).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (PressureChangeRate.FromPascalsPerSecond(10)/5).PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(2, PressureChangeRate.FromPascalsPerSecond(10)/PressureChangeRate.FromPascalsPerSecond(5), PascalsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            PressureChangeRate onePascalPerSecond = PressureChangeRate.FromPascalsPerSecond(1);
            PressureChangeRate twoPascalsPerSecond = PressureChangeRate.FromPascalsPerSecond(2);

            Assert.True(onePascalPerSecond < twoPascalsPerSecond);
            Assert.True(onePascalPerSecond <= twoPascalsPerSecond);
            Assert.True(twoPascalsPerSecond > onePascalPerSecond);
            Assert.True(twoPascalsPerSecond >= onePascalPerSecond);

            Assert.False(onePascalPerSecond > twoPascalsPerSecond);
            Assert.False(onePascalPerSecond >= twoPascalsPerSecond);
            Assert.False(twoPascalsPerSecond < onePascalPerSecond);
            Assert.False(twoPascalsPerSecond <= onePascalPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Equal(0, pascalpersecond.CompareTo(pascalpersecond));
            Assert.True(pascalpersecond.CompareTo(PressureChangeRate.Zero) > 0);
            Assert.True(PressureChangeRate.Zero.CompareTo(pascalpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Throws<ArgumentException>(() => pascalpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => pascalpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = PressureChangeRate.FromPascalsPerSecond(1);
            var b = PressureChangeRate.FromPascalsPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = PressureChangeRate.FromPascalsPerSecond(1);
            var b = PressureChangeRate.FromPascalsPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.True(v.Equals(PressureChangeRate.FromPascalsPerSecond(1), PascalsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(PressureChangeRate.Zero, PascalsPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.False(pascalpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.False(pascalpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(PressureChangeRateUnit.Undefined, PressureChangeRate.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PressureChangeRateUnit)).Cast<PressureChangeRateUnit>();
            foreach(var unit in units)
            {
                if(unit == PressureChangeRateUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(PressureChangeRate.BaseDimensions is null);
        }
    }
}
