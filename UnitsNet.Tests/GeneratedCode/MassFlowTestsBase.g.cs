//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MassFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassFlowTestsBase
    {
        protected abstract double CentigramsPerDayInOneGramPerSecond { get; }
        protected abstract double CentigramsPerSecondInOneGramPerSecond { get; }
        protected abstract double DecagramsPerDayInOneGramPerSecond { get; }
        protected abstract double DecagramsPerSecondInOneGramPerSecond { get; }
        protected abstract double DecigramsPerDayInOneGramPerSecond { get; }
        protected abstract double DecigramsPerSecondInOneGramPerSecond { get; }
        protected abstract double GramsPerDayInOneGramPerSecond { get; }
        protected abstract double GramsPerHourInOneGramPerSecond { get; }
        protected abstract double GramsPerSecondInOneGramPerSecond { get; }
        protected abstract double HectogramsPerDayInOneGramPerSecond { get; }
        protected abstract double HectogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double KilogramsPerDayInOneGramPerSecond { get; }
        protected abstract double KilogramsPerHourInOneGramPerSecond { get; }
        protected abstract double KilogramsPerMinuteInOneGramPerSecond { get; }
        protected abstract double KilogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double MegagramsPerDayInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerDayInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerHourInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerMinuteInOneGramPerSecond { get; }
        protected abstract double MicrogramsPerDayInOneGramPerSecond { get; }
        protected abstract double MicrogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double MilligramsPerDayInOneGramPerSecond { get; }
        protected abstract double MilligramsPerSecondInOneGramPerSecond { get; }
        protected abstract double NanogramsPerDayInOneGramPerSecond { get; }
        protected abstract double NanogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double PoundsPerDayInOneGramPerSecond { get; }
        protected abstract double PoundsPerHourInOneGramPerSecond { get; }
        protected abstract double PoundsPerMinuteInOneGramPerSecond { get; }
        protected abstract double ShortTonsPerHourInOneGramPerSecond { get; }
        protected abstract double TonnesPerDayInOneGramPerSecond { get; }
        protected abstract double TonnesPerHourInOneGramPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double GramsPerHourTolerance { get { return 1e-5; } }
        protected virtual double GramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegagramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerDayTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerHourTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double ShortTonsPerHourTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerDayTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerHourTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MassFlow((double)0.0, MassFlowUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MassFlow(double.PositiveInfinity, MassFlowUnit.GramPerSecond));
            Assert.Throws<ArgumentException>(() => new MassFlow(double.NegativeInfinity, MassFlowUnit.GramPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MassFlow(double.NaN, MassFlowUnit.GramPerSecond));
        }

        [Fact]
        public void GramPerSecondToMassFlowUnits()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(CentigramsPerDayInOneGramPerSecond, grampersecond.CentigramsPerDay, CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(CentigramsPerSecondInOneGramPerSecond, grampersecond.CentigramsPerSecond, CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecagramsPerDayInOneGramPerSecond, grampersecond.DecagramsPerDay, DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(DecagramsPerSecondInOneGramPerSecond, grampersecond.DecagramsPerSecond, DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecigramsPerDayInOneGramPerSecond, grampersecond.DecigramsPerDay, DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(DecigramsPerSecondInOneGramPerSecond, grampersecond.DecigramsPerSecond, DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(GramsPerDayInOneGramPerSecond, grampersecond.GramsPerDay, GramsPerDayTolerance);
            AssertEx.EqualTolerance(GramsPerHourInOneGramPerSecond, grampersecond.GramsPerHour, GramsPerHourTolerance);
            AssertEx.EqualTolerance(GramsPerSecondInOneGramPerSecond, grampersecond.GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(HectogramsPerDayInOneGramPerSecond, grampersecond.HectogramsPerDay, HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(HectogramsPerSecondInOneGramPerSecond, grampersecond.HectogramsPerSecond, HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(KilogramsPerDayInOneGramPerSecond, grampersecond.KilogramsPerDay, KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(KilogramsPerHourInOneGramPerSecond, grampersecond.KilogramsPerHour, KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(KilogramsPerMinuteInOneGramPerSecond, grampersecond.KilogramsPerMinute, KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilogramsPerSecondInOneGramPerSecond, grampersecond.KilogramsPerSecond, KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MegagramsPerDayInOneGramPerSecond, grampersecond.MegagramsPerDay, MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerDayInOneGramPerSecond, grampersecond.MegapoundsPerDay, MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerHourInOneGramPerSecond, grampersecond.MegapoundsPerHour, MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMinuteInOneGramPerSecond, grampersecond.MegapoundsPerMinute, MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDayInOneGramPerSecond, grampersecond.MicrogramsPerDay, MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(MicrogramsPerSecondInOneGramPerSecond, grampersecond.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MilligramsPerDayInOneGramPerSecond, grampersecond.MilligramsPerDay, MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(MilligramsPerSecondInOneGramPerSecond, grampersecond.MilligramsPerSecond, MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(NanogramsPerDayInOneGramPerSecond, grampersecond.NanogramsPerDay, NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(NanogramsPerSecondInOneGramPerSecond, grampersecond.NanogramsPerSecond, NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsPerDayInOneGramPerSecond, grampersecond.PoundsPerDay, PoundsPerDayTolerance);
            AssertEx.EqualTolerance(PoundsPerHourInOneGramPerSecond, grampersecond.PoundsPerHour, PoundsPerHourTolerance);
            AssertEx.EqualTolerance(PoundsPerMinuteInOneGramPerSecond, grampersecond.PoundsPerMinute, PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(ShortTonsPerHourInOneGramPerSecond, grampersecond.ShortTonsPerHour, ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(TonnesPerDayInOneGramPerSecond, grampersecond.TonnesPerDay, TonnesPerDayTolerance);
            AssertEx.EqualTolerance(TonnesPerHourInOneGramPerSecond, grampersecond.TonnesPerHour, TonnesPerHourTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.CentigramPerDay).CentigramsPerDay, CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.CentigramPerSecond).CentigramsPerSecond, CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.DecagramPerDay).DecagramsPerDay, DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.DecagramPerSecond).DecagramsPerSecond, DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.DecigramPerDay).DecigramsPerDay, DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.DecigramPerSecond).DecigramsPerSecond, DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.GramPerDay).GramsPerDay, GramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.GramPerHour).GramsPerHour, GramsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.GramPerSecond).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.HectogramPerDay).HectogramsPerDay, HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.HectogramPerSecond).HectogramsPerSecond, HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.KilogramPerDay).KilogramsPerDay, KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.KilogramPerHour).KilogramsPerHour, KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.KilogramPerMinute).KilogramsPerMinute, KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.KilogramPerSecond).KilogramsPerSecond, KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MegagramPerDay).MegagramsPerDay, MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MegapoundPerDay).MegapoundsPerDay, MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MegapoundPerHour).MegapoundsPerHour, MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MegapoundPerMinute).MegapoundsPerMinute, MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MicrogramPerDay).MicrogramsPerDay, MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MicrogramPerSecond).MicrogramsPerSecond, MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MilligramPerDay).MilligramsPerDay, MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.MilligramPerSecond).MilligramsPerSecond, MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.NanogramPerDay).NanogramsPerDay, NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.NanogramPerSecond).NanogramsPerSecond, NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.PoundPerDay).PoundsPerDay, PoundsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.PoundPerHour).PoundsPerHour, PoundsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.PoundPerMinute).PoundsPerMinute, PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.ShortTonPerHour).ShortTonsPerHour, ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.TonnePerDay).TonnesPerDay, TonnesPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.From(1, MassFlowUnit.TonnePerHour).TonnesPerHour, TonnesPerHourTolerance);
        }

        [Fact]
        public void FromGramsPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MassFlow.FromGramsPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MassFlow.FromGramsPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromGramsPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MassFlow.FromGramsPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var grampersecond = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(CentigramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.CentigramPerDay), CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(CentigramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.CentigramPerSecond), CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecagramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecagramPerDay), DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(DecagramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecagramPerSecond), DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecigramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecigramPerDay), DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(DecigramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecigramPerSecond), DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(GramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.GramPerDay), GramsPerDayTolerance);
            AssertEx.EqualTolerance(GramsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.GramPerHour), GramsPerHourTolerance);
            AssertEx.EqualTolerance(GramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.GramPerSecond), GramsPerSecondTolerance);
            AssertEx.EqualTolerance(HectogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.HectogramPerDay), HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(HectogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.HectogramPerSecond), HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(KilogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerDay), KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(KilogramsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerHour), KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(KilogramsPerMinuteInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerMinute), KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerSecond), KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MegagramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegagramPerDay), MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerDay), MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerHour), MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMinuteInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerMinute), MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MicrogramPerDay), MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(MicrogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.MicrogramPerSecond), MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MilligramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MilligramPerDay), MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(MilligramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.MilligramPerSecond), MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(NanogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.NanogramPerDay), NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(NanogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.NanogramPerSecond), NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerDay), PoundsPerDayTolerance);
            AssertEx.EqualTolerance(PoundsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerHour), PoundsPerHourTolerance);
            AssertEx.EqualTolerance(PoundsPerMinuteInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerMinute), PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(ShortTonsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.ShortTonPerHour), ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(TonnesPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.TonnePerDay), TonnesPerDayTolerance);
            AssertEx.EqualTolerance(TonnesPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.TonnePerHour), TonnesPerHourTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var grampersecond = MassFlow.FromGramsPerSecond(1);

            var centigramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.CentigramPerDay);
            AssertEx.EqualTolerance(CentigramsPerDayInOneGramPerSecond, (double)centigramperdayQuantity.Value, CentigramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.CentigramPerDay, centigramperdayQuantity.Unit);

            var centigrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.CentigramPerSecond);
            AssertEx.EqualTolerance(CentigramsPerSecondInOneGramPerSecond, (double)centigrampersecondQuantity.Value, CentigramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.CentigramPerSecond, centigrampersecondQuantity.Unit);

            var decagramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.DecagramPerDay);
            AssertEx.EqualTolerance(DecagramsPerDayInOneGramPerSecond, (double)decagramperdayQuantity.Value, DecagramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.DecagramPerDay, decagramperdayQuantity.Unit);

            var decagrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.DecagramPerSecond);
            AssertEx.EqualTolerance(DecagramsPerSecondInOneGramPerSecond, (double)decagrampersecondQuantity.Value, DecagramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.DecagramPerSecond, decagrampersecondQuantity.Unit);

            var decigramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.DecigramPerDay);
            AssertEx.EqualTolerance(DecigramsPerDayInOneGramPerSecond, (double)decigramperdayQuantity.Value, DecigramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.DecigramPerDay, decigramperdayQuantity.Unit);

            var decigrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.DecigramPerSecond);
            AssertEx.EqualTolerance(DecigramsPerSecondInOneGramPerSecond, (double)decigrampersecondQuantity.Value, DecigramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.DecigramPerSecond, decigrampersecondQuantity.Unit);

            var gramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.GramPerDay);
            AssertEx.EqualTolerance(GramsPerDayInOneGramPerSecond, (double)gramperdayQuantity.Value, GramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.GramPerDay, gramperdayQuantity.Unit);

            var gramperhourQuantity = grampersecond.ToUnit(MassFlowUnit.GramPerHour);
            AssertEx.EqualTolerance(GramsPerHourInOneGramPerSecond, (double)gramperhourQuantity.Value, GramsPerHourTolerance);
            Assert.Equal(MassFlowUnit.GramPerHour, gramperhourQuantity.Unit);

            var grampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.GramPerSecond);
            AssertEx.EqualTolerance(GramsPerSecondInOneGramPerSecond, (double)grampersecondQuantity.Value, GramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.GramPerSecond, grampersecondQuantity.Unit);

            var hectogramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.HectogramPerDay);
            AssertEx.EqualTolerance(HectogramsPerDayInOneGramPerSecond, (double)hectogramperdayQuantity.Value, HectogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.HectogramPerDay, hectogramperdayQuantity.Unit);

            var hectogrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.HectogramPerSecond);
            AssertEx.EqualTolerance(HectogramsPerSecondInOneGramPerSecond, (double)hectogrampersecondQuantity.Value, HectogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.HectogramPerSecond, hectogrampersecondQuantity.Unit);

            var kilogramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.KilogramPerDay);
            AssertEx.EqualTolerance(KilogramsPerDayInOneGramPerSecond, (double)kilogramperdayQuantity.Value, KilogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerDay, kilogramperdayQuantity.Unit);

            var kilogramperhourQuantity = grampersecond.ToUnit(MassFlowUnit.KilogramPerHour);
            AssertEx.EqualTolerance(KilogramsPerHourInOneGramPerSecond, (double)kilogramperhourQuantity.Value, KilogramsPerHourTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerHour, kilogramperhourQuantity.Unit);

            var kilogramperminuteQuantity = grampersecond.ToUnit(MassFlowUnit.KilogramPerMinute);
            AssertEx.EqualTolerance(KilogramsPerMinuteInOneGramPerSecond, (double)kilogramperminuteQuantity.Value, KilogramsPerMinuteTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerMinute, kilogramperminuteQuantity.Unit);

            var kilogrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.KilogramPerSecond);
            AssertEx.EqualTolerance(KilogramsPerSecondInOneGramPerSecond, (double)kilogrampersecondQuantity.Value, KilogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerSecond, kilogrampersecondQuantity.Unit);

            var megagramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.MegagramPerDay);
            AssertEx.EqualTolerance(MegagramsPerDayInOneGramPerSecond, (double)megagramperdayQuantity.Value, MegagramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MegagramPerDay, megagramperdayQuantity.Unit);

            var megapoundperdayQuantity = grampersecond.ToUnit(MassFlowUnit.MegapoundPerDay);
            AssertEx.EqualTolerance(MegapoundsPerDayInOneGramPerSecond, (double)megapoundperdayQuantity.Value, MegapoundsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerDay, megapoundperdayQuantity.Unit);

            var megapoundperhourQuantity = grampersecond.ToUnit(MassFlowUnit.MegapoundPerHour);
            AssertEx.EqualTolerance(MegapoundsPerHourInOneGramPerSecond, (double)megapoundperhourQuantity.Value, MegapoundsPerHourTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerHour, megapoundperhourQuantity.Unit);

            var megapoundperminuteQuantity = grampersecond.ToUnit(MassFlowUnit.MegapoundPerMinute);
            AssertEx.EqualTolerance(MegapoundsPerMinuteInOneGramPerSecond, (double)megapoundperminuteQuantity.Value, MegapoundsPerMinuteTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerMinute, megapoundperminuteQuantity.Unit);

            var microgramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.MicrogramPerDay);
            AssertEx.EqualTolerance(MicrogramsPerDayInOneGramPerSecond, (double)microgramperdayQuantity.Value, MicrogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MicrogramPerDay, microgramperdayQuantity.Unit);

            var microgrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.MicrogramPerSecond);
            AssertEx.EqualTolerance(MicrogramsPerSecondInOneGramPerSecond, (double)microgrampersecondQuantity.Value, MicrogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.MicrogramPerSecond, microgrampersecondQuantity.Unit);

            var milligramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.MilligramPerDay);
            AssertEx.EqualTolerance(MilligramsPerDayInOneGramPerSecond, (double)milligramperdayQuantity.Value, MilligramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MilligramPerDay, milligramperdayQuantity.Unit);

            var milligrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.MilligramPerSecond);
            AssertEx.EqualTolerance(MilligramsPerSecondInOneGramPerSecond, (double)milligrampersecondQuantity.Value, MilligramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.MilligramPerSecond, milligrampersecondQuantity.Unit);

            var nanogramperdayQuantity = grampersecond.ToUnit(MassFlowUnit.NanogramPerDay);
            AssertEx.EqualTolerance(NanogramsPerDayInOneGramPerSecond, (double)nanogramperdayQuantity.Value, NanogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.NanogramPerDay, nanogramperdayQuantity.Unit);

            var nanogrampersecondQuantity = grampersecond.ToUnit(MassFlowUnit.NanogramPerSecond);
            AssertEx.EqualTolerance(NanogramsPerSecondInOneGramPerSecond, (double)nanogrampersecondQuantity.Value, NanogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.NanogramPerSecond, nanogrampersecondQuantity.Unit);

            var poundperdayQuantity = grampersecond.ToUnit(MassFlowUnit.PoundPerDay);
            AssertEx.EqualTolerance(PoundsPerDayInOneGramPerSecond, (double)poundperdayQuantity.Value, PoundsPerDayTolerance);
            Assert.Equal(MassFlowUnit.PoundPerDay, poundperdayQuantity.Unit);

            var poundperhourQuantity = grampersecond.ToUnit(MassFlowUnit.PoundPerHour);
            AssertEx.EqualTolerance(PoundsPerHourInOneGramPerSecond, (double)poundperhourQuantity.Value, PoundsPerHourTolerance);
            Assert.Equal(MassFlowUnit.PoundPerHour, poundperhourQuantity.Unit);

            var poundperminuteQuantity = grampersecond.ToUnit(MassFlowUnit.PoundPerMinute);
            AssertEx.EqualTolerance(PoundsPerMinuteInOneGramPerSecond, (double)poundperminuteQuantity.Value, PoundsPerMinuteTolerance);
            Assert.Equal(MassFlowUnit.PoundPerMinute, poundperminuteQuantity.Unit);

            var shorttonperhourQuantity = grampersecond.ToUnit(MassFlowUnit.ShortTonPerHour);
            AssertEx.EqualTolerance(ShortTonsPerHourInOneGramPerSecond, (double)shorttonperhourQuantity.Value, ShortTonsPerHourTolerance);
            Assert.Equal(MassFlowUnit.ShortTonPerHour, shorttonperhourQuantity.Unit);

            var tonneperdayQuantity = grampersecond.ToUnit(MassFlowUnit.TonnePerDay);
            AssertEx.EqualTolerance(TonnesPerDayInOneGramPerSecond, (double)tonneperdayQuantity.Value, TonnesPerDayTolerance);
            Assert.Equal(MassFlowUnit.TonnePerDay, tonneperdayQuantity.Unit);

            var tonneperhourQuantity = grampersecond.ToUnit(MassFlowUnit.TonnePerHour);
            AssertEx.EqualTolerance(TonnesPerHourInOneGramPerSecond, (double)tonneperhourQuantity.Value, TonnesPerHourTolerance);
            Assert.Equal(MassFlowUnit.TonnePerHour, tonneperhourQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(1, MassFlow.FromCentigramsPerDay(grampersecond.CentigramsPerDay).GramsPerSecond, CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromCentigramsPerSecond(grampersecond.CentigramsPerSecond).GramsPerSecond, CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecagramsPerDay(grampersecond.DecagramsPerDay).GramsPerSecond, DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecagramsPerSecond(grampersecond.DecagramsPerSecond).GramsPerSecond, DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecigramsPerDay(grampersecond.DecigramsPerDay).GramsPerSecond, DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecigramsPerSecond(grampersecond.DecigramsPerSecond).GramsPerSecond, DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromGramsPerDay(grampersecond.GramsPerDay).GramsPerSecond, GramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromGramsPerHour(grampersecond.GramsPerHour).GramsPerSecond, GramsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromGramsPerSecond(grampersecond.GramsPerSecond).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromHectogramsPerDay(grampersecond.HectogramsPerDay).GramsPerSecond, HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromHectogramsPerSecond(grampersecond.HectogramsPerSecond).GramsPerSecond, HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerDay(grampersecond.KilogramsPerDay).GramsPerSecond, KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerHour(grampersecond.KilogramsPerHour).GramsPerSecond, KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerMinute(grampersecond.KilogramsPerMinute).GramsPerSecond, KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerSecond(grampersecond.KilogramsPerSecond).GramsPerSecond, KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegagramsPerDay(grampersecond.MegagramsPerDay).GramsPerSecond, MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerDay(grampersecond.MegapoundsPerDay).GramsPerSecond, MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerHour(grampersecond.MegapoundsPerHour).GramsPerSecond, MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerMinute(grampersecond.MegapoundsPerMinute).GramsPerSecond, MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMicrogramsPerDay(grampersecond.MicrogramsPerDay).GramsPerSecond, MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMicrogramsPerSecond(grampersecond.MicrogramsPerSecond).GramsPerSecond, MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMilligramsPerDay(grampersecond.MilligramsPerDay).GramsPerSecond, MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMilligramsPerSecond(grampersecond.MilligramsPerSecond).GramsPerSecond, MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromNanogramsPerDay(grampersecond.NanogramsPerDay).GramsPerSecond, NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromNanogramsPerSecond(grampersecond.NanogramsPerSecond).GramsPerSecond, NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerDay(grampersecond.PoundsPerDay).GramsPerSecond, PoundsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerHour(grampersecond.PoundsPerHour).GramsPerSecond, PoundsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerMinute(grampersecond.PoundsPerMinute).GramsPerSecond, PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromShortTonsPerHour(grampersecond.ShortTonsPerHour).GramsPerSecond, ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromTonnesPerDay(grampersecond.TonnesPerDay).GramsPerSecond, TonnesPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromTonnesPerHour(grampersecond.TonnesPerHour).GramsPerSecond, TonnesPerHourTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MassFlow v = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MassFlow.FromGramsPerSecond(3)-v).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MassFlow.FromGramsPerSecond(10)/5).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, MassFlow.FromGramsPerSecond(10)/MassFlow.FromGramsPerSecond(5), GramsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MassFlow oneGramPerSecond = MassFlow.FromGramsPerSecond(1);
            MassFlow twoGramsPerSecond = MassFlow.FromGramsPerSecond(2);

            Assert.True(oneGramPerSecond < twoGramsPerSecond);
            Assert.True(oneGramPerSecond <= twoGramsPerSecond);
            Assert.True(twoGramsPerSecond > oneGramPerSecond);
            Assert.True(twoGramsPerSecond >= oneGramPerSecond);

            Assert.False(oneGramPerSecond > twoGramsPerSecond);
            Assert.False(oneGramPerSecond >= twoGramsPerSecond);
            Assert.False(twoGramsPerSecond < oneGramPerSecond);
            Assert.False(twoGramsPerSecond <= oneGramPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.Equal(0, grampersecond.CompareTo(grampersecond));
            Assert.True(grampersecond.CompareTo(MassFlow.Zero) > 0);
            Assert.True(MassFlow.Zero.CompareTo(grampersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.Throws<ArgumentException>(() => grampersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => grampersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = MassFlow.FromGramsPerSecond(1);
            var b = MassFlow.FromGramsPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = MassFlow.FromGramsPerSecond(1);
            var b = MassFlow.FromGramsPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = MassFlow.FromGramsPerSecond(1);
            Assert.True(v.Equals(MassFlow.FromGramsPerSecond(1), GramsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MassFlow.Zero, GramsPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.False(grampersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.False(grampersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MassFlowUnit.Undefined, MassFlow.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MassFlowUnit)).Cast<MassFlowUnit>();
            foreach(var unit in units)
            {
                if(unit == MassFlowUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MassFlow.BaseDimensions is null);
        }
    }
}
