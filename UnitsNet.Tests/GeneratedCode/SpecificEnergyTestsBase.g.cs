//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificEnergyTestsBase
    {
        protected abstract double BtuPerPoundInOneJoulePerKilogram { get; }
        protected abstract double CaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double CenticaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double CentijoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double CentiwattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double DecacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double DecajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double DecawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double DecicaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double DecijoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double DeciwattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double ExacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double ExajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double ExawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double FemtocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double FemtojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double FemtowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double GigacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double GigajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double GigawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double HectocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double HectojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double HectowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double JoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double KilojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double MegajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MicrocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double MicrojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MicrowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MillicaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double MillijoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MilliwattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double NanocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double NanojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double NanowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double PetacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double PetajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double PetawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double PicocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double PicojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double PicowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double QutracaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double QutrajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double QutrawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double TeracaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double TerajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double TerawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double VettacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double VettajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double VettawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double WattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double YottacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double YottajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double YottawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double ZettacaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double ZettajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double ZettawattHoursPerKilogramInOneJoulePerKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtuPerPoundTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double CenticaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double CentijoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double CentiwattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double DecajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DecicaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double DecijoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double DeciwattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double ExacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double ExajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double ExawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double FemtocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double FemtojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double FemtowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double HectocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double HectojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double HectowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MicrocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double MicrojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MicrowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MillicaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MilliwattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double NanocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double NanojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double NanowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PetacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double PetajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PetawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PicocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double PicojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PicowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double QutracaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double QutrajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double QutrawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double TeracaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double TerajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double TerawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double VettacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double VettajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double VettawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double YottacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double YottajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double YottawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double ZettacaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double ZettajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double ZettawattHoursPerKilogramTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEnergy((double)0.0, SpecificEnergyUnit.Undefined));
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(double.PositiveInfinity, SpecificEnergyUnit.JoulePerKilogram));
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(double.NegativeInfinity, SpecificEnergyUnit.JoulePerKilogram));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(double.NaN, SpecificEnergyUnit.JoulePerKilogram));
        }

        [Fact]
        public void JoulePerKilogramToSpecificEnergyUnits()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, jouleperkilogram.BtuPerPound, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.CaloriesPerGram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(CenticaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.CenticaloriesPerGram, CenticaloriesPerGramTolerance);
            AssertEx.EqualTolerance(CentijoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.CentijoulesPerKilogram, CentijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(CentiwattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.CentiwattHoursPerKilogram, CentiwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(DecacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.DecacaloriesPerGram, DecacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(DecajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.DecajoulesPerKilogram, DecajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(DecawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.DecawattHoursPerKilogram, DecawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(DecicaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.DecicaloriesPerGram, DecicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(DecijoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.DecijoulesPerKilogram, DecijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(DeciwattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.DeciwattHoursPerKilogram, DeciwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(ExacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.ExacaloriesPerGram, ExacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(ExajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.ExajoulesPerKilogram, ExajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(ExawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.ExawattHoursPerKilogram, ExawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(FemtocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.FemtocaloriesPerGram, FemtocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(FemtojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.FemtojoulesPerKilogram, FemtojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(FemtowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.FemtowattHoursPerKilogram, FemtowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(GigacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.GigacaloriesPerGram, GigacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(GigajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.GigajoulesPerKilogram, GigajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(HectocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.HectocaloriesPerGram, HectocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(HectojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.HectojoulesPerKilogram, HectojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(HectowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.HectowattHoursPerKilogram, HectowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MegacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.MegacaloriesPerGram, MegacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.MicrocaloriesPerGram, MicrocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(MicrojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.MicrojoulesPerKilogram, MicrojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.MicrowattHoursPerKilogram, MicrowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MillicaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.MillicaloriesPerGram, MillicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(MillijoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.MillijoulesPerKilogram, MillijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MilliwattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.MilliwattHoursPerKilogram, MilliwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(NanocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.NanocaloriesPerGram, NanocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(NanojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.NanojoulesPerKilogram, NanojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(NanowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.NanowattHoursPerKilogram, NanowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(PetacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.PetacaloriesPerGram, PetacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(PetajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.PetajoulesPerKilogram, PetajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(PetawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.PetawattHoursPerKilogram, PetawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(PicocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.PicocaloriesPerGram, PicocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(PicojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.PicojoulesPerKilogram, PicojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(PicowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.PicowattHoursPerKilogram, PicowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(QutracaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.QutracaloriesPerGram, QutracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(QutrajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.QutrajoulesPerKilogram, QutrajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(QutrawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.QutrawattHoursPerKilogram, QutrawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(TeracaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.TeracaloriesPerGram, TeracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(TerajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.TerajoulesPerKilogram, TerajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(TerawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.TerawattHoursPerKilogram, TerawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(VettacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.VettacaloriesPerGram, VettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(VettajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.VettajoulesPerKilogram, VettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(VettawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.VettawattHoursPerKilogram, VettawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.WattHoursPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(YottacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.YottacaloriesPerGram, YottacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(YottajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.YottajoulesPerKilogram, YottajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(YottawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.YottawattHoursPerKilogram, YottawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(ZettacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.ZettacaloriesPerGram, ZettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(ZettajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.ZettajoulesPerKilogram, ZettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(ZettawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.ZettawattHoursPerKilogram, ZettawattHoursPerKilogramTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.BtuPerPound).BtuPerPound, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.CaloriePerGram).CaloriesPerGram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.CenticaloriePerGram).CenticaloriesPerGram, CenticaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.CentijoulePerKilogram).CentijoulesPerKilogram, CentijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.CentiwattHourPerKilogram).CentiwattHoursPerKilogram, CentiwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.DecacaloriePerGram).DecacaloriesPerGram, DecacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.DecajoulePerKilogram).DecajoulesPerKilogram, DecajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.DecawattHourPerKilogram).DecawattHoursPerKilogram, DecawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.DecicaloriePerGram).DecicaloriesPerGram, DecicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.DecijoulePerKilogram).DecijoulesPerKilogram, DecijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.DeciwattHourPerKilogram).DeciwattHoursPerKilogram, DeciwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.ExacaloriePerGram).ExacaloriesPerGram, ExacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.ExajoulePerKilogram).ExajoulesPerKilogram, ExajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.ExawattHourPerKilogram).ExawattHoursPerKilogram, ExawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.FemtocaloriePerGram).FemtocaloriesPerGram, FemtocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.FemtojoulePerKilogram).FemtojoulesPerKilogram, FemtojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.FemtowattHourPerKilogram).FemtowattHoursPerKilogram, FemtowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.GigacaloriePerGram).GigacaloriesPerGram, GigacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.GigajoulePerKilogram).GigajoulesPerKilogram, GigajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.GigawattHourPerKilogram).GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.HectocaloriePerGram).HectocaloriesPerGram, HectocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.HectojoulePerKilogram).HectojoulesPerKilogram, HectojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.HectowattHourPerKilogram).HectowattHoursPerKilogram, HectowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.JoulePerKilogram).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.KilocaloriePerGram).KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.KilojoulePerKilogram).KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.KilowattHourPerKilogram).KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MegacaloriePerGram).MegacaloriesPerGram, MegacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MegajoulePerKilogram).MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MegawattHourPerKilogram).MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MicrocaloriePerGram).MicrocaloriesPerGram, MicrocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MicrojoulePerKilogram).MicrojoulesPerKilogram, MicrojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MicrowattHourPerKilogram).MicrowattHoursPerKilogram, MicrowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MillicaloriePerGram).MillicaloriesPerGram, MillicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MillijoulePerKilogram).MillijoulesPerKilogram, MillijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.MilliwattHourPerKilogram).MilliwattHoursPerKilogram, MilliwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.NanocaloriePerGram).NanocaloriesPerGram, NanocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.NanojoulePerKilogram).NanojoulesPerKilogram, NanojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.NanowattHourPerKilogram).NanowattHoursPerKilogram, NanowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.PetacaloriePerGram).PetacaloriesPerGram, PetacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.PetajoulePerKilogram).PetajoulesPerKilogram, PetajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.PetawattHourPerKilogram).PetawattHoursPerKilogram, PetawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.PicocaloriePerGram).PicocaloriesPerGram, PicocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.PicojoulePerKilogram).PicojoulesPerKilogram, PicojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.PicowattHourPerKilogram).PicowattHoursPerKilogram, PicowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.QutracaloriePerGram).QutracaloriesPerGram, QutracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.QutrajoulePerKilogram).QutrajoulesPerKilogram, QutrajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.QutrawattHourPerKilogram).QutrawattHoursPerKilogram, QutrawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.TeracaloriePerGram).TeracaloriesPerGram, TeracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.TerajoulePerKilogram).TerajoulesPerKilogram, TerajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.TerawattHourPerKilogram).TerawattHoursPerKilogram, TerawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.VettacaloriePerGram).VettacaloriesPerGram, VettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.VettajoulePerKilogram).VettajoulesPerKilogram, VettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.VettawattHourPerKilogram).VettawattHoursPerKilogram, VettawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.WattHourPerKilogram).WattHoursPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.YottacaloriePerGram).YottacaloriesPerGram, YottacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.YottajoulePerKilogram).YottajoulesPerKilogram, YottajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.YottawattHourPerKilogram).YottawattHoursPerKilogram, YottawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.ZettacaloriePerGram).ZettacaloriesPerGram, ZettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.ZettajoulePerKilogram).ZettajoulesPerKilogram, ZettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.From(1, SpecificEnergyUnit.ZettawattHourPerKilogram).ZettawattHoursPerKilogram, ZettawattHoursPerKilogramTolerance);
        }

        [Fact]
        public void FromJoulesPerKilogram_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificEnergy.FromJoulesPerKilogram(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => SpecificEnergy.FromJoulesPerKilogram(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoulesPerKilogram_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificEnergy.FromJoulesPerKilogram(double.NaN));
        }

        [Fact]
        public void As()
        {
            var jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.BtuPerPound), BtuPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.CaloriePerGram), CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(CenticaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.CenticaloriePerGram), CenticaloriesPerGramTolerance);
            AssertEx.EqualTolerance(CentijoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.CentijoulePerKilogram), CentijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(CentiwattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.CentiwattHourPerKilogram), CentiwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(DecacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.DecacaloriePerGram), DecacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(DecajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.DecajoulePerKilogram), DecajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(DecawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.DecawattHourPerKilogram), DecawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(DecicaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.DecicaloriePerGram), DecicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(DecijoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.DecijoulePerKilogram), DecijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(DeciwattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.DeciwattHourPerKilogram), DeciwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(ExacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.ExacaloriePerGram), ExacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(ExajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.ExajoulePerKilogram), ExajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(ExawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.ExawattHourPerKilogram), ExawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(FemtocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.FemtocaloriePerGram), FemtocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(FemtojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.FemtojoulePerKilogram), FemtojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(FemtowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.FemtowattHourPerKilogram), FemtowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(GigacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigacaloriePerGram), GigacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(GigajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigajoulePerKilogram), GigajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattHourPerKilogram), GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(HectocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.HectocaloriePerGram), HectocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(HectojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.HectojoulePerKilogram), HectojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(HectowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.HectowattHourPerKilogram), HectowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.JoulePerKilogram), JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilocaloriePerGram), KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilojoulePerKilogram), KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattHourPerKilogram), KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MegacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegacaloriePerGram), MegacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegajoulePerKilogram), MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattHourPerKilogram), MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MicrocaloriePerGram), MicrocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(MicrojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MicrojoulePerKilogram), MicrojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MicrowattHourPerKilogram), MicrowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MillicaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MillicaloriePerGram), MillicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(MillijoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MillijoulePerKilogram), MillijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MilliwattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MilliwattHourPerKilogram), MilliwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(NanocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.NanocaloriePerGram), NanocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(NanojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.NanojoulePerKilogram), NanojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(NanowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.NanowattHourPerKilogram), NanowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(PetacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.PetacaloriePerGram), PetacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(PetajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.PetajoulePerKilogram), PetajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(PetawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.PetawattHourPerKilogram), PetawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(PicocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.PicocaloriePerGram), PicocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(PicojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.PicojoulePerKilogram), PicojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(PicowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.PicowattHourPerKilogram), PicowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(QutracaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.QutracaloriePerGram), QutracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(QutrajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.QutrajoulePerKilogram), QutrajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(QutrawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.QutrawattHourPerKilogram), QutrawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(TeracaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TeracaloriePerGram), TeracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(TerajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerajoulePerKilogram), TerajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(TerawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattHourPerKilogram), TerawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(VettacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.VettacaloriePerGram), VettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(VettajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.VettajoulePerKilogram), VettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(VettawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.VettawattHourPerKilogram), VettawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattHourPerKilogram), WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(YottacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.YottacaloriePerGram), YottacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(YottajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.YottajoulePerKilogram), YottajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(YottawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.YottawattHourPerKilogram), YottawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(ZettacaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.ZettacaloriePerGram), ZettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(ZettajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.ZettajoulePerKilogram), ZettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(ZettawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.ZettawattHourPerKilogram), ZettawattHoursPerKilogramTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);

            var btuperpoundQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.BtuPerPound);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, (double)btuperpoundQuantity.Value, BtuPerPoundTolerance);
            Assert.Equal(SpecificEnergyUnit.BtuPerPound, btuperpoundQuantity.Unit);

            var caloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.CaloriePerGram);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, (double)caloriepergramQuantity.Value, CaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.CaloriePerGram, caloriepergramQuantity.Unit);

            var centicaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.CenticaloriePerGram);
            AssertEx.EqualTolerance(CenticaloriesPerGramInOneJoulePerKilogram, (double)centicaloriepergramQuantity.Value, CenticaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.CenticaloriePerGram, centicaloriepergramQuantity.Unit);

            var centijouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.CentijoulePerKilogram);
            AssertEx.EqualTolerance(CentijoulesPerKilogramInOneJoulePerKilogram, (double)centijouleperkilogramQuantity.Value, CentijoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.CentijoulePerKilogram, centijouleperkilogramQuantity.Unit);

            var centiwatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.CentiwattHourPerKilogram);
            AssertEx.EqualTolerance(CentiwattHoursPerKilogramInOneJoulePerKilogram, (double)centiwatthourperkilogramQuantity.Value, CentiwattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.CentiwattHourPerKilogram, centiwatthourperkilogramQuantity.Unit);

            var decacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.DecacaloriePerGram);
            AssertEx.EqualTolerance(DecacaloriesPerGramInOneJoulePerKilogram, (double)decacaloriepergramQuantity.Value, DecacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.DecacaloriePerGram, decacaloriepergramQuantity.Unit);

            var decajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.DecajoulePerKilogram);
            AssertEx.EqualTolerance(DecajoulesPerKilogramInOneJoulePerKilogram, (double)decajouleperkilogramQuantity.Value, DecajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.DecajoulePerKilogram, decajouleperkilogramQuantity.Unit);

            var decawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.DecawattHourPerKilogram);
            AssertEx.EqualTolerance(DecawattHoursPerKilogramInOneJoulePerKilogram, (double)decawatthourperkilogramQuantity.Value, DecawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.DecawattHourPerKilogram, decawatthourperkilogramQuantity.Unit);

            var decicaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.DecicaloriePerGram);
            AssertEx.EqualTolerance(DecicaloriesPerGramInOneJoulePerKilogram, (double)decicaloriepergramQuantity.Value, DecicaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.DecicaloriePerGram, decicaloriepergramQuantity.Unit);

            var decijouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.DecijoulePerKilogram);
            AssertEx.EqualTolerance(DecijoulesPerKilogramInOneJoulePerKilogram, (double)decijouleperkilogramQuantity.Value, DecijoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.DecijoulePerKilogram, decijouleperkilogramQuantity.Unit);

            var deciwatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.DeciwattHourPerKilogram);
            AssertEx.EqualTolerance(DeciwattHoursPerKilogramInOneJoulePerKilogram, (double)deciwatthourperkilogramQuantity.Value, DeciwattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.DeciwattHourPerKilogram, deciwatthourperkilogramQuantity.Unit);

            var exacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.ExacaloriePerGram);
            AssertEx.EqualTolerance(ExacaloriesPerGramInOneJoulePerKilogram, (double)exacaloriepergramQuantity.Value, ExacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.ExacaloriePerGram, exacaloriepergramQuantity.Unit);

            var exajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.ExajoulePerKilogram);
            AssertEx.EqualTolerance(ExajoulesPerKilogramInOneJoulePerKilogram, (double)exajouleperkilogramQuantity.Value, ExajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.ExajoulePerKilogram, exajouleperkilogramQuantity.Unit);

            var exawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.ExawattHourPerKilogram);
            AssertEx.EqualTolerance(ExawattHoursPerKilogramInOneJoulePerKilogram, (double)exawatthourperkilogramQuantity.Value, ExawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.ExawattHourPerKilogram, exawatthourperkilogramQuantity.Unit);

            var femtocaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.FemtocaloriePerGram);
            AssertEx.EqualTolerance(FemtocaloriesPerGramInOneJoulePerKilogram, (double)femtocaloriepergramQuantity.Value, FemtocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.FemtocaloriePerGram, femtocaloriepergramQuantity.Unit);

            var femtojouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.FemtojoulePerKilogram);
            AssertEx.EqualTolerance(FemtojoulesPerKilogramInOneJoulePerKilogram, (double)femtojouleperkilogramQuantity.Value, FemtojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.FemtojoulePerKilogram, femtojouleperkilogramQuantity.Unit);

            var femtowatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.FemtowattHourPerKilogram);
            AssertEx.EqualTolerance(FemtowattHoursPerKilogramInOneJoulePerKilogram, (double)femtowatthourperkilogramQuantity.Value, FemtowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.FemtowattHourPerKilogram, femtowatthourperkilogramQuantity.Unit);

            var gigacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.GigacaloriePerGram);
            AssertEx.EqualTolerance(GigacaloriesPerGramInOneJoulePerKilogram, (double)gigacaloriepergramQuantity.Value, GigacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.GigacaloriePerGram, gigacaloriepergramQuantity.Unit);

            var gigajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.GigajoulePerKilogram);
            AssertEx.EqualTolerance(GigajoulesPerKilogramInOneJoulePerKilogram, (double)gigajouleperkilogramQuantity.Value, GigajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.GigajoulePerKilogram, gigajouleperkilogramQuantity.Unit);

            var gigawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.GigawattHourPerKilogram);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, (double)gigawatthourperkilogramQuantity.Value, GigawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.GigawattHourPerKilogram, gigawatthourperkilogramQuantity.Unit);

            var hectocaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.HectocaloriePerGram);
            AssertEx.EqualTolerance(HectocaloriesPerGramInOneJoulePerKilogram, (double)hectocaloriepergramQuantity.Value, HectocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.HectocaloriePerGram, hectocaloriepergramQuantity.Unit);

            var hectojouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.HectojoulePerKilogram);
            AssertEx.EqualTolerance(HectojoulesPerKilogramInOneJoulePerKilogram, (double)hectojouleperkilogramQuantity.Value, HectojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.HectojoulePerKilogram, hectojouleperkilogramQuantity.Unit);

            var hectowatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.HectowattHourPerKilogram);
            AssertEx.EqualTolerance(HectowattHoursPerKilogramInOneJoulePerKilogram, (double)hectowatthourperkilogramQuantity.Value, HectowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.HectowattHourPerKilogram, hectowatthourperkilogramQuantity.Unit);

            var jouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.JoulePerKilogram);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, (double)jouleperkilogramQuantity.Value, JoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, jouleperkilogramQuantity.Unit);

            var kilocaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.KilocaloriePerGram);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, (double)kilocaloriepergramQuantity.Value, KilocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilocaloriePerGram, kilocaloriepergramQuantity.Unit);

            var kilojouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.KilojoulePerKilogram);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, (double)kilojouleperkilogramQuantity.Value, KilojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilojoulePerKilogram, kilojouleperkilogramQuantity.Unit);

            var kilowatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.KilowattHourPerKilogram);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, (double)kilowatthourperkilogramQuantity.Value, KilowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilowattHourPerKilogram, kilowatthourperkilogramQuantity.Unit);

            var megacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MegacaloriePerGram);
            AssertEx.EqualTolerance(MegacaloriesPerGramInOneJoulePerKilogram, (double)megacaloriepergramQuantity.Value, MegacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.MegacaloriePerGram, megacaloriepergramQuantity.Unit);

            var megajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MegajoulePerKilogram);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, (double)megajouleperkilogramQuantity.Value, MegajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MegajoulePerKilogram, megajouleperkilogramQuantity.Unit);

            var megawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MegawattHourPerKilogram);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, (double)megawatthourperkilogramQuantity.Value, MegawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MegawattHourPerKilogram, megawatthourperkilogramQuantity.Unit);

            var microcaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MicrocaloriePerGram);
            AssertEx.EqualTolerance(MicrocaloriesPerGramInOneJoulePerKilogram, (double)microcaloriepergramQuantity.Value, MicrocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.MicrocaloriePerGram, microcaloriepergramQuantity.Unit);

            var microjouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MicrojoulePerKilogram);
            AssertEx.EqualTolerance(MicrojoulesPerKilogramInOneJoulePerKilogram, (double)microjouleperkilogramQuantity.Value, MicrojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MicrojoulePerKilogram, microjouleperkilogramQuantity.Unit);

            var microwatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MicrowattHourPerKilogram);
            AssertEx.EqualTolerance(MicrowattHoursPerKilogramInOneJoulePerKilogram, (double)microwatthourperkilogramQuantity.Value, MicrowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MicrowattHourPerKilogram, microwatthourperkilogramQuantity.Unit);

            var millicaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MillicaloriePerGram);
            AssertEx.EqualTolerance(MillicaloriesPerGramInOneJoulePerKilogram, (double)millicaloriepergramQuantity.Value, MillicaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.MillicaloriePerGram, millicaloriepergramQuantity.Unit);

            var millijouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MillijoulePerKilogram);
            AssertEx.EqualTolerance(MillijoulesPerKilogramInOneJoulePerKilogram, (double)millijouleperkilogramQuantity.Value, MillijoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MillijoulePerKilogram, millijouleperkilogramQuantity.Unit);

            var milliwatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.MilliwattHourPerKilogram);
            AssertEx.EqualTolerance(MilliwattHoursPerKilogramInOneJoulePerKilogram, (double)milliwatthourperkilogramQuantity.Value, MilliwattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MilliwattHourPerKilogram, milliwatthourperkilogramQuantity.Unit);

            var nanocaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.NanocaloriePerGram);
            AssertEx.EqualTolerance(NanocaloriesPerGramInOneJoulePerKilogram, (double)nanocaloriepergramQuantity.Value, NanocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.NanocaloriePerGram, nanocaloriepergramQuantity.Unit);

            var nanojouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.NanojoulePerKilogram);
            AssertEx.EqualTolerance(NanojoulesPerKilogramInOneJoulePerKilogram, (double)nanojouleperkilogramQuantity.Value, NanojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.NanojoulePerKilogram, nanojouleperkilogramQuantity.Unit);

            var nanowatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.NanowattHourPerKilogram);
            AssertEx.EqualTolerance(NanowattHoursPerKilogramInOneJoulePerKilogram, (double)nanowatthourperkilogramQuantity.Value, NanowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.NanowattHourPerKilogram, nanowatthourperkilogramQuantity.Unit);

            var petacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.PetacaloriePerGram);
            AssertEx.EqualTolerance(PetacaloriesPerGramInOneJoulePerKilogram, (double)petacaloriepergramQuantity.Value, PetacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.PetacaloriePerGram, petacaloriepergramQuantity.Unit);

            var petajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.PetajoulePerKilogram);
            AssertEx.EqualTolerance(PetajoulesPerKilogramInOneJoulePerKilogram, (double)petajouleperkilogramQuantity.Value, PetajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.PetajoulePerKilogram, petajouleperkilogramQuantity.Unit);

            var petawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.PetawattHourPerKilogram);
            AssertEx.EqualTolerance(PetawattHoursPerKilogramInOneJoulePerKilogram, (double)petawatthourperkilogramQuantity.Value, PetawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.PetawattHourPerKilogram, petawatthourperkilogramQuantity.Unit);

            var picocaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.PicocaloriePerGram);
            AssertEx.EqualTolerance(PicocaloriesPerGramInOneJoulePerKilogram, (double)picocaloriepergramQuantity.Value, PicocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.PicocaloriePerGram, picocaloriepergramQuantity.Unit);

            var picojouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.PicojoulePerKilogram);
            AssertEx.EqualTolerance(PicojoulesPerKilogramInOneJoulePerKilogram, (double)picojouleperkilogramQuantity.Value, PicojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.PicojoulePerKilogram, picojouleperkilogramQuantity.Unit);

            var picowatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.PicowattHourPerKilogram);
            AssertEx.EqualTolerance(PicowattHoursPerKilogramInOneJoulePerKilogram, (double)picowatthourperkilogramQuantity.Value, PicowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.PicowattHourPerKilogram, picowatthourperkilogramQuantity.Unit);

            var qutracaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.QutracaloriePerGram);
            AssertEx.EqualTolerance(QutracaloriesPerGramInOneJoulePerKilogram, (double)qutracaloriepergramQuantity.Value, QutracaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.QutracaloriePerGram, qutracaloriepergramQuantity.Unit);

            var qutrajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.QutrajoulePerKilogram);
            AssertEx.EqualTolerance(QutrajoulesPerKilogramInOneJoulePerKilogram, (double)qutrajouleperkilogramQuantity.Value, QutrajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.QutrajoulePerKilogram, qutrajouleperkilogramQuantity.Unit);

            var qutrawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.QutrawattHourPerKilogram);
            AssertEx.EqualTolerance(QutrawattHoursPerKilogramInOneJoulePerKilogram, (double)qutrawatthourperkilogramQuantity.Value, QutrawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.QutrawattHourPerKilogram, qutrawatthourperkilogramQuantity.Unit);

            var teracaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.TeracaloriePerGram);
            AssertEx.EqualTolerance(TeracaloriesPerGramInOneJoulePerKilogram, (double)teracaloriepergramQuantity.Value, TeracaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.TeracaloriePerGram, teracaloriepergramQuantity.Unit);

            var terajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.TerajoulePerKilogram);
            AssertEx.EqualTolerance(TerajoulesPerKilogramInOneJoulePerKilogram, (double)terajouleperkilogramQuantity.Value, TerajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.TerajoulePerKilogram, terajouleperkilogramQuantity.Unit);

            var terawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.TerawattHourPerKilogram);
            AssertEx.EqualTolerance(TerawattHoursPerKilogramInOneJoulePerKilogram, (double)terawatthourperkilogramQuantity.Value, TerawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.TerawattHourPerKilogram, terawatthourperkilogramQuantity.Unit);

            var vettacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.VettacaloriePerGram);
            AssertEx.EqualTolerance(VettacaloriesPerGramInOneJoulePerKilogram, (double)vettacaloriepergramQuantity.Value, VettacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.VettacaloriePerGram, vettacaloriepergramQuantity.Unit);

            var vettajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.VettajoulePerKilogram);
            AssertEx.EqualTolerance(VettajoulesPerKilogramInOneJoulePerKilogram, (double)vettajouleperkilogramQuantity.Value, VettajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.VettajoulePerKilogram, vettajouleperkilogramQuantity.Unit);

            var vettawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.VettawattHourPerKilogram);
            AssertEx.EqualTolerance(VettawattHoursPerKilogramInOneJoulePerKilogram, (double)vettawatthourperkilogramQuantity.Value, VettawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.VettawattHourPerKilogram, vettawatthourperkilogramQuantity.Unit);

            var watthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.WattHourPerKilogram);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, (double)watthourperkilogramQuantity.Value, WattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, watthourperkilogramQuantity.Unit);

            var yottacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.YottacaloriePerGram);
            AssertEx.EqualTolerance(YottacaloriesPerGramInOneJoulePerKilogram, (double)yottacaloriepergramQuantity.Value, YottacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.YottacaloriePerGram, yottacaloriepergramQuantity.Unit);

            var yottajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.YottajoulePerKilogram);
            AssertEx.EqualTolerance(YottajoulesPerKilogramInOneJoulePerKilogram, (double)yottajouleperkilogramQuantity.Value, YottajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.YottajoulePerKilogram, yottajouleperkilogramQuantity.Unit);

            var yottawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.YottawattHourPerKilogram);
            AssertEx.EqualTolerance(YottawattHoursPerKilogramInOneJoulePerKilogram, (double)yottawatthourperkilogramQuantity.Value, YottawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.YottawattHourPerKilogram, yottawatthourperkilogramQuantity.Unit);

            var zettacaloriepergramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.ZettacaloriePerGram);
            AssertEx.EqualTolerance(ZettacaloriesPerGramInOneJoulePerKilogram, (double)zettacaloriepergramQuantity.Value, ZettacaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.ZettacaloriePerGram, zettacaloriepergramQuantity.Unit);

            var zettajouleperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.ZettajoulePerKilogram);
            AssertEx.EqualTolerance(ZettajoulesPerKilogramInOneJoulePerKilogram, (double)zettajouleperkilogramQuantity.Value, ZettajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.ZettajoulePerKilogram, zettajouleperkilogramQuantity.Unit);

            var zettawatthourperkilogramQuantity = jouleperkilogram.ToUnit(SpecificEnergyUnit.ZettawattHourPerKilogram);
            AssertEx.EqualTolerance(ZettawattHoursPerKilogramInOneJoulePerKilogram, (double)zettawatthourperkilogramQuantity.Value, ZettawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.ZettawattHourPerKilogram, zettawatthourperkilogramQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromBtuPerPound(jouleperkilogram.BtuPerPound).JoulesPerKilogram, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromCaloriesPerGram(jouleperkilogram.CaloriesPerGram).JoulesPerKilogram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromCenticaloriesPerGram(jouleperkilogram.CenticaloriesPerGram).JoulesPerKilogram, CenticaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromCentijoulesPerKilogram(jouleperkilogram.CentijoulesPerKilogram).JoulesPerKilogram, CentijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromCentiwattHoursPerKilogram(jouleperkilogram.CentiwattHoursPerKilogram).JoulesPerKilogram, CentiwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromDecacaloriesPerGram(jouleperkilogram.DecacaloriesPerGram).JoulesPerKilogram, DecacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromDecajoulesPerKilogram(jouleperkilogram.DecajoulesPerKilogram).JoulesPerKilogram, DecajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromDecawattHoursPerKilogram(jouleperkilogram.DecawattHoursPerKilogram).JoulesPerKilogram, DecawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromDecicaloriesPerGram(jouleperkilogram.DecicaloriesPerGram).JoulesPerKilogram, DecicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromDecijoulesPerKilogram(jouleperkilogram.DecijoulesPerKilogram).JoulesPerKilogram, DecijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromDeciwattHoursPerKilogram(jouleperkilogram.DeciwattHoursPerKilogram).JoulesPerKilogram, DeciwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromExacaloriesPerGram(jouleperkilogram.ExacaloriesPerGram).JoulesPerKilogram, ExacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromExajoulesPerKilogram(jouleperkilogram.ExajoulesPerKilogram).JoulesPerKilogram, ExajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromExawattHoursPerKilogram(jouleperkilogram.ExawattHoursPerKilogram).JoulesPerKilogram, ExawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromFemtocaloriesPerGram(jouleperkilogram.FemtocaloriesPerGram).JoulesPerKilogram, FemtocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromFemtojoulesPerKilogram(jouleperkilogram.FemtojoulesPerKilogram).JoulesPerKilogram, FemtojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromFemtowattHoursPerKilogram(jouleperkilogram.FemtowattHoursPerKilogram).JoulesPerKilogram, FemtowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigacaloriesPerGram(jouleperkilogram.GigacaloriesPerGram).JoulesPerKilogram, GigacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigajoulesPerKilogram(jouleperkilogram.GigajoulesPerKilogram).JoulesPerKilogram, GigajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattHoursPerKilogram(jouleperkilogram.GigawattHoursPerKilogram).JoulesPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromHectocaloriesPerGram(jouleperkilogram.HectocaloriesPerGram).JoulesPerKilogram, HectocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromHectojoulesPerKilogram(jouleperkilogram.HectojoulesPerKilogram).JoulesPerKilogram, HectojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromHectowattHoursPerKilogram(jouleperkilogram.HectowattHoursPerKilogram).JoulesPerKilogram, HectowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromJoulesPerKilogram(jouleperkilogram.JoulesPerKilogram).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilocaloriesPerGram(jouleperkilogram.KilocaloriesPerGram).JoulesPerKilogram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilojoulesPerKilogram(jouleperkilogram.KilojoulesPerKilogram).JoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattHoursPerKilogram(jouleperkilogram.KilowattHoursPerKilogram).JoulesPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegacaloriesPerGram(jouleperkilogram.MegacaloriesPerGram).JoulesPerKilogram, MegacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegajoulesPerKilogram(jouleperkilogram.MegajoulesPerKilogram).JoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattHoursPerKilogram(jouleperkilogram.MegawattHoursPerKilogram).JoulesPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMicrocaloriesPerGram(jouleperkilogram.MicrocaloriesPerGram).JoulesPerKilogram, MicrocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMicrojoulesPerKilogram(jouleperkilogram.MicrojoulesPerKilogram).JoulesPerKilogram, MicrojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMicrowattHoursPerKilogram(jouleperkilogram.MicrowattHoursPerKilogram).JoulesPerKilogram, MicrowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMillicaloriesPerGram(jouleperkilogram.MillicaloriesPerGram).JoulesPerKilogram, MillicaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMillijoulesPerKilogram(jouleperkilogram.MillijoulesPerKilogram).JoulesPerKilogram, MillijoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMilliwattHoursPerKilogram(jouleperkilogram.MilliwattHoursPerKilogram).JoulesPerKilogram, MilliwattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromNanocaloriesPerGram(jouleperkilogram.NanocaloriesPerGram).JoulesPerKilogram, NanocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromNanojoulesPerKilogram(jouleperkilogram.NanojoulesPerKilogram).JoulesPerKilogram, NanojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromNanowattHoursPerKilogram(jouleperkilogram.NanowattHoursPerKilogram).JoulesPerKilogram, NanowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromPetacaloriesPerGram(jouleperkilogram.PetacaloriesPerGram).JoulesPerKilogram, PetacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromPetajoulesPerKilogram(jouleperkilogram.PetajoulesPerKilogram).JoulesPerKilogram, PetajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromPetawattHoursPerKilogram(jouleperkilogram.PetawattHoursPerKilogram).JoulesPerKilogram, PetawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromPicocaloriesPerGram(jouleperkilogram.PicocaloriesPerGram).JoulesPerKilogram, PicocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromPicojoulesPerKilogram(jouleperkilogram.PicojoulesPerKilogram).JoulesPerKilogram, PicojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromPicowattHoursPerKilogram(jouleperkilogram.PicowattHoursPerKilogram).JoulesPerKilogram, PicowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromQutracaloriesPerGram(jouleperkilogram.QutracaloriesPerGram).JoulesPerKilogram, QutracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromQutrajoulesPerKilogram(jouleperkilogram.QutrajoulesPerKilogram).JoulesPerKilogram, QutrajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromQutrawattHoursPerKilogram(jouleperkilogram.QutrawattHoursPerKilogram).JoulesPerKilogram, QutrawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTeracaloriesPerGram(jouleperkilogram.TeracaloriesPerGram).JoulesPerKilogram, TeracaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerajoulesPerKilogram(jouleperkilogram.TerajoulesPerKilogram).JoulesPerKilogram, TerajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattHoursPerKilogram(jouleperkilogram.TerawattHoursPerKilogram).JoulesPerKilogram, TerawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromVettacaloriesPerGram(jouleperkilogram.VettacaloriesPerGram).JoulesPerKilogram, VettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromVettajoulesPerKilogram(jouleperkilogram.VettajoulesPerKilogram).JoulesPerKilogram, VettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromVettawattHoursPerKilogram(jouleperkilogram.VettawattHoursPerKilogram).JoulesPerKilogram, VettawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattHoursPerKilogram(jouleperkilogram.WattHoursPerKilogram).JoulesPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromYottacaloriesPerGram(jouleperkilogram.YottacaloriesPerGram).JoulesPerKilogram, YottacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromYottajoulesPerKilogram(jouleperkilogram.YottajoulesPerKilogram).JoulesPerKilogram, YottajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromYottawattHoursPerKilogram(jouleperkilogram.YottawattHoursPerKilogram).JoulesPerKilogram, YottawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromZettacaloriesPerGram(jouleperkilogram.ZettacaloriesPerGram).JoulesPerKilogram, ZettacaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromZettajoulesPerKilogram(jouleperkilogram.ZettajoulesPerKilogram).JoulesPerKilogram, ZettajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromZettawattHoursPerKilogram(jouleperkilogram.ZettawattHoursPerKilogram).JoulesPerKilogram, ZettawattHoursPerKilogramTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificEnergy v = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificEnergy.FromJoulesPerKilogram(3)-v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificEnergy.FromJoulesPerKilogram(10)/5).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, SpecificEnergy.FromJoulesPerKilogram(10)/SpecificEnergy.FromJoulesPerKilogram(5), JoulesPerKilogramTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificEnergy oneJoulePerKilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            SpecificEnergy twoJoulesPerKilogram = SpecificEnergy.FromJoulesPerKilogram(2);

            Assert.True(oneJoulePerKilogram < twoJoulesPerKilogram);
            Assert.True(oneJoulePerKilogram <= twoJoulesPerKilogram);
            Assert.True(twoJoulesPerKilogram > oneJoulePerKilogram);
            Assert.True(twoJoulesPerKilogram >= oneJoulePerKilogram);

            Assert.False(oneJoulePerKilogram > twoJoulesPerKilogram);
            Assert.False(oneJoulePerKilogram >= twoJoulesPerKilogram);
            Assert.False(twoJoulesPerKilogram < oneJoulePerKilogram);
            Assert.False(twoJoulesPerKilogram <= oneJoulePerKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Equal(0, jouleperkilogram.CompareTo(jouleperkilogram));
            Assert.True(jouleperkilogram.CompareTo(SpecificEnergy.Zero) > 0);
            Assert.True(SpecificEnergy.Zero.CompareTo(jouleperkilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentException>(() => jouleperkilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentNullException>(() => jouleperkilogram.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = SpecificEnergy.FromJoulesPerKilogram(1);
            var b = SpecificEnergy.FromJoulesPerKilogram(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            var a = SpecificEnergy.FromJoulesPerKilogram(1);
            var b = SpecificEnergy.FromJoulesPerKilogram(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals(null));
        }

        [Fact]
        public void EqualsRelativeToleranceIsImplemented()
        {
            var v = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.True(v.Equals(SpecificEnergy.FromJoulesPerKilogram(1), JoulesPerKilogramTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(SpecificEnergy.Zero, JoulesPerKilogramTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpecificEnergyUnit.Undefined, SpecificEnergy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpecificEnergyUnit)).Cast<SpecificEnergyUnit>();
            foreach(var unit in units)
            {
                if(unit == SpecificEnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificEnergy.BaseDimensions is null);
        }
    }
}
