//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make
//     it easier to remember to implement all the unit conversion test cases.
//
//     Whenever a new unit is added to this quantity and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.


using System;

namespace UnitsNet.Tests.CustomCode
{
    public class RotationalStiffnessPerLengthTests : RotationalStiffnessPerLengthTestsBase
    {
        protected override double FemtonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e15;
        protected override double PiconewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e12;
        protected override double NanonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e9;
        protected override double MicronewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e6;
        protected override double MillinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e3;
        protected override double CentinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e2;
        protected override double DecinewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 10;
        protected override double NewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1;
        protected override double DecanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 0.1;
        protected override double HectonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-2;
        protected override double KilonewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1E-3;
        protected override double MeganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1E-6;
        protected override double GiganewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-9;
        protected override double TeranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-12;
        protected override double PetanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-15;
        protected override double ExanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-18;
        protected override double ZettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-21;
        protected override double YottanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-24;
        protected override double QutranewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-27;
        protected override double VettanewtonMetersPerRadianPerMeterInOneNewtonMeterPerRadianPerMeter => 1e-30;


    }
}
