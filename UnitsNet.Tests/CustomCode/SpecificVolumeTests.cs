//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make
//     it easier to remember to implement all the unit conversion test cases.
//
//     Whenever a new unit is added to this quantity and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class SpecificVolumeTests : SpecificVolumeTestsBase
    {

        protected override double CubicFeetPerPoundInOneCubicMeterPerKilogram => 16.01846353;

        protected override double FemtocubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e15;
        protected override double PicocubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e12;
        protected override double NanocubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e9;
        protected override double MicrocubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e6;
        protected override double MillicubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e3;
        protected override double CenticubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e2;
        protected override double DecicubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e1;
        protected override double CubicMetersPerKilogramInOneCubicMeterPerKilogram => 1;
        protected override double DecacubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e-1;
        protected override double HectocubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e-2;
        protected override double KilocubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e-3;
        protected override double MegacubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e-6;
        protected override double GigacubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e-9;
        protected override double TeracubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e-12;
        protected override double PetacubicMetersPerKilogramInOneCubicMeterPerKilogram  => 1e-15;
        protected override double ExacubicMetersPerKilogramInOneCubicMeterPerKilogram   => 1e-18;
        protected override double ZettacubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e-21;
        protected override double YottacubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e-24;
        protected override double QutracubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e-27;
        protected override double VettacubicMetersPerKilogramInOneCubicMeterPerKilogram => 1e-30;



        [Fact]
        public static void SpecificVolumeTimesMassEqualsVolume()
        {
            Volume volume = SpecificVolume.FromCubicMetersPerKilogram(5) * Mass.FromKilograms(10);
            Assert.Equal(volume, Volume.FromCubicMeters(50));
        }

        [Fact]
        public static void ConstantOverSpecificVolumeEqualsDensity()
        {
            Density density = 5 / SpecificVolume.FromCubicMetersPerKilogram(20);
            Assert.Equal(density, Density.FromKilogramsPerCubicMeter(0.25));
        }
    }
}
