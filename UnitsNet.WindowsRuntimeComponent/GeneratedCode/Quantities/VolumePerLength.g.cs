//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume, typically of fluid, that a container can hold within a unit of length.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class VolumePerLength : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumePerLengthUnit? _unit;

        static VolumePerLength()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.VolumePerLength, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit CubicMeterPerMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public VolumePerLength()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private VolumePerLength(double numericValue, VolumePerLengthUnit unit)
        {
            if(unit == VolumePerLengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of VolumePerLength, which is CubicMeterPerMeter. All conversions go via this value.
        /// </summary>
        public static VolumePerLengthUnit BaseUnit { get; } = VolumePerLengthUnit.CubicMeterPerMeter;

        /// <summary>
        /// Represents the largest possible value of VolumePerLength
        /// </summary>
        public static VolumePerLength MaxValue { get; } = new VolumePerLength(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of VolumePerLength
        /// </summary>
        public static VolumePerLength MinValue { get; } = new VolumePerLength(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.VolumePerLength;

        /// <summary>
        ///     All units of measurement for the VolumePerLength quantity.
        /// </summary>
        public static VolumePerLengthUnit[] Units { get; } = Enum.GetValues(typeof(VolumePerLengthUnit)).Cast<VolumePerLengthUnit>().Except(new VolumePerLengthUnit[]{ VolumePerLengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerMeter.
        /// </summary>
        public static VolumePerLength Zero { get; } = new VolumePerLength(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumePerLengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => VolumePerLength.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => VolumePerLength.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get VolumePerLength in AttocubicMetersPerMeter.
        /// </summary>
        public double AttocubicMetersPerMeter => As(VolumePerLengthUnit.AttocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in AttolitersPerMeter.
        /// </summary>
        public double AttolitersPerMeter => As(VolumePerLengthUnit.AttoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in CenticubicMetersPerMeter.
        /// </summary>
        public double CenticubicMetersPerMeter => As(VolumePerLengthUnit.CenticubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in CentilitersPerMeter.
        /// </summary>
        public double CentilitersPerMeter => As(VolumePerLengthUnit.CentiliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in CubicMetersPerMeter.
        /// </summary>
        public double CubicMetersPerMeter => As(VolumePerLengthUnit.CubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in DecacubicMetersPerMeter.
        /// </summary>
        public double DecacubicMetersPerMeter => As(VolumePerLengthUnit.DecacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in DecalitersPerMeter.
        /// </summary>
        public double DecalitersPerMeter => As(VolumePerLengthUnit.DecaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in DecicubicMetersPerMeter.
        /// </summary>
        public double DecicubicMetersPerMeter => As(VolumePerLengthUnit.DecicubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in DecilitersPerMeter.
        /// </summary>
        public double DecilitersPerMeter => As(VolumePerLengthUnit.DeciliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in ExacubicMetersPerMeter.
        /// </summary>
        public double ExacubicMetersPerMeter => As(VolumePerLengthUnit.ExacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in ExalitersPerMeter.
        /// </summary>
        public double ExalitersPerMeter => As(VolumePerLengthUnit.ExaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in FemtocubicMetersPerMeter.
        /// </summary>
        public double FemtocubicMetersPerMeter => As(VolumePerLengthUnit.FemtocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in FemtolitersPerMeter.
        /// </summary>
        public double FemtolitersPerMeter => As(VolumePerLengthUnit.FemtoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in GigacubicMetersPerMeter.
        /// </summary>
        public double GigacubicMetersPerMeter => As(VolumePerLengthUnit.GigacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in GigalitersPerMeter.
        /// </summary>
        public double GigalitersPerMeter => As(VolumePerLengthUnit.GigaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in HectocubicMetersPerMeter.
        /// </summary>
        public double HectocubicMetersPerMeter => As(VolumePerLengthUnit.HectocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in HectolitersPerMeter.
        /// </summary>
        public double HectolitersPerMeter => As(VolumePerLengthUnit.HectoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in KilocubicMetersPerMeter.
        /// </summary>
        public double KilocubicMetersPerMeter => As(VolumePerLengthUnit.KilocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in KilolitersPerMeter.
        /// </summary>
        public double KilolitersPerMeter => As(VolumePerLengthUnit.KiloliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in LitersPerMeter.
        /// </summary>
        public double LitersPerMeter => As(VolumePerLengthUnit.LiterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in MegacubicMetersPerMeter.
        /// </summary>
        public double MegacubicMetersPerMeter => As(VolumePerLengthUnit.MegacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in MegalitersPerMeter.
        /// </summary>
        public double MegalitersPerMeter => As(VolumePerLengthUnit.MegaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in MicrocubicMetersPerMeter.
        /// </summary>
        public double MicrocubicMetersPerMeter => As(VolumePerLengthUnit.MicrocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in MicrolitersPerMeter.
        /// </summary>
        public double MicrolitersPerMeter => As(VolumePerLengthUnit.MicroliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in MillicubicMetersPerMeter.
        /// </summary>
        public double MillicubicMetersPerMeter => As(VolumePerLengthUnit.MillicubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in MillilitersPerMeter.
        /// </summary>
        public double MillilitersPerMeter => As(VolumePerLengthUnit.MilliliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in NanocubicMetersPerMeter.
        /// </summary>
        public double NanocubicMetersPerMeter => As(VolumePerLengthUnit.NanocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in NanolitersPerMeter.
        /// </summary>
        public double NanolitersPerMeter => As(VolumePerLengthUnit.NanoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in OilBarrelsPerFoot.
        /// </summary>
        public double OilBarrelsPerFoot => As(VolumePerLengthUnit.OilBarrelPerFoot);

        /// <summary>
        ///     Get VolumePerLength in PetacubicMetersPerMeter.
        /// </summary>
        public double PetacubicMetersPerMeter => As(VolumePerLengthUnit.PetacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in PetalitersPerMeter.
        /// </summary>
        public double PetalitersPerMeter => As(VolumePerLengthUnit.PetaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in PicocubicMetersPerMeter.
        /// </summary>
        public double PicocubicMetersPerMeter => As(VolumePerLengthUnit.PicocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in PicolitersPerMeter.
        /// </summary>
        public double PicolitersPerMeter => As(VolumePerLengthUnit.PicoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in QutracubicMetersPerMeter.
        /// </summary>
        public double QutracubicMetersPerMeter => As(VolumePerLengthUnit.QutracubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in QutralitersPerMeter.
        /// </summary>
        public double QutralitersPerMeter => As(VolumePerLengthUnit.QutraliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in TeracubicMetersPerMeter.
        /// </summary>
        public double TeracubicMetersPerMeter => As(VolumePerLengthUnit.TeracubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in TeralitersPerMeter.
        /// </summary>
        public double TeralitersPerMeter => As(VolumePerLengthUnit.TeraliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in VettacubicMetersPerMeter.
        /// </summary>
        public double VettacubicMetersPerMeter => As(VolumePerLengthUnit.VettacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in VettalitersPerMeter.
        /// </summary>
        public double VettalitersPerMeter => As(VolumePerLengthUnit.VettaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in YoctocubicMetersPerMeter.
        /// </summary>
        public double YoctocubicMetersPerMeter => As(VolumePerLengthUnit.YoctocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in YoctolitersPerMeter.
        /// </summary>
        public double YoctolitersPerMeter => As(VolumePerLengthUnit.YoctoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in YottacubicMetersPerMeter.
        /// </summary>
        public double YottacubicMetersPerMeter => As(VolumePerLengthUnit.YottacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in YottalitersPerMeter.
        /// </summary>
        public double YottalitersPerMeter => As(VolumePerLengthUnit.YottaliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in ZeptocubicMetersPerMeter.
        /// </summary>
        public double ZeptocubicMetersPerMeter => As(VolumePerLengthUnit.ZeptocubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in ZeptolitersPerMeter.
        /// </summary>
        public double ZeptolitersPerMeter => As(VolumePerLengthUnit.ZeptoliterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in ZettacubicMetersPerMeter.
        /// </summary>
        public double ZettacubicMetersPerMeter => As(VolumePerLengthUnit.ZettacubicMeterPerMeter);

        /// <summary>
        ///     Get VolumePerLength in ZettalitersPerMeter.
        /// </summary>
        public double ZettalitersPerMeter => As(VolumePerLengthUnit.ZettaliterPerMeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumePerLengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(VolumePerLengthUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get VolumePerLength from AttocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromAttocubicMetersPerMeter(double attocubicmeterspermeter)
        {
            double value = (double) attocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.AttocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from AttolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromAttolitersPerMeter(double attoliterspermeter)
        {
            double value = (double) attoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.AttoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from CenticubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromCenticubicMetersPerMeter(double centicubicmeterspermeter)
        {
            double value = (double) centicubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.CenticubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from CentilitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromCentilitersPerMeter(double centiliterspermeter)
        {
            double value = (double) centiliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.CentiliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from CubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromCubicMetersPerMeter(double cubicmeterspermeter)
        {
            double value = (double) cubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.CubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from DecacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromDecacubicMetersPerMeter(double decacubicmeterspermeter)
        {
            double value = (double) decacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.DecacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from DecalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromDecalitersPerMeter(double decaliterspermeter)
        {
            double value = (double) decaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.DecaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from DecicubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromDecicubicMetersPerMeter(double decicubicmeterspermeter)
        {
            double value = (double) decicubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.DecicubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from DecilitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromDecilitersPerMeter(double deciliterspermeter)
        {
            double value = (double) deciliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.DeciliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from ExacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromExacubicMetersPerMeter(double exacubicmeterspermeter)
        {
            double value = (double) exacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.ExacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from ExalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromExalitersPerMeter(double exaliterspermeter)
        {
            double value = (double) exaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.ExaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from FemtocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromFemtocubicMetersPerMeter(double femtocubicmeterspermeter)
        {
            double value = (double) femtocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.FemtocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from FemtolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromFemtolitersPerMeter(double femtoliterspermeter)
        {
            double value = (double) femtoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.FemtoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from GigacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromGigacubicMetersPerMeter(double gigacubicmeterspermeter)
        {
            double value = (double) gigacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.GigacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from GigalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromGigalitersPerMeter(double gigaliterspermeter)
        {
            double value = (double) gigaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.GigaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from HectocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromHectocubicMetersPerMeter(double hectocubicmeterspermeter)
        {
            double value = (double) hectocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.HectocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from HectolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromHectolitersPerMeter(double hectoliterspermeter)
        {
            double value = (double) hectoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.HectoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from KilocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromKilocubicMetersPerMeter(double kilocubicmeterspermeter)
        {
            double value = (double) kilocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.KilocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from KilolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromKilolitersPerMeter(double kiloliterspermeter)
        {
            double value = (double) kiloliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.KiloliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from LitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromLitersPerMeter(double literspermeter)
        {
            double value = (double) literspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.LiterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from MegacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromMegacubicMetersPerMeter(double megacubicmeterspermeter)
        {
            double value = (double) megacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.MegacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from MegalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromMegalitersPerMeter(double megaliterspermeter)
        {
            double value = (double) megaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.MegaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from MicrocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromMicrocubicMetersPerMeter(double microcubicmeterspermeter)
        {
            double value = (double) microcubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.MicrocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from MicrolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromMicrolitersPerMeter(double microliterspermeter)
        {
            double value = (double) microliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.MicroliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from MillicubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromMillicubicMetersPerMeter(double millicubicmeterspermeter)
        {
            double value = (double) millicubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.MillicubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from MillilitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromMillilitersPerMeter(double milliliterspermeter)
        {
            double value = (double) milliliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.MilliliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from NanocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromNanocubicMetersPerMeter(double nanocubicmeterspermeter)
        {
            double value = (double) nanocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.NanocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from NanolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromNanolitersPerMeter(double nanoliterspermeter)
        {
            double value = (double) nanoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.NanoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from OilBarrelsPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromOilBarrelsPerFoot(double oilbarrelsperfoot)
        {
            double value = (double) oilbarrelsperfoot;
            return new VolumePerLength(value, VolumePerLengthUnit.OilBarrelPerFoot);
        }
        /// <summary>
        ///     Get VolumePerLength from PetacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromPetacubicMetersPerMeter(double petacubicmeterspermeter)
        {
            double value = (double) petacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.PetacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from PetalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromPetalitersPerMeter(double petaliterspermeter)
        {
            double value = (double) petaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.PetaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from PicocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromPicocubicMetersPerMeter(double picocubicmeterspermeter)
        {
            double value = (double) picocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.PicocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from PicolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromPicolitersPerMeter(double picoliterspermeter)
        {
            double value = (double) picoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.PicoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from QutracubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromQutracubicMetersPerMeter(double qutracubicmeterspermeter)
        {
            double value = (double) qutracubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.QutracubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from QutralitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromQutralitersPerMeter(double qutraliterspermeter)
        {
            double value = (double) qutraliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.QutraliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from TeracubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromTeracubicMetersPerMeter(double teracubicmeterspermeter)
        {
            double value = (double) teracubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.TeracubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from TeralitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromTeralitersPerMeter(double teraliterspermeter)
        {
            double value = (double) teraliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.TeraliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from VettacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromVettacubicMetersPerMeter(double vettacubicmeterspermeter)
        {
            double value = (double) vettacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.VettacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from VettalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromVettalitersPerMeter(double vettaliterspermeter)
        {
            double value = (double) vettaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.VettaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from YoctocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromYoctocubicMetersPerMeter(double yoctocubicmeterspermeter)
        {
            double value = (double) yoctocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.YoctocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from YoctolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromYoctolitersPerMeter(double yoctoliterspermeter)
        {
            double value = (double) yoctoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.YoctoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from YottacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromYottacubicMetersPerMeter(double yottacubicmeterspermeter)
        {
            double value = (double) yottacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.YottacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from YottalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromYottalitersPerMeter(double yottaliterspermeter)
        {
            double value = (double) yottaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.YottaliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from ZeptocubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromZeptocubicMetersPerMeter(double zeptocubicmeterspermeter)
        {
            double value = (double) zeptocubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.ZeptocubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from ZeptolitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromZeptolitersPerMeter(double zeptoliterspermeter)
        {
            double value = (double) zeptoliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.ZeptoliterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from ZettacubicMetersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromZettacubicMetersPerMeter(double zettacubicmeterspermeter)
        {
            double value = (double) zettacubicmeterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.ZettacubicMeterPerMeter);
        }
        /// <summary>
        ///     Get VolumePerLength from ZettalitersPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumePerLength FromZettalitersPerMeter(double zettaliterspermeter)
        {
            double value = (double) zettaliterspermeter;
            return new VolumePerLength(value, VolumePerLengthUnit.ZettaliterPerMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumePerLengthUnit" /> to <see cref="VolumePerLength" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumePerLength unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static VolumePerLength From(double value, VolumePerLengthUnit fromUnit)
        {
            return new VolumePerLength((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumePerLength Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumePerLength Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<VolumePerLength, VolumePerLengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumePerLength result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out VolumePerLength result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<VolumePerLength, VolumePerLengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumePerLengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumePerLengthUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<VolumePerLengthUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out VolumePerLengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out VolumePerLengthUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<VolumePerLengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is VolumePerLength objVolumePerLength)) throw new ArgumentException("Expected type VolumePerLength.", nameof(obj));

            return CompareTo(objVolumePerLength);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(VolumePerLength other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is VolumePerLength objVolumePerLength))
                return false;

            return Equals(objVolumePerLength);
        }

        public bool Equals(VolumePerLength other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another VolumePerLength within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(VolumePerLength other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current VolumePerLength.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((VolumePerLengthUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumePerLengthUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this VolumePerLength to another VolumePerLength with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A VolumePerLength with the specified unit.</returns>
        public VolumePerLength ToUnit(VolumePerLengthUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new VolumePerLength(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumePerLengthUnit.AttocubicMeterPerMeter: return (_value) * 1e-18d;
                case VolumePerLengthUnit.AttoliterPerMeter: return (_value/1000) * 1e-18d;
                case VolumePerLengthUnit.CenticubicMeterPerMeter: return (_value) * 1e-2d;
                case VolumePerLengthUnit.CentiliterPerMeter: return (_value/1000) * 1e-2d;
                case VolumePerLengthUnit.CubicMeterPerMeter: return _value;
                case VolumePerLengthUnit.DecacubicMeterPerMeter: return (_value) * 1e1d;
                case VolumePerLengthUnit.DecaliterPerMeter: return (_value/1000) * 1e1d;
                case VolumePerLengthUnit.DecicubicMeterPerMeter: return (_value) * 1e-1d;
                case VolumePerLengthUnit.DeciliterPerMeter: return (_value/1000) * 1e-1d;
                case VolumePerLengthUnit.ExacubicMeterPerMeter: return (_value) * 1e18d;
                case VolumePerLengthUnit.ExaliterPerMeter: return (_value/1000) * 1e18d;
                case VolumePerLengthUnit.FemtocubicMeterPerMeter: return (_value) * 1e-15d;
                case VolumePerLengthUnit.FemtoliterPerMeter: return (_value/1000) * 1e-15d;
                case VolumePerLengthUnit.GigacubicMeterPerMeter: return (_value) * 1e9d;
                case VolumePerLengthUnit.GigaliterPerMeter: return (_value/1000) * 1e9d;
                case VolumePerLengthUnit.HectocubicMeterPerMeter: return (_value) * 1e2d;
                case VolumePerLengthUnit.HectoliterPerMeter: return (_value/1000) * 1e2d;
                case VolumePerLengthUnit.KilocubicMeterPerMeter: return (_value) * 1e3d;
                case VolumePerLengthUnit.KiloliterPerMeter: return (_value/1000) * 1e3d;
                case VolumePerLengthUnit.LiterPerMeter: return _value/1000;
                case VolumePerLengthUnit.MegacubicMeterPerMeter: return (_value) * 1e6d;
                case VolumePerLengthUnit.MegaliterPerMeter: return (_value/1000) * 1e6d;
                case VolumePerLengthUnit.MicrocubicMeterPerMeter: return (_value) * 1e-6d;
                case VolumePerLengthUnit.MicroliterPerMeter: return (_value/1000) * 1e-6d;
                case VolumePerLengthUnit.MillicubicMeterPerMeter: return (_value) * 1e-3d;
                case VolumePerLengthUnit.MilliliterPerMeter: return (_value/1000) * 1e-3d;
                case VolumePerLengthUnit.NanocubicMeterPerMeter: return (_value) * 1e-9d;
                case VolumePerLengthUnit.NanoliterPerMeter: return (_value/1000) * 1e-9d;
                case VolumePerLengthUnit.OilBarrelPerFoot: return _value/1.91713408;
                case VolumePerLengthUnit.PetacubicMeterPerMeter: return (_value) * 1e15d;
                case VolumePerLengthUnit.PetaliterPerMeter: return (_value/1000) * 1e15d;
                case VolumePerLengthUnit.PicocubicMeterPerMeter: return (_value) * 1e-12d;
                case VolumePerLengthUnit.PicoliterPerMeter: return (_value/1000) * 1e-12d;
                case VolumePerLengthUnit.QutracubicMeterPerMeter: return (_value) * 1e27d;
                case VolumePerLengthUnit.QutraliterPerMeter: return (_value/1000) * 1e27d;
                case VolumePerLengthUnit.TeracubicMeterPerMeter: return (_value) * 1e12d;
                case VolumePerLengthUnit.TeraliterPerMeter: return (_value/1000) * 1e12d;
                case VolumePerLengthUnit.VettacubicMeterPerMeter: return (_value) * 1e30d;
                case VolumePerLengthUnit.VettaliterPerMeter: return (_value/1000) * 1e30d;
                case VolumePerLengthUnit.YoctocubicMeterPerMeter: return (_value) * 1e-24d;
                case VolumePerLengthUnit.YoctoliterPerMeter: return (_value/1000) * 1e-24d;
                case VolumePerLengthUnit.YottacubicMeterPerMeter: return (_value) * 1e24d;
                case VolumePerLengthUnit.YottaliterPerMeter: return (_value/1000) * 1e24d;
                case VolumePerLengthUnit.ZeptocubicMeterPerMeter: return (_value) * 1e-21d;
                case VolumePerLengthUnit.ZeptoliterPerMeter: return (_value/1000) * 1e-21d;
                case VolumePerLengthUnit.ZettacubicMeterPerMeter: return (_value) * 1e21d;
                case VolumePerLengthUnit.ZettaliterPerMeter: return (_value/1000) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(VolumePerLengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumePerLengthUnit.AttocubicMeterPerMeter: return (baseUnitValue) / 1e-18d;
                case VolumePerLengthUnit.AttoliterPerMeter: return (baseUnitValue*1000) / 1e-18d;
                case VolumePerLengthUnit.CenticubicMeterPerMeter: return (baseUnitValue) / 1e-2d;
                case VolumePerLengthUnit.CentiliterPerMeter: return (baseUnitValue*1000) / 1e-2d;
                case VolumePerLengthUnit.CubicMeterPerMeter: return baseUnitValue;
                case VolumePerLengthUnit.DecacubicMeterPerMeter: return (baseUnitValue) / 1e1d;
                case VolumePerLengthUnit.DecaliterPerMeter: return (baseUnitValue*1000) / 1e1d;
                case VolumePerLengthUnit.DecicubicMeterPerMeter: return (baseUnitValue) / 1e-1d;
                case VolumePerLengthUnit.DeciliterPerMeter: return (baseUnitValue*1000) / 1e-1d;
                case VolumePerLengthUnit.ExacubicMeterPerMeter: return (baseUnitValue) / 1e18d;
                case VolumePerLengthUnit.ExaliterPerMeter: return (baseUnitValue*1000) / 1e18d;
                case VolumePerLengthUnit.FemtocubicMeterPerMeter: return (baseUnitValue) / 1e-15d;
                case VolumePerLengthUnit.FemtoliterPerMeter: return (baseUnitValue*1000) / 1e-15d;
                case VolumePerLengthUnit.GigacubicMeterPerMeter: return (baseUnitValue) / 1e9d;
                case VolumePerLengthUnit.GigaliterPerMeter: return (baseUnitValue*1000) / 1e9d;
                case VolumePerLengthUnit.HectocubicMeterPerMeter: return (baseUnitValue) / 1e2d;
                case VolumePerLengthUnit.HectoliterPerMeter: return (baseUnitValue*1000) / 1e2d;
                case VolumePerLengthUnit.KilocubicMeterPerMeter: return (baseUnitValue) / 1e3d;
                case VolumePerLengthUnit.KiloliterPerMeter: return (baseUnitValue*1000) / 1e3d;
                case VolumePerLengthUnit.LiterPerMeter: return baseUnitValue*1000;
                case VolumePerLengthUnit.MegacubicMeterPerMeter: return (baseUnitValue) / 1e6d;
                case VolumePerLengthUnit.MegaliterPerMeter: return (baseUnitValue*1000) / 1e6d;
                case VolumePerLengthUnit.MicrocubicMeterPerMeter: return (baseUnitValue) / 1e-6d;
                case VolumePerLengthUnit.MicroliterPerMeter: return (baseUnitValue*1000) / 1e-6d;
                case VolumePerLengthUnit.MillicubicMeterPerMeter: return (baseUnitValue) / 1e-3d;
                case VolumePerLengthUnit.MilliliterPerMeter: return (baseUnitValue*1000) / 1e-3d;
                case VolumePerLengthUnit.NanocubicMeterPerMeter: return (baseUnitValue) / 1e-9d;
                case VolumePerLengthUnit.NanoliterPerMeter: return (baseUnitValue*1000) / 1e-9d;
                case VolumePerLengthUnit.OilBarrelPerFoot: return baseUnitValue*1.91713408;
                case VolumePerLengthUnit.PetacubicMeterPerMeter: return (baseUnitValue) / 1e15d;
                case VolumePerLengthUnit.PetaliterPerMeter: return (baseUnitValue*1000) / 1e15d;
                case VolumePerLengthUnit.PicocubicMeterPerMeter: return (baseUnitValue) / 1e-12d;
                case VolumePerLengthUnit.PicoliterPerMeter: return (baseUnitValue*1000) / 1e-12d;
                case VolumePerLengthUnit.QutracubicMeterPerMeter: return (baseUnitValue) / 1e27d;
                case VolumePerLengthUnit.QutraliterPerMeter: return (baseUnitValue*1000) / 1e27d;
                case VolumePerLengthUnit.TeracubicMeterPerMeter: return (baseUnitValue) / 1e12d;
                case VolumePerLengthUnit.TeraliterPerMeter: return (baseUnitValue*1000) / 1e12d;
                case VolumePerLengthUnit.VettacubicMeterPerMeter: return (baseUnitValue) / 1e30d;
                case VolumePerLengthUnit.VettaliterPerMeter: return (baseUnitValue*1000) / 1e30d;
                case VolumePerLengthUnit.YoctocubicMeterPerMeter: return (baseUnitValue) / 1e-24d;
                case VolumePerLengthUnit.YoctoliterPerMeter: return (baseUnitValue*1000) / 1e-24d;
                case VolumePerLengthUnit.YottacubicMeterPerMeter: return (baseUnitValue) / 1e24d;
                case VolumePerLengthUnit.YottaliterPerMeter: return (baseUnitValue*1000) / 1e24d;
                case VolumePerLengthUnit.ZeptocubicMeterPerMeter: return (baseUnitValue) / 1e-21d;
                case VolumePerLengthUnit.ZeptoliterPerMeter: return (baseUnitValue*1000) / 1e-21d;
                case VolumePerLengthUnit.ZettacubicMeterPerMeter: return (baseUnitValue) / 1e21d;
                case VolumePerLengthUnit.ZettaliterPerMeter: return (baseUnitValue*1000) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
