//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The amount of power in a volume.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class PowerDensity : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PowerDensityUnit? _unit;

        static PowerDensity()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -3, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.PowerDensity, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit WattPerCubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public PowerDensity()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private PowerDensity(double numericValue, PowerDensityUnit unit)
        {
            if(unit == PowerDensityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of PowerDensity, which is WattPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static PowerDensityUnit BaseUnit { get; } = PowerDensityUnit.WattPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of PowerDensity
        /// </summary>
        public static PowerDensity MaxValue { get; } = new PowerDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of PowerDensity
        /// </summary>
        public static PowerDensity MinValue { get; } = new PowerDensity(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.PowerDensity;

        /// <summary>
        ///     All units of measurement for the PowerDensity quantity.
        /// </summary>
        public static PowerDensityUnit[] Units { get; } = Enum.GetValues(typeof(PowerDensityUnit)).Cast<PowerDensityUnit>().Except(new PowerDensityUnit[]{ PowerDensityUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit WattPerCubicMeter.
        /// </summary>
        public static PowerDensity Zero { get; } = new PowerDensity(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PowerDensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => PowerDensity.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => PowerDensity.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get PowerDensity in AttowattsPerCubicFoot.
        /// </summary>
        public double AttowattsPerCubicFoot => As(PowerDensityUnit.AttowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in AttowattsPerCubicInch.
        /// </summary>
        public double AttowattsPerCubicInch => As(PowerDensityUnit.AttowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in AttowattsPerCubicMeter.
        /// </summary>
        public double AttowattsPerCubicMeter => As(PowerDensityUnit.AttowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in AttowattsPerLiter.
        /// </summary>
        public double AttowattsPerLiter => As(PowerDensityUnit.AttowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in CentiwattsPerCubicFoot.
        /// </summary>
        public double CentiwattsPerCubicFoot => As(PowerDensityUnit.CentiwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in CentiwattsPerCubicInch.
        /// </summary>
        public double CentiwattsPerCubicInch => As(PowerDensityUnit.CentiwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in CentiwattsPerCubicMeter.
        /// </summary>
        public double CentiwattsPerCubicMeter => As(PowerDensityUnit.CentiwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in CentiwattsPerLiter.
        /// </summary>
        public double CentiwattsPerLiter => As(PowerDensityUnit.CentiwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicFoot.
        /// </summary>
        public double DecawattsPerCubicFoot => As(PowerDensityUnit.DecawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicInch.
        /// </summary>
        public double DecawattsPerCubicInch => As(PowerDensityUnit.DecawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicMeter.
        /// </summary>
        public double DecawattsPerCubicMeter => As(PowerDensityUnit.DecawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerLiter.
        /// </summary>
        public double DecawattsPerLiter => As(PowerDensityUnit.DecawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicFoot.
        /// </summary>
        public double DeciwattsPerCubicFoot => As(PowerDensityUnit.DeciwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicInch.
        /// </summary>
        public double DeciwattsPerCubicInch => As(PowerDensityUnit.DeciwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicMeter.
        /// </summary>
        public double DeciwattsPerCubicMeter => As(PowerDensityUnit.DeciwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerLiter.
        /// </summary>
        public double DeciwattsPerLiter => As(PowerDensityUnit.DeciwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in ExawattsPerCubicFoot.
        /// </summary>
        public double ExawattsPerCubicFoot => As(PowerDensityUnit.ExawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in ExawattsPerCubicInch.
        /// </summary>
        public double ExawattsPerCubicInch => As(PowerDensityUnit.ExawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in ExawattsPerCubicMeter.
        /// </summary>
        public double ExawattsPerCubicMeter => As(PowerDensityUnit.ExawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in ExawattsPerLiter.
        /// </summary>
        public double ExawattsPerLiter => As(PowerDensityUnit.ExawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in FemtowattsPerCubicFoot.
        /// </summary>
        public double FemtowattsPerCubicFoot => As(PowerDensityUnit.FemtowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in FemtowattsPerCubicInch.
        /// </summary>
        public double FemtowattsPerCubicInch => As(PowerDensityUnit.FemtowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in FemtowattsPerCubicMeter.
        /// </summary>
        public double FemtowattsPerCubicMeter => As(PowerDensityUnit.FemtowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in FemtowattsPerLiter.
        /// </summary>
        public double FemtowattsPerLiter => As(PowerDensityUnit.FemtowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicFoot.
        /// </summary>
        public double GigawattsPerCubicFoot => As(PowerDensityUnit.GigawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicInch.
        /// </summary>
        public double GigawattsPerCubicInch => As(PowerDensityUnit.GigawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicMeter.
        /// </summary>
        public double GigawattsPerCubicMeter => As(PowerDensityUnit.GigawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerLiter.
        /// </summary>
        public double GigawattsPerLiter => As(PowerDensityUnit.GigawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in HectowattsPerCubicFoot.
        /// </summary>
        public double HectowattsPerCubicFoot => As(PowerDensityUnit.HectowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in HectowattsPerCubicInch.
        /// </summary>
        public double HectowattsPerCubicInch => As(PowerDensityUnit.HectowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in HectowattsPerCubicMeter.
        /// </summary>
        public double HectowattsPerCubicMeter => As(PowerDensityUnit.HectowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in HectowattsPerLiter.
        /// </summary>
        public double HectowattsPerLiter => As(PowerDensityUnit.HectowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicFoot.
        /// </summary>
        public double KilowattsPerCubicFoot => As(PowerDensityUnit.KilowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicInch.
        /// </summary>
        public double KilowattsPerCubicInch => As(PowerDensityUnit.KilowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicMeter.
        /// </summary>
        public double KilowattsPerCubicMeter => As(PowerDensityUnit.KilowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerLiter.
        /// </summary>
        public double KilowattsPerLiter => As(PowerDensityUnit.KilowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicFoot.
        /// </summary>
        public double MegawattsPerCubicFoot => As(PowerDensityUnit.MegawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicInch.
        /// </summary>
        public double MegawattsPerCubicInch => As(PowerDensityUnit.MegawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicMeter.
        /// </summary>
        public double MegawattsPerCubicMeter => As(PowerDensityUnit.MegawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerLiter.
        /// </summary>
        public double MegawattsPerLiter => As(PowerDensityUnit.MegawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicFoot.
        /// </summary>
        public double MicrowattsPerCubicFoot => As(PowerDensityUnit.MicrowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicInch.
        /// </summary>
        public double MicrowattsPerCubicInch => As(PowerDensityUnit.MicrowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicMeter.
        /// </summary>
        public double MicrowattsPerCubicMeter => As(PowerDensityUnit.MicrowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerLiter.
        /// </summary>
        public double MicrowattsPerLiter => As(PowerDensityUnit.MicrowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicFoot.
        /// </summary>
        public double MilliwattsPerCubicFoot => As(PowerDensityUnit.MilliwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicInch.
        /// </summary>
        public double MilliwattsPerCubicInch => As(PowerDensityUnit.MilliwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicMeter.
        /// </summary>
        public double MilliwattsPerCubicMeter => As(PowerDensityUnit.MilliwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerLiter.
        /// </summary>
        public double MilliwattsPerLiter => As(PowerDensityUnit.MilliwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicFoot.
        /// </summary>
        public double NanowattsPerCubicFoot => As(PowerDensityUnit.NanowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicInch.
        /// </summary>
        public double NanowattsPerCubicInch => As(PowerDensityUnit.NanowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicMeter.
        /// </summary>
        public double NanowattsPerCubicMeter => As(PowerDensityUnit.NanowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerLiter.
        /// </summary>
        public double NanowattsPerLiter => As(PowerDensityUnit.NanowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in PetawattsPerCubicFoot.
        /// </summary>
        public double PetawattsPerCubicFoot => As(PowerDensityUnit.PetawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in PetawattsPerCubicInch.
        /// </summary>
        public double PetawattsPerCubicInch => As(PowerDensityUnit.PetawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in PetawattsPerCubicMeter.
        /// </summary>
        public double PetawattsPerCubicMeter => As(PowerDensityUnit.PetawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in PetawattsPerLiter.
        /// </summary>
        public double PetawattsPerLiter => As(PowerDensityUnit.PetawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicFoot.
        /// </summary>
        public double PicowattsPerCubicFoot => As(PowerDensityUnit.PicowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicInch.
        /// </summary>
        public double PicowattsPerCubicInch => As(PowerDensityUnit.PicowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicMeter.
        /// </summary>
        public double PicowattsPerCubicMeter => As(PowerDensityUnit.PicowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerLiter.
        /// </summary>
        public double PicowattsPerLiter => As(PowerDensityUnit.PicowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in QutrawattsPerCubicFoot.
        /// </summary>
        public double QutrawattsPerCubicFoot => As(PowerDensityUnit.QutrawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in QutrawattsPerCubicInch.
        /// </summary>
        public double QutrawattsPerCubicInch => As(PowerDensityUnit.QutrawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in QutrawattsPerCubicMeter.
        /// </summary>
        public double QutrawattsPerCubicMeter => As(PowerDensityUnit.QutrawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in QutrawattsPerLiter.
        /// </summary>
        public double QutrawattsPerLiter => As(PowerDensityUnit.QutrawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicFoot.
        /// </summary>
        public double TerawattsPerCubicFoot => As(PowerDensityUnit.TerawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicInch.
        /// </summary>
        public double TerawattsPerCubicInch => As(PowerDensityUnit.TerawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicMeter.
        /// </summary>
        public double TerawattsPerCubicMeter => As(PowerDensityUnit.TerawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerLiter.
        /// </summary>
        public double TerawattsPerLiter => As(PowerDensityUnit.TerawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in VettawattsPerCubicFoot.
        /// </summary>
        public double VettawattsPerCubicFoot => As(PowerDensityUnit.VettawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in VettawattsPerCubicInch.
        /// </summary>
        public double VettawattsPerCubicInch => As(PowerDensityUnit.VettawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in VettawattsPerCubicMeter.
        /// </summary>
        public double VettawattsPerCubicMeter => As(PowerDensityUnit.VettawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in VettawattsPerLiter.
        /// </summary>
        public double VettawattsPerLiter => As(PowerDensityUnit.VettawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicFoot.
        /// </summary>
        public double WattsPerCubicFoot => As(PowerDensityUnit.WattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicInch.
        /// </summary>
        public double WattsPerCubicInch => As(PowerDensityUnit.WattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicMeter.
        /// </summary>
        public double WattsPerCubicMeter => As(PowerDensityUnit.WattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in WattsPerLiter.
        /// </summary>
        public double WattsPerLiter => As(PowerDensityUnit.WattPerLiter);

        /// <summary>
        ///     Get PowerDensity in YoctowattsPerCubicFoot.
        /// </summary>
        public double YoctowattsPerCubicFoot => As(PowerDensityUnit.YoctowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in YoctowattsPerCubicInch.
        /// </summary>
        public double YoctowattsPerCubicInch => As(PowerDensityUnit.YoctowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in YoctowattsPerCubicMeter.
        /// </summary>
        public double YoctowattsPerCubicMeter => As(PowerDensityUnit.YoctowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in YoctowattsPerLiter.
        /// </summary>
        public double YoctowattsPerLiter => As(PowerDensityUnit.YoctowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in YottawattsPerCubicFoot.
        /// </summary>
        public double YottawattsPerCubicFoot => As(PowerDensityUnit.YottawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in YottawattsPerCubicInch.
        /// </summary>
        public double YottawattsPerCubicInch => As(PowerDensityUnit.YottawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in YottawattsPerCubicMeter.
        /// </summary>
        public double YottawattsPerCubicMeter => As(PowerDensityUnit.YottawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in YottawattsPerLiter.
        /// </summary>
        public double YottawattsPerLiter => As(PowerDensityUnit.YottawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in ZeptowattsPerCubicFoot.
        /// </summary>
        public double ZeptowattsPerCubicFoot => As(PowerDensityUnit.ZeptowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in ZeptowattsPerCubicInch.
        /// </summary>
        public double ZeptowattsPerCubicInch => As(PowerDensityUnit.ZeptowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in ZeptowattsPerCubicMeter.
        /// </summary>
        public double ZeptowattsPerCubicMeter => As(PowerDensityUnit.ZeptowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in ZeptowattsPerLiter.
        /// </summary>
        public double ZeptowattsPerLiter => As(PowerDensityUnit.ZeptowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in ZettawattsPerCubicFoot.
        /// </summary>
        public double ZettawattsPerCubicFoot => As(PowerDensityUnit.ZettawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in ZettawattsPerCubicInch.
        /// </summary>
        public double ZettawattsPerCubicInch => As(PowerDensityUnit.ZettawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in ZettawattsPerCubicMeter.
        /// </summary>
        public double ZettawattsPerCubicMeter => As(PowerDensityUnit.ZettawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in ZettawattsPerLiter.
        /// </summary>
        public double ZettawattsPerLiter => As(PowerDensityUnit.ZettawattPerLiter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PowerDensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(PowerDensityUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get PowerDensity from AttowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromAttowattsPerCubicFoot(double attowattspercubicfoot)
        {
            double value = (double) attowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.AttowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from AttowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromAttowattsPerCubicInch(double attowattspercubicinch)
        {
            double value = (double) attowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.AttowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from AttowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromAttowattsPerCubicMeter(double attowattspercubicmeter)
        {
            double value = (double) attowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.AttowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from AttowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromAttowattsPerLiter(double attowattsperliter)
        {
            double value = (double) attowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.AttowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from CentiwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromCentiwattsPerCubicFoot(double centiwattspercubicfoot)
        {
            double value = (double) centiwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.CentiwattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from CentiwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromCentiwattsPerCubicInch(double centiwattspercubicinch)
        {
            double value = (double) centiwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.CentiwattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from CentiwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromCentiwattsPerCubicMeter(double centiwattspercubicmeter)
        {
            double value = (double) centiwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.CentiwattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from CentiwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromCentiwattsPerLiter(double centiwattsperliter)
        {
            double value = (double) centiwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.CentiwattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerCubicFoot(double decawattspercubicfoot)
        {
            double value = (double) decawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerCubicInch(double decawattspercubicinch)
        {
            double value = (double) decawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerCubicMeter(double decawattspercubicmeter)
        {
            double value = (double) decawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from DecawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerLiter(double decawattsperliter)
        {
            double value = (double) decawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerCubicFoot(double deciwattspercubicfoot)
        {
            double value = (double) deciwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerCubicInch(double deciwattspercubicinch)
        {
            double value = (double) deciwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerCubicMeter(double deciwattspercubicmeter)
        {
            double value = (double) deciwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from DeciwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerLiter(double deciwattsperliter)
        {
            double value = (double) deciwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from ExawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromExawattsPerCubicFoot(double exawattspercubicfoot)
        {
            double value = (double) exawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.ExawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from ExawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromExawattsPerCubicInch(double exawattspercubicinch)
        {
            double value = (double) exawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.ExawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from ExawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromExawattsPerCubicMeter(double exawattspercubicmeter)
        {
            double value = (double) exawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.ExawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from ExawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromExawattsPerLiter(double exawattsperliter)
        {
            double value = (double) exawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.ExawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from FemtowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromFemtowattsPerCubicFoot(double femtowattspercubicfoot)
        {
            double value = (double) femtowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.FemtowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from FemtowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromFemtowattsPerCubicInch(double femtowattspercubicinch)
        {
            double value = (double) femtowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.FemtowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from FemtowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromFemtowattsPerCubicMeter(double femtowattspercubicmeter)
        {
            double value = (double) femtowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.FemtowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from FemtowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromFemtowattsPerLiter(double femtowattsperliter)
        {
            double value = (double) femtowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.FemtowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerCubicFoot(double gigawattspercubicfoot)
        {
            double value = (double) gigawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerCubicInch(double gigawattspercubicinch)
        {
            double value = (double) gigawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerCubicMeter(double gigawattspercubicmeter)
        {
            double value = (double) gigawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from GigawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerLiter(double gigawattsperliter)
        {
            double value = (double) gigawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from HectowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromHectowattsPerCubicFoot(double hectowattspercubicfoot)
        {
            double value = (double) hectowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.HectowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from HectowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromHectowattsPerCubicInch(double hectowattspercubicinch)
        {
            double value = (double) hectowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.HectowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from HectowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromHectowattsPerCubicMeter(double hectowattspercubicmeter)
        {
            double value = (double) hectowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.HectowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from HectowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromHectowattsPerLiter(double hectowattsperliter)
        {
            double value = (double) hectowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.HectowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerCubicFoot(double kilowattspercubicfoot)
        {
            double value = (double) kilowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerCubicInch(double kilowattspercubicinch)
        {
            double value = (double) kilowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerCubicMeter(double kilowattspercubicmeter)
        {
            double value = (double) kilowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from KilowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerLiter(double kilowattsperliter)
        {
            double value = (double) kilowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerCubicFoot(double megawattspercubicfoot)
        {
            double value = (double) megawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerCubicInch(double megawattspercubicinch)
        {
            double value = (double) megawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerCubicMeter(double megawattspercubicmeter)
        {
            double value = (double) megawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from MegawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerLiter(double megawattsperliter)
        {
            double value = (double) megawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerCubicFoot(double microwattspercubicfoot)
        {
            double value = (double) microwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerCubicInch(double microwattspercubicinch)
        {
            double value = (double) microwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerCubicMeter(double microwattspercubicmeter)
        {
            double value = (double) microwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from MicrowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerLiter(double microwattsperliter)
        {
            double value = (double) microwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerCubicFoot(double milliwattspercubicfoot)
        {
            double value = (double) milliwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerCubicInch(double milliwattspercubicinch)
        {
            double value = (double) milliwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerCubicMeter(double milliwattspercubicmeter)
        {
            double value = (double) milliwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from MilliwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerLiter(double milliwattsperliter)
        {
            double value = (double) milliwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerCubicFoot(double nanowattspercubicfoot)
        {
            double value = (double) nanowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerCubicInch(double nanowattspercubicinch)
        {
            double value = (double) nanowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerCubicMeter(double nanowattspercubicmeter)
        {
            double value = (double) nanowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from NanowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerLiter(double nanowattsperliter)
        {
            double value = (double) nanowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from PetawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPetawattsPerCubicFoot(double petawattspercubicfoot)
        {
            double value = (double) petawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.PetawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from PetawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPetawattsPerCubicInch(double petawattspercubicinch)
        {
            double value = (double) petawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.PetawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from PetawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPetawattsPerCubicMeter(double petawattspercubicmeter)
        {
            double value = (double) petawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.PetawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from PetawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPetawattsPerLiter(double petawattsperliter)
        {
            double value = (double) petawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.PetawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerCubicFoot(double picowattspercubicfoot)
        {
            double value = (double) picowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerCubicInch(double picowattspercubicinch)
        {
            double value = (double) picowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerCubicMeter(double picowattspercubicmeter)
        {
            double value = (double) picowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from PicowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerLiter(double picowattsperliter)
        {
            double value = (double) picowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from QutrawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromQutrawattsPerCubicFoot(double qutrawattspercubicfoot)
        {
            double value = (double) qutrawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.QutrawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from QutrawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromQutrawattsPerCubicInch(double qutrawattspercubicinch)
        {
            double value = (double) qutrawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.QutrawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from QutrawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromQutrawattsPerCubicMeter(double qutrawattspercubicmeter)
        {
            double value = (double) qutrawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.QutrawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from QutrawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromQutrawattsPerLiter(double qutrawattsperliter)
        {
            double value = (double) qutrawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.QutrawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerCubicFoot(double terawattspercubicfoot)
        {
            double value = (double) terawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerCubicInch(double terawattspercubicinch)
        {
            double value = (double) terawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerCubicMeter(double terawattspercubicmeter)
        {
            double value = (double) terawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from TerawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerLiter(double terawattsperliter)
        {
            double value = (double) terawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from VettawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromVettawattsPerCubicFoot(double vettawattspercubicfoot)
        {
            double value = (double) vettawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.VettawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from VettawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromVettawattsPerCubicInch(double vettawattspercubicinch)
        {
            double value = (double) vettawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.VettawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from VettawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromVettawattsPerCubicMeter(double vettawattspercubicmeter)
        {
            double value = (double) vettawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.VettawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from VettawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromVettawattsPerLiter(double vettawattsperliter)
        {
            double value = (double) vettawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.VettawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerCubicFoot(double wattspercubicfoot)
        {
            double value = (double) wattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerCubicInch(double wattspercubicinch)
        {
            double value = (double) wattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerCubicMeter(double wattspercubicmeter)
        {
            double value = (double) wattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from WattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerLiter(double wattsperliter)
        {
            double value = (double) wattsperliter;
            return new PowerDensity(value, PowerDensityUnit.WattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from YoctowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYoctowattsPerCubicFoot(double yoctowattspercubicfoot)
        {
            double value = (double) yoctowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.YoctowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from YoctowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYoctowattsPerCubicInch(double yoctowattspercubicinch)
        {
            double value = (double) yoctowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.YoctowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from YoctowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYoctowattsPerCubicMeter(double yoctowattspercubicmeter)
        {
            double value = (double) yoctowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.YoctowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from YoctowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYoctowattsPerLiter(double yoctowattsperliter)
        {
            double value = (double) yoctowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.YoctowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from YottawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYottawattsPerCubicFoot(double yottawattspercubicfoot)
        {
            double value = (double) yottawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.YottawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from YottawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYottawattsPerCubicInch(double yottawattspercubicinch)
        {
            double value = (double) yottawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.YottawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from YottawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYottawattsPerCubicMeter(double yottawattspercubicmeter)
        {
            double value = (double) yottawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.YottawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from YottawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromYottawattsPerLiter(double yottawattsperliter)
        {
            double value = (double) yottawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.YottawattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from ZeptowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZeptowattsPerCubicFoot(double zeptowattspercubicfoot)
        {
            double value = (double) zeptowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.ZeptowattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from ZeptowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZeptowattsPerCubicInch(double zeptowattspercubicinch)
        {
            double value = (double) zeptowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.ZeptowattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from ZeptowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZeptowattsPerCubicMeter(double zeptowattspercubicmeter)
        {
            double value = (double) zeptowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.ZeptowattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from ZeptowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZeptowattsPerLiter(double zeptowattsperliter)
        {
            double value = (double) zeptowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.ZeptowattPerLiter);
        }
        /// <summary>
        ///     Get PowerDensity from ZettawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZettawattsPerCubicFoot(double zettawattspercubicfoot)
        {
            double value = (double) zettawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.ZettawattPerCubicFoot);
        }
        /// <summary>
        ///     Get PowerDensity from ZettawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZettawattsPerCubicInch(double zettawattspercubicinch)
        {
            double value = (double) zettawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.ZettawattPerCubicInch);
        }
        /// <summary>
        ///     Get PowerDensity from ZettawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZettawattsPerCubicMeter(double zettawattspercubicmeter)
        {
            double value = (double) zettawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.ZettawattPerCubicMeter);
        }
        /// <summary>
        ///     Get PowerDensity from ZettawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromZettawattsPerLiter(double zettawattsperliter)
        {
            double value = (double) zettawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.ZettawattPerLiter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerDensityUnit" /> to <see cref="PowerDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PowerDensity unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static PowerDensity From(double value, PowerDensityUnit fromUnit)
        {
            return new PowerDensity((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static PowerDensity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PowerDensity Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<PowerDensity, PowerDensityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out PowerDensity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out PowerDensity result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<PowerDensity, PowerDensityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerDensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PowerDensityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<PowerDensityUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out PowerDensityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out PowerDensityUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<PowerDensityUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is PowerDensity objPowerDensity)) throw new ArgumentException("Expected type PowerDensity.", nameof(obj));

            return CompareTo(objPowerDensity);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(PowerDensity other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is PowerDensity objPowerDensity))
                return false;

            return Equals(objPowerDensity);
        }

        public bool Equals(PowerDensity other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another PowerDensity within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(PowerDensity other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current PowerDensity.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((PowerDensityUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PowerDensityUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this PowerDensity to another PowerDensity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A PowerDensity with the specified unit.</returns>
        public PowerDensity ToUnit(PowerDensityUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new PowerDensity(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PowerDensityUnit.AttowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-18d;
                case PowerDensityUnit.AttowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-18d;
                case PowerDensityUnit.AttowattPerCubicMeter: return (_value) * 1e-18d;
                case PowerDensityUnit.AttowattPerLiter: return (_value*1.0e3) * 1e-18d;
                case PowerDensityUnit.CentiwattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-2d;
                case PowerDensityUnit.CentiwattPerCubicInch: return (_value*6.102374409473228e4) * 1e-2d;
                case PowerDensityUnit.CentiwattPerCubicMeter: return (_value) * 1e-2d;
                case PowerDensityUnit.CentiwattPerLiter: return (_value*1.0e3) * 1e-2d;
                case PowerDensityUnit.DecawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e1d;
                case PowerDensityUnit.DecawattPerCubicInch: return (_value*6.102374409473228e4) * 1e1d;
                case PowerDensityUnit.DecawattPerCubicMeter: return (_value) * 1e1d;
                case PowerDensityUnit.DecawattPerLiter: return (_value*1.0e3) * 1e1d;
                case PowerDensityUnit.DeciwattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicInch: return (_value*6.102374409473228e4) * 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicMeter: return (_value) * 1e-1d;
                case PowerDensityUnit.DeciwattPerLiter: return (_value*1.0e3) * 1e-1d;
                case PowerDensityUnit.ExawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e18d;
                case PowerDensityUnit.ExawattPerCubicInch: return (_value*6.102374409473228e4) * 1e18d;
                case PowerDensityUnit.ExawattPerCubicMeter: return (_value) * 1e18d;
                case PowerDensityUnit.ExawattPerLiter: return (_value*1.0e3) * 1e18d;
                case PowerDensityUnit.FemtowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-15d;
                case PowerDensityUnit.FemtowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-15d;
                case PowerDensityUnit.FemtowattPerCubicMeter: return (_value) * 1e-15d;
                case PowerDensityUnit.FemtowattPerLiter: return (_value*1.0e3) * 1e-15d;
                case PowerDensityUnit.GigawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e9d;
                case PowerDensityUnit.GigawattPerCubicInch: return (_value*6.102374409473228e4) * 1e9d;
                case PowerDensityUnit.GigawattPerCubicMeter: return (_value) * 1e9d;
                case PowerDensityUnit.GigawattPerLiter: return (_value*1.0e3) * 1e9d;
                case PowerDensityUnit.HectowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e2d;
                case PowerDensityUnit.HectowattPerCubicInch: return (_value*6.102374409473228e4) * 1e2d;
                case PowerDensityUnit.HectowattPerCubicMeter: return (_value) * 1e2d;
                case PowerDensityUnit.HectowattPerLiter: return (_value*1.0e3) * 1e2d;
                case PowerDensityUnit.KilowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e3d;
                case PowerDensityUnit.KilowattPerCubicInch: return (_value*6.102374409473228e4) * 1e3d;
                case PowerDensityUnit.KilowattPerCubicMeter: return (_value) * 1e3d;
                case PowerDensityUnit.KilowattPerLiter: return (_value*1.0e3) * 1e3d;
                case PowerDensityUnit.MegawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e6d;
                case PowerDensityUnit.MegawattPerCubicInch: return (_value*6.102374409473228e4) * 1e6d;
                case PowerDensityUnit.MegawattPerCubicMeter: return (_value) * 1e6d;
                case PowerDensityUnit.MegawattPerLiter: return (_value*1.0e3) * 1e6d;
                case PowerDensityUnit.MicrowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicMeter: return (_value) * 1e-6d;
                case PowerDensityUnit.MicrowattPerLiter: return (_value*1.0e3) * 1e-6d;
                case PowerDensityUnit.MilliwattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicInch: return (_value*6.102374409473228e4) * 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicMeter: return (_value) * 1e-3d;
                case PowerDensityUnit.MilliwattPerLiter: return (_value*1.0e3) * 1e-3d;
                case PowerDensityUnit.NanowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-9d;
                case PowerDensityUnit.NanowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-9d;
                case PowerDensityUnit.NanowattPerCubicMeter: return (_value) * 1e-9d;
                case PowerDensityUnit.NanowattPerLiter: return (_value*1.0e3) * 1e-9d;
                case PowerDensityUnit.PetawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e15d;
                case PowerDensityUnit.PetawattPerCubicInch: return (_value*6.102374409473228e4) * 1e15d;
                case PowerDensityUnit.PetawattPerCubicMeter: return (_value) * 1e15d;
                case PowerDensityUnit.PetawattPerLiter: return (_value*1.0e3) * 1e15d;
                case PowerDensityUnit.PicowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-12d;
                case PowerDensityUnit.PicowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-12d;
                case PowerDensityUnit.PicowattPerCubicMeter: return (_value) * 1e-12d;
                case PowerDensityUnit.PicowattPerLiter: return (_value*1.0e3) * 1e-12d;
                case PowerDensityUnit.QutrawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e27d;
                case PowerDensityUnit.QutrawattPerCubicInch: return (_value*6.102374409473228e4) * 1e27d;
                case PowerDensityUnit.QutrawattPerCubicMeter: return (_value) * 1e27d;
                case PowerDensityUnit.QutrawattPerLiter: return (_value*1.0e3) * 1e27d;
                case PowerDensityUnit.TerawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e12d;
                case PowerDensityUnit.TerawattPerCubicInch: return (_value*6.102374409473228e4) * 1e12d;
                case PowerDensityUnit.TerawattPerCubicMeter: return (_value) * 1e12d;
                case PowerDensityUnit.TerawattPerLiter: return (_value*1.0e3) * 1e12d;
                case PowerDensityUnit.VettawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e30d;
                case PowerDensityUnit.VettawattPerCubicInch: return (_value*6.102374409473228e4) * 1e30d;
                case PowerDensityUnit.VettawattPerCubicMeter: return (_value) * 1e30d;
                case PowerDensityUnit.VettawattPerLiter: return (_value*1.0e3) * 1e30d;
                case PowerDensityUnit.WattPerCubicFoot: return _value*3.531466672148859e1;
                case PowerDensityUnit.WattPerCubicInch: return _value*6.102374409473228e4;
                case PowerDensityUnit.WattPerCubicMeter: return _value;
                case PowerDensityUnit.WattPerLiter: return _value*1.0e3;
                case PowerDensityUnit.YoctowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-24d;
                case PowerDensityUnit.YoctowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-24d;
                case PowerDensityUnit.YoctowattPerCubicMeter: return (_value) * 1e-24d;
                case PowerDensityUnit.YoctowattPerLiter: return (_value*1.0e3) * 1e-24d;
                case PowerDensityUnit.YottawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e24d;
                case PowerDensityUnit.YottawattPerCubicInch: return (_value*6.102374409473228e4) * 1e24d;
                case PowerDensityUnit.YottawattPerCubicMeter: return (_value) * 1e24d;
                case PowerDensityUnit.YottawattPerLiter: return (_value*1.0e3) * 1e24d;
                case PowerDensityUnit.ZeptowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-21d;
                case PowerDensityUnit.ZeptowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-21d;
                case PowerDensityUnit.ZeptowattPerCubicMeter: return (_value) * 1e-21d;
                case PowerDensityUnit.ZeptowattPerLiter: return (_value*1.0e3) * 1e-21d;
                case PowerDensityUnit.ZettawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e21d;
                case PowerDensityUnit.ZettawattPerCubicInch: return (_value*6.102374409473228e4) * 1e21d;
                case PowerDensityUnit.ZettawattPerCubicMeter: return (_value) * 1e21d;
                case PowerDensityUnit.ZettawattPerLiter: return (_value*1.0e3) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PowerDensityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PowerDensityUnit.AttowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-18d;
                case PowerDensityUnit.AttowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-18d;
                case PowerDensityUnit.AttowattPerCubicMeter: return (baseUnitValue) / 1e-18d;
                case PowerDensityUnit.AttowattPerLiter: return (baseUnitValue/1.0e3) / 1e-18d;
                case PowerDensityUnit.CentiwattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-2d;
                case PowerDensityUnit.CentiwattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-2d;
                case PowerDensityUnit.CentiwattPerCubicMeter: return (baseUnitValue) / 1e-2d;
                case PowerDensityUnit.CentiwattPerLiter: return (baseUnitValue/1.0e3) / 1e-2d;
                case PowerDensityUnit.DecawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e1d;
                case PowerDensityUnit.DecawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e1d;
                case PowerDensityUnit.DecawattPerCubicMeter: return (baseUnitValue) / 1e1d;
                case PowerDensityUnit.DecawattPerLiter: return (baseUnitValue/1.0e3) / 1e1d;
                case PowerDensityUnit.DeciwattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicMeter: return (baseUnitValue) / 1e-1d;
                case PowerDensityUnit.DeciwattPerLiter: return (baseUnitValue/1.0e3) / 1e-1d;
                case PowerDensityUnit.ExawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e18d;
                case PowerDensityUnit.ExawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e18d;
                case PowerDensityUnit.ExawattPerCubicMeter: return (baseUnitValue) / 1e18d;
                case PowerDensityUnit.ExawattPerLiter: return (baseUnitValue/1.0e3) / 1e18d;
                case PowerDensityUnit.FemtowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-15d;
                case PowerDensityUnit.FemtowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-15d;
                case PowerDensityUnit.FemtowattPerCubicMeter: return (baseUnitValue) / 1e-15d;
                case PowerDensityUnit.FemtowattPerLiter: return (baseUnitValue/1.0e3) / 1e-15d;
                case PowerDensityUnit.GigawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e9d;
                case PowerDensityUnit.GigawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e9d;
                case PowerDensityUnit.GigawattPerCubicMeter: return (baseUnitValue) / 1e9d;
                case PowerDensityUnit.GigawattPerLiter: return (baseUnitValue/1.0e3) / 1e9d;
                case PowerDensityUnit.HectowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e2d;
                case PowerDensityUnit.HectowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e2d;
                case PowerDensityUnit.HectowattPerCubicMeter: return (baseUnitValue) / 1e2d;
                case PowerDensityUnit.HectowattPerLiter: return (baseUnitValue/1.0e3) / 1e2d;
                case PowerDensityUnit.KilowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e3d;
                case PowerDensityUnit.KilowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e3d;
                case PowerDensityUnit.KilowattPerCubicMeter: return (baseUnitValue) / 1e3d;
                case PowerDensityUnit.KilowattPerLiter: return (baseUnitValue/1.0e3) / 1e3d;
                case PowerDensityUnit.MegawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e6d;
                case PowerDensityUnit.MegawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e6d;
                case PowerDensityUnit.MegawattPerCubicMeter: return (baseUnitValue) / 1e6d;
                case PowerDensityUnit.MegawattPerLiter: return (baseUnitValue/1.0e3) / 1e6d;
                case PowerDensityUnit.MicrowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicMeter: return (baseUnitValue) / 1e-6d;
                case PowerDensityUnit.MicrowattPerLiter: return (baseUnitValue/1.0e3) / 1e-6d;
                case PowerDensityUnit.MilliwattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicMeter: return (baseUnitValue) / 1e-3d;
                case PowerDensityUnit.MilliwattPerLiter: return (baseUnitValue/1.0e3) / 1e-3d;
                case PowerDensityUnit.NanowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-9d;
                case PowerDensityUnit.NanowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-9d;
                case PowerDensityUnit.NanowattPerCubicMeter: return (baseUnitValue) / 1e-9d;
                case PowerDensityUnit.NanowattPerLiter: return (baseUnitValue/1.0e3) / 1e-9d;
                case PowerDensityUnit.PetawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e15d;
                case PowerDensityUnit.PetawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e15d;
                case PowerDensityUnit.PetawattPerCubicMeter: return (baseUnitValue) / 1e15d;
                case PowerDensityUnit.PetawattPerLiter: return (baseUnitValue/1.0e3) / 1e15d;
                case PowerDensityUnit.PicowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-12d;
                case PowerDensityUnit.PicowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-12d;
                case PowerDensityUnit.PicowattPerCubicMeter: return (baseUnitValue) / 1e-12d;
                case PowerDensityUnit.PicowattPerLiter: return (baseUnitValue/1.0e3) / 1e-12d;
                case PowerDensityUnit.QutrawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e27d;
                case PowerDensityUnit.QutrawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e27d;
                case PowerDensityUnit.QutrawattPerCubicMeter: return (baseUnitValue) / 1e27d;
                case PowerDensityUnit.QutrawattPerLiter: return (baseUnitValue/1.0e3) / 1e27d;
                case PowerDensityUnit.TerawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e12d;
                case PowerDensityUnit.TerawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e12d;
                case PowerDensityUnit.TerawattPerCubicMeter: return (baseUnitValue) / 1e12d;
                case PowerDensityUnit.TerawattPerLiter: return (baseUnitValue/1.0e3) / 1e12d;
                case PowerDensityUnit.VettawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e30d;
                case PowerDensityUnit.VettawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e30d;
                case PowerDensityUnit.VettawattPerCubicMeter: return (baseUnitValue) / 1e30d;
                case PowerDensityUnit.VettawattPerLiter: return (baseUnitValue/1.0e3) / 1e30d;
                case PowerDensityUnit.WattPerCubicFoot: return baseUnitValue/3.531466672148859e1;
                case PowerDensityUnit.WattPerCubicInch: return baseUnitValue/6.102374409473228e4;
                case PowerDensityUnit.WattPerCubicMeter: return baseUnitValue;
                case PowerDensityUnit.WattPerLiter: return baseUnitValue/1.0e3;
                case PowerDensityUnit.YoctowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-24d;
                case PowerDensityUnit.YoctowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-24d;
                case PowerDensityUnit.YoctowattPerCubicMeter: return (baseUnitValue) / 1e-24d;
                case PowerDensityUnit.YoctowattPerLiter: return (baseUnitValue/1.0e3) / 1e-24d;
                case PowerDensityUnit.YottawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e24d;
                case PowerDensityUnit.YottawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e24d;
                case PowerDensityUnit.YottawattPerCubicMeter: return (baseUnitValue) / 1e24d;
                case PowerDensityUnit.YottawattPerLiter: return (baseUnitValue/1.0e3) / 1e24d;
                case PowerDensityUnit.ZeptowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-21d;
                case PowerDensityUnit.ZeptowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-21d;
                case PowerDensityUnit.ZeptowattPerCubicMeter: return (baseUnitValue) / 1e-21d;
                case PowerDensityUnit.ZeptowattPerLiter: return (baseUnitValue/1.0e3) / 1e-21d;
                case PowerDensityUnit.ZettawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e21d;
                case PowerDensityUnit.ZettawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e21d;
                case PowerDensityUnit.ZettawattPerCubicMeter: return (baseUnitValue) / 1e21d;
                case PowerDensityUnit.ZettawattPerLiter: return (baseUnitValue/1.0e3) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
