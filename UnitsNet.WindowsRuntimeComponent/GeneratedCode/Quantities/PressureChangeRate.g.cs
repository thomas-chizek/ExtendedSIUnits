//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Pressure change rate is the ratio of the pressure change to the time during which the change occurred (value of pressure changes per unit time).
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class PressureChangeRate : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureChangeRateUnit? _unit;

        static PressureChangeRate()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -3, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.PressureChangeRate, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit PascalPerSecond.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public PressureChangeRate()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private PressureChangeRate(double numericValue, PressureChangeRateUnit unit)
        {
            if(unit == PressureChangeRateUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of PressureChangeRate, which is PascalPerSecond. All conversions go via this value.
        /// </summary>
        public static PressureChangeRateUnit BaseUnit { get; } = PressureChangeRateUnit.PascalPerSecond;

        /// <summary>
        /// Represents the largest possible value of PressureChangeRate
        /// </summary>
        public static PressureChangeRate MaxValue { get; } = new PressureChangeRate(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of PressureChangeRate
        /// </summary>
        public static PressureChangeRate MinValue { get; } = new PressureChangeRate(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.PressureChangeRate;

        /// <summary>
        ///     All units of measurement for the PressureChangeRate quantity.
        /// </summary>
        public static PressureChangeRateUnit[] Units { get; } = Enum.GetValues(typeof(PressureChangeRateUnit)).Cast<PressureChangeRateUnit>().Except(new PressureChangeRateUnit[]{ PressureChangeRateUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit PascalPerSecond.
        /// </summary>
        public static PressureChangeRate Zero { get; } = new PressureChangeRate(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PressureChangeRateUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => PressureChangeRate.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => PressureChangeRate.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get PressureChangeRate in AtmospheresPerSecond.
        /// </summary>
        public double AtmospheresPerSecond => As(PressureChangeRateUnit.AtmospherePerSecond);

        /// <summary>
        ///     Get PressureChangeRate in CentipascalsPerMinute.
        /// </summary>
        public double CentipascalsPerMinute => As(PressureChangeRateUnit.CentipascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in CentipascalsPerSecond.
        /// </summary>
        public double CentipascalsPerSecond => As(PressureChangeRateUnit.CentipascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in DecapascalsPerMinute.
        /// </summary>
        public double DecapascalsPerMinute => As(PressureChangeRateUnit.DecapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in DecapascalsPerSecond.
        /// </summary>
        public double DecapascalsPerSecond => As(PressureChangeRateUnit.DecapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in DecipascalsPerMinute.
        /// </summary>
        public double DecipascalsPerMinute => As(PressureChangeRateUnit.DecipascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in DecipascalsPerSecond.
        /// </summary>
        public double DecipascalsPerSecond => As(PressureChangeRateUnit.DecipascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in ExapascalsPerMinute.
        /// </summary>
        public double ExapascalsPerMinute => As(PressureChangeRateUnit.ExapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in ExapascalsPerSecond.
        /// </summary>
        public double ExapascalsPerSecond => As(PressureChangeRateUnit.ExapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in FemtopascalsPerMinute.
        /// </summary>
        public double FemtopascalsPerMinute => As(PressureChangeRateUnit.FemtopascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in FemtopascalsPerSecond.
        /// </summary>
        public double FemtopascalsPerSecond => As(PressureChangeRateUnit.FemtopascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in GigapascalsPerMinute.
        /// </summary>
        public double GigapascalsPerMinute => As(PressureChangeRateUnit.GigapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in GigapascalsPerSecond.
        /// </summary>
        public double GigapascalsPerSecond => As(PressureChangeRateUnit.GigapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in HectopascalsPerMinute.
        /// </summary>
        public double HectopascalsPerMinute => As(PressureChangeRateUnit.HectopascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in HectopascalsPerSecond.
        /// </summary>
        public double HectopascalsPerSecond => As(PressureChangeRateUnit.HectopascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in KilopascalsPerMinute.
        /// </summary>
        public double KilopascalsPerMinute => As(PressureChangeRateUnit.KilopascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in KilopascalsPerSecond.
        /// </summary>
        public double KilopascalsPerSecond => As(PressureChangeRateUnit.KilopascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in MegapascalsPerMinute.
        /// </summary>
        public double MegapascalsPerMinute => As(PressureChangeRateUnit.MegapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in MegapascalsPerSecond.
        /// </summary>
        public double MegapascalsPerSecond => As(PressureChangeRateUnit.MegapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in MicropascalsPerMinute.
        /// </summary>
        public double MicropascalsPerMinute => As(PressureChangeRateUnit.MicropascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in MicropascalsPerSecond.
        /// </summary>
        public double MicropascalsPerSecond => As(PressureChangeRateUnit.MicropascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in MillipascalsPerMinute.
        /// </summary>
        public double MillipascalsPerMinute => As(PressureChangeRateUnit.MillipascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in MillipascalsPerSecond.
        /// </summary>
        public double MillipascalsPerSecond => As(PressureChangeRateUnit.MillipascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in NanopascalsPerMinute.
        /// </summary>
        public double NanopascalsPerMinute => As(PressureChangeRateUnit.NanopascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in NanopascalsPerSecond.
        /// </summary>
        public double NanopascalsPerSecond => As(PressureChangeRateUnit.NanopascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in PascalsPerMinute.
        /// </summary>
        public double PascalsPerMinute => As(PressureChangeRateUnit.PascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in PascalsPerSecond.
        /// </summary>
        public double PascalsPerSecond => As(PressureChangeRateUnit.PascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in PetapascalsPerMinute.
        /// </summary>
        public double PetapascalsPerMinute => As(PressureChangeRateUnit.PetapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in PetapascalsPerSecond.
        /// </summary>
        public double PetapascalsPerSecond => As(PressureChangeRateUnit.PetapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in PicopascalsPerMinute.
        /// </summary>
        public double PicopascalsPerMinute => As(PressureChangeRateUnit.PicopascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in PicopascalsPerSecond.
        /// </summary>
        public double PicopascalsPerSecond => As(PressureChangeRateUnit.PicopascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in QutrapascalsPerMinute.
        /// </summary>
        public double QutrapascalsPerMinute => As(PressureChangeRateUnit.QutrapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in QutrapascalsPerSecond.
        /// </summary>
        public double QutrapascalsPerSecond => As(PressureChangeRateUnit.QutrapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in TerapascalsPerMinute.
        /// </summary>
        public double TerapascalsPerMinute => As(PressureChangeRateUnit.TerapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in TerapascalsPerSecond.
        /// </summary>
        public double TerapascalsPerSecond => As(PressureChangeRateUnit.TerapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in VettapascalsPerMinute.
        /// </summary>
        public double VettapascalsPerMinute => As(PressureChangeRateUnit.VettapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in VettapascalsPerSecond.
        /// </summary>
        public double VettapascalsPerSecond => As(PressureChangeRateUnit.VettapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in YottapascalsPerMinute.
        /// </summary>
        public double YottapascalsPerMinute => As(PressureChangeRateUnit.YottapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in YottapascalsPerSecond.
        /// </summary>
        public double YottapascalsPerSecond => As(PressureChangeRateUnit.YottapascalPerSecond);

        /// <summary>
        ///     Get PressureChangeRate in ZettapascalsPerMinute.
        /// </summary>
        public double ZettapascalsPerMinute => As(PressureChangeRateUnit.ZettapascalPerMinute);

        /// <summary>
        ///     Get PressureChangeRate in ZettapascalsPerSecond.
        /// </summary>
        public double ZettapascalsPerSecond => As(PressureChangeRateUnit.ZettapascalPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureChangeRateUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(PressureChangeRateUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get PressureChangeRate from AtmospheresPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromAtmospheresPerSecond(double atmospherespersecond)
        {
            double value = (double) atmospherespersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.AtmospherePerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from CentipascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromCentipascalsPerMinute(double centipascalsperminute)
        {
            double value = (double) centipascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.CentipascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from CentipascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromCentipascalsPerSecond(double centipascalspersecond)
        {
            double value = (double) centipascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.CentipascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from DecapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromDecapascalsPerMinute(double decapascalsperminute)
        {
            double value = (double) decapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.DecapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from DecapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromDecapascalsPerSecond(double decapascalspersecond)
        {
            double value = (double) decapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.DecapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from DecipascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromDecipascalsPerMinute(double decipascalsperminute)
        {
            double value = (double) decipascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.DecipascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from DecipascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromDecipascalsPerSecond(double decipascalspersecond)
        {
            double value = (double) decipascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.DecipascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from ExapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromExapascalsPerMinute(double exapascalsperminute)
        {
            double value = (double) exapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.ExapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from ExapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromExapascalsPerSecond(double exapascalspersecond)
        {
            double value = (double) exapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.ExapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from FemtopascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromFemtopascalsPerMinute(double femtopascalsperminute)
        {
            double value = (double) femtopascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.FemtopascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from FemtopascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromFemtopascalsPerSecond(double femtopascalspersecond)
        {
            double value = (double) femtopascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.FemtopascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from GigapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromGigapascalsPerMinute(double gigapascalsperminute)
        {
            double value = (double) gigapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.GigapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from GigapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromGigapascalsPerSecond(double gigapascalspersecond)
        {
            double value = (double) gigapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.GigapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from HectopascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromHectopascalsPerMinute(double hectopascalsperminute)
        {
            double value = (double) hectopascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.HectopascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from HectopascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromHectopascalsPerSecond(double hectopascalspersecond)
        {
            double value = (double) hectopascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.HectopascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from KilopascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromKilopascalsPerMinute(double kilopascalsperminute)
        {
            double value = (double) kilopascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.KilopascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from KilopascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromKilopascalsPerSecond(double kilopascalspersecond)
        {
            double value = (double) kilopascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.KilopascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from MegapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromMegapascalsPerMinute(double megapascalsperminute)
        {
            double value = (double) megapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.MegapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from MegapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromMegapascalsPerSecond(double megapascalspersecond)
        {
            double value = (double) megapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.MegapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from MicropascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromMicropascalsPerMinute(double micropascalsperminute)
        {
            double value = (double) micropascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.MicropascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from MicropascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromMicropascalsPerSecond(double micropascalspersecond)
        {
            double value = (double) micropascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.MicropascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from MillipascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromMillipascalsPerMinute(double millipascalsperminute)
        {
            double value = (double) millipascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.MillipascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from MillipascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromMillipascalsPerSecond(double millipascalspersecond)
        {
            double value = (double) millipascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.MillipascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from NanopascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromNanopascalsPerMinute(double nanopascalsperminute)
        {
            double value = (double) nanopascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.NanopascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from NanopascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromNanopascalsPerSecond(double nanopascalspersecond)
        {
            double value = (double) nanopascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.NanopascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from PascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromPascalsPerMinute(double pascalsperminute)
        {
            double value = (double) pascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.PascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from PascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromPascalsPerSecond(double pascalspersecond)
        {
            double value = (double) pascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.PascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from PetapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromPetapascalsPerMinute(double petapascalsperminute)
        {
            double value = (double) petapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.PetapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from PetapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromPetapascalsPerSecond(double petapascalspersecond)
        {
            double value = (double) petapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.PetapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from PicopascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromPicopascalsPerMinute(double picopascalsperminute)
        {
            double value = (double) picopascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.PicopascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from PicopascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromPicopascalsPerSecond(double picopascalspersecond)
        {
            double value = (double) picopascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.PicopascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from QutrapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromQutrapascalsPerMinute(double qutrapascalsperminute)
        {
            double value = (double) qutrapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.QutrapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from QutrapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromQutrapascalsPerSecond(double qutrapascalspersecond)
        {
            double value = (double) qutrapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.QutrapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from TerapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromTerapascalsPerMinute(double terapascalsperminute)
        {
            double value = (double) terapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.TerapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from TerapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromTerapascalsPerSecond(double terapascalspersecond)
        {
            double value = (double) terapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.TerapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from VettapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromVettapascalsPerMinute(double vettapascalsperminute)
        {
            double value = (double) vettapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.VettapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from VettapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromVettapascalsPerSecond(double vettapascalspersecond)
        {
            double value = (double) vettapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.VettapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from YottapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromYottapascalsPerMinute(double yottapascalsperminute)
        {
            double value = (double) yottapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.YottapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from YottapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromYottapascalsPerSecond(double yottapascalspersecond)
        {
            double value = (double) yottapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.YottapascalPerSecond);
        }
        /// <summary>
        ///     Get PressureChangeRate from ZettapascalsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromZettapascalsPerMinute(double zettapascalsperminute)
        {
            double value = (double) zettapascalsperminute;
            return new PressureChangeRate(value, PressureChangeRateUnit.ZettapascalPerMinute);
        }
        /// <summary>
        ///     Get PressureChangeRate from ZettapascalsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureChangeRate FromZettapascalsPerSecond(double zettapascalspersecond)
        {
            double value = (double) zettapascalspersecond;
            return new PressureChangeRate(value, PressureChangeRateUnit.ZettapascalPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureChangeRateUnit" /> to <see cref="PressureChangeRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PressureChangeRate unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static PressureChangeRate From(double value, PressureChangeRateUnit fromUnit)
        {
            return new PressureChangeRate((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static PressureChangeRate Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PressureChangeRate Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<PressureChangeRate, PressureChangeRateUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out PressureChangeRate result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out PressureChangeRate result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<PressureChangeRate, PressureChangeRateUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureChangeRateUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PressureChangeRateUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<PressureChangeRateUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out PressureChangeRateUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out PressureChangeRateUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<PressureChangeRateUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is PressureChangeRate objPressureChangeRate)) throw new ArgumentException("Expected type PressureChangeRate.", nameof(obj));

            return CompareTo(objPressureChangeRate);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(PressureChangeRate other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is PressureChangeRate objPressureChangeRate))
                return false;

            return Equals(objPressureChangeRate);
        }

        public bool Equals(PressureChangeRate other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another PressureChangeRate within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(PressureChangeRate other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current PressureChangeRate.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((PressureChangeRateUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureChangeRateUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this PressureChangeRate to another PressureChangeRate with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A PressureChangeRate with the specified unit.</returns>
        public PressureChangeRate ToUnit(PressureChangeRateUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new PressureChangeRate(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PressureChangeRateUnit.AtmospherePerSecond: return _value * 1.01325*1e5;
                case PressureChangeRateUnit.CentipascalPerMinute: return (_value/60) * 1e-2d;
                case PressureChangeRateUnit.CentipascalPerSecond: return (_value) * 1e-2d;
                case PressureChangeRateUnit.DecapascalPerMinute: return (_value/60) * 1e1d;
                case PressureChangeRateUnit.DecapascalPerSecond: return (_value) * 1e1d;
                case PressureChangeRateUnit.DecipascalPerMinute: return (_value/60) * 1e-1d;
                case PressureChangeRateUnit.DecipascalPerSecond: return (_value) * 1e-1d;
                case PressureChangeRateUnit.ExapascalPerMinute: return (_value/60) * 1e18d;
                case PressureChangeRateUnit.ExapascalPerSecond: return (_value) * 1e18d;
                case PressureChangeRateUnit.FemtopascalPerMinute: return (_value/60) * 1e-15d;
                case PressureChangeRateUnit.FemtopascalPerSecond: return (_value) * 1e-15d;
                case PressureChangeRateUnit.GigapascalPerMinute: return (_value/60) * 1e9d;
                case PressureChangeRateUnit.GigapascalPerSecond: return (_value) * 1e9d;
                case PressureChangeRateUnit.HectopascalPerMinute: return (_value/60) * 1e2d;
                case PressureChangeRateUnit.HectopascalPerSecond: return (_value) * 1e2d;
                case PressureChangeRateUnit.KilopascalPerMinute: return (_value/60) * 1e3d;
                case PressureChangeRateUnit.KilopascalPerSecond: return (_value) * 1e3d;
                case PressureChangeRateUnit.MegapascalPerMinute: return (_value/60) * 1e6d;
                case PressureChangeRateUnit.MegapascalPerSecond: return (_value) * 1e6d;
                case PressureChangeRateUnit.MicropascalPerMinute: return (_value/60) * 1e-6d;
                case PressureChangeRateUnit.MicropascalPerSecond: return (_value) * 1e-6d;
                case PressureChangeRateUnit.MillipascalPerMinute: return (_value/60) * 1e-3d;
                case PressureChangeRateUnit.MillipascalPerSecond: return (_value) * 1e-3d;
                case PressureChangeRateUnit.NanopascalPerMinute: return (_value/60) * 1e-9d;
                case PressureChangeRateUnit.NanopascalPerSecond: return (_value) * 1e-9d;
                case PressureChangeRateUnit.PascalPerMinute: return _value/60;
                case PressureChangeRateUnit.PascalPerSecond: return _value;
                case PressureChangeRateUnit.PetapascalPerMinute: return (_value/60) * 1e15d;
                case PressureChangeRateUnit.PetapascalPerSecond: return (_value) * 1e15d;
                case PressureChangeRateUnit.PicopascalPerMinute: return (_value/60) * 1e-12d;
                case PressureChangeRateUnit.PicopascalPerSecond: return (_value) * 1e-12d;
                case PressureChangeRateUnit.QutrapascalPerMinute: return (_value/60) * 1e27d;
                case PressureChangeRateUnit.QutrapascalPerSecond: return (_value) * 1e27d;
                case PressureChangeRateUnit.TerapascalPerMinute: return (_value/60) * 1e12d;
                case PressureChangeRateUnit.TerapascalPerSecond: return (_value) * 1e12d;
                case PressureChangeRateUnit.VettapascalPerMinute: return (_value/60) * 1e30d;
                case PressureChangeRateUnit.VettapascalPerSecond: return (_value) * 1e30d;
                case PressureChangeRateUnit.YottapascalPerMinute: return (_value/60) * 1e24d;
                case PressureChangeRateUnit.YottapascalPerSecond: return (_value) * 1e24d;
                case PressureChangeRateUnit.ZettapascalPerMinute: return (_value/60) * 1e21d;
                case PressureChangeRateUnit.ZettapascalPerSecond: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PressureChangeRateUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PressureChangeRateUnit.AtmospherePerSecond: return baseUnitValue / (1.01325*1e5);
                case PressureChangeRateUnit.CentipascalPerMinute: return (baseUnitValue*60) / 1e-2d;
                case PressureChangeRateUnit.CentipascalPerSecond: return (baseUnitValue) / 1e-2d;
                case PressureChangeRateUnit.DecapascalPerMinute: return (baseUnitValue*60) / 1e1d;
                case PressureChangeRateUnit.DecapascalPerSecond: return (baseUnitValue) / 1e1d;
                case PressureChangeRateUnit.DecipascalPerMinute: return (baseUnitValue*60) / 1e-1d;
                case PressureChangeRateUnit.DecipascalPerSecond: return (baseUnitValue) / 1e-1d;
                case PressureChangeRateUnit.ExapascalPerMinute: return (baseUnitValue*60) / 1e18d;
                case PressureChangeRateUnit.ExapascalPerSecond: return (baseUnitValue) / 1e18d;
                case PressureChangeRateUnit.FemtopascalPerMinute: return (baseUnitValue*60) / 1e-15d;
                case PressureChangeRateUnit.FemtopascalPerSecond: return (baseUnitValue) / 1e-15d;
                case PressureChangeRateUnit.GigapascalPerMinute: return (baseUnitValue*60) / 1e9d;
                case PressureChangeRateUnit.GigapascalPerSecond: return (baseUnitValue) / 1e9d;
                case PressureChangeRateUnit.HectopascalPerMinute: return (baseUnitValue*60) / 1e2d;
                case PressureChangeRateUnit.HectopascalPerSecond: return (baseUnitValue) / 1e2d;
                case PressureChangeRateUnit.KilopascalPerMinute: return (baseUnitValue*60) / 1e3d;
                case PressureChangeRateUnit.KilopascalPerSecond: return (baseUnitValue) / 1e3d;
                case PressureChangeRateUnit.MegapascalPerMinute: return (baseUnitValue*60) / 1e6d;
                case PressureChangeRateUnit.MegapascalPerSecond: return (baseUnitValue) / 1e6d;
                case PressureChangeRateUnit.MicropascalPerMinute: return (baseUnitValue*60) / 1e-6d;
                case PressureChangeRateUnit.MicropascalPerSecond: return (baseUnitValue) / 1e-6d;
                case PressureChangeRateUnit.MillipascalPerMinute: return (baseUnitValue*60) / 1e-3d;
                case PressureChangeRateUnit.MillipascalPerSecond: return (baseUnitValue) / 1e-3d;
                case PressureChangeRateUnit.NanopascalPerMinute: return (baseUnitValue*60) / 1e-9d;
                case PressureChangeRateUnit.NanopascalPerSecond: return (baseUnitValue) / 1e-9d;
                case PressureChangeRateUnit.PascalPerMinute: return baseUnitValue*60;
                case PressureChangeRateUnit.PascalPerSecond: return baseUnitValue;
                case PressureChangeRateUnit.PetapascalPerMinute: return (baseUnitValue*60) / 1e15d;
                case PressureChangeRateUnit.PetapascalPerSecond: return (baseUnitValue) / 1e15d;
                case PressureChangeRateUnit.PicopascalPerMinute: return (baseUnitValue*60) / 1e-12d;
                case PressureChangeRateUnit.PicopascalPerSecond: return (baseUnitValue) / 1e-12d;
                case PressureChangeRateUnit.QutrapascalPerMinute: return (baseUnitValue*60) / 1e27d;
                case PressureChangeRateUnit.QutrapascalPerSecond: return (baseUnitValue) / 1e27d;
                case PressureChangeRateUnit.TerapascalPerMinute: return (baseUnitValue*60) / 1e12d;
                case PressureChangeRateUnit.TerapascalPerSecond: return (baseUnitValue) / 1e12d;
                case PressureChangeRateUnit.VettapascalPerMinute: return (baseUnitValue*60) / 1e30d;
                case PressureChangeRateUnit.VettapascalPerSecond: return (baseUnitValue) / 1e30d;
                case PressureChangeRateUnit.YottapascalPerMinute: return (baseUnitValue*60) / 1e24d;
                case PressureChangeRateUnit.YottapascalPerSecond: return (baseUnitValue) / 1e24d;
                case PressureChangeRateUnit.ZettapascalPerMinute: return (baseUnitValue*60) / 1e21d;
                case PressureChangeRateUnit.ZettapascalPerSecond: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
