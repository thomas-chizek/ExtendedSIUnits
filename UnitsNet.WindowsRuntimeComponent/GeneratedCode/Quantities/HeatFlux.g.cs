//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Heat flux is the flow of energy per unit of area per unit of time
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class HeatFlux : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly HeatFluxUnit? _unit;

        static HeatFlux()
        {
            BaseDimensions = new BaseDimensions(0, 1, -3, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.HeatFlux, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit WattPerSquareMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public HeatFlux()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private HeatFlux(double numericValue, HeatFluxUnit unit)
        {
            if(unit == HeatFluxUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of HeatFlux, which is WattPerSquareMeter. All conversions go via this value.
        /// </summary>
        public static HeatFluxUnit BaseUnit { get; } = HeatFluxUnit.WattPerSquareMeter;

        /// <summary>
        /// Represents the largest possible value of HeatFlux
        /// </summary>
        public static HeatFlux MaxValue { get; } = new HeatFlux(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of HeatFlux
        /// </summary>
        public static HeatFlux MinValue { get; } = new HeatFlux(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.HeatFlux;

        /// <summary>
        ///     All units of measurement for the HeatFlux quantity.
        /// </summary>
        public static HeatFluxUnit[] Units { get; } = Enum.GetValues(typeof(HeatFluxUnit)).Cast<HeatFluxUnit>().Except(new HeatFluxUnit[]{ HeatFluxUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeter.
        /// </summary>
        public static HeatFlux Zero { get; } = new HeatFlux(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public HeatFluxUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => HeatFlux.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => HeatFlux.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get HeatFlux in AttowattsPerSquareMeter.
        /// </summary>
        public double AttowattsPerSquareMeter => As(HeatFluxUnit.AttowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in BtusPerHourSquareFoot.
        /// </summary>
        public double BtusPerHourSquareFoot => As(HeatFluxUnit.BtuPerHourSquareFoot);

        /// <summary>
        ///     Get HeatFlux in BtusPerMinuteSquareFoot.
        /// </summary>
        public double BtusPerMinuteSquareFoot => As(HeatFluxUnit.BtuPerMinuteSquareFoot);

        /// <summary>
        ///     Get HeatFlux in BtusPerSecondSquareFoot.
        /// </summary>
        public double BtusPerSecondSquareFoot => As(HeatFluxUnit.BtuPerSecondSquareFoot);

        /// <summary>
        ///     Get HeatFlux in BtusPerSecondSquareInch.
        /// </summary>
        public double BtusPerSecondSquareInch => As(HeatFluxUnit.BtuPerSecondSquareInch);

        /// <summary>
        ///     Get HeatFlux in CaloriesPerSecondSquareCentimeter.
        /// </summary>
        public double CaloriesPerSecondSquareCentimeter => As(HeatFluxUnit.CaloriePerSecondSquareCentimeter);

        /// <summary>
        ///     Get HeatFlux in CentiwattsPerSquareMeter.
        /// </summary>
        public double CentiwattsPerSquareMeter => As(HeatFluxUnit.CentiwattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in DecawattsPerSquareMeter.
        /// </summary>
        public double DecawattsPerSquareMeter => As(HeatFluxUnit.DecawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in DeciwattsPerSquareMeter.
        /// </summary>
        public double DeciwattsPerSquareMeter => As(HeatFluxUnit.DeciwattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in ExawattsPerSquareMeter.
        /// </summary>
        public double ExawattsPerSquareMeter => As(HeatFluxUnit.ExawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in FemtowattsPerSquareMeter.
        /// </summary>
        public double FemtowattsPerSquareMeter => As(HeatFluxUnit.FemtowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in GigawattsPerSquareMeter.
        /// </summary>
        public double GigawattsPerSquareMeter => As(HeatFluxUnit.GigawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in HectowattsPerSquareMeter.
        /// </summary>
        public double HectowattsPerSquareMeter => As(HeatFluxUnit.HectowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in KilocaloriesPerHourSquareMeter.
        /// </summary>
        public double KilocaloriesPerHourSquareMeter => As(HeatFluxUnit.KilocaloriePerHourSquareMeter);

        /// <summary>
        ///     Get HeatFlux in KilocaloriesPerSecondSquareCentimeter.
        /// </summary>
        public double KilocaloriesPerSecondSquareCentimeter => As(HeatFluxUnit.KilocaloriePerSecondSquareCentimeter);

        /// <summary>
        ///     Get HeatFlux in KilowattsPerSquareMeter.
        /// </summary>
        public double KilowattsPerSquareMeter => As(HeatFluxUnit.KilowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in MegawattsPerSquareMeter.
        /// </summary>
        public double MegawattsPerSquareMeter => As(HeatFluxUnit.MegawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in MicrowattsPerSquareMeter.
        /// </summary>
        public double MicrowattsPerSquareMeter => As(HeatFluxUnit.MicrowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in MilliwattsPerSquareMeter.
        /// </summary>
        public double MilliwattsPerSquareMeter => As(HeatFluxUnit.MilliwattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in NanowattsPerSquareMeter.
        /// </summary>
        public double NanowattsPerSquareMeter => As(HeatFluxUnit.NanowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in PetawattsPerSquareMeter.
        /// </summary>
        public double PetawattsPerSquareMeter => As(HeatFluxUnit.PetawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in PicowattsPerSquareMeter.
        /// </summary>
        public double PicowattsPerSquareMeter => As(HeatFluxUnit.PicowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in PoundsForcePerFootSecond.
        /// </summary>
        public double PoundsForcePerFootSecond => As(HeatFluxUnit.PoundForcePerFootSecond);

        /// <summary>
        ///     Get HeatFlux in PoundsPerSecondCubed.
        /// </summary>
        public double PoundsPerSecondCubed => As(HeatFluxUnit.PoundPerSecondCubed);

        /// <summary>
        ///     Get HeatFlux in QutrawattsPerSquareMeter.
        /// </summary>
        public double QutrawattsPerSquareMeter => As(HeatFluxUnit.QutrawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in TerawattsPerSquareMeter.
        /// </summary>
        public double TerawattsPerSquareMeter => As(HeatFluxUnit.TerawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in VettawattsPerSquareMeter.
        /// </summary>
        public double VettawattsPerSquareMeter => As(HeatFluxUnit.VettawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in WattsPerSquareFoot.
        /// </summary>
        public double WattsPerSquareFoot => As(HeatFluxUnit.WattPerSquareFoot);

        /// <summary>
        ///     Get HeatFlux in WattsPerSquareInch.
        /// </summary>
        public double WattsPerSquareInch => As(HeatFluxUnit.WattPerSquareInch);

        /// <summary>
        ///     Get HeatFlux in WattsPerSquareMeter.
        /// </summary>
        public double WattsPerSquareMeter => As(HeatFluxUnit.WattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in YoctowattsPerSquareMeter.
        /// </summary>
        public double YoctowattsPerSquareMeter => As(HeatFluxUnit.YoctowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in YottawattsPerSquareMeter.
        /// </summary>
        public double YottawattsPerSquareMeter => As(HeatFluxUnit.YottawattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in ZeptowattsPerSquareMeter.
        /// </summary>
        public double ZeptowattsPerSquareMeter => As(HeatFluxUnit.ZeptowattPerSquareMeter);

        /// <summary>
        ///     Get HeatFlux in ZettawattsPerSquareMeter.
        /// </summary>
        public double ZettawattsPerSquareMeter => As(HeatFluxUnit.ZettawattPerSquareMeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(HeatFluxUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(HeatFluxUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get HeatFlux from AttowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromAttowattsPerSquareMeter(double attowattspersquaremeter)
        {
            double value = (double) attowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.AttowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from BtusPerHourSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromBtusPerHourSquareFoot(double btusperhoursquarefoot)
        {
            double value = (double) btusperhoursquarefoot;
            return new HeatFlux(value, HeatFluxUnit.BtuPerHourSquareFoot);
        }
        /// <summary>
        ///     Get HeatFlux from BtusPerMinuteSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromBtusPerMinuteSquareFoot(double btusperminutesquarefoot)
        {
            double value = (double) btusperminutesquarefoot;
            return new HeatFlux(value, HeatFluxUnit.BtuPerMinuteSquareFoot);
        }
        /// <summary>
        ///     Get HeatFlux from BtusPerSecondSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromBtusPerSecondSquareFoot(double btuspersecondsquarefoot)
        {
            double value = (double) btuspersecondsquarefoot;
            return new HeatFlux(value, HeatFluxUnit.BtuPerSecondSquareFoot);
        }
        /// <summary>
        ///     Get HeatFlux from BtusPerSecondSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromBtusPerSecondSquareInch(double btuspersecondsquareinch)
        {
            double value = (double) btuspersecondsquareinch;
            return new HeatFlux(value, HeatFluxUnit.BtuPerSecondSquareInch);
        }
        /// <summary>
        ///     Get HeatFlux from CaloriesPerSecondSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromCaloriesPerSecondSquareCentimeter(double caloriespersecondsquarecentimeter)
        {
            double value = (double) caloriespersecondsquarecentimeter;
            return new HeatFlux(value, HeatFluxUnit.CaloriePerSecondSquareCentimeter);
        }
        /// <summary>
        ///     Get HeatFlux from CentiwattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromCentiwattsPerSquareMeter(double centiwattspersquaremeter)
        {
            double value = (double) centiwattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.CentiwattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from DecawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromDecawattsPerSquareMeter(double decawattspersquaremeter)
        {
            double value = (double) decawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.DecawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from DeciwattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromDeciwattsPerSquareMeter(double deciwattspersquaremeter)
        {
            double value = (double) deciwattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.DeciwattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from ExawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromExawattsPerSquareMeter(double exawattspersquaremeter)
        {
            double value = (double) exawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.ExawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from FemtowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromFemtowattsPerSquareMeter(double femtowattspersquaremeter)
        {
            double value = (double) femtowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.FemtowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from GigawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromGigawattsPerSquareMeter(double gigawattspersquaremeter)
        {
            double value = (double) gigawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.GigawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from HectowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromHectowattsPerSquareMeter(double hectowattspersquaremeter)
        {
            double value = (double) hectowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.HectowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from KilocaloriesPerHourSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromKilocaloriesPerHourSquareMeter(double kilocaloriesperhoursquaremeter)
        {
            double value = (double) kilocaloriesperhoursquaremeter;
            return new HeatFlux(value, HeatFluxUnit.KilocaloriePerHourSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from KilocaloriesPerSecondSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromKilocaloriesPerSecondSquareCentimeter(double kilocaloriespersecondsquarecentimeter)
        {
            double value = (double) kilocaloriespersecondsquarecentimeter;
            return new HeatFlux(value, HeatFluxUnit.KilocaloriePerSecondSquareCentimeter);
        }
        /// <summary>
        ///     Get HeatFlux from KilowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromKilowattsPerSquareMeter(double kilowattspersquaremeter)
        {
            double value = (double) kilowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.KilowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from MegawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromMegawattsPerSquareMeter(double megawattspersquaremeter)
        {
            double value = (double) megawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.MegawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from MicrowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromMicrowattsPerSquareMeter(double microwattspersquaremeter)
        {
            double value = (double) microwattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.MicrowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from MilliwattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromMilliwattsPerSquareMeter(double milliwattspersquaremeter)
        {
            double value = (double) milliwattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.MilliwattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from NanowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromNanowattsPerSquareMeter(double nanowattspersquaremeter)
        {
            double value = (double) nanowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.NanowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from PetawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromPetawattsPerSquareMeter(double petawattspersquaremeter)
        {
            double value = (double) petawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.PetawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from PicowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromPicowattsPerSquareMeter(double picowattspersquaremeter)
        {
            double value = (double) picowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.PicowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from PoundsForcePerFootSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromPoundsForcePerFootSecond(double poundsforceperfootsecond)
        {
            double value = (double) poundsforceperfootsecond;
            return new HeatFlux(value, HeatFluxUnit.PoundForcePerFootSecond);
        }
        /// <summary>
        ///     Get HeatFlux from PoundsPerSecondCubed.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromPoundsPerSecondCubed(double poundspersecondcubed)
        {
            double value = (double) poundspersecondcubed;
            return new HeatFlux(value, HeatFluxUnit.PoundPerSecondCubed);
        }
        /// <summary>
        ///     Get HeatFlux from QutrawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromQutrawattsPerSquareMeter(double qutrawattspersquaremeter)
        {
            double value = (double) qutrawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.QutrawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from TerawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromTerawattsPerSquareMeter(double terawattspersquaremeter)
        {
            double value = (double) terawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.TerawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from VettawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromVettawattsPerSquareMeter(double vettawattspersquaremeter)
        {
            double value = (double) vettawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.VettawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from WattsPerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromWattsPerSquareFoot(double wattspersquarefoot)
        {
            double value = (double) wattspersquarefoot;
            return new HeatFlux(value, HeatFluxUnit.WattPerSquareFoot);
        }
        /// <summary>
        ///     Get HeatFlux from WattsPerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromWattsPerSquareInch(double wattspersquareinch)
        {
            double value = (double) wattspersquareinch;
            return new HeatFlux(value, HeatFluxUnit.WattPerSquareInch);
        }
        /// <summary>
        ///     Get HeatFlux from WattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromWattsPerSquareMeter(double wattspersquaremeter)
        {
            double value = (double) wattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.WattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from YoctowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromYoctowattsPerSquareMeter(double yoctowattspersquaremeter)
        {
            double value = (double) yoctowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.YoctowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from YottawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromYottawattsPerSquareMeter(double yottawattspersquaremeter)
        {
            double value = (double) yottawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.YottawattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from ZeptowattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromZeptowattsPerSquareMeter(double zeptowattspersquaremeter)
        {
            double value = (double) zeptowattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.ZeptowattPerSquareMeter);
        }
        /// <summary>
        ///     Get HeatFlux from ZettawattsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static HeatFlux FromZettawattsPerSquareMeter(double zettawattspersquaremeter)
        {
            double value = (double) zettawattspersquaremeter;
            return new HeatFlux(value, HeatFluxUnit.ZettawattPerSquareMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="HeatFluxUnit" /> to <see cref="HeatFlux" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>HeatFlux unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static HeatFlux From(double value, HeatFluxUnit fromUnit)
        {
            return new HeatFlux((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static HeatFlux Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static HeatFlux Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<HeatFlux, HeatFluxUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out HeatFlux result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out HeatFlux result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<HeatFlux, HeatFluxUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static HeatFluxUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static HeatFluxUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<HeatFluxUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out HeatFluxUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out HeatFluxUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<HeatFluxUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is HeatFlux objHeatFlux)) throw new ArgumentException("Expected type HeatFlux.", nameof(obj));

            return CompareTo(objHeatFlux);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(HeatFlux other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is HeatFlux objHeatFlux))
                return false;

            return Equals(objHeatFlux);
        }

        public bool Equals(HeatFlux other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another HeatFlux within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(HeatFlux other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current HeatFlux.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((HeatFluxUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(HeatFluxUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this HeatFlux to another HeatFlux with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A HeatFlux with the specified unit.</returns>
        public HeatFlux ToUnit(HeatFluxUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new HeatFlux(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case HeatFluxUnit.AttowattPerSquareMeter: return (_value) * 1e-18d;
                case HeatFluxUnit.BtuPerHourSquareFoot: return _value*3.15459075;
                case HeatFluxUnit.BtuPerMinuteSquareFoot: return _value*1.89275445e2;
                case HeatFluxUnit.BtuPerSecondSquareFoot: return _value*1.13565267e4;
                case HeatFluxUnit.BtuPerSecondSquareInch: return _value*1.63533984e6;
                case HeatFluxUnit.CaloriePerSecondSquareCentimeter: return _value*4.1868e4;
                case HeatFluxUnit.CentiwattPerSquareMeter: return (_value) * 1e-2d;
                case HeatFluxUnit.DecawattPerSquareMeter: return (_value) * 1e1d;
                case HeatFluxUnit.DeciwattPerSquareMeter: return (_value) * 1e-1d;
                case HeatFluxUnit.ExawattPerSquareMeter: return (_value) * 1e18d;
                case HeatFluxUnit.FemtowattPerSquareMeter: return (_value) * 1e-15d;
                case HeatFluxUnit.GigawattPerSquareMeter: return (_value) * 1e9d;
                case HeatFluxUnit.HectowattPerSquareMeter: return (_value) * 1e2d;
                case HeatFluxUnit.KilocaloriePerHourSquareMeter: return _value*1.163;
                case HeatFluxUnit.KilocaloriePerSecondSquareCentimeter: return (_value*4.1868e4) * 1e3d;
                case HeatFluxUnit.KilowattPerSquareMeter: return (_value) * 1e3d;
                case HeatFluxUnit.MegawattPerSquareMeter: return (_value) * 1e6d;
                case HeatFluxUnit.MicrowattPerSquareMeter: return (_value) * 1e-6d;
                case HeatFluxUnit.MilliwattPerSquareMeter: return (_value) * 1e-3d;
                case HeatFluxUnit.NanowattPerSquareMeter: return (_value) * 1e-9d;
                case HeatFluxUnit.PetawattPerSquareMeter: return (_value) * 1e15d;
                case HeatFluxUnit.PicowattPerSquareMeter: return (_value) * 1e-12d;
                case HeatFluxUnit.PoundForcePerFootSecond: return _value*1.459390293720636e1;
                case HeatFluxUnit.PoundPerSecondCubed: return _value*4.5359237e-1;
                case HeatFluxUnit.QutrawattPerSquareMeter: return (_value) * 1e27d;
                case HeatFluxUnit.TerawattPerSquareMeter: return (_value) * 1e12d;
                case HeatFluxUnit.VettawattPerSquareMeter: return (_value) * 1e30d;
                case HeatFluxUnit.WattPerSquareFoot: return _value*1.07639e1;
                case HeatFluxUnit.WattPerSquareInch: return _value*1.5500031e3;
                case HeatFluxUnit.WattPerSquareMeter: return _value;
                case HeatFluxUnit.YoctowattPerSquareMeter: return (_value) * 1e-24d;
                case HeatFluxUnit.YottawattPerSquareMeter: return (_value) * 1e24d;
                case HeatFluxUnit.ZeptowattPerSquareMeter: return (_value) * 1e-21d;
                case HeatFluxUnit.ZettawattPerSquareMeter: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(HeatFluxUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case HeatFluxUnit.AttowattPerSquareMeter: return (baseUnitValue) / 1e-18d;
                case HeatFluxUnit.BtuPerHourSquareFoot: return baseUnitValue/3.15459075;
                case HeatFluxUnit.BtuPerMinuteSquareFoot: return baseUnitValue/1.89275445e2;
                case HeatFluxUnit.BtuPerSecondSquareFoot: return baseUnitValue/1.13565267e4;
                case HeatFluxUnit.BtuPerSecondSquareInch: return baseUnitValue/1.63533984e6;
                case HeatFluxUnit.CaloriePerSecondSquareCentimeter: return baseUnitValue/4.1868e4;
                case HeatFluxUnit.CentiwattPerSquareMeter: return (baseUnitValue) / 1e-2d;
                case HeatFluxUnit.DecawattPerSquareMeter: return (baseUnitValue) / 1e1d;
                case HeatFluxUnit.DeciwattPerSquareMeter: return (baseUnitValue) / 1e-1d;
                case HeatFluxUnit.ExawattPerSquareMeter: return (baseUnitValue) / 1e18d;
                case HeatFluxUnit.FemtowattPerSquareMeter: return (baseUnitValue) / 1e-15d;
                case HeatFluxUnit.GigawattPerSquareMeter: return (baseUnitValue) / 1e9d;
                case HeatFluxUnit.HectowattPerSquareMeter: return (baseUnitValue) / 1e2d;
                case HeatFluxUnit.KilocaloriePerHourSquareMeter: return baseUnitValue/1.163;
                case HeatFluxUnit.KilocaloriePerSecondSquareCentimeter: return (baseUnitValue/4.1868e4) / 1e3d;
                case HeatFluxUnit.KilowattPerSquareMeter: return (baseUnitValue) / 1e3d;
                case HeatFluxUnit.MegawattPerSquareMeter: return (baseUnitValue) / 1e6d;
                case HeatFluxUnit.MicrowattPerSquareMeter: return (baseUnitValue) / 1e-6d;
                case HeatFluxUnit.MilliwattPerSquareMeter: return (baseUnitValue) / 1e-3d;
                case HeatFluxUnit.NanowattPerSquareMeter: return (baseUnitValue) / 1e-9d;
                case HeatFluxUnit.PetawattPerSquareMeter: return (baseUnitValue) / 1e15d;
                case HeatFluxUnit.PicowattPerSquareMeter: return (baseUnitValue) / 1e-12d;
                case HeatFluxUnit.PoundForcePerFootSecond: return baseUnitValue/1.459390293720636e1;
                case HeatFluxUnit.PoundPerSecondCubed: return baseUnitValue/4.5359237e-1;
                case HeatFluxUnit.QutrawattPerSquareMeter: return (baseUnitValue) / 1e27d;
                case HeatFluxUnit.TerawattPerSquareMeter: return (baseUnitValue) / 1e12d;
                case HeatFluxUnit.VettawattPerSquareMeter: return (baseUnitValue) / 1e30d;
                case HeatFluxUnit.WattPerSquareFoot: return baseUnitValue/1.07639e1;
                case HeatFluxUnit.WattPerSquareInch: return baseUnitValue/1.5500031e3;
                case HeatFluxUnit.WattPerSquareMeter: return baseUnitValue;
                case HeatFluxUnit.YoctowattPerSquareMeter: return (baseUnitValue) / 1e-24d;
                case HeatFluxUnit.YottawattPerSquareMeter: return (baseUnitValue) / 1e24d;
                case HeatFluxUnit.ZeptowattPerSquareMeter: return (baseUnitValue) / 1e-21d;
                case HeatFluxUnit.ZettawattPerSquareMeter: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
