//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The SpecificWeight, or more precisely, the volumetric weight density, of a substance is its weight per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Specificweight
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class SpecificWeight : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificWeightUnit? _unit;

        static SpecificWeight()
        {
            BaseDimensions = new BaseDimensions(-2, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.SpecificWeight, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit NewtonPerCubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public SpecificWeight()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private SpecificWeight(double numericValue, SpecificWeightUnit unit)
        {
            if(unit == SpecificWeightUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificWeight, which is NewtonPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static SpecificWeightUnit BaseUnit { get; } = SpecificWeightUnit.NewtonPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of SpecificWeight
        /// </summary>
        public static SpecificWeight MaxValue { get; } = new SpecificWeight(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificWeight
        /// </summary>
        public static SpecificWeight MinValue { get; } = new SpecificWeight(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.SpecificWeight;

        /// <summary>
        ///     All units of measurement for the SpecificWeight quantity.
        /// </summary>
        public static SpecificWeightUnit[] Units { get; } = Enum.GetValues(typeof(SpecificWeightUnit)).Cast<SpecificWeightUnit>().Except(new SpecificWeightUnit[]{ SpecificWeightUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonPerCubicMeter.
        /// </summary>
        public static SpecificWeight Zero { get; } = new SpecificWeight(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public SpecificWeightUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificWeight.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificWeight.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificWeight in AttonewtonsPerCubicCentimeter.
        /// </summary>
        public double AttonewtonsPerCubicCentimeter => As(SpecificWeightUnit.AttonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in AttonewtonsPerCubicMeter.
        /// </summary>
        public double AttonewtonsPerCubicMeter => As(SpecificWeightUnit.AttonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in AttonewtonsPerCubicMillimeter.
        /// </summary>
        public double AttonewtonsPerCubicMillimeter => As(SpecificWeightUnit.AttonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in AttopoundsForcePerCubicFoot.
        /// </summary>
        public double AttopoundsForcePerCubicFoot => As(SpecificWeightUnit.AttopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in AttopoundsForcePerCubicInch.
        /// </summary>
        public double AttopoundsForcePerCubicInch => As(SpecificWeightUnit.AttopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in CentinewtonsPerCubicCentimeter.
        /// </summary>
        public double CentinewtonsPerCubicCentimeter => As(SpecificWeightUnit.CentinewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in CentinewtonsPerCubicMeter.
        /// </summary>
        public double CentinewtonsPerCubicMeter => As(SpecificWeightUnit.CentinewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in CentinewtonsPerCubicMillimeter.
        /// </summary>
        public double CentinewtonsPerCubicMillimeter => As(SpecificWeightUnit.CentinewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in CentipoundsForcePerCubicFoot.
        /// </summary>
        public double CentipoundsForcePerCubicFoot => As(SpecificWeightUnit.CentipoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in CentipoundsForcePerCubicInch.
        /// </summary>
        public double CentipoundsForcePerCubicInch => As(SpecificWeightUnit.CentipoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in DecanewtonsPerCubicCentimeter.
        /// </summary>
        public double DecanewtonsPerCubicCentimeter => As(SpecificWeightUnit.DecanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in DecanewtonsPerCubicMeter.
        /// </summary>
        public double DecanewtonsPerCubicMeter => As(SpecificWeightUnit.DecanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in DecanewtonsPerCubicMillimeter.
        /// </summary>
        public double DecanewtonsPerCubicMillimeter => As(SpecificWeightUnit.DecanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in DecapoundsForcePerCubicFoot.
        /// </summary>
        public double DecapoundsForcePerCubicFoot => As(SpecificWeightUnit.DecapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in DecapoundsForcePerCubicInch.
        /// </summary>
        public double DecapoundsForcePerCubicInch => As(SpecificWeightUnit.DecapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in DecinewtonsPerCubicCentimeter.
        /// </summary>
        public double DecinewtonsPerCubicCentimeter => As(SpecificWeightUnit.DecinewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in DecinewtonsPerCubicMeter.
        /// </summary>
        public double DecinewtonsPerCubicMeter => As(SpecificWeightUnit.DecinewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in DecinewtonsPerCubicMillimeter.
        /// </summary>
        public double DecinewtonsPerCubicMillimeter => As(SpecificWeightUnit.DecinewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in DecipoundsForcePerCubicFoot.
        /// </summary>
        public double DecipoundsForcePerCubicFoot => As(SpecificWeightUnit.DecipoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in DecipoundsForcePerCubicInch.
        /// </summary>
        public double DecipoundsForcePerCubicInch => As(SpecificWeightUnit.DecipoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in ExanewtonsPerCubicCentimeter.
        /// </summary>
        public double ExanewtonsPerCubicCentimeter => As(SpecificWeightUnit.ExanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in ExanewtonsPerCubicMeter.
        /// </summary>
        public double ExanewtonsPerCubicMeter => As(SpecificWeightUnit.ExanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in ExanewtonsPerCubicMillimeter.
        /// </summary>
        public double ExanewtonsPerCubicMillimeter => As(SpecificWeightUnit.ExanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in ExapoundsForcePerCubicFoot.
        /// </summary>
        public double ExapoundsForcePerCubicFoot => As(SpecificWeightUnit.ExapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in ExapoundsForcePerCubicInch.
        /// </summary>
        public double ExapoundsForcePerCubicInch => As(SpecificWeightUnit.ExapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in FemtonewtonsPerCubicCentimeter.
        /// </summary>
        public double FemtonewtonsPerCubicCentimeter => As(SpecificWeightUnit.FemtonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in FemtonewtonsPerCubicMeter.
        /// </summary>
        public double FemtonewtonsPerCubicMeter => As(SpecificWeightUnit.FemtonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in FemtonewtonsPerCubicMillimeter.
        /// </summary>
        public double FemtonewtonsPerCubicMillimeter => As(SpecificWeightUnit.FemtonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in FemtopoundsForcePerCubicFoot.
        /// </summary>
        public double FemtopoundsForcePerCubicFoot => As(SpecificWeightUnit.FemtopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in FemtopoundsForcePerCubicInch.
        /// </summary>
        public double FemtopoundsForcePerCubicInch => As(SpecificWeightUnit.FemtopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in GiganewtonsPerCubicCentimeter.
        /// </summary>
        public double GiganewtonsPerCubicCentimeter => As(SpecificWeightUnit.GiganewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in GiganewtonsPerCubicMeter.
        /// </summary>
        public double GiganewtonsPerCubicMeter => As(SpecificWeightUnit.GiganewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in GiganewtonsPerCubicMillimeter.
        /// </summary>
        public double GiganewtonsPerCubicMillimeter => As(SpecificWeightUnit.GiganewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in GigapoundsForcePerCubicFoot.
        /// </summary>
        public double GigapoundsForcePerCubicFoot => As(SpecificWeightUnit.GigapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in GigapoundsForcePerCubicInch.
        /// </summary>
        public double GigapoundsForcePerCubicInch => As(SpecificWeightUnit.GigapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in HectonewtonsPerCubicCentimeter.
        /// </summary>
        public double HectonewtonsPerCubicCentimeter => As(SpecificWeightUnit.HectonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in HectonewtonsPerCubicMeter.
        /// </summary>
        public double HectonewtonsPerCubicMeter => As(SpecificWeightUnit.HectonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in HectonewtonsPerCubicMillimeter.
        /// </summary>
        public double HectonewtonsPerCubicMillimeter => As(SpecificWeightUnit.HectonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in HectopoundsForcePerCubicFoot.
        /// </summary>
        public double HectopoundsForcePerCubicFoot => As(SpecificWeightUnit.HectopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in HectopoundsForcePerCubicInch.
        /// </summary>
        public double HectopoundsForcePerCubicInch => As(SpecificWeightUnit.HectopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicCentimeter.
        /// </summary>
        public double KilogramsForcePerCubicCentimeter => As(SpecificWeightUnit.KilogramForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicMeter.
        /// </summary>
        public double KilogramsForcePerCubicMeter => As(SpecificWeightUnit.KilogramForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in KilogramsForcePerCubicMillimeter.
        /// </summary>
        public double KilogramsForcePerCubicMillimeter => As(SpecificWeightUnit.KilogramForcePerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicCentimeter.
        /// </summary>
        public double KilonewtonsPerCubicCentimeter => As(SpecificWeightUnit.KilonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicMeter.
        /// </summary>
        public double KilonewtonsPerCubicMeter => As(SpecificWeightUnit.KilonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in KilonewtonsPerCubicMillimeter.
        /// </summary>
        public double KilonewtonsPerCubicMillimeter => As(SpecificWeightUnit.KilonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in KilopoundsForcePerCubicFoot.
        /// </summary>
        public double KilopoundsForcePerCubicFoot => As(SpecificWeightUnit.KilopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in KilopoundsForcePerCubicInch.
        /// </summary>
        public double KilopoundsForcePerCubicInch => As(SpecificWeightUnit.KilopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicCentimeter.
        /// </summary>
        public double MeganewtonsPerCubicCentimeter => As(SpecificWeightUnit.MeganewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicMeter.
        /// </summary>
        public double MeganewtonsPerCubicMeter => As(SpecificWeightUnit.MeganewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in MeganewtonsPerCubicMillimeter.
        /// </summary>
        public double MeganewtonsPerCubicMillimeter => As(SpecificWeightUnit.MeganewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in MegapoundsForcePerCubicFoot.
        /// </summary>
        public double MegapoundsForcePerCubicFoot => As(SpecificWeightUnit.MegapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in MegapoundsForcePerCubicInch.
        /// </summary>
        public double MegapoundsForcePerCubicInch => As(SpecificWeightUnit.MegapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MicronewtonsPerCubicCentimeter.
        /// </summary>
        public double MicronewtonsPerCubicCentimeter => As(SpecificWeightUnit.MicronewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in MicronewtonsPerCubicMeter.
        /// </summary>
        public double MicronewtonsPerCubicMeter => As(SpecificWeightUnit.MicronewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in MicronewtonsPerCubicMillimeter.
        /// </summary>
        public double MicronewtonsPerCubicMillimeter => As(SpecificWeightUnit.MicronewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in MicropoundsForcePerCubicFoot.
        /// </summary>
        public double MicropoundsForcePerCubicFoot => As(SpecificWeightUnit.MicropoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in MicropoundsForcePerCubicInch.
        /// </summary>
        public double MicropoundsForcePerCubicInch => As(SpecificWeightUnit.MicropoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in MillinewtonsPerCubicCentimeter.
        /// </summary>
        public double MillinewtonsPerCubicCentimeter => As(SpecificWeightUnit.MillinewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in MillinewtonsPerCubicMeter.
        /// </summary>
        public double MillinewtonsPerCubicMeter => As(SpecificWeightUnit.MillinewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in MillinewtonsPerCubicMillimeter.
        /// </summary>
        public double MillinewtonsPerCubicMillimeter => As(SpecificWeightUnit.MillinewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in MillipoundsForcePerCubicFoot.
        /// </summary>
        public double MillipoundsForcePerCubicFoot => As(SpecificWeightUnit.MillipoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in MillipoundsForcePerCubicInch.
        /// </summary>
        public double MillipoundsForcePerCubicInch => As(SpecificWeightUnit.MillipoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in NanonewtonsPerCubicCentimeter.
        /// </summary>
        public double NanonewtonsPerCubicCentimeter => As(SpecificWeightUnit.NanonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in NanonewtonsPerCubicMeter.
        /// </summary>
        public double NanonewtonsPerCubicMeter => As(SpecificWeightUnit.NanonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in NanonewtonsPerCubicMillimeter.
        /// </summary>
        public double NanonewtonsPerCubicMillimeter => As(SpecificWeightUnit.NanonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in NanopoundsForcePerCubicFoot.
        /// </summary>
        public double NanopoundsForcePerCubicFoot => As(SpecificWeightUnit.NanopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in NanopoundsForcePerCubicInch.
        /// </summary>
        public double NanopoundsForcePerCubicInch => As(SpecificWeightUnit.NanopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicCentimeter.
        /// </summary>
        public double NewtonsPerCubicCentimeter => As(SpecificWeightUnit.NewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicMeter.
        /// </summary>
        public double NewtonsPerCubicMeter => As(SpecificWeightUnit.NewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in NewtonsPerCubicMillimeter.
        /// </summary>
        public double NewtonsPerCubicMillimeter => As(SpecificWeightUnit.NewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PetanewtonsPerCubicCentimeter.
        /// </summary>
        public double PetanewtonsPerCubicCentimeter => As(SpecificWeightUnit.PetanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in PetanewtonsPerCubicMeter.
        /// </summary>
        public double PetanewtonsPerCubicMeter => As(SpecificWeightUnit.PetanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in PetanewtonsPerCubicMillimeter.
        /// </summary>
        public double PetanewtonsPerCubicMillimeter => As(SpecificWeightUnit.PetanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PetapoundsForcePerCubicFoot.
        /// </summary>
        public double PetapoundsForcePerCubicFoot => As(SpecificWeightUnit.PetapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PetapoundsForcePerCubicInch.
        /// </summary>
        public double PetapoundsForcePerCubicInch => As(SpecificWeightUnit.PetapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in PiconewtonsPerCubicCentimeter.
        /// </summary>
        public double PiconewtonsPerCubicCentimeter => As(SpecificWeightUnit.PiconewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in PiconewtonsPerCubicMeter.
        /// </summary>
        public double PiconewtonsPerCubicMeter => As(SpecificWeightUnit.PiconewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in PiconewtonsPerCubicMillimeter.
        /// </summary>
        public double PiconewtonsPerCubicMillimeter => As(SpecificWeightUnit.PiconewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in PicopoundsForcePerCubicFoot.
        /// </summary>
        public double PicopoundsForcePerCubicFoot => As(SpecificWeightUnit.PicopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PicopoundsForcePerCubicInch.
        /// </summary>
        public double PicopoundsForcePerCubicInch => As(SpecificWeightUnit.PicopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in PoundsForcePerCubicFoot.
        /// </summary>
        public double PoundsForcePerCubicFoot => As(SpecificWeightUnit.PoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in PoundsForcePerCubicInch.
        /// </summary>
        public double PoundsForcePerCubicInch => As(SpecificWeightUnit.PoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in QutranewtonsPerCubicCentimeter.
        /// </summary>
        public double QutranewtonsPerCubicCentimeter => As(SpecificWeightUnit.QutranewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in QutranewtonsPerCubicMeter.
        /// </summary>
        public double QutranewtonsPerCubicMeter => As(SpecificWeightUnit.QutranewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in QutranewtonsPerCubicMillimeter.
        /// </summary>
        public double QutranewtonsPerCubicMillimeter => As(SpecificWeightUnit.QutranewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in QutrapoundsForcePerCubicFoot.
        /// </summary>
        public double QutrapoundsForcePerCubicFoot => As(SpecificWeightUnit.QutrapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in QutrapoundsForcePerCubicInch.
        /// </summary>
        public double QutrapoundsForcePerCubicInch => As(SpecificWeightUnit.QutrapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in TeranewtonsPerCubicCentimeter.
        /// </summary>
        public double TeranewtonsPerCubicCentimeter => As(SpecificWeightUnit.TeranewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in TeranewtonsPerCubicMeter.
        /// </summary>
        public double TeranewtonsPerCubicMeter => As(SpecificWeightUnit.TeranewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in TeranewtonsPerCubicMillimeter.
        /// </summary>
        public double TeranewtonsPerCubicMillimeter => As(SpecificWeightUnit.TeranewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in TerapoundsForcePerCubicFoot.
        /// </summary>
        public double TerapoundsForcePerCubicFoot => As(SpecificWeightUnit.TerapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in TerapoundsForcePerCubicInch.
        /// </summary>
        public double TerapoundsForcePerCubicInch => As(SpecificWeightUnit.TerapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicCentimeter.
        /// </summary>
        public double TonnesForcePerCubicCentimeter => As(SpecificWeightUnit.TonneForcePerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicMeter.
        /// </summary>
        public double TonnesForcePerCubicMeter => As(SpecificWeightUnit.TonneForcePerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in TonnesForcePerCubicMillimeter.
        /// </summary>
        public double TonnesForcePerCubicMillimeter => As(SpecificWeightUnit.TonneForcePerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in VettanewtonsPerCubicCentimeter.
        /// </summary>
        public double VettanewtonsPerCubicCentimeter => As(SpecificWeightUnit.VettanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in VettanewtonsPerCubicMeter.
        /// </summary>
        public double VettanewtonsPerCubicMeter => As(SpecificWeightUnit.VettanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in VettanewtonsPerCubicMillimeter.
        /// </summary>
        public double VettanewtonsPerCubicMillimeter => As(SpecificWeightUnit.VettanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in VettapoundsForcePerCubicFoot.
        /// </summary>
        public double VettapoundsForcePerCubicFoot => As(SpecificWeightUnit.VettapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in VettapoundsForcePerCubicInch.
        /// </summary>
        public double VettapoundsForcePerCubicInch => As(SpecificWeightUnit.VettapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in YoctonewtonsPerCubicCentimeter.
        /// </summary>
        public double YoctonewtonsPerCubicCentimeter => As(SpecificWeightUnit.YoctonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in YoctonewtonsPerCubicMeter.
        /// </summary>
        public double YoctonewtonsPerCubicMeter => As(SpecificWeightUnit.YoctonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in YoctonewtonsPerCubicMillimeter.
        /// </summary>
        public double YoctonewtonsPerCubicMillimeter => As(SpecificWeightUnit.YoctonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in YoctopoundsForcePerCubicFoot.
        /// </summary>
        public double YoctopoundsForcePerCubicFoot => As(SpecificWeightUnit.YoctopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in YoctopoundsForcePerCubicInch.
        /// </summary>
        public double YoctopoundsForcePerCubicInch => As(SpecificWeightUnit.YoctopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in YottanewtonsPerCubicCentimeter.
        /// </summary>
        public double YottanewtonsPerCubicCentimeter => As(SpecificWeightUnit.YottanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in YottanewtonsPerCubicMeter.
        /// </summary>
        public double YottanewtonsPerCubicMeter => As(SpecificWeightUnit.YottanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in YottanewtonsPerCubicMillimeter.
        /// </summary>
        public double YottanewtonsPerCubicMillimeter => As(SpecificWeightUnit.YottanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in YottapoundsForcePerCubicFoot.
        /// </summary>
        public double YottapoundsForcePerCubicFoot => As(SpecificWeightUnit.YottapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in YottapoundsForcePerCubicInch.
        /// </summary>
        public double YottapoundsForcePerCubicInch => As(SpecificWeightUnit.YottapoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in ZeptonewtonsPerCubicCentimeter.
        /// </summary>
        public double ZeptonewtonsPerCubicCentimeter => As(SpecificWeightUnit.ZeptonewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in ZeptonewtonsPerCubicMeter.
        /// </summary>
        public double ZeptonewtonsPerCubicMeter => As(SpecificWeightUnit.ZeptonewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in ZeptonewtonsPerCubicMillimeter.
        /// </summary>
        public double ZeptonewtonsPerCubicMillimeter => As(SpecificWeightUnit.ZeptonewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in ZeptopoundsForcePerCubicFoot.
        /// </summary>
        public double ZeptopoundsForcePerCubicFoot => As(SpecificWeightUnit.ZeptopoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in ZeptopoundsForcePerCubicInch.
        /// </summary>
        public double ZeptopoundsForcePerCubicInch => As(SpecificWeightUnit.ZeptopoundForcePerCubicInch);

        /// <summary>
        ///     Get SpecificWeight in ZettanewtonsPerCubicCentimeter.
        /// </summary>
        public double ZettanewtonsPerCubicCentimeter => As(SpecificWeightUnit.ZettanewtonPerCubicCentimeter);

        /// <summary>
        ///     Get SpecificWeight in ZettanewtonsPerCubicMeter.
        /// </summary>
        public double ZettanewtonsPerCubicMeter => As(SpecificWeightUnit.ZettanewtonPerCubicMeter);

        /// <summary>
        ///     Get SpecificWeight in ZettanewtonsPerCubicMillimeter.
        /// </summary>
        public double ZettanewtonsPerCubicMillimeter => As(SpecificWeightUnit.ZettanewtonPerCubicMillimeter);

        /// <summary>
        ///     Get SpecificWeight in ZettapoundsForcePerCubicFoot.
        /// </summary>
        public double ZettapoundsForcePerCubicFoot => As(SpecificWeightUnit.ZettapoundForcePerCubicFoot);

        /// <summary>
        ///     Get SpecificWeight in ZettapoundsForcePerCubicInch.
        /// </summary>
        public double ZettapoundsForcePerCubicInch => As(SpecificWeightUnit.ZettapoundForcePerCubicInch);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificWeightUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(SpecificWeightUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificWeight from AttonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromAttonewtonsPerCubicCentimeter(double attonewtonspercubiccentimeter)
        {
            double value = (double) attonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.AttonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from AttonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromAttonewtonsPerCubicMeter(double attonewtonspercubicmeter)
        {
            double value = (double) attonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.AttonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from AttonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromAttonewtonsPerCubicMillimeter(double attonewtonspercubicmillimeter)
        {
            double value = (double) attonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.AttonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from AttopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromAttopoundsForcePerCubicFoot(double attopoundsforcepercubicfoot)
        {
            double value = (double) attopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.AttopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from AttopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromAttopoundsForcePerCubicInch(double attopoundsforcepercubicinch)
        {
            double value = (double) attopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.AttopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from CentinewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromCentinewtonsPerCubicCentimeter(double centinewtonspercubiccentimeter)
        {
            double value = (double) centinewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.CentinewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from CentinewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromCentinewtonsPerCubicMeter(double centinewtonspercubicmeter)
        {
            double value = (double) centinewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.CentinewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from CentinewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromCentinewtonsPerCubicMillimeter(double centinewtonspercubicmillimeter)
        {
            double value = (double) centinewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.CentinewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from CentipoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromCentipoundsForcePerCubicFoot(double centipoundsforcepercubicfoot)
        {
            double value = (double) centipoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.CentipoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from CentipoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromCentipoundsForcePerCubicInch(double centipoundsforcepercubicinch)
        {
            double value = (double) centipoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.CentipoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from DecanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecanewtonsPerCubicCentimeter(double decanewtonspercubiccentimeter)
        {
            double value = (double) decanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecanewtonsPerCubicMeter(double decanewtonspercubicmeter)
        {
            double value = (double) decanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecanewtonsPerCubicMillimeter(double decanewtonspercubicmillimeter)
        {
            double value = (double) decanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecapoundsForcePerCubicFoot(double decapoundsforcepercubicfoot)
        {
            double value = (double) decapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.DecapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from DecapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecapoundsForcePerCubicInch(double decapoundsforcepercubicinch)
        {
            double value = (double) decapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.DecapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from DecinewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecinewtonsPerCubicCentimeter(double decinewtonspercubiccentimeter)
        {
            double value = (double) decinewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecinewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecinewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecinewtonsPerCubicMeter(double decinewtonspercubicmeter)
        {
            double value = (double) decinewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecinewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecinewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecinewtonsPerCubicMillimeter(double decinewtonspercubicmillimeter)
        {
            double value = (double) decinewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.DecinewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from DecipoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecipoundsForcePerCubicFoot(double decipoundsforcepercubicfoot)
        {
            double value = (double) decipoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.DecipoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from DecipoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromDecipoundsForcePerCubicInch(double decipoundsforcepercubicinch)
        {
            double value = (double) decipoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.DecipoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from ExanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromExanewtonsPerCubicCentimeter(double exanewtonspercubiccentimeter)
        {
            double value = (double) exanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ExanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ExanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromExanewtonsPerCubicMeter(double exanewtonspercubicmeter)
        {
            double value = (double) exanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.ExanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ExanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromExanewtonsPerCubicMillimeter(double exanewtonspercubicmillimeter)
        {
            double value = (double) exanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ExanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ExapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromExapoundsForcePerCubicFoot(double exapoundsforcepercubicfoot)
        {
            double value = (double) exapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.ExapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from ExapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromExapoundsForcePerCubicInch(double exapoundsforcepercubicinch)
        {
            double value = (double) exapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.ExapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromFemtonewtonsPerCubicCentimeter(double femtonewtonspercubiccentimeter)
        {
            double value = (double) femtonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.FemtonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromFemtonewtonsPerCubicMeter(double femtonewtonspercubicmeter)
        {
            double value = (double) femtonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.FemtonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromFemtonewtonsPerCubicMillimeter(double femtonewtonspercubicmillimeter)
        {
            double value = (double) femtonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.FemtonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromFemtopoundsForcePerCubicFoot(double femtopoundsforcepercubicfoot)
        {
            double value = (double) femtopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.FemtopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from FemtopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromFemtopoundsForcePerCubicInch(double femtopoundsforcepercubicinch)
        {
            double value = (double) femtopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.FemtopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from GiganewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromGiganewtonsPerCubicCentimeter(double giganewtonspercubiccentimeter)
        {
            double value = (double) giganewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.GiganewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from GiganewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromGiganewtonsPerCubicMeter(double giganewtonspercubicmeter)
        {
            double value = (double) giganewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.GiganewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from GiganewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromGiganewtonsPerCubicMillimeter(double giganewtonspercubicmillimeter)
        {
            double value = (double) giganewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.GiganewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from GigapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromGigapoundsForcePerCubicFoot(double gigapoundsforcepercubicfoot)
        {
            double value = (double) gigapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.GigapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from GigapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromGigapoundsForcePerCubicInch(double gigapoundsforcepercubicinch)
        {
            double value = (double) gigapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.GigapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from HectonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromHectonewtonsPerCubicCentimeter(double hectonewtonspercubiccentimeter)
        {
            double value = (double) hectonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.HectonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from HectonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromHectonewtonsPerCubicMeter(double hectonewtonspercubicmeter)
        {
            double value = (double) hectonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.HectonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from HectonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromHectonewtonsPerCubicMillimeter(double hectonewtonspercubicmillimeter)
        {
            double value = (double) hectonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.HectonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from HectopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromHectopoundsForcePerCubicFoot(double hectopoundsforcepercubicfoot)
        {
            double value = (double) hectopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.HectopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from HectopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromHectopoundsForcePerCubicInch(double hectopoundsforcepercubicinch)
        {
            double value = (double) hectopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.HectopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilogramsForcePerCubicCentimeter(double kilogramsforcepercubiccentimeter)
        {
            double value = (double) kilogramsforcepercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilogramForcePerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilogramsForcePerCubicMeter(double kilogramsforcepercubicmeter)
        {
            double value = (double) kilogramsforcepercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilogramForcePerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilogramsForcePerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilogramsForcePerCubicMillimeter(double kilogramsforcepercubicmillimeter)
        {
            double value = (double) kilogramsforcepercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilogramForcePerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilonewtonsPerCubicCentimeter(double kilonewtonspercubiccentimeter)
        {
            double value = (double) kilonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilonewtonsPerCubicMeter(double kilonewtonspercubicmeter)
        {
            double value = (double) kilonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilonewtonsPerCubicMillimeter(double kilonewtonspercubicmillimeter)
        {
            double value = (double) kilonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.KilonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from KilopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilopoundsForcePerCubicFoot(double kilopoundsforcepercubicfoot)
        {
            double value = (double) kilopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.KilopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from KilopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromKilopoundsForcePerCubicInch(double kilopoundsforcepercubicinch)
        {
            double value = (double) kilopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.KilopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMeganewtonsPerCubicCentimeter(double meganewtonspercubiccentimeter)
        {
            double value = (double) meganewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MeganewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMeganewtonsPerCubicMeter(double meganewtonspercubicmeter)
        {
            double value = (double) meganewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.MeganewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MeganewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMeganewtonsPerCubicMillimeter(double meganewtonspercubicmillimeter)
        {
            double value = (double) meganewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MeganewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MegapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMegapoundsForcePerCubicFoot(double megapoundsforcepercubicfoot)
        {
            double value = (double) megapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.MegapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from MegapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMegapoundsForcePerCubicInch(double megapoundsforcepercubicinch)
        {
            double value = (double) megapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.MegapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from MicronewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMicronewtonsPerCubicCentimeter(double micronewtonspercubiccentimeter)
        {
            double value = (double) micronewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MicronewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MicronewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMicronewtonsPerCubicMeter(double micronewtonspercubicmeter)
        {
            double value = (double) micronewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.MicronewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MicronewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMicronewtonsPerCubicMillimeter(double micronewtonspercubicmillimeter)
        {
            double value = (double) micronewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MicronewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MicropoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMicropoundsForcePerCubicFoot(double micropoundsforcepercubicfoot)
        {
            double value = (double) micropoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.MicropoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from MicropoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMicropoundsForcePerCubicInch(double micropoundsforcepercubicinch)
        {
            double value = (double) micropoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.MicropoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from MillinewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMillinewtonsPerCubicCentimeter(double millinewtonspercubiccentimeter)
        {
            double value = (double) millinewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MillinewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MillinewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMillinewtonsPerCubicMeter(double millinewtonspercubicmeter)
        {
            double value = (double) millinewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.MillinewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MillinewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMillinewtonsPerCubicMillimeter(double millinewtonspercubicmillimeter)
        {
            double value = (double) millinewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.MillinewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from MillipoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMillipoundsForcePerCubicFoot(double millipoundsforcepercubicfoot)
        {
            double value = (double) millipoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.MillipoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from MillipoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromMillipoundsForcePerCubicInch(double millipoundsforcepercubicinch)
        {
            double value = (double) millipoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.MillipoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from NanonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNanonewtonsPerCubicCentimeter(double nanonewtonspercubiccentimeter)
        {
            double value = (double) nanonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NanonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NanonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNanonewtonsPerCubicMeter(double nanonewtonspercubicmeter)
        {
            double value = (double) nanonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.NanonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NanonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNanonewtonsPerCubicMillimeter(double nanonewtonspercubicmillimeter)
        {
            double value = (double) nanonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NanonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NanopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNanopoundsForcePerCubicFoot(double nanopoundsforcepercubicfoot)
        {
            double value = (double) nanopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.NanopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from NanopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNanopoundsForcePerCubicInch(double nanopoundsforcepercubicinch)
        {
            double value = (double) nanopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.NanopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNewtonsPerCubicCentimeter(double newtonspercubiccentimeter)
        {
            double value = (double) newtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNewtonsPerCubicMeter(double newtonspercubicmeter)
        {
            double value = (double) newtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.NewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from NewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromNewtonsPerCubicMillimeter(double newtonspercubicmillimeter)
        {
            double value = (double) newtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.NewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPetanewtonsPerCubicCentimeter(double petanewtonspercubiccentimeter)
        {
            double value = (double) petanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PetanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPetanewtonsPerCubicMeter(double petanewtonspercubicmeter)
        {
            double value = (double) petanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.PetanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPetanewtonsPerCubicMillimeter(double petanewtonspercubicmillimeter)
        {
            double value = (double) petanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PetanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PetapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPetapoundsForcePerCubicFoot(double petapoundsforcepercubicfoot)
        {
            double value = (double) petapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.PetapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from PetapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPetapoundsForcePerCubicInch(double petapoundsforcepercubicinch)
        {
            double value = (double) petapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.PetapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from PiconewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPiconewtonsPerCubicCentimeter(double piconewtonspercubiccentimeter)
        {
            double value = (double) piconewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PiconewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PiconewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPiconewtonsPerCubicMeter(double piconewtonspercubicmeter)
        {
            double value = (double) piconewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.PiconewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PiconewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPiconewtonsPerCubicMillimeter(double piconewtonspercubicmillimeter)
        {
            double value = (double) piconewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.PiconewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from PicopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPicopoundsForcePerCubicFoot(double picopoundsforcepercubicfoot)
        {
            double value = (double) picopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.PicopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from PicopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPicopoundsForcePerCubicInch(double picopoundsforcepercubicinch)
        {
            double value = (double) picopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.PicopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from PoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPoundsForcePerCubicFoot(double poundsforcepercubicfoot)
        {
            double value = (double) poundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.PoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from PoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromPoundsForcePerCubicInch(double poundsforcepercubicinch)
        {
            double value = (double) poundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.PoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from QutranewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromQutranewtonsPerCubicCentimeter(double qutranewtonspercubiccentimeter)
        {
            double value = (double) qutranewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.QutranewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from QutranewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromQutranewtonsPerCubicMeter(double qutranewtonspercubicmeter)
        {
            double value = (double) qutranewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.QutranewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from QutranewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromQutranewtonsPerCubicMillimeter(double qutranewtonspercubicmillimeter)
        {
            double value = (double) qutranewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.QutranewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from QutrapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromQutrapoundsForcePerCubicFoot(double qutrapoundsforcepercubicfoot)
        {
            double value = (double) qutrapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.QutrapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from QutrapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromQutrapoundsForcePerCubicInch(double qutrapoundsforcepercubicinch)
        {
            double value = (double) qutrapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.QutrapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from TeranewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTeranewtonsPerCubicCentimeter(double teranewtonspercubiccentimeter)
        {
            double value = (double) teranewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TeranewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TeranewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTeranewtonsPerCubicMeter(double teranewtonspercubicmeter)
        {
            double value = (double) teranewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.TeranewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TeranewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTeranewtonsPerCubicMillimeter(double teranewtonspercubicmillimeter)
        {
            double value = (double) teranewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TeranewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TerapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTerapoundsForcePerCubicFoot(double terapoundsforcepercubicfoot)
        {
            double value = (double) terapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.TerapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from TerapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTerapoundsForcePerCubicInch(double terapoundsforcepercubicinch)
        {
            double value = (double) terapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.TerapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTonnesForcePerCubicCentimeter(double tonnesforcepercubiccentimeter)
        {
            double value = (double) tonnesforcepercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TonneForcePerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTonnesForcePerCubicMeter(double tonnesforcepercubicmeter)
        {
            double value = (double) tonnesforcepercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.TonneForcePerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from TonnesForcePerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromTonnesForcePerCubicMillimeter(double tonnesforcepercubicmillimeter)
        {
            double value = (double) tonnesforcepercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.TonneForcePerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromVettanewtonsPerCubicCentimeter(double vettanewtonspercubiccentimeter)
        {
            double value = (double) vettanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.VettanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromVettanewtonsPerCubicMeter(double vettanewtonspercubicmeter)
        {
            double value = (double) vettanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.VettanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromVettanewtonsPerCubicMillimeter(double vettanewtonspercubicmillimeter)
        {
            double value = (double) vettanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.VettanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from VettapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromVettapoundsForcePerCubicFoot(double vettapoundsforcepercubicfoot)
        {
            double value = (double) vettapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.VettapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from VettapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromVettapoundsForcePerCubicInch(double vettapoundsforcepercubicinch)
        {
            double value = (double) vettapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.VettapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from YoctonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYoctonewtonsPerCubicCentimeter(double yoctonewtonspercubiccentimeter)
        {
            double value = (double) yoctonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.YoctonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YoctonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYoctonewtonsPerCubicMeter(double yoctonewtonspercubicmeter)
        {
            double value = (double) yoctonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.YoctonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YoctonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYoctonewtonsPerCubicMillimeter(double yoctonewtonspercubicmillimeter)
        {
            double value = (double) yoctonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.YoctonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YoctopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYoctopoundsForcePerCubicFoot(double yoctopoundsforcepercubicfoot)
        {
            double value = (double) yoctopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.YoctopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from YoctopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYoctopoundsForcePerCubicInch(double yoctopoundsforcepercubicinch)
        {
            double value = (double) yoctopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.YoctopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from YottanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYottanewtonsPerCubicCentimeter(double yottanewtonspercubiccentimeter)
        {
            double value = (double) yottanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.YottanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YottanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYottanewtonsPerCubicMeter(double yottanewtonspercubicmeter)
        {
            double value = (double) yottanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.YottanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YottanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYottanewtonsPerCubicMillimeter(double yottanewtonspercubicmillimeter)
        {
            double value = (double) yottanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.YottanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from YottapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYottapoundsForcePerCubicFoot(double yottapoundsforcepercubicfoot)
        {
            double value = (double) yottapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.YottapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from YottapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromYottapoundsForcePerCubicInch(double yottapoundsforcepercubicinch)
        {
            double value = (double) yottapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.YottapoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from ZeptonewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZeptonewtonsPerCubicCentimeter(double zeptonewtonspercubiccentimeter)
        {
            double value = (double) zeptonewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZeptonewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZeptonewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZeptonewtonsPerCubicMeter(double zeptonewtonspercubicmeter)
        {
            double value = (double) zeptonewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZeptonewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZeptonewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZeptonewtonsPerCubicMillimeter(double zeptonewtonspercubicmillimeter)
        {
            double value = (double) zeptonewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZeptonewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZeptopoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZeptopoundsForcePerCubicFoot(double zeptopoundsforcepercubicfoot)
        {
            double value = (double) zeptopoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.ZeptopoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from ZeptopoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZeptopoundsForcePerCubicInch(double zeptopoundsforcepercubicinch)
        {
            double value = (double) zeptopoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.ZeptopoundForcePerCubicInch);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettanewtonsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZettanewtonsPerCubicCentimeter(double zettanewtonspercubiccentimeter)
        {
            double value = (double) zettanewtonspercubiccentimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZettanewtonPerCubicCentimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettanewtonsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZettanewtonsPerCubicMeter(double zettanewtonspercubicmeter)
        {
            double value = (double) zettanewtonspercubicmeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZettanewtonPerCubicMeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettanewtonsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZettanewtonsPerCubicMillimeter(double zettanewtonspercubicmillimeter)
        {
            double value = (double) zettanewtonspercubicmillimeter;
            return new SpecificWeight(value, SpecificWeightUnit.ZettanewtonPerCubicMillimeter);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettapoundsForcePerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZettapoundsForcePerCubicFoot(double zettapoundsforcepercubicfoot)
        {
            double value = (double) zettapoundsforcepercubicfoot;
            return new SpecificWeight(value, SpecificWeightUnit.ZettapoundForcePerCubicFoot);
        }
        /// <summary>
        ///     Get SpecificWeight from ZettapoundsForcePerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificWeight FromZettapoundsForcePerCubicInch(double zettapoundsforcepercubicinch)
        {
            double value = (double) zettapoundsforcepercubicinch;
            return new SpecificWeight(value, SpecificWeightUnit.ZettapoundForcePerCubicInch);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificWeightUnit" /> to <see cref="SpecificWeight" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificWeight unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static SpecificWeight From(double value, SpecificWeightUnit fromUnit)
        {
            return new SpecificWeight((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificWeight Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpecificWeight Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<SpecificWeight, SpecificWeightUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificWeight result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out SpecificWeight result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<SpecificWeight, SpecificWeightUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificWeightUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpecificWeightUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<SpecificWeightUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out SpecificWeightUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out SpecificWeightUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<SpecificWeightUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificWeight objSpecificWeight)) throw new ArgumentException("Expected type SpecificWeight.", nameof(obj));

            return CompareTo(objSpecificWeight);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(SpecificWeight other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificWeight objSpecificWeight))
                return false;

            return Equals(objSpecificWeight);
        }

        public bool Equals(SpecificWeight other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificWeight within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificWeight other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificWeight.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((SpecificWeightUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificWeightUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this SpecificWeight to another SpecificWeight with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificWeight with the specified unit.</returns>
        public SpecificWeight ToUnit(SpecificWeightUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new SpecificWeight(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case SpecificWeightUnit.AttonewtonPerCubicCentimeter: return (_value*1000000) * 1e-18d;
                case SpecificWeightUnit.AttonewtonPerCubicMeter: return (_value) * 1e-18d;
                case SpecificWeightUnit.AttonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-18d;
                case SpecificWeightUnit.AttopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-18d;
                case SpecificWeightUnit.AttopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-18d;
                case SpecificWeightUnit.CentinewtonPerCubicCentimeter: return (_value*1000000) * 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMeter: return (_value) * 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMillimeter: return (_value*1000000000) * 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-2d;
                case SpecificWeightUnit.DecanewtonPerCubicCentimeter: return (_value*1000000) * 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMeter: return (_value) * 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMillimeter: return (_value*1000000000) * 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e1d;
                case SpecificWeightUnit.DecinewtonPerCubicCentimeter: return (_value*1000000) * 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMeter: return (_value) * 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMillimeter: return (_value*1000000000) * 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-1d;
                case SpecificWeightUnit.ExanewtonPerCubicCentimeter: return (_value*1000000) * 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMeter: return (_value) * 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMillimeter: return (_value*1000000000) * 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e18d;
                case SpecificWeightUnit.FemtonewtonPerCubicCentimeter: return (_value*1000000) * 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMeter: return (_value) * 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-15d;
                case SpecificWeightUnit.GiganewtonPerCubicCentimeter: return (_value*1000000) * 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMeter: return (_value) * 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMillimeter: return (_value*1000000000) * 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e9d;
                case SpecificWeightUnit.HectonewtonPerCubicCentimeter: return (_value*1000000) * 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMeter: return (_value) * 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMillimeter: return (_value*1000000000) * 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e2d;
                case SpecificWeightUnit.KilogramForcePerCubicCentimeter: return _value*9.80665e6;
                case SpecificWeightUnit.KilogramForcePerCubicMeter: return _value*9.80665;
                case SpecificWeightUnit.KilogramForcePerCubicMillimeter: return _value*9.80665e9;
                case SpecificWeightUnit.KilonewtonPerCubicCentimeter: return (_value*1000000) * 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMeter: return (_value) * 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMillimeter: return (_value*1000000000) * 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e3d;
                case SpecificWeightUnit.MeganewtonPerCubicCentimeter: return (_value*1000000) * 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMeter: return (_value) * 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMillimeter: return (_value*1000000000) * 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e6d;
                case SpecificWeightUnit.MicronewtonPerCubicCentimeter: return (_value*1000000) * 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMeter: return (_value) * 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMillimeter: return (_value*1000000000) * 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-6d;
                case SpecificWeightUnit.MillinewtonPerCubicCentimeter: return (_value*1000000) * 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMeter: return (_value) * 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMillimeter: return (_value*1000000000) * 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-3d;
                case SpecificWeightUnit.NanonewtonPerCubicCentimeter: return (_value*1000000) * 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMeter: return (_value) * 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-9d;
                case SpecificWeightUnit.NewtonPerCubicCentimeter: return _value*1000000;
                case SpecificWeightUnit.NewtonPerCubicMeter: return _value;
                case SpecificWeightUnit.NewtonPerCubicMillimeter: return _value*1000000000;
                case SpecificWeightUnit.PetanewtonPerCubicCentimeter: return (_value*1000000) * 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMeter: return (_value) * 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMillimeter: return (_value*1000000000) * 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e15d;
                case SpecificWeightUnit.PiconewtonPerCubicCentimeter: return (_value*1000000) * 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMeter: return (_value) * 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMillimeter: return (_value*1000000000) * 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-12d;
                case SpecificWeightUnit.PoundForcePerCubicFoot: return _value*1.570874638462462e2;
                case SpecificWeightUnit.PoundForcePerCubicInch: return _value*2.714471375263134e5;
                case SpecificWeightUnit.QutranewtonPerCubicCentimeter: return (_value*1000000) * 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMeter: return (_value) * 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMillimeter: return (_value*1000000000) * 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e27d;
                case SpecificWeightUnit.TeranewtonPerCubicCentimeter: return (_value*1000000) * 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMeter: return (_value) * 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMillimeter: return (_value*1000000000) * 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e12d;
                case SpecificWeightUnit.TonneForcePerCubicCentimeter: return _value*9.80665e9;
                case SpecificWeightUnit.TonneForcePerCubicMeter: return _value*9.80665e3;
                case SpecificWeightUnit.TonneForcePerCubicMillimeter: return _value*9.80665e12;
                case SpecificWeightUnit.VettanewtonPerCubicCentimeter: return (_value*1000000) * 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMeter: return (_value) * 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMillimeter: return (_value*1000000000) * 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e30d;
                case SpecificWeightUnit.YoctonewtonPerCubicCentimeter: return (_value*1000000) * 1e-24d;
                case SpecificWeightUnit.YoctonewtonPerCubicMeter: return (_value) * 1e-24d;
                case SpecificWeightUnit.YoctonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-24d;
                case SpecificWeightUnit.YoctopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-24d;
                case SpecificWeightUnit.YoctopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-24d;
                case SpecificWeightUnit.YottanewtonPerCubicCentimeter: return (_value*1000000) * 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMeter: return (_value) * 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMillimeter: return (_value*1000000000) * 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e24d;
                case SpecificWeightUnit.ZeptonewtonPerCubicCentimeter: return (_value*1000000) * 1e-21d;
                case SpecificWeightUnit.ZeptonewtonPerCubicMeter: return (_value) * 1e-21d;
                case SpecificWeightUnit.ZeptonewtonPerCubicMillimeter: return (_value*1000000000) * 1e-21d;
                case SpecificWeightUnit.ZeptopoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e-21d;
                case SpecificWeightUnit.ZeptopoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e-21d;
                case SpecificWeightUnit.ZettanewtonPerCubicCentimeter: return (_value*1000000) * 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMeter: return (_value) * 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMillimeter: return (_value*1000000000) * 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicFoot: return (_value*1.570874638462462e2) * 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicInch: return (_value*2.714471375263134e5) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(SpecificWeightUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case SpecificWeightUnit.AttonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-18d;
                case SpecificWeightUnit.AttonewtonPerCubicMeter: return (baseUnitValue) / 1e-18d;
                case SpecificWeightUnit.AttonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-18d;
                case SpecificWeightUnit.AttopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-18d;
                case SpecificWeightUnit.AttopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-18d;
                case SpecificWeightUnit.CentinewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMeter: return (baseUnitValue) / 1e-2d;
                case SpecificWeightUnit.CentinewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-2d;
                case SpecificWeightUnit.CentipoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-2d;
                case SpecificWeightUnit.DecanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMeter: return (baseUnitValue) / 1e1d;
                case SpecificWeightUnit.DecanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e1d;
                case SpecificWeightUnit.DecapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e1d;
                case SpecificWeightUnit.DecinewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMeter: return (baseUnitValue) / 1e-1d;
                case SpecificWeightUnit.DecinewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-1d;
                case SpecificWeightUnit.DecipoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-1d;
                case SpecificWeightUnit.ExanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMeter: return (baseUnitValue) / 1e18d;
                case SpecificWeightUnit.ExanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e18d;
                case SpecificWeightUnit.ExapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e18d;
                case SpecificWeightUnit.FemtonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMeter: return (baseUnitValue) / 1e-15d;
                case SpecificWeightUnit.FemtonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-15d;
                case SpecificWeightUnit.FemtopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-15d;
                case SpecificWeightUnit.GiganewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMeter: return (baseUnitValue) / 1e9d;
                case SpecificWeightUnit.GiganewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e9d;
                case SpecificWeightUnit.GigapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e9d;
                case SpecificWeightUnit.HectonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMeter: return (baseUnitValue) / 1e2d;
                case SpecificWeightUnit.HectonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e2d;
                case SpecificWeightUnit.HectopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e2d;
                case SpecificWeightUnit.KilogramForcePerCubicCentimeter: return baseUnitValue/9.80665e6;
                case SpecificWeightUnit.KilogramForcePerCubicMeter: return baseUnitValue/9.80665;
                case SpecificWeightUnit.KilogramForcePerCubicMillimeter: return baseUnitValue/9.80665e9;
                case SpecificWeightUnit.KilonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMeter: return (baseUnitValue) / 1e3d;
                case SpecificWeightUnit.KilonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e3d;
                case SpecificWeightUnit.KilopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e3d;
                case SpecificWeightUnit.MeganewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMeter: return (baseUnitValue) / 1e6d;
                case SpecificWeightUnit.MeganewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e6d;
                case SpecificWeightUnit.MegapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e6d;
                case SpecificWeightUnit.MicronewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMeter: return (baseUnitValue) / 1e-6d;
                case SpecificWeightUnit.MicronewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-6d;
                case SpecificWeightUnit.MicropoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-6d;
                case SpecificWeightUnit.MillinewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMeter: return (baseUnitValue) / 1e-3d;
                case SpecificWeightUnit.MillinewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-3d;
                case SpecificWeightUnit.MillipoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-3d;
                case SpecificWeightUnit.NanonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMeter: return (baseUnitValue) / 1e-9d;
                case SpecificWeightUnit.NanonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-9d;
                case SpecificWeightUnit.NanopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-9d;
                case SpecificWeightUnit.NewtonPerCubicCentimeter: return baseUnitValue*0.000001;
                case SpecificWeightUnit.NewtonPerCubicMeter: return baseUnitValue;
                case SpecificWeightUnit.NewtonPerCubicMillimeter: return baseUnitValue*0.000000001;
                case SpecificWeightUnit.PetanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMeter: return (baseUnitValue) / 1e15d;
                case SpecificWeightUnit.PetanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e15d;
                case SpecificWeightUnit.PetapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e15d;
                case SpecificWeightUnit.PiconewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMeter: return (baseUnitValue) / 1e-12d;
                case SpecificWeightUnit.PiconewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-12d;
                case SpecificWeightUnit.PicopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-12d;
                case SpecificWeightUnit.PoundForcePerCubicFoot: return baseUnitValue/1.570874638462462e2;
                case SpecificWeightUnit.PoundForcePerCubicInch: return baseUnitValue/2.714471375263134e5;
                case SpecificWeightUnit.QutranewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMeter: return (baseUnitValue) / 1e27d;
                case SpecificWeightUnit.QutranewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e27d;
                case SpecificWeightUnit.QutrapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e27d;
                case SpecificWeightUnit.TeranewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMeter: return (baseUnitValue) / 1e12d;
                case SpecificWeightUnit.TeranewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e12d;
                case SpecificWeightUnit.TerapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e12d;
                case SpecificWeightUnit.TonneForcePerCubicCentimeter: return baseUnitValue/9.80665e9;
                case SpecificWeightUnit.TonneForcePerCubicMeter: return baseUnitValue/9.80665e3;
                case SpecificWeightUnit.TonneForcePerCubicMillimeter: return baseUnitValue/9.80665e12;
                case SpecificWeightUnit.VettanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMeter: return (baseUnitValue) / 1e30d;
                case SpecificWeightUnit.VettanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e30d;
                case SpecificWeightUnit.VettapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e30d;
                case SpecificWeightUnit.YoctonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-24d;
                case SpecificWeightUnit.YoctonewtonPerCubicMeter: return (baseUnitValue) / 1e-24d;
                case SpecificWeightUnit.YoctonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-24d;
                case SpecificWeightUnit.YoctopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-24d;
                case SpecificWeightUnit.YoctopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-24d;
                case SpecificWeightUnit.YottanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMeter: return (baseUnitValue) / 1e24d;
                case SpecificWeightUnit.YottanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e24d;
                case SpecificWeightUnit.YottapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e24d;
                case SpecificWeightUnit.ZeptonewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e-21d;
                case SpecificWeightUnit.ZeptonewtonPerCubicMeter: return (baseUnitValue) / 1e-21d;
                case SpecificWeightUnit.ZeptonewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e-21d;
                case SpecificWeightUnit.ZeptopoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e-21d;
                case SpecificWeightUnit.ZeptopoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e-21d;
                case SpecificWeightUnit.ZettanewtonPerCubicCentimeter: return (baseUnitValue*0.000001) / 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMeter: return (baseUnitValue) / 1e21d;
                case SpecificWeightUnit.ZettanewtonPerCubicMillimeter: return (baseUnitValue*0.000000001) / 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicFoot: return (baseUnitValue/1.570874638462462e2) / 1e21d;
                case SpecificWeightUnit.ZettapoundForcePerCubicInch: return (baseUnitValue/2.714471375263134e5) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
