//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Length : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LengthUnit? _unit;

        static Length()
        {
            BaseDimensions = new BaseDimensions(1, 0, 0, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Length, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit Meter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Length()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Length(double numericValue, LengthUnit unit)
        {
            if(unit == LengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Length, which is Meter. All conversions go via this value.
        /// </summary>
        public static LengthUnit BaseUnit { get; } = LengthUnit.Meter;

        /// <summary>
        /// Represents the largest possible value of Length
        /// </summary>
        public static Length MaxValue { get; } = new Length(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Length
        /// </summary>
        public static Length MinValue { get; } = new Length(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Length;

        /// <summary>
        ///     All units of measurement for the Length quantity.
        /// </summary>
        public static LengthUnit[] Units { get; } = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>().Except(new LengthUnit[]{ LengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Meter.
        /// </summary>
        public static Length Zero { get; } = new Length(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public LengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Length.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Length.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Length in AUs.
        /// </summary>
        public double AUs => As(LengthUnit.AU);

        /// <summary>
        ///     Get Length in Centimeters.
        /// </summary>
        public double Centimeters => As(LengthUnit.Centimeter);

        /// <summary>
        ///     Get Length in DecaaUs.
        /// </summary>
        public double DecaaUs => As(LengthUnit.DecaaU);

        /// <summary>
        ///     Get Length in DecalightDays.
        /// </summary>
        public double DecalightDays => As(LengthUnit.DecalightDay);

        /// <summary>
        ///     Get Length in DecalightHours.
        /// </summary>
        public double DecalightHours => As(LengthUnit.DecalightHour);

        /// <summary>
        ///     Get Length in DecalightMinutes.
        /// </summary>
        public double DecalightMinutes => As(LengthUnit.DecalightMinute);

        /// <summary>
        ///     Get Length in DecalightSeconds.
        /// </summary>
        public double DecalightSeconds => As(LengthUnit.DecalightSecond);

        /// <summary>
        ///     Get Length in DecalightYears.
        /// </summary>
        public double DecalightYears => As(LengthUnit.DecalightYear);

        /// <summary>
        ///     Get Length in Decameters.
        /// </summary>
        public double Decameters => As(LengthUnit.Decameter);

        /// <summary>
        ///     Get Length in Decimeters.
        /// </summary>
        public double Decimeters => As(LengthUnit.Decimeter);

        /// <summary>
        ///     Get Length in DtpPicas.
        /// </summary>
        public double DtpPicas => As(LengthUnit.DtpPica);

        /// <summary>
        ///     Get Length in DtpPoints.
        /// </summary>
        public double DtpPoints => As(LengthUnit.DtpPoint);

        /// <summary>
        ///     Get Length in ExalightYears.
        /// </summary>
        public double ExalightYears => As(LengthUnit.ExalightYear);

        /// <summary>
        ///     Get Length in Exameters.
        /// </summary>
        public double Exameters => As(LengthUnit.Exameter);

        /// <summary>
        ///     Get Length in Fathoms.
        /// </summary>
        public double Fathoms => As(LengthUnit.Fathom);

        /// <summary>
        ///     Get Length in Femtometers.
        /// </summary>
        public double Femtometers => As(LengthUnit.Femtometer);

        /// <summary>
        ///     Get Length in Feet.
        /// </summary>
        public double Feet => As(LengthUnit.Foot);

        /// <summary>
        ///     Get Length in GigaaUs.
        /// </summary>
        public double GigaaUs => As(LengthUnit.GigaaU);

        /// <summary>
        ///     Get Length in GigalightDays.
        /// </summary>
        public double GigalightDays => As(LengthUnit.GigalightDay);

        /// <summary>
        ///     Get Length in GigalightHours.
        /// </summary>
        public double GigalightHours => As(LengthUnit.GigalightHour);

        /// <summary>
        ///     Get Length in GigalightMinutes.
        /// </summary>
        public double GigalightMinutes => As(LengthUnit.GigalightMinute);

        /// <summary>
        ///     Get Length in GigalightSeconds.
        /// </summary>
        public double GigalightSeconds => As(LengthUnit.GigalightSecond);

        /// <summary>
        ///     Get Length in GigalightYears.
        /// </summary>
        public double GigalightYears => As(LengthUnit.GigalightYear);

        /// <summary>
        ///     Get Length in Gigameters.
        /// </summary>
        public double Gigameters => As(LengthUnit.Gigameter);

        /// <summary>
        ///     Get Length in Hands.
        /// </summary>
        public double Hands => As(LengthUnit.Hand);

        /// <summary>
        ///     Get Length in Hectometers.
        /// </summary>
        public double Hectometers => As(LengthUnit.Hectometer);

        /// <summary>
        ///     Get Length in Inches.
        /// </summary>
        public double Inches => As(LengthUnit.Inch);

        /// <summary>
        ///     Get Length in KiloaUs.
        /// </summary>
        public double KiloaUs => As(LengthUnit.KiloaU);

        /// <summary>
        ///     Get Length in KilolightDays.
        /// </summary>
        public double KilolightDays => As(LengthUnit.KilolightDay);

        /// <summary>
        ///     Get Length in KilolightHours.
        /// </summary>
        public double KilolightHours => As(LengthUnit.KilolightHour);

        /// <summary>
        ///     Get Length in KilolightMinutes.
        /// </summary>
        public double KilolightMinutes => As(LengthUnit.KilolightMinute);

        /// <summary>
        ///     Get Length in KilolightSeconds.
        /// </summary>
        public double KilolightSeconds => As(LengthUnit.KilolightSecond);

        /// <summary>
        ///     Get Length in KilolightYears.
        /// </summary>
        public double KilolightYears => As(LengthUnit.KilolightYear);

        /// <summary>
        ///     Get Length in Kilometers.
        /// </summary>
        public double Kilometers => As(LengthUnit.Kilometer);

        /// <summary>
        ///     Get Length in LightDays.
        /// </summary>
        public double LightDays => As(LengthUnit.LightDay);

        /// <summary>
        ///     Get Length in LightHours.
        /// </summary>
        public double LightHours => As(LengthUnit.LightHour);

        /// <summary>
        ///     Get Length in LightMinutes.
        /// </summary>
        public double LightMinutes => As(LengthUnit.LightMinute);

        /// <summary>
        ///     Get Length in LightSeconds.
        /// </summary>
        public double LightSeconds => As(LengthUnit.LightSecond);

        /// <summary>
        ///     Get Length in LightYears.
        /// </summary>
        public double LightYears => As(LengthUnit.LightYear);

        /// <summary>
        ///     Get Length in MegaaUs.
        /// </summary>
        public double MegaaUs => As(LengthUnit.MegaaU);

        /// <summary>
        ///     Get Length in MegalightDays.
        /// </summary>
        public double MegalightDays => As(LengthUnit.MegalightDay);

        /// <summary>
        ///     Get Length in MegalightHours.
        /// </summary>
        public double MegalightHours => As(LengthUnit.MegalightHour);

        /// <summary>
        ///     Get Length in MegalightMinutes.
        /// </summary>
        public double MegalightMinutes => As(LengthUnit.MegalightMinute);

        /// <summary>
        ///     Get Length in MegalightSeconds.
        /// </summary>
        public double MegalightSeconds => As(LengthUnit.MegalightSecond);

        /// <summary>
        ///     Get Length in MegalightYears.
        /// </summary>
        public double MegalightYears => As(LengthUnit.MegalightYear);

        /// <summary>
        ///     Get Length in Megameters.
        /// </summary>
        public double Megameters => As(LengthUnit.Megameter);

        /// <summary>
        ///     Get Length in Meters.
        /// </summary>
        public double Meters => As(LengthUnit.Meter);

        /// <summary>
        ///     Get Length in MicroaUs.
        /// </summary>
        public double MicroaUs => As(LengthUnit.MicroaU);

        /// <summary>
        ///     Get Length in Microinches.
        /// </summary>
        public double Microinches => As(LengthUnit.Microinch);

        /// <summary>
        ///     Get Length in MicrolightDays.
        /// </summary>
        public double MicrolightDays => As(LengthUnit.MicrolightDay);

        /// <summary>
        ///     Get Length in MicrolightHours.
        /// </summary>
        public double MicrolightHours => As(LengthUnit.MicrolightHour);

        /// <summary>
        ///     Get Length in MicrolightMinutes.
        /// </summary>
        public double MicrolightMinutes => As(LengthUnit.MicrolightMinute);

        /// <summary>
        ///     Get Length in MicrolightSeconds.
        /// </summary>
        public double MicrolightSeconds => As(LengthUnit.MicrolightSecond);

        /// <summary>
        ///     Get Length in MicrolightYears.
        /// </summary>
        public double MicrolightYears => As(LengthUnit.MicrolightYear);

        /// <summary>
        ///     Get Length in Micrometers.
        /// </summary>
        public double Micrometers => As(LengthUnit.Micrometer);

        /// <summary>
        ///     Get Length in Mils.
        /// </summary>
        public double Mils => As(LengthUnit.Mil);

        /// <summary>
        ///     Get Length in Miles.
        /// </summary>
        public double Miles => As(LengthUnit.Mile);

        /// <summary>
        ///     Get Length in MilliaUs.
        /// </summary>
        public double MilliaUs => As(LengthUnit.MilliaU);

        /// <summary>
        ///     Get Length in MillilightDays.
        /// </summary>
        public double MillilightDays => As(LengthUnit.MillilightDay);

        /// <summary>
        ///     Get Length in MillilightHours.
        /// </summary>
        public double MillilightHours => As(LengthUnit.MillilightHour);

        /// <summary>
        ///     Get Length in MillilightMinutes.
        /// </summary>
        public double MillilightMinutes => As(LengthUnit.MillilightMinute);

        /// <summary>
        ///     Get Length in MillilightSeconds.
        /// </summary>
        public double MillilightSeconds => As(LengthUnit.MillilightSecond);

        /// <summary>
        ///     Get Length in MillilightYears.
        /// </summary>
        public double MillilightYears => As(LengthUnit.MillilightYear);

        /// <summary>
        ///     Get Length in Millimeters.
        /// </summary>
        public double Millimeters => As(LengthUnit.Millimeter);

        /// <summary>
        ///     Get Length in Nanometers.
        /// </summary>
        public double Nanometers => As(LengthUnit.Nanometer);

        /// <summary>
        ///     Get Length in NauticalMiles.
        /// </summary>
        public double NauticalMiles => As(LengthUnit.NauticalMile);

        /// <summary>
        ///     Get Length in PetalightYears.
        /// </summary>
        public double PetalightYears => As(LengthUnit.PetalightYear);

        /// <summary>
        ///     Get Length in Petameters.
        /// </summary>
        public double Petameters => As(LengthUnit.Petameter);

        /// <summary>
        ///     Get Length in Picometers.
        /// </summary>
        public double Picometers => As(LengthUnit.Picometer);

        /// <summary>
        ///     Get Length in PrinterPicas.
        /// </summary>
        public double PrinterPicas => As(LengthUnit.PrinterPica);

        /// <summary>
        ///     Get Length in PrinterPoints.
        /// </summary>
        public double PrinterPoints => As(LengthUnit.PrinterPoint);

        /// <summary>
        ///     Get Length in Qutrameters.
        /// </summary>
        public double Qutrameters => As(LengthUnit.Qutrameter);

        /// <summary>
        ///     Get Length in Shackles.
        /// </summary>
        public double Shackles => As(LengthUnit.Shackle);

        /// <summary>
        ///     Get Length in TeraaUs.
        /// </summary>
        public double TeraaUs => As(LengthUnit.TeraaU);

        /// <summary>
        ///     Get Length in TeralightDays.
        /// </summary>
        public double TeralightDays => As(LengthUnit.TeralightDay);

        /// <summary>
        ///     Get Length in TeralightHours.
        /// </summary>
        public double TeralightHours => As(LengthUnit.TeralightHour);

        /// <summary>
        ///     Get Length in TeralightMinutes.
        /// </summary>
        public double TeralightMinutes => As(LengthUnit.TeralightMinute);

        /// <summary>
        ///     Get Length in TeralightSeconds.
        /// </summary>
        public double TeralightSeconds => As(LengthUnit.TeralightSecond);

        /// <summary>
        ///     Get Length in TeralightYears.
        /// </summary>
        public double TeralightYears => As(LengthUnit.TeralightYear);

        /// <summary>
        ///     Get Length in Terameters.
        /// </summary>
        public double Terameters => As(LengthUnit.Terameter);

        /// <summary>
        ///     Get Length in Twips.
        /// </summary>
        public double Twips => As(LengthUnit.Twip);

        /// <summary>
        ///     Get Length in UsSurveyFeet.
        /// </summary>
        public double UsSurveyFeet => As(LengthUnit.UsSurveyFoot);

        /// <summary>
        ///     Get Length in Vettameters.
        /// </summary>
        public double Vettameters => As(LengthUnit.Vettameter);

        /// <summary>
        ///     Get Length in Yards.
        /// </summary>
        public double Yards => As(LengthUnit.Yard);

        /// <summary>
        ///     Get Length in YottalightYears.
        /// </summary>
        public double YottalightYears => As(LengthUnit.YottalightYear);

        /// <summary>
        ///     Get Length in Yottameters.
        /// </summary>
        public double Yottameters => As(LengthUnit.Yottameter);

        /// <summary>
        ///     Get Length in ZettalightYears.
        /// </summary>
        public double ZettalightYears => As(LengthUnit.ZettalightYear);

        /// <summary>
        ///     Get Length in Zettameters.
        /// </summary>
        public double Zettameters => As(LengthUnit.Zettameter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(LengthUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Length from AUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromAUs(double aus)
        {
            double value = (double) aus;
            return new Length(value, LengthUnit.AU);
        }
        /// <summary>
        ///     Get Length from Centimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromCentimeters(double centimeters)
        {
            double value = (double) centimeters;
            return new Length(value, LengthUnit.Centimeter);
        }
        /// <summary>
        ///     Get Length from DecaaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecaaUs(double decaaus)
        {
            double value = (double) decaaus;
            return new Length(value, LengthUnit.DecaaU);
        }
        /// <summary>
        ///     Get Length from DecalightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecalightDays(double decalightdays)
        {
            double value = (double) decalightdays;
            return new Length(value, LengthUnit.DecalightDay);
        }
        /// <summary>
        ///     Get Length from DecalightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecalightHours(double decalighthours)
        {
            double value = (double) decalighthours;
            return new Length(value, LengthUnit.DecalightHour);
        }
        /// <summary>
        ///     Get Length from DecalightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecalightMinutes(double decalightminutes)
        {
            double value = (double) decalightminutes;
            return new Length(value, LengthUnit.DecalightMinute);
        }
        /// <summary>
        ///     Get Length from DecalightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecalightSeconds(double decalightseconds)
        {
            double value = (double) decalightseconds;
            return new Length(value, LengthUnit.DecalightSecond);
        }
        /// <summary>
        ///     Get Length from DecalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecalightYears(double decalightyears)
        {
            double value = (double) decalightyears;
            return new Length(value, LengthUnit.DecalightYear);
        }
        /// <summary>
        ///     Get Length from Decameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecameters(double decameters)
        {
            double value = (double) decameters;
            return new Length(value, LengthUnit.Decameter);
        }
        /// <summary>
        ///     Get Length from Decimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDecimeters(double decimeters)
        {
            double value = (double) decimeters;
            return new Length(value, LengthUnit.Decimeter);
        }
        /// <summary>
        ///     Get Length from DtpPicas.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDtpPicas(double dtppicas)
        {
            double value = (double) dtppicas;
            return new Length(value, LengthUnit.DtpPica);
        }
        /// <summary>
        ///     Get Length from DtpPoints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromDtpPoints(double dtppoints)
        {
            double value = (double) dtppoints;
            return new Length(value, LengthUnit.DtpPoint);
        }
        /// <summary>
        ///     Get Length from ExalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromExalightYears(double exalightyears)
        {
            double value = (double) exalightyears;
            return new Length(value, LengthUnit.ExalightYear);
        }
        /// <summary>
        ///     Get Length from Exameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromExameters(double exameters)
        {
            double value = (double) exameters;
            return new Length(value, LengthUnit.Exameter);
        }
        /// <summary>
        ///     Get Length from Fathoms.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromFathoms(double fathoms)
        {
            double value = (double) fathoms;
            return new Length(value, LengthUnit.Fathom);
        }
        /// <summary>
        ///     Get Length from Femtometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromFemtometers(double femtometers)
        {
            double value = (double) femtometers;
            return new Length(value, LengthUnit.Femtometer);
        }
        /// <summary>
        ///     Get Length from Feet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromFeet(double feet)
        {
            double value = (double) feet;
            return new Length(value, LengthUnit.Foot);
        }
        /// <summary>
        ///     Get Length from GigaaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigaaUs(double gigaaus)
        {
            double value = (double) gigaaus;
            return new Length(value, LengthUnit.GigaaU);
        }
        /// <summary>
        ///     Get Length from GigalightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigalightDays(double gigalightdays)
        {
            double value = (double) gigalightdays;
            return new Length(value, LengthUnit.GigalightDay);
        }
        /// <summary>
        ///     Get Length from GigalightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigalightHours(double gigalighthours)
        {
            double value = (double) gigalighthours;
            return new Length(value, LengthUnit.GigalightHour);
        }
        /// <summary>
        ///     Get Length from GigalightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigalightMinutes(double gigalightminutes)
        {
            double value = (double) gigalightminutes;
            return new Length(value, LengthUnit.GigalightMinute);
        }
        /// <summary>
        ///     Get Length from GigalightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigalightSeconds(double gigalightseconds)
        {
            double value = (double) gigalightseconds;
            return new Length(value, LengthUnit.GigalightSecond);
        }
        /// <summary>
        ///     Get Length from GigalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigalightYears(double gigalightyears)
        {
            double value = (double) gigalightyears;
            return new Length(value, LengthUnit.GigalightYear);
        }
        /// <summary>
        ///     Get Length from Gigameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromGigameters(double gigameters)
        {
            double value = (double) gigameters;
            return new Length(value, LengthUnit.Gigameter);
        }
        /// <summary>
        ///     Get Length from Hands.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromHands(double hands)
        {
            double value = (double) hands;
            return new Length(value, LengthUnit.Hand);
        }
        /// <summary>
        ///     Get Length from Hectometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromHectometers(double hectometers)
        {
            double value = (double) hectometers;
            return new Length(value, LengthUnit.Hectometer);
        }
        /// <summary>
        ///     Get Length from Inches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromInches(double inches)
        {
            double value = (double) inches;
            return new Length(value, LengthUnit.Inch);
        }
        /// <summary>
        ///     Get Length from KiloaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKiloaUs(double kiloaus)
        {
            double value = (double) kiloaus;
            return new Length(value, LengthUnit.KiloaU);
        }
        /// <summary>
        ///     Get Length from KilolightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKilolightDays(double kilolightdays)
        {
            double value = (double) kilolightdays;
            return new Length(value, LengthUnit.KilolightDay);
        }
        /// <summary>
        ///     Get Length from KilolightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKilolightHours(double kilolighthours)
        {
            double value = (double) kilolighthours;
            return new Length(value, LengthUnit.KilolightHour);
        }
        /// <summary>
        ///     Get Length from KilolightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKilolightMinutes(double kilolightminutes)
        {
            double value = (double) kilolightminutes;
            return new Length(value, LengthUnit.KilolightMinute);
        }
        /// <summary>
        ///     Get Length from KilolightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKilolightSeconds(double kilolightseconds)
        {
            double value = (double) kilolightseconds;
            return new Length(value, LengthUnit.KilolightSecond);
        }
        /// <summary>
        ///     Get Length from KilolightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKilolightYears(double kilolightyears)
        {
            double value = (double) kilolightyears;
            return new Length(value, LengthUnit.KilolightYear);
        }
        /// <summary>
        ///     Get Length from Kilometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromKilometers(double kilometers)
        {
            double value = (double) kilometers;
            return new Length(value, LengthUnit.Kilometer);
        }
        /// <summary>
        ///     Get Length from LightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromLightDays(double lightdays)
        {
            double value = (double) lightdays;
            return new Length(value, LengthUnit.LightDay);
        }
        /// <summary>
        ///     Get Length from LightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromLightHours(double lighthours)
        {
            double value = (double) lighthours;
            return new Length(value, LengthUnit.LightHour);
        }
        /// <summary>
        ///     Get Length from LightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromLightMinutes(double lightminutes)
        {
            double value = (double) lightminutes;
            return new Length(value, LengthUnit.LightMinute);
        }
        /// <summary>
        ///     Get Length from LightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromLightSeconds(double lightseconds)
        {
            double value = (double) lightseconds;
            return new Length(value, LengthUnit.LightSecond);
        }
        /// <summary>
        ///     Get Length from LightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromLightYears(double lightyears)
        {
            double value = (double) lightyears;
            return new Length(value, LengthUnit.LightYear);
        }
        /// <summary>
        ///     Get Length from MegaaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegaaUs(double megaaus)
        {
            double value = (double) megaaus;
            return new Length(value, LengthUnit.MegaaU);
        }
        /// <summary>
        ///     Get Length from MegalightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegalightDays(double megalightdays)
        {
            double value = (double) megalightdays;
            return new Length(value, LengthUnit.MegalightDay);
        }
        /// <summary>
        ///     Get Length from MegalightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegalightHours(double megalighthours)
        {
            double value = (double) megalighthours;
            return new Length(value, LengthUnit.MegalightHour);
        }
        /// <summary>
        ///     Get Length from MegalightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegalightMinutes(double megalightminutes)
        {
            double value = (double) megalightminutes;
            return new Length(value, LengthUnit.MegalightMinute);
        }
        /// <summary>
        ///     Get Length from MegalightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegalightSeconds(double megalightseconds)
        {
            double value = (double) megalightseconds;
            return new Length(value, LengthUnit.MegalightSecond);
        }
        /// <summary>
        ///     Get Length from MegalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegalightYears(double megalightyears)
        {
            double value = (double) megalightyears;
            return new Length(value, LengthUnit.MegalightYear);
        }
        /// <summary>
        ///     Get Length from Megameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMegameters(double megameters)
        {
            double value = (double) megameters;
            return new Length(value, LengthUnit.Megameter);
        }
        /// <summary>
        ///     Get Length from Meters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMeters(double meters)
        {
            double value = (double) meters;
            return new Length(value, LengthUnit.Meter);
        }
        /// <summary>
        ///     Get Length from MicroaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicroaUs(double microaus)
        {
            double value = (double) microaus;
            return new Length(value, LengthUnit.MicroaU);
        }
        /// <summary>
        ///     Get Length from Microinches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicroinches(double microinches)
        {
            double value = (double) microinches;
            return new Length(value, LengthUnit.Microinch);
        }
        /// <summary>
        ///     Get Length from MicrolightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicrolightDays(double microlightdays)
        {
            double value = (double) microlightdays;
            return new Length(value, LengthUnit.MicrolightDay);
        }
        /// <summary>
        ///     Get Length from MicrolightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicrolightHours(double microlighthours)
        {
            double value = (double) microlighthours;
            return new Length(value, LengthUnit.MicrolightHour);
        }
        /// <summary>
        ///     Get Length from MicrolightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicrolightMinutes(double microlightminutes)
        {
            double value = (double) microlightminutes;
            return new Length(value, LengthUnit.MicrolightMinute);
        }
        /// <summary>
        ///     Get Length from MicrolightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicrolightSeconds(double microlightseconds)
        {
            double value = (double) microlightseconds;
            return new Length(value, LengthUnit.MicrolightSecond);
        }
        /// <summary>
        ///     Get Length from MicrolightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicrolightYears(double microlightyears)
        {
            double value = (double) microlightyears;
            return new Length(value, LengthUnit.MicrolightYear);
        }
        /// <summary>
        ///     Get Length from Micrometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMicrometers(double micrometers)
        {
            double value = (double) micrometers;
            return new Length(value, LengthUnit.Micrometer);
        }
        /// <summary>
        ///     Get Length from Mils.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMils(double mils)
        {
            double value = (double) mils;
            return new Length(value, LengthUnit.Mil);
        }
        /// <summary>
        ///     Get Length from Miles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMiles(double miles)
        {
            double value = (double) miles;
            return new Length(value, LengthUnit.Mile);
        }
        /// <summary>
        ///     Get Length from MilliaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMilliaUs(double milliaus)
        {
            double value = (double) milliaus;
            return new Length(value, LengthUnit.MilliaU);
        }
        /// <summary>
        ///     Get Length from MillilightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMillilightDays(double millilightdays)
        {
            double value = (double) millilightdays;
            return new Length(value, LengthUnit.MillilightDay);
        }
        /// <summary>
        ///     Get Length from MillilightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMillilightHours(double millilighthours)
        {
            double value = (double) millilighthours;
            return new Length(value, LengthUnit.MillilightHour);
        }
        /// <summary>
        ///     Get Length from MillilightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMillilightMinutes(double millilightminutes)
        {
            double value = (double) millilightminutes;
            return new Length(value, LengthUnit.MillilightMinute);
        }
        /// <summary>
        ///     Get Length from MillilightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMillilightSeconds(double millilightseconds)
        {
            double value = (double) millilightseconds;
            return new Length(value, LengthUnit.MillilightSecond);
        }
        /// <summary>
        ///     Get Length from MillilightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMillilightYears(double millilightyears)
        {
            double value = (double) millilightyears;
            return new Length(value, LengthUnit.MillilightYear);
        }
        /// <summary>
        ///     Get Length from Millimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromMillimeters(double millimeters)
        {
            double value = (double) millimeters;
            return new Length(value, LengthUnit.Millimeter);
        }
        /// <summary>
        ///     Get Length from Nanometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromNanometers(double nanometers)
        {
            double value = (double) nanometers;
            return new Length(value, LengthUnit.Nanometer);
        }
        /// <summary>
        ///     Get Length from NauticalMiles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromNauticalMiles(double nauticalmiles)
        {
            double value = (double) nauticalmiles;
            return new Length(value, LengthUnit.NauticalMile);
        }
        /// <summary>
        ///     Get Length from PetalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromPetalightYears(double petalightyears)
        {
            double value = (double) petalightyears;
            return new Length(value, LengthUnit.PetalightYear);
        }
        /// <summary>
        ///     Get Length from Petameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromPetameters(double petameters)
        {
            double value = (double) petameters;
            return new Length(value, LengthUnit.Petameter);
        }
        /// <summary>
        ///     Get Length from Picometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromPicometers(double picometers)
        {
            double value = (double) picometers;
            return new Length(value, LengthUnit.Picometer);
        }
        /// <summary>
        ///     Get Length from PrinterPicas.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromPrinterPicas(double printerpicas)
        {
            double value = (double) printerpicas;
            return new Length(value, LengthUnit.PrinterPica);
        }
        /// <summary>
        ///     Get Length from PrinterPoints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromPrinterPoints(double printerpoints)
        {
            double value = (double) printerpoints;
            return new Length(value, LengthUnit.PrinterPoint);
        }
        /// <summary>
        ///     Get Length from Qutrameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromQutrameters(double qutrameters)
        {
            double value = (double) qutrameters;
            return new Length(value, LengthUnit.Qutrameter);
        }
        /// <summary>
        ///     Get Length from Shackles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromShackles(double shackles)
        {
            double value = (double) shackles;
            return new Length(value, LengthUnit.Shackle);
        }
        /// <summary>
        ///     Get Length from TeraaUs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTeraaUs(double teraaus)
        {
            double value = (double) teraaus;
            return new Length(value, LengthUnit.TeraaU);
        }
        /// <summary>
        ///     Get Length from TeralightDays.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTeralightDays(double teralightdays)
        {
            double value = (double) teralightdays;
            return new Length(value, LengthUnit.TeralightDay);
        }
        /// <summary>
        ///     Get Length from TeralightHours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTeralightHours(double teralighthours)
        {
            double value = (double) teralighthours;
            return new Length(value, LengthUnit.TeralightHour);
        }
        /// <summary>
        ///     Get Length from TeralightMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTeralightMinutes(double teralightminutes)
        {
            double value = (double) teralightminutes;
            return new Length(value, LengthUnit.TeralightMinute);
        }
        /// <summary>
        ///     Get Length from TeralightSeconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTeralightSeconds(double teralightseconds)
        {
            double value = (double) teralightseconds;
            return new Length(value, LengthUnit.TeralightSecond);
        }
        /// <summary>
        ///     Get Length from TeralightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTeralightYears(double teralightyears)
        {
            double value = (double) teralightyears;
            return new Length(value, LengthUnit.TeralightYear);
        }
        /// <summary>
        ///     Get Length from Terameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTerameters(double terameters)
        {
            double value = (double) terameters;
            return new Length(value, LengthUnit.Terameter);
        }
        /// <summary>
        ///     Get Length from Twips.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromTwips(double twips)
        {
            double value = (double) twips;
            return new Length(value, LengthUnit.Twip);
        }
        /// <summary>
        ///     Get Length from UsSurveyFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromUsSurveyFeet(double ussurveyfeet)
        {
            double value = (double) ussurveyfeet;
            return new Length(value, LengthUnit.UsSurveyFoot);
        }
        /// <summary>
        ///     Get Length from Vettameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromVettameters(double vettameters)
        {
            double value = (double) vettameters;
            return new Length(value, LengthUnit.Vettameter);
        }
        /// <summary>
        ///     Get Length from Yards.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromYards(double yards)
        {
            double value = (double) yards;
            return new Length(value, LengthUnit.Yard);
        }
        /// <summary>
        ///     Get Length from YottalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromYottalightYears(double yottalightyears)
        {
            double value = (double) yottalightyears;
            return new Length(value, LengthUnit.YottalightYear);
        }
        /// <summary>
        ///     Get Length from Yottameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromYottameters(double yottameters)
        {
            double value = (double) yottameters;
            return new Length(value, LengthUnit.Yottameter);
        }
        /// <summary>
        ///     Get Length from ZettalightYears.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromZettalightYears(double zettalightyears)
        {
            double value = (double) zettalightyears;
            return new Length(value, LengthUnit.ZettalightYear);
        }
        /// <summary>
        ///     Get Length from Zettameters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Length FromZettameters(double zettameters)
        {
            double value = (double) zettameters;
            return new Length(value, LengthUnit.Zettameter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LengthUnit" /> to <see cref="Length" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Length unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Length From(double value, LengthUnit fromUnit)
        {
            return new Length((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Length Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Length Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Length, LengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Length result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Length result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Length, LengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static LengthUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<LengthUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out LengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out LengthUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<LengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Length objLength)) throw new ArgumentException("Expected type Length.", nameof(obj));

            return CompareTo(objLength);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Length other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Length objLength))
                return false;

            return Equals(objLength);
        }

        public bool Equals(Length other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Length within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Length other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Length.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((LengthUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(LengthUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Length to another Length with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Length with the specified unit.</returns>
        public Length ToUnit(LengthUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Length(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case LengthUnit.AU: return _value*1.496e11;
                case LengthUnit.Centimeter: return (_value) * 1e-2d;
                case LengthUnit.DecaaU: return (_value*1.496e11) * 1e1d;
                case LengthUnit.DecalightDay: return (_value*2.59e13) * 1e1d;
                case LengthUnit.DecalightHour: return (_value*1.079e12) * 1e1d;
                case LengthUnit.DecalightMinute: return (_value*1.799e10) * 1e1d;
                case LengthUnit.DecalightSecond: return (_value*299792458) * 1e1d;
                case LengthUnit.DecalightYear: return (_value*9.4607304725808E15) * 1e1d;
                case LengthUnit.Decameter: return (_value) * 1e1d;
                case LengthUnit.Decimeter: return (_value) * 1e-1d;
                case LengthUnit.DtpPica: return _value/236.220472441;
                case LengthUnit.DtpPoint: return (_value/72)*2.54e-2;
                case LengthUnit.ExalightYear: return (_value*9.4607304725808E15) * 1e18d;
                case LengthUnit.Exameter: return (_value) * 1e18d;
                case LengthUnit.Fathom: return _value*1.8288;
                case LengthUnit.Femtometer: return (_value) * 1e-15d;
                case LengthUnit.Foot: return _value*0.3048;
                case LengthUnit.GigaaU: return (_value*1.496e11) * 1e9d;
                case LengthUnit.GigalightDay: return (_value*2.59e13) * 1e9d;
                case LengthUnit.GigalightHour: return (_value*1.079e12) * 1e9d;
                case LengthUnit.GigalightMinute: return (_value*1.799e10) * 1e9d;
                case LengthUnit.GigalightSecond: return (_value*299792458) * 1e9d;
                case LengthUnit.GigalightYear: return (_value*9.4607304725808E15) * 1e9d;
                case LengthUnit.Gigameter: return (_value) * 1e9d;
                case LengthUnit.Hand: return _value * 1.016e-1;
                case LengthUnit.Hectometer: return (_value) * 1e2d;
                case LengthUnit.Inch: return _value*2.54e-2;
                case LengthUnit.KiloaU: return (_value*1.496e11) * 1e3d;
                case LengthUnit.KilolightDay: return (_value*2.59e13) * 1e3d;
                case LengthUnit.KilolightHour: return (_value*1.079e12) * 1e3d;
                case LengthUnit.KilolightMinute: return (_value*1.799e10) * 1e3d;
                case LengthUnit.KilolightSecond: return (_value*299792458) * 1e3d;
                case LengthUnit.KilolightYear: return (_value*9.4607304725808E15) * 1e3d;
                case LengthUnit.Kilometer: return (_value) * 1e3d;
                case LengthUnit.LightDay: return _value*2.59e13;
                case LengthUnit.LightHour: return _value*1.079e12;
                case LengthUnit.LightMinute: return _value*1.799e10;
                case LengthUnit.LightSecond: return _value*299792458;
                case LengthUnit.LightYear: return _value*9.4607304725808E15;
                case LengthUnit.MegaaU: return (_value*1.496e11) * 1e6d;
                case LengthUnit.MegalightDay: return (_value*2.59e13) * 1e6d;
                case LengthUnit.MegalightHour: return (_value*1.079e12) * 1e6d;
                case LengthUnit.MegalightMinute: return (_value*1.799e10) * 1e6d;
                case LengthUnit.MegalightSecond: return (_value*299792458) * 1e6d;
                case LengthUnit.MegalightYear: return (_value*9.4607304725808E15) * 1e6d;
                case LengthUnit.Megameter: return (_value) * 1e6d;
                case LengthUnit.Meter: return _value;
                case LengthUnit.MicroaU: return (_value*1.496e11) * 1e-6d;
                case LengthUnit.Microinch: return _value*2.54e-8;
                case LengthUnit.MicrolightDay: return (_value*2.59e13) * 1e-6d;
                case LengthUnit.MicrolightHour: return (_value*1.079e12) * 1e-6d;
                case LengthUnit.MicrolightMinute: return (_value*1.799e10) * 1e-6d;
                case LengthUnit.MicrolightSecond: return (_value*299792458) * 1e-6d;
                case LengthUnit.MicrolightYear: return (_value*9.4607304725808E15) * 1e-6d;
                case LengthUnit.Micrometer: return (_value) * 1e-6d;
                case LengthUnit.Mil: return _value*2.54e-5;
                case LengthUnit.Mile: return _value*1609.34;
                case LengthUnit.MilliaU: return (_value*1.496e11) * 1e-3d;
                case LengthUnit.MillilightDay: return (_value*2.59e13) * 1e-3d;
                case LengthUnit.MillilightHour: return (_value*1.079e12) * 1e-3d;
                case LengthUnit.MillilightMinute: return (_value*1.799e10) * 1e-3d;
                case LengthUnit.MillilightSecond: return (_value*299792458) * 1e-3d;
                case LengthUnit.MillilightYear: return (_value*9.4607304725808E15) * 1e-3d;
                case LengthUnit.Millimeter: return (_value) * 1e-3d;
                case LengthUnit.Nanometer: return (_value) * 1e-9d;
                case LengthUnit.NauticalMile: return _value*1852;
                case LengthUnit.PetalightYear: return (_value*9.4607304725808E15) * 1e15d;
                case LengthUnit.Petameter: return (_value) * 1e15d;
                case LengthUnit.Picometer: return (_value) * 1e-12d;
                case LengthUnit.PrinterPica: return _value/237.106301584;
                case LengthUnit.PrinterPoint: return (_value/72.27)*2.54e-2;
                case LengthUnit.Qutrameter: return (_value) * 1e27d;
                case LengthUnit.Shackle: return _value*27.432;
                case LengthUnit.TeraaU: return (_value*1.496e11) * 1e12d;
                case LengthUnit.TeralightDay: return (_value*2.59e13) * 1e12d;
                case LengthUnit.TeralightHour: return (_value*1.079e12) * 1e12d;
                case LengthUnit.TeralightMinute: return (_value*1.799e10) * 1e12d;
                case LengthUnit.TeralightSecond: return (_value*299792458) * 1e12d;
                case LengthUnit.TeralightYear: return (_value*9.4607304725808E15) * 1e12d;
                case LengthUnit.Terameter: return (_value) * 1e12d;
                case LengthUnit.Twip: return _value/56692.913385826;
                case LengthUnit.UsSurveyFoot: return _value*1200/3937;
                case LengthUnit.Vettameter: return (_value) * 1e30d;
                case LengthUnit.Yard: return _value*0.9144;
                case LengthUnit.YottalightYear: return (_value*9.4607304725808E15) * 1e24d;
                case LengthUnit.Yottameter: return (_value) * 1e24d;
                case LengthUnit.ZettalightYear: return (_value*9.4607304725808E15) * 1e21d;
                case LengthUnit.Zettameter: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(LengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case LengthUnit.AU: return baseUnitValue/1.496e11;
                case LengthUnit.Centimeter: return (baseUnitValue) / 1e-2d;
                case LengthUnit.DecaaU: return (baseUnitValue/1.496e11) / 1e1d;
                case LengthUnit.DecalightDay: return (baseUnitValue/2.59e13) / 1e1d;
                case LengthUnit.DecalightHour: return (baseUnitValue/1.079e12) / 1e1d;
                case LengthUnit.DecalightMinute: return (baseUnitValue/1.799e10) / 1e1d;
                case LengthUnit.DecalightSecond: return (baseUnitValue/299792458) / 1e1d;
                case LengthUnit.DecalightYear: return (baseUnitValue/9.4607304725808E15) / 1e1d;
                case LengthUnit.Decameter: return (baseUnitValue) / 1e1d;
                case LengthUnit.Decimeter: return (baseUnitValue) / 1e-1d;
                case LengthUnit.DtpPica: return baseUnitValue*236.220472441;
                case LengthUnit.DtpPoint: return (baseUnitValue/2.54e-2)*72;
                case LengthUnit.ExalightYear: return (baseUnitValue/9.4607304725808E15) / 1e18d;
                case LengthUnit.Exameter: return (baseUnitValue) / 1e18d;
                case LengthUnit.Fathom: return baseUnitValue/1.8288;
                case LengthUnit.Femtometer: return (baseUnitValue) / 1e-15d;
                case LengthUnit.Foot: return baseUnitValue/0.3048;
                case LengthUnit.GigaaU: return (baseUnitValue/1.496e11) / 1e9d;
                case LengthUnit.GigalightDay: return (baseUnitValue/2.59e13) / 1e9d;
                case LengthUnit.GigalightHour: return (baseUnitValue/1.079e12) / 1e9d;
                case LengthUnit.GigalightMinute: return (baseUnitValue/1.799e10) / 1e9d;
                case LengthUnit.GigalightSecond: return (baseUnitValue/299792458) / 1e9d;
                case LengthUnit.GigalightYear: return (baseUnitValue/9.4607304725808E15) / 1e9d;
                case LengthUnit.Gigameter: return (baseUnitValue) / 1e9d;
                case LengthUnit.Hand: return baseUnitValue / 1.016e-1;
                case LengthUnit.Hectometer: return (baseUnitValue) / 1e2d;
                case LengthUnit.Inch: return baseUnitValue/2.54e-2;
                case LengthUnit.KiloaU: return (baseUnitValue/1.496e11) / 1e3d;
                case LengthUnit.KilolightDay: return (baseUnitValue/2.59e13) / 1e3d;
                case LengthUnit.KilolightHour: return (baseUnitValue/1.079e12) / 1e3d;
                case LengthUnit.KilolightMinute: return (baseUnitValue/1.799e10) / 1e3d;
                case LengthUnit.KilolightSecond: return (baseUnitValue/299792458) / 1e3d;
                case LengthUnit.KilolightYear: return (baseUnitValue/9.4607304725808E15) / 1e3d;
                case LengthUnit.Kilometer: return (baseUnitValue) / 1e3d;
                case LengthUnit.LightDay: return baseUnitValue/2.59e13;
                case LengthUnit.LightHour: return baseUnitValue/1.079e12;
                case LengthUnit.LightMinute: return baseUnitValue/1.799e10;
                case LengthUnit.LightSecond: return baseUnitValue/299792458;
                case LengthUnit.LightYear: return baseUnitValue/9.4607304725808E15;
                case LengthUnit.MegaaU: return (baseUnitValue/1.496e11) / 1e6d;
                case LengthUnit.MegalightDay: return (baseUnitValue/2.59e13) / 1e6d;
                case LengthUnit.MegalightHour: return (baseUnitValue/1.079e12) / 1e6d;
                case LengthUnit.MegalightMinute: return (baseUnitValue/1.799e10) / 1e6d;
                case LengthUnit.MegalightSecond: return (baseUnitValue/299792458) / 1e6d;
                case LengthUnit.MegalightYear: return (baseUnitValue/9.4607304725808E15) / 1e6d;
                case LengthUnit.Megameter: return (baseUnitValue) / 1e6d;
                case LengthUnit.Meter: return baseUnitValue;
                case LengthUnit.MicroaU: return (baseUnitValue/1.496e11) / 1e-6d;
                case LengthUnit.Microinch: return baseUnitValue/2.54e-8;
                case LengthUnit.MicrolightDay: return (baseUnitValue/2.59e13) / 1e-6d;
                case LengthUnit.MicrolightHour: return (baseUnitValue/1.079e12) / 1e-6d;
                case LengthUnit.MicrolightMinute: return (baseUnitValue/1.799e10) / 1e-6d;
                case LengthUnit.MicrolightSecond: return (baseUnitValue/299792458) / 1e-6d;
                case LengthUnit.MicrolightYear: return (baseUnitValue/9.4607304725808E15) / 1e-6d;
                case LengthUnit.Micrometer: return (baseUnitValue) / 1e-6d;
                case LengthUnit.Mil: return baseUnitValue/2.54e-5;
                case LengthUnit.Mile: return baseUnitValue/1609.34;
                case LengthUnit.MilliaU: return (baseUnitValue/1.496e11) / 1e-3d;
                case LengthUnit.MillilightDay: return (baseUnitValue/2.59e13) / 1e-3d;
                case LengthUnit.MillilightHour: return (baseUnitValue/1.079e12) / 1e-3d;
                case LengthUnit.MillilightMinute: return (baseUnitValue/1.799e10) / 1e-3d;
                case LengthUnit.MillilightSecond: return (baseUnitValue/299792458) / 1e-3d;
                case LengthUnit.MillilightYear: return (baseUnitValue/9.4607304725808E15) / 1e-3d;
                case LengthUnit.Millimeter: return (baseUnitValue) / 1e-3d;
                case LengthUnit.Nanometer: return (baseUnitValue) / 1e-9d;
                case LengthUnit.NauticalMile: return baseUnitValue/1852;
                case LengthUnit.PetalightYear: return (baseUnitValue/9.4607304725808E15) / 1e15d;
                case LengthUnit.Petameter: return (baseUnitValue) / 1e15d;
                case LengthUnit.Picometer: return (baseUnitValue) / 1e-12d;
                case LengthUnit.PrinterPica: return baseUnitValue*237.106301584;
                case LengthUnit.PrinterPoint: return (baseUnitValue/2.54e-2)*72.27;
                case LengthUnit.Qutrameter: return (baseUnitValue) / 1e27d;
                case LengthUnit.Shackle: return baseUnitValue/27.432;
                case LengthUnit.TeraaU: return (baseUnitValue/1.496e11) / 1e12d;
                case LengthUnit.TeralightDay: return (baseUnitValue/2.59e13) / 1e12d;
                case LengthUnit.TeralightHour: return (baseUnitValue/1.079e12) / 1e12d;
                case LengthUnit.TeralightMinute: return (baseUnitValue/1.799e10) / 1e12d;
                case LengthUnit.TeralightSecond: return (baseUnitValue/299792458) / 1e12d;
                case LengthUnit.TeralightYear: return (baseUnitValue/9.4607304725808E15) / 1e12d;
                case LengthUnit.Terameter: return (baseUnitValue) / 1e12d;
                case LengthUnit.Twip: return baseUnitValue*56692.913385826;
                case LengthUnit.UsSurveyFoot: return baseUnitValue*3937/1200;
                case LengthUnit.Vettameter: return (baseUnitValue) / 1e30d;
                case LengthUnit.Yard: return baseUnitValue/0.9144;
                case LengthUnit.YottalightYear: return (baseUnitValue/9.4607304725808E15) / 1e24d;
                case LengthUnit.Yottameter: return (baseUnitValue) / 1e24d;
                case LengthUnit.ZettalightYear: return (baseUnitValue/9.4607304725808E15) / 1e21d;
                case LengthUnit.Zettameter: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
