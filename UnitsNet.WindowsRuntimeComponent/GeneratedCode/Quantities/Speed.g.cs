//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Speed : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpeedUnit? _unit;

        static Speed()
        {
            BaseDimensions = new BaseDimensions(1, 0, -1, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Speed, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit MeterPerSecond.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Speed()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Speed(double numericValue, SpeedUnit unit)
        {
            if(unit == SpeedUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Speed, which is MeterPerSecond. All conversions go via this value.
        /// </summary>
        public static SpeedUnit BaseUnit { get; } = SpeedUnit.MeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of Speed
        /// </summary>
        public static Speed MaxValue { get; } = new Speed(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Speed
        /// </summary>
        public static Speed MinValue { get; } = new Speed(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Speed;

        /// <summary>
        ///     All units of measurement for the Speed quantity.
        /// </summary>
        public static SpeedUnit[] Units { get; } = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>().Except(new SpeedUnit[]{ SpeedUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecond.
        /// </summary>
        public static Speed Zero { get; } = new Speed(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public SpeedUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Speed.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Speed.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Speed in CentimetersPerHour.
        /// </summary>
        public double CentimetersPerHour => As(SpeedUnit.CentimeterPerHour);

        /// <summary>
        ///     Get Speed in CentimetersPerMinutes.
        /// </summary>
        public double CentimetersPerMinutes => As(SpeedUnit.CentimeterPerMinute);

        /// <summary>
        ///     Get Speed in CentimetersPerSecond.
        /// </summary>
        public double CentimetersPerSecond => As(SpeedUnit.CentimeterPerSecond);

        /// <summary>
        ///     Get Speed in DecametersPerHour.
        /// </summary>
        public double DecametersPerHour => As(SpeedUnit.DecameterPerHour);

        /// <summary>
        ///     Get Speed in DecametersPerMinutes.
        /// </summary>
        public double DecametersPerMinutes => As(SpeedUnit.DecameterPerMinute);

        /// <summary>
        ///     Get Speed in DecametersPerSecond.
        /// </summary>
        public double DecametersPerSecond => As(SpeedUnit.DecameterPerSecond);

        /// <summary>
        ///     Get Speed in DecimetersPerHour.
        /// </summary>
        public double DecimetersPerHour => As(SpeedUnit.DecimeterPerHour);

        /// <summary>
        ///     Get Speed in DecimetersPerMinutes.
        /// </summary>
        public double DecimetersPerMinutes => As(SpeedUnit.DecimeterPerMinute);

        /// <summary>
        ///     Get Speed in DecimetersPerSecond.
        /// </summary>
        public double DecimetersPerSecond => As(SpeedUnit.DecimeterPerSecond);

        /// <summary>
        ///     Get Speed in ExametersPerHour.
        /// </summary>
        public double ExametersPerHour => As(SpeedUnit.ExameterPerHour);

        /// <summary>
        ///     Get Speed in ExametersPerMinutes.
        /// </summary>
        public double ExametersPerMinutes => As(SpeedUnit.ExameterPerMinute);

        /// <summary>
        ///     Get Speed in ExametersPerSecond.
        /// </summary>
        public double ExametersPerSecond => As(SpeedUnit.ExameterPerSecond);

        /// <summary>
        ///     Get Speed in FemtometersPerHour.
        /// </summary>
        public double FemtometersPerHour => As(SpeedUnit.FemtometerPerHour);

        /// <summary>
        ///     Get Speed in FemtometersPerMinutes.
        /// </summary>
        public double FemtometersPerMinutes => As(SpeedUnit.FemtometerPerMinute);

        /// <summary>
        ///     Get Speed in FemtometersPerSecond.
        /// </summary>
        public double FemtometersPerSecond => As(SpeedUnit.FemtometerPerSecond);

        /// <summary>
        ///     Get Speed in FeetPerHour.
        /// </summary>
        public double FeetPerHour => As(SpeedUnit.FootPerHour);

        /// <summary>
        ///     Get Speed in FeetPerMinute.
        /// </summary>
        public double FeetPerMinute => As(SpeedUnit.FootPerMinute);

        /// <summary>
        ///     Get Speed in FeetPerSecond.
        /// </summary>
        public double FeetPerSecond => As(SpeedUnit.FootPerSecond);

        /// <summary>
        ///     Get Speed in GigametersPerHour.
        /// </summary>
        public double GigametersPerHour => As(SpeedUnit.GigameterPerHour);

        /// <summary>
        ///     Get Speed in GigametersPerMinutes.
        /// </summary>
        public double GigametersPerMinutes => As(SpeedUnit.GigameterPerMinute);

        /// <summary>
        ///     Get Speed in GigametersPerSecond.
        /// </summary>
        public double GigametersPerSecond => As(SpeedUnit.GigameterPerSecond);

        /// <summary>
        ///     Get Speed in HectometersPerHour.
        /// </summary>
        public double HectometersPerHour => As(SpeedUnit.HectometerPerHour);

        /// <summary>
        ///     Get Speed in HectometersPerMinutes.
        /// </summary>
        public double HectometersPerMinutes => As(SpeedUnit.HectometerPerMinute);

        /// <summary>
        ///     Get Speed in HectometersPerSecond.
        /// </summary>
        public double HectometersPerSecond => As(SpeedUnit.HectometerPerSecond);

        /// <summary>
        ///     Get Speed in InchesPerHour.
        /// </summary>
        public double InchesPerHour => As(SpeedUnit.InchPerHour);

        /// <summary>
        ///     Get Speed in InchesPerMinute.
        /// </summary>
        public double InchesPerMinute => As(SpeedUnit.InchPerMinute);

        /// <summary>
        ///     Get Speed in InchesPerSecond.
        /// </summary>
        public double InchesPerSecond => As(SpeedUnit.InchPerSecond);

        /// <summary>
        ///     Get Speed in KilometersPerHour.
        /// </summary>
        public double KilometersPerHour => As(SpeedUnit.KilometerPerHour);

        /// <summary>
        ///     Get Speed in KilometersPerMinutes.
        /// </summary>
        public double KilometersPerMinutes => As(SpeedUnit.KilometerPerMinute);

        /// <summary>
        ///     Get Speed in KilometersPerSecond.
        /// </summary>
        public double KilometersPerSecond => As(SpeedUnit.KilometerPerSecond);

        /// <summary>
        ///     Get Speed in Knots.
        /// </summary>
        public double Knots => As(SpeedUnit.Knot);

        /// <summary>
        ///     Get Speed in MegametersPerHour.
        /// </summary>
        public double MegametersPerHour => As(SpeedUnit.MegameterPerHour);

        /// <summary>
        ///     Get Speed in MegametersPerMinutes.
        /// </summary>
        public double MegametersPerMinutes => As(SpeedUnit.MegameterPerMinute);

        /// <summary>
        ///     Get Speed in MegametersPerSecond.
        /// </summary>
        public double MegametersPerSecond => As(SpeedUnit.MegameterPerSecond);

        /// <summary>
        ///     Get Speed in MetersPerHour.
        /// </summary>
        public double MetersPerHour => As(SpeedUnit.MeterPerHour);

        /// <summary>
        ///     Get Speed in MetersPerMinutes.
        /// </summary>
        public double MetersPerMinutes => As(SpeedUnit.MeterPerMinute);

        /// <summary>
        ///     Get Speed in MetersPerSecond.
        /// </summary>
        public double MetersPerSecond => As(SpeedUnit.MeterPerSecond);

        /// <summary>
        ///     Get Speed in MicrometersPerHour.
        /// </summary>
        public double MicrometersPerHour => As(SpeedUnit.MicrometerPerHour);

        /// <summary>
        ///     Get Speed in MicrometersPerMinutes.
        /// </summary>
        public double MicrometersPerMinutes => As(SpeedUnit.MicrometerPerMinute);

        /// <summary>
        ///     Get Speed in MicrometersPerSecond.
        /// </summary>
        public double MicrometersPerSecond => As(SpeedUnit.MicrometerPerSecond);

        /// <summary>
        ///     Get Speed in MilesPerHour.
        /// </summary>
        public double MilesPerHour => As(SpeedUnit.MilePerHour);

        /// <summary>
        ///     Get Speed in MillimetersPerHour.
        /// </summary>
        public double MillimetersPerHour => As(SpeedUnit.MillimeterPerHour);

        /// <summary>
        ///     Get Speed in MillimetersPerMinutes.
        /// </summary>
        public double MillimetersPerMinutes => As(SpeedUnit.MillimeterPerMinute);

        /// <summary>
        ///     Get Speed in MillimetersPerSecond.
        /// </summary>
        public double MillimetersPerSecond => As(SpeedUnit.MillimeterPerSecond);

        /// <summary>
        ///     Get Speed in NanometersPerHour.
        /// </summary>
        public double NanometersPerHour => As(SpeedUnit.NanometerPerHour);

        /// <summary>
        ///     Get Speed in NanometersPerMinutes.
        /// </summary>
        public double NanometersPerMinutes => As(SpeedUnit.NanometerPerMinute);

        /// <summary>
        ///     Get Speed in NanometersPerSecond.
        /// </summary>
        public double NanometersPerSecond => As(SpeedUnit.NanometerPerSecond);

        /// <summary>
        ///     Get Speed in PetametersPerHour.
        /// </summary>
        public double PetametersPerHour => As(SpeedUnit.PetameterPerHour);

        /// <summary>
        ///     Get Speed in PetametersPerMinutes.
        /// </summary>
        public double PetametersPerMinutes => As(SpeedUnit.PetameterPerMinute);

        /// <summary>
        ///     Get Speed in PetametersPerSecond.
        /// </summary>
        public double PetametersPerSecond => As(SpeedUnit.PetameterPerSecond);

        /// <summary>
        ///     Get Speed in PicometersPerHour.
        /// </summary>
        public double PicometersPerHour => As(SpeedUnit.PicometerPerHour);

        /// <summary>
        ///     Get Speed in PicometersPerMinutes.
        /// </summary>
        public double PicometersPerMinutes => As(SpeedUnit.PicometerPerMinute);

        /// <summary>
        ///     Get Speed in PicometersPerSecond.
        /// </summary>
        public double PicometersPerSecond => As(SpeedUnit.PicometerPerSecond);

        /// <summary>
        ///     Get Speed in QutrametersPerHour.
        /// </summary>
        public double QutrametersPerHour => As(SpeedUnit.QutrameterPerHour);

        /// <summary>
        ///     Get Speed in QutrametersPerMinutes.
        /// </summary>
        public double QutrametersPerMinutes => As(SpeedUnit.QutrameterPerMinute);

        /// <summary>
        ///     Get Speed in QutrametersPerSecond.
        /// </summary>
        public double QutrametersPerSecond => As(SpeedUnit.QutrameterPerSecond);

        /// <summary>
        ///     Get Speed in TerametersPerHour.
        /// </summary>
        public double TerametersPerHour => As(SpeedUnit.TerameterPerHour);

        /// <summary>
        ///     Get Speed in TerametersPerMinutes.
        /// </summary>
        public double TerametersPerMinutes => As(SpeedUnit.TerameterPerMinute);

        /// <summary>
        ///     Get Speed in TerametersPerSecond.
        /// </summary>
        public double TerametersPerSecond => As(SpeedUnit.TerameterPerSecond);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerHour.
        /// </summary>
        public double UsSurveyFeetPerHour => As(SpeedUnit.UsSurveyFootPerHour);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerMinute.
        /// </summary>
        public double UsSurveyFeetPerMinute => As(SpeedUnit.UsSurveyFootPerMinute);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerSecond.
        /// </summary>
        public double UsSurveyFeetPerSecond => As(SpeedUnit.UsSurveyFootPerSecond);

        /// <summary>
        ///     Get Speed in VettametersPerHour.
        /// </summary>
        public double VettametersPerHour => As(SpeedUnit.VettameterPerHour);

        /// <summary>
        ///     Get Speed in VettametersPerMinutes.
        /// </summary>
        public double VettametersPerMinutes => As(SpeedUnit.VettameterPerMinute);

        /// <summary>
        ///     Get Speed in VettametersPerSecond.
        /// </summary>
        public double VettametersPerSecond => As(SpeedUnit.VettameterPerSecond);

        /// <summary>
        ///     Get Speed in YardsPerHour.
        /// </summary>
        public double YardsPerHour => As(SpeedUnit.YardPerHour);

        /// <summary>
        ///     Get Speed in YardsPerMinute.
        /// </summary>
        public double YardsPerMinute => As(SpeedUnit.YardPerMinute);

        /// <summary>
        ///     Get Speed in YardsPerSecond.
        /// </summary>
        public double YardsPerSecond => As(SpeedUnit.YardPerSecond);

        /// <summary>
        ///     Get Speed in YottametersPerHour.
        /// </summary>
        public double YottametersPerHour => As(SpeedUnit.YottameterPerHour);

        /// <summary>
        ///     Get Speed in YottametersPerMinutes.
        /// </summary>
        public double YottametersPerMinutes => As(SpeedUnit.YottameterPerMinute);

        /// <summary>
        ///     Get Speed in YottametersPerSecond.
        /// </summary>
        public double YottametersPerSecond => As(SpeedUnit.YottameterPerSecond);

        /// <summary>
        ///     Get Speed in ZettametersPerHour.
        /// </summary>
        public double ZettametersPerHour => As(SpeedUnit.ZettameterPerHour);

        /// <summary>
        ///     Get Speed in ZettametersPerMinutes.
        /// </summary>
        public double ZettametersPerMinutes => As(SpeedUnit.ZettameterPerMinute);

        /// <summary>
        ///     Get Speed in ZettametersPerSecond.
        /// </summary>
        public double ZettametersPerSecond => As(SpeedUnit.ZettameterPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpeedUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(SpeedUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Speed from CentimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromCentimetersPerHour(double centimetersperhour)
        {
            double value = (double) centimetersperhour;
            return new Speed(value, SpeedUnit.CentimeterPerHour);
        }
        /// <summary>
        ///     Get Speed from CentimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromCentimetersPerMinutes(double centimetersperminutes)
        {
            double value = (double) centimetersperminutes;
            return new Speed(value, SpeedUnit.CentimeterPerMinute);
        }
        /// <summary>
        ///     Get Speed from CentimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromCentimetersPerSecond(double centimeterspersecond)
        {
            double value = (double) centimeterspersecond;
            return new Speed(value, SpeedUnit.CentimeterPerSecond);
        }
        /// <summary>
        ///     Get Speed from DecametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecametersPerHour(double decametersperhour)
        {
            double value = (double) decametersperhour;
            return new Speed(value, SpeedUnit.DecameterPerHour);
        }
        /// <summary>
        ///     Get Speed from DecametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecametersPerMinutes(double decametersperminutes)
        {
            double value = (double) decametersperminutes;
            return new Speed(value, SpeedUnit.DecameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from DecametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecametersPerSecond(double decameterspersecond)
        {
            double value = (double) decameterspersecond;
            return new Speed(value, SpeedUnit.DecameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from DecimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecimetersPerHour(double decimetersperhour)
        {
            double value = (double) decimetersperhour;
            return new Speed(value, SpeedUnit.DecimeterPerHour);
        }
        /// <summary>
        ///     Get Speed from DecimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecimetersPerMinutes(double decimetersperminutes)
        {
            double value = (double) decimetersperminutes;
            return new Speed(value, SpeedUnit.DecimeterPerMinute);
        }
        /// <summary>
        ///     Get Speed from DecimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecimetersPerSecond(double decimeterspersecond)
        {
            double value = (double) decimeterspersecond;
            return new Speed(value, SpeedUnit.DecimeterPerSecond);
        }
        /// <summary>
        ///     Get Speed from ExametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromExametersPerHour(double exametersperhour)
        {
            double value = (double) exametersperhour;
            return new Speed(value, SpeedUnit.ExameterPerHour);
        }
        /// <summary>
        ///     Get Speed from ExametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromExametersPerMinutes(double exametersperminutes)
        {
            double value = (double) exametersperminutes;
            return new Speed(value, SpeedUnit.ExameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from ExametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromExametersPerSecond(double exameterspersecond)
        {
            double value = (double) exameterspersecond;
            return new Speed(value, SpeedUnit.ExameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from FemtometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFemtometersPerHour(double femtometersperhour)
        {
            double value = (double) femtometersperhour;
            return new Speed(value, SpeedUnit.FemtometerPerHour);
        }
        /// <summary>
        ///     Get Speed from FemtometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFemtometersPerMinutes(double femtometersperminutes)
        {
            double value = (double) femtometersperminutes;
            return new Speed(value, SpeedUnit.FemtometerPerMinute);
        }
        /// <summary>
        ///     Get Speed from FemtometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFemtometersPerSecond(double femtometerspersecond)
        {
            double value = (double) femtometerspersecond;
            return new Speed(value, SpeedUnit.FemtometerPerSecond);
        }
        /// <summary>
        ///     Get Speed from FeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFeetPerHour(double feetperhour)
        {
            double value = (double) feetperhour;
            return new Speed(value, SpeedUnit.FootPerHour);
        }
        /// <summary>
        ///     Get Speed from FeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFeetPerMinute(double feetperminute)
        {
            double value = (double) feetperminute;
            return new Speed(value, SpeedUnit.FootPerMinute);
        }
        /// <summary>
        ///     Get Speed from FeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFeetPerSecond(double feetpersecond)
        {
            double value = (double) feetpersecond;
            return new Speed(value, SpeedUnit.FootPerSecond);
        }
        /// <summary>
        ///     Get Speed from GigametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromGigametersPerHour(double gigametersperhour)
        {
            double value = (double) gigametersperhour;
            return new Speed(value, SpeedUnit.GigameterPerHour);
        }
        /// <summary>
        ///     Get Speed from GigametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromGigametersPerMinutes(double gigametersperminutes)
        {
            double value = (double) gigametersperminutes;
            return new Speed(value, SpeedUnit.GigameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from GigametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromGigametersPerSecond(double gigameterspersecond)
        {
            double value = (double) gigameterspersecond;
            return new Speed(value, SpeedUnit.GigameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from HectometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromHectometersPerHour(double hectometersperhour)
        {
            double value = (double) hectometersperhour;
            return new Speed(value, SpeedUnit.HectometerPerHour);
        }
        /// <summary>
        ///     Get Speed from HectometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromHectometersPerMinutes(double hectometersperminutes)
        {
            double value = (double) hectometersperminutes;
            return new Speed(value, SpeedUnit.HectometerPerMinute);
        }
        /// <summary>
        ///     Get Speed from HectometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromHectometersPerSecond(double hectometerspersecond)
        {
            double value = (double) hectometerspersecond;
            return new Speed(value, SpeedUnit.HectometerPerSecond);
        }
        /// <summary>
        ///     Get Speed from InchesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromInchesPerHour(double inchesperhour)
        {
            double value = (double) inchesperhour;
            return new Speed(value, SpeedUnit.InchPerHour);
        }
        /// <summary>
        ///     Get Speed from InchesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromInchesPerMinute(double inchesperminute)
        {
            double value = (double) inchesperminute;
            return new Speed(value, SpeedUnit.InchPerMinute);
        }
        /// <summary>
        ///     Get Speed from InchesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromInchesPerSecond(double inchespersecond)
        {
            double value = (double) inchespersecond;
            return new Speed(value, SpeedUnit.InchPerSecond);
        }
        /// <summary>
        ///     Get Speed from KilometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKilometersPerHour(double kilometersperhour)
        {
            double value = (double) kilometersperhour;
            return new Speed(value, SpeedUnit.KilometerPerHour);
        }
        /// <summary>
        ///     Get Speed from KilometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKilometersPerMinutes(double kilometersperminutes)
        {
            double value = (double) kilometersperminutes;
            return new Speed(value, SpeedUnit.KilometerPerMinute);
        }
        /// <summary>
        ///     Get Speed from KilometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKilometersPerSecond(double kilometerspersecond)
        {
            double value = (double) kilometerspersecond;
            return new Speed(value, SpeedUnit.KilometerPerSecond);
        }
        /// <summary>
        ///     Get Speed from Knots.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKnots(double knots)
        {
            double value = (double) knots;
            return new Speed(value, SpeedUnit.Knot);
        }
        /// <summary>
        ///     Get Speed from MegametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMegametersPerHour(double megametersperhour)
        {
            double value = (double) megametersperhour;
            return new Speed(value, SpeedUnit.MegameterPerHour);
        }
        /// <summary>
        ///     Get Speed from MegametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMegametersPerMinutes(double megametersperminutes)
        {
            double value = (double) megametersperminutes;
            return new Speed(value, SpeedUnit.MegameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from MegametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMegametersPerSecond(double megameterspersecond)
        {
            double value = (double) megameterspersecond;
            return new Speed(value, SpeedUnit.MegameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from MetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMetersPerHour(double metersperhour)
        {
            double value = (double) metersperhour;
            return new Speed(value, SpeedUnit.MeterPerHour);
        }
        /// <summary>
        ///     Get Speed from MetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMetersPerMinutes(double metersperminutes)
        {
            double value = (double) metersperminutes;
            return new Speed(value, SpeedUnit.MeterPerMinute);
        }
        /// <summary>
        ///     Get Speed from MetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMetersPerSecond(double meterspersecond)
        {
            double value = (double) meterspersecond;
            return new Speed(value, SpeedUnit.MeterPerSecond);
        }
        /// <summary>
        ///     Get Speed from MicrometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMicrometersPerHour(double micrometersperhour)
        {
            double value = (double) micrometersperhour;
            return new Speed(value, SpeedUnit.MicrometerPerHour);
        }
        /// <summary>
        ///     Get Speed from MicrometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMicrometersPerMinutes(double micrometersperminutes)
        {
            double value = (double) micrometersperminutes;
            return new Speed(value, SpeedUnit.MicrometerPerMinute);
        }
        /// <summary>
        ///     Get Speed from MicrometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMicrometersPerSecond(double micrometerspersecond)
        {
            double value = (double) micrometerspersecond;
            return new Speed(value, SpeedUnit.MicrometerPerSecond);
        }
        /// <summary>
        ///     Get Speed from MilesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMilesPerHour(double milesperhour)
        {
            double value = (double) milesperhour;
            return new Speed(value, SpeedUnit.MilePerHour);
        }
        /// <summary>
        ///     Get Speed from MillimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMillimetersPerHour(double millimetersperhour)
        {
            double value = (double) millimetersperhour;
            return new Speed(value, SpeedUnit.MillimeterPerHour);
        }
        /// <summary>
        ///     Get Speed from MillimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMillimetersPerMinutes(double millimetersperminutes)
        {
            double value = (double) millimetersperminutes;
            return new Speed(value, SpeedUnit.MillimeterPerMinute);
        }
        /// <summary>
        ///     Get Speed from MillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMillimetersPerSecond(double millimeterspersecond)
        {
            double value = (double) millimeterspersecond;
            return new Speed(value, SpeedUnit.MillimeterPerSecond);
        }
        /// <summary>
        ///     Get Speed from NanometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromNanometersPerHour(double nanometersperhour)
        {
            double value = (double) nanometersperhour;
            return new Speed(value, SpeedUnit.NanometerPerHour);
        }
        /// <summary>
        ///     Get Speed from NanometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromNanometersPerMinutes(double nanometersperminutes)
        {
            double value = (double) nanometersperminutes;
            return new Speed(value, SpeedUnit.NanometerPerMinute);
        }
        /// <summary>
        ///     Get Speed from NanometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromNanometersPerSecond(double nanometerspersecond)
        {
            double value = (double) nanometerspersecond;
            return new Speed(value, SpeedUnit.NanometerPerSecond);
        }
        /// <summary>
        ///     Get Speed from PetametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromPetametersPerHour(double petametersperhour)
        {
            double value = (double) petametersperhour;
            return new Speed(value, SpeedUnit.PetameterPerHour);
        }
        /// <summary>
        ///     Get Speed from PetametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromPetametersPerMinutes(double petametersperminutes)
        {
            double value = (double) petametersperminutes;
            return new Speed(value, SpeedUnit.PetameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from PetametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromPetametersPerSecond(double petameterspersecond)
        {
            double value = (double) petameterspersecond;
            return new Speed(value, SpeedUnit.PetameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from PicometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromPicometersPerHour(double picometersperhour)
        {
            double value = (double) picometersperhour;
            return new Speed(value, SpeedUnit.PicometerPerHour);
        }
        /// <summary>
        ///     Get Speed from PicometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromPicometersPerMinutes(double picometersperminutes)
        {
            double value = (double) picometersperminutes;
            return new Speed(value, SpeedUnit.PicometerPerMinute);
        }
        /// <summary>
        ///     Get Speed from PicometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromPicometersPerSecond(double picometerspersecond)
        {
            double value = (double) picometerspersecond;
            return new Speed(value, SpeedUnit.PicometerPerSecond);
        }
        /// <summary>
        ///     Get Speed from QutrametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromQutrametersPerHour(double qutrametersperhour)
        {
            double value = (double) qutrametersperhour;
            return new Speed(value, SpeedUnit.QutrameterPerHour);
        }
        /// <summary>
        ///     Get Speed from QutrametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromQutrametersPerMinutes(double qutrametersperminutes)
        {
            double value = (double) qutrametersperminutes;
            return new Speed(value, SpeedUnit.QutrameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from QutrametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromQutrametersPerSecond(double qutrameterspersecond)
        {
            double value = (double) qutrameterspersecond;
            return new Speed(value, SpeedUnit.QutrameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from TerametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromTerametersPerHour(double terametersperhour)
        {
            double value = (double) terametersperhour;
            return new Speed(value, SpeedUnit.TerameterPerHour);
        }
        /// <summary>
        ///     Get Speed from TerametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromTerametersPerMinutes(double terametersperminutes)
        {
            double value = (double) terametersperminutes;
            return new Speed(value, SpeedUnit.TerameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from TerametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromTerametersPerSecond(double terameterspersecond)
        {
            double value = (double) terameterspersecond;
            return new Speed(value, SpeedUnit.TerameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from UsSurveyFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromUsSurveyFeetPerHour(double ussurveyfeetperhour)
        {
            double value = (double) ussurveyfeetperhour;
            return new Speed(value, SpeedUnit.UsSurveyFootPerHour);
        }
        /// <summary>
        ///     Get Speed from UsSurveyFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromUsSurveyFeetPerMinute(double ussurveyfeetperminute)
        {
            double value = (double) ussurveyfeetperminute;
            return new Speed(value, SpeedUnit.UsSurveyFootPerMinute);
        }
        /// <summary>
        ///     Get Speed from UsSurveyFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromUsSurveyFeetPerSecond(double ussurveyfeetpersecond)
        {
            double value = (double) ussurveyfeetpersecond;
            return new Speed(value, SpeedUnit.UsSurveyFootPerSecond);
        }
        /// <summary>
        ///     Get Speed from VettametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromVettametersPerHour(double vettametersperhour)
        {
            double value = (double) vettametersperhour;
            return new Speed(value, SpeedUnit.VettameterPerHour);
        }
        /// <summary>
        ///     Get Speed from VettametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromVettametersPerMinutes(double vettametersperminutes)
        {
            double value = (double) vettametersperminutes;
            return new Speed(value, SpeedUnit.VettameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from VettametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromVettametersPerSecond(double vettameterspersecond)
        {
            double value = (double) vettameterspersecond;
            return new Speed(value, SpeedUnit.VettameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from YardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYardsPerHour(double yardsperhour)
        {
            double value = (double) yardsperhour;
            return new Speed(value, SpeedUnit.YardPerHour);
        }
        /// <summary>
        ///     Get Speed from YardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYardsPerMinute(double yardsperminute)
        {
            double value = (double) yardsperminute;
            return new Speed(value, SpeedUnit.YardPerMinute);
        }
        /// <summary>
        ///     Get Speed from YardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYardsPerSecond(double yardspersecond)
        {
            double value = (double) yardspersecond;
            return new Speed(value, SpeedUnit.YardPerSecond);
        }
        /// <summary>
        ///     Get Speed from YottametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYottametersPerHour(double yottametersperhour)
        {
            double value = (double) yottametersperhour;
            return new Speed(value, SpeedUnit.YottameterPerHour);
        }
        /// <summary>
        ///     Get Speed from YottametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYottametersPerMinutes(double yottametersperminutes)
        {
            double value = (double) yottametersperminutes;
            return new Speed(value, SpeedUnit.YottameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from YottametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYottametersPerSecond(double yottameterspersecond)
        {
            double value = (double) yottameterspersecond;
            return new Speed(value, SpeedUnit.YottameterPerSecond);
        }
        /// <summary>
        ///     Get Speed from ZettametersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromZettametersPerHour(double zettametersperhour)
        {
            double value = (double) zettametersperhour;
            return new Speed(value, SpeedUnit.ZettameterPerHour);
        }
        /// <summary>
        ///     Get Speed from ZettametersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromZettametersPerMinutes(double zettametersperminutes)
        {
            double value = (double) zettametersperminutes;
            return new Speed(value, SpeedUnit.ZettameterPerMinute);
        }
        /// <summary>
        ///     Get Speed from ZettametersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromZettametersPerSecond(double zettameterspersecond)
        {
            double value = (double) zettameterspersecond;
            return new Speed(value, SpeedUnit.ZettameterPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Speed unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Speed From(double value, SpeedUnit fromUnit)
        {
            return new Speed((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Speed Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Speed Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Speed, SpeedUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Speed result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Speed result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Speed, SpeedUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpeedUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<SpeedUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out SpeedUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out SpeedUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<SpeedUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Speed objSpeed)) throw new ArgumentException("Expected type Speed.", nameof(obj));

            return CompareTo(objSpeed);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Speed other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Speed objSpeed))
                return false;

            return Equals(objSpeed);
        }

        public bool Equals(Speed other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Speed within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Speed other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Speed.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((SpeedUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpeedUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Speed to another Speed with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Speed with the specified unit.</returns>
        public Speed ToUnit(SpeedUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Speed(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case SpeedUnit.CentimeterPerHour: return (_value/3600) * 1e-2d;
                case SpeedUnit.CentimeterPerMinute: return (_value/60) * 1e-2d;
                case SpeedUnit.CentimeterPerSecond: return (_value) * 1e-2d;
                case SpeedUnit.DecameterPerHour: return (_value/3600) * 1e1d;
                case SpeedUnit.DecameterPerMinute: return (_value/60) * 1e1d;
                case SpeedUnit.DecameterPerSecond: return (_value) * 1e1d;
                case SpeedUnit.DecimeterPerHour: return (_value/3600) * 1e-1d;
                case SpeedUnit.DecimeterPerMinute: return (_value/60) * 1e-1d;
                case SpeedUnit.DecimeterPerSecond: return (_value) * 1e-1d;
                case SpeedUnit.ExameterPerHour: return (_value/3600) * 1e18d;
                case SpeedUnit.ExameterPerMinute: return (_value/60) * 1e18d;
                case SpeedUnit.ExameterPerSecond: return (_value) * 1e18d;
                case SpeedUnit.FemtometerPerHour: return (_value/3600) * 1e-15d;
                case SpeedUnit.FemtometerPerMinute: return (_value/60) * 1e-15d;
                case SpeedUnit.FemtometerPerSecond: return (_value) * 1e-15d;
                case SpeedUnit.FootPerHour: return _value*0.3048/3600;
                case SpeedUnit.FootPerMinute: return _value*0.3048/60;
                case SpeedUnit.FootPerSecond: return _value*0.3048;
                case SpeedUnit.GigameterPerHour: return (_value/3600) * 1e9d;
                case SpeedUnit.GigameterPerMinute: return (_value/60) * 1e9d;
                case SpeedUnit.GigameterPerSecond: return (_value) * 1e9d;
                case SpeedUnit.HectometerPerHour: return (_value/3600) * 1e2d;
                case SpeedUnit.HectometerPerMinute: return (_value/60) * 1e2d;
                case SpeedUnit.HectometerPerSecond: return (_value) * 1e2d;
                case SpeedUnit.InchPerHour: return (_value/3600)*2.54e-2;
                case SpeedUnit.InchPerMinute: return (_value/60)*2.54e-2;
                case SpeedUnit.InchPerSecond: return _value*2.54e-2;
                case SpeedUnit.KilometerPerHour: return (_value/3600) * 1e3d;
                case SpeedUnit.KilometerPerMinute: return (_value/60) * 1e3d;
                case SpeedUnit.KilometerPerSecond: return (_value) * 1e3d;
                case SpeedUnit.Knot: return _value*0.514444;
                case SpeedUnit.MegameterPerHour: return (_value/3600) * 1e6d;
                case SpeedUnit.MegameterPerMinute: return (_value/60) * 1e6d;
                case SpeedUnit.MegameterPerSecond: return (_value) * 1e6d;
                case SpeedUnit.MeterPerHour: return _value/3600;
                case SpeedUnit.MeterPerMinute: return _value/60;
                case SpeedUnit.MeterPerSecond: return _value;
                case SpeedUnit.MicrometerPerHour: return (_value/3600) * 1e-6d;
                case SpeedUnit.MicrometerPerMinute: return (_value/60) * 1e-6d;
                case SpeedUnit.MicrometerPerSecond: return (_value) * 1e-6d;
                case SpeedUnit.MilePerHour: return _value*0.44704;
                case SpeedUnit.MillimeterPerHour: return (_value/3600) * 1e-3d;
                case SpeedUnit.MillimeterPerMinute: return (_value/60) * 1e-3d;
                case SpeedUnit.MillimeterPerSecond: return (_value) * 1e-3d;
                case SpeedUnit.NanometerPerHour: return (_value/3600) * 1e-9d;
                case SpeedUnit.NanometerPerMinute: return (_value/60) * 1e-9d;
                case SpeedUnit.NanometerPerSecond: return (_value) * 1e-9d;
                case SpeedUnit.PetameterPerHour: return (_value/3600) * 1e15d;
                case SpeedUnit.PetameterPerMinute: return (_value/60) * 1e15d;
                case SpeedUnit.PetameterPerSecond: return (_value) * 1e15d;
                case SpeedUnit.PicometerPerHour: return (_value/3600) * 1e-12d;
                case SpeedUnit.PicometerPerMinute: return (_value/60) * 1e-12d;
                case SpeedUnit.PicometerPerSecond: return (_value) * 1e-12d;
                case SpeedUnit.QutrameterPerHour: return (_value/3600) * 1e27d;
                case SpeedUnit.QutrameterPerMinute: return (_value/60) * 1e27d;
                case SpeedUnit.QutrameterPerSecond: return (_value) * 1e27d;
                case SpeedUnit.TerameterPerHour: return (_value/3600) * 1e12d;
                case SpeedUnit.TerameterPerMinute: return (_value/60) * 1e12d;
                case SpeedUnit.TerameterPerSecond: return (_value) * 1e12d;
                case SpeedUnit.UsSurveyFootPerHour: return (_value*1200/3937)/3600;
                case SpeedUnit.UsSurveyFootPerMinute: return (_value*1200/3937)/60;
                case SpeedUnit.UsSurveyFootPerSecond: return _value*1200/3937;
                case SpeedUnit.VettameterPerHour: return (_value/3600) * 1e30d;
                case SpeedUnit.VettameterPerMinute: return (_value/60) * 1e30d;
                case SpeedUnit.VettameterPerSecond: return (_value) * 1e30d;
                case SpeedUnit.YardPerHour: return _value*0.9144/3600;
                case SpeedUnit.YardPerMinute: return _value*0.9144/60;
                case SpeedUnit.YardPerSecond: return _value*0.9144;
                case SpeedUnit.YottameterPerHour: return (_value/3600) * 1e24d;
                case SpeedUnit.YottameterPerMinute: return (_value/60) * 1e24d;
                case SpeedUnit.YottameterPerSecond: return (_value) * 1e24d;
                case SpeedUnit.ZettameterPerHour: return (_value/3600) * 1e21d;
                case SpeedUnit.ZettameterPerMinute: return (_value/60) * 1e21d;
                case SpeedUnit.ZettameterPerSecond: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(SpeedUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case SpeedUnit.CentimeterPerHour: return (baseUnitValue*3600) / 1e-2d;
                case SpeedUnit.CentimeterPerMinute: return (baseUnitValue*60) / 1e-2d;
                case SpeedUnit.CentimeterPerSecond: return (baseUnitValue) / 1e-2d;
                case SpeedUnit.DecameterPerHour: return (baseUnitValue*3600) / 1e1d;
                case SpeedUnit.DecameterPerMinute: return (baseUnitValue*60) / 1e1d;
                case SpeedUnit.DecameterPerSecond: return (baseUnitValue) / 1e1d;
                case SpeedUnit.DecimeterPerHour: return (baseUnitValue*3600) / 1e-1d;
                case SpeedUnit.DecimeterPerMinute: return (baseUnitValue*60) / 1e-1d;
                case SpeedUnit.DecimeterPerSecond: return (baseUnitValue) / 1e-1d;
                case SpeedUnit.ExameterPerHour: return (baseUnitValue*3600) / 1e18d;
                case SpeedUnit.ExameterPerMinute: return (baseUnitValue*60) / 1e18d;
                case SpeedUnit.ExameterPerSecond: return (baseUnitValue) / 1e18d;
                case SpeedUnit.FemtometerPerHour: return (baseUnitValue*3600) / 1e-15d;
                case SpeedUnit.FemtometerPerMinute: return (baseUnitValue*60) / 1e-15d;
                case SpeedUnit.FemtometerPerSecond: return (baseUnitValue) / 1e-15d;
                case SpeedUnit.FootPerHour: return baseUnitValue/0.3048*3600;
                case SpeedUnit.FootPerMinute: return baseUnitValue/0.3048*60;
                case SpeedUnit.FootPerSecond: return baseUnitValue/0.3048;
                case SpeedUnit.GigameterPerHour: return (baseUnitValue*3600) / 1e9d;
                case SpeedUnit.GigameterPerMinute: return (baseUnitValue*60) / 1e9d;
                case SpeedUnit.GigameterPerSecond: return (baseUnitValue) / 1e9d;
                case SpeedUnit.HectometerPerHour: return (baseUnitValue*3600) / 1e2d;
                case SpeedUnit.HectometerPerMinute: return (baseUnitValue*60) / 1e2d;
                case SpeedUnit.HectometerPerSecond: return (baseUnitValue) / 1e2d;
                case SpeedUnit.InchPerHour: return (baseUnitValue/2.54e-2)*3600;
                case SpeedUnit.InchPerMinute: return (baseUnitValue/2.54e-2)*60;
                case SpeedUnit.InchPerSecond: return baseUnitValue/2.54e-2;
                case SpeedUnit.KilometerPerHour: return (baseUnitValue*3600) / 1e3d;
                case SpeedUnit.KilometerPerMinute: return (baseUnitValue*60) / 1e3d;
                case SpeedUnit.KilometerPerSecond: return (baseUnitValue) / 1e3d;
                case SpeedUnit.Knot: return baseUnitValue/0.514444;
                case SpeedUnit.MegameterPerHour: return (baseUnitValue*3600) / 1e6d;
                case SpeedUnit.MegameterPerMinute: return (baseUnitValue*60) / 1e6d;
                case SpeedUnit.MegameterPerSecond: return (baseUnitValue) / 1e6d;
                case SpeedUnit.MeterPerHour: return baseUnitValue*3600;
                case SpeedUnit.MeterPerMinute: return baseUnitValue*60;
                case SpeedUnit.MeterPerSecond: return baseUnitValue;
                case SpeedUnit.MicrometerPerHour: return (baseUnitValue*3600) / 1e-6d;
                case SpeedUnit.MicrometerPerMinute: return (baseUnitValue*60) / 1e-6d;
                case SpeedUnit.MicrometerPerSecond: return (baseUnitValue) / 1e-6d;
                case SpeedUnit.MilePerHour: return baseUnitValue/0.44704;
                case SpeedUnit.MillimeterPerHour: return (baseUnitValue*3600) / 1e-3d;
                case SpeedUnit.MillimeterPerMinute: return (baseUnitValue*60) / 1e-3d;
                case SpeedUnit.MillimeterPerSecond: return (baseUnitValue) / 1e-3d;
                case SpeedUnit.NanometerPerHour: return (baseUnitValue*3600) / 1e-9d;
                case SpeedUnit.NanometerPerMinute: return (baseUnitValue*60) / 1e-9d;
                case SpeedUnit.NanometerPerSecond: return (baseUnitValue) / 1e-9d;
                case SpeedUnit.PetameterPerHour: return (baseUnitValue*3600) / 1e15d;
                case SpeedUnit.PetameterPerMinute: return (baseUnitValue*60) / 1e15d;
                case SpeedUnit.PetameterPerSecond: return (baseUnitValue) / 1e15d;
                case SpeedUnit.PicometerPerHour: return (baseUnitValue*3600) / 1e-12d;
                case SpeedUnit.PicometerPerMinute: return (baseUnitValue*60) / 1e-12d;
                case SpeedUnit.PicometerPerSecond: return (baseUnitValue) / 1e-12d;
                case SpeedUnit.QutrameterPerHour: return (baseUnitValue*3600) / 1e27d;
                case SpeedUnit.QutrameterPerMinute: return (baseUnitValue*60) / 1e27d;
                case SpeedUnit.QutrameterPerSecond: return (baseUnitValue) / 1e27d;
                case SpeedUnit.TerameterPerHour: return (baseUnitValue*3600) / 1e12d;
                case SpeedUnit.TerameterPerMinute: return (baseUnitValue*60) / 1e12d;
                case SpeedUnit.TerameterPerSecond: return (baseUnitValue) / 1e12d;
                case SpeedUnit.UsSurveyFootPerHour: return (baseUnitValue*3937/1200)*3600;
                case SpeedUnit.UsSurveyFootPerMinute: return (baseUnitValue*3937/1200)*60;
                case SpeedUnit.UsSurveyFootPerSecond: return baseUnitValue*3937/1200;
                case SpeedUnit.VettameterPerHour: return (baseUnitValue*3600) / 1e30d;
                case SpeedUnit.VettameterPerMinute: return (baseUnitValue*60) / 1e30d;
                case SpeedUnit.VettameterPerSecond: return (baseUnitValue) / 1e30d;
                case SpeedUnit.YardPerHour: return baseUnitValue/0.9144*3600;
                case SpeedUnit.YardPerMinute: return baseUnitValue/0.9144*60;
                case SpeedUnit.YardPerSecond: return baseUnitValue/0.9144;
                case SpeedUnit.YottameterPerHour: return (baseUnitValue*3600) / 1e24d;
                case SpeedUnit.YottameterPerMinute: return (baseUnitValue*60) / 1e24d;
                case SpeedUnit.YottameterPerSecond: return (baseUnitValue) / 1e24d;
                case SpeedUnit.ZettameterPerHour: return (baseUnitValue*3600) / 1e21d;
                case SpeedUnit.ZettameterPerMinute: return (baseUnitValue*60) / 1e21d;
                case SpeedUnit.ZettameterPerSecond: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
