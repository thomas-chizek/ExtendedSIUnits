//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Acceleration, in physics, is the rate at which the velocity of an object changes over time. An object's acceleration is the net result of any and all forces acting on the object, as described by Newton's Second Law. The SI unit for acceleration is the Meter per second squared (m/s²). Accelerations are vector quantities (they have magnitude and direction) and add according to the parallelogram law. As a vector, the calculated net force is equal to the product of the object's mass (a scalar quantity) and the acceleration.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Acceleration : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly AccelerationUnit? _unit;

        static Acceleration()
        {
            BaseDimensions = new BaseDimensions(1, 0, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Acceleration, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit MeterPerSecondSquared.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Acceleration()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Acceleration(double numericValue, AccelerationUnit unit)
        {
            if(unit == AccelerationUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Acceleration, which is MeterPerSecondSquared. All conversions go via this value.
        /// </summary>
        public static AccelerationUnit BaseUnit { get; } = AccelerationUnit.MeterPerSecondSquared;

        /// <summary>
        /// Represents the largest possible value of Acceleration
        /// </summary>
        public static Acceleration MaxValue { get; } = new Acceleration(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Acceleration
        /// </summary>
        public static Acceleration MinValue { get; } = new Acceleration(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Acceleration;

        /// <summary>
        ///     All units of measurement for the Acceleration quantity.
        /// </summary>
        public static AccelerationUnit[] Units { get; } = Enum.GetValues(typeof(AccelerationUnit)).Cast<AccelerationUnit>().Except(new AccelerationUnit[]{ AccelerationUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecondSquared.
        /// </summary>
        public static Acceleration Zero { get; } = new Acceleration(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public AccelerationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Acceleration.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Acceleration.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Acceleration in CentilightsecondsPerHourSquared.
        /// </summary>
        public double CentilightsecondsPerHourSquared => As(AccelerationUnit.CentilightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in CentimetersPerHourSquared.
        /// </summary>
        public double CentimetersPerHourSquared => As(AccelerationUnit.CentimeterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in CentimetersPerMinutesSquared.
        /// </summary>
        public double CentimetersPerMinutesSquared => As(AccelerationUnit.CentimeterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in CentimetersPerSecondSquared.
        /// </summary>
        public double CentimetersPerSecondSquared => As(AccelerationUnit.CentimeterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in DecalightsecondsPerHourSquared.
        /// </summary>
        public double DecalightsecondsPerHourSquared => As(AccelerationUnit.DecalightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in DecametersPerHourSquared.
        /// </summary>
        public double DecametersPerHourSquared => As(AccelerationUnit.DecameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in DecametersPerMinutesSquared.
        /// </summary>
        public double DecametersPerMinutesSquared => As(AccelerationUnit.DecameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in DecametersPerSecondSquared.
        /// </summary>
        public double DecametersPerSecondSquared => As(AccelerationUnit.DecameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in DecilightsecondsPerHourSquared.
        /// </summary>
        public double DecilightsecondsPerHourSquared => As(AccelerationUnit.DecilightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in DecimetersPerHourSquared.
        /// </summary>
        public double DecimetersPerHourSquared => As(AccelerationUnit.DecimeterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in DecimetersPerMinutesSquared.
        /// </summary>
        public double DecimetersPerMinutesSquared => As(AccelerationUnit.DecimeterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in DecimetersPerSecondSquared.
        /// </summary>
        public double DecimetersPerSecondSquared => As(AccelerationUnit.DecimeterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in ExametersPerHourSquared.
        /// </summary>
        public double ExametersPerHourSquared => As(AccelerationUnit.ExameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in ExametersPerMinutesSquared.
        /// </summary>
        public double ExametersPerMinutesSquared => As(AccelerationUnit.ExameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in ExametersPerSecondSquared.
        /// </summary>
        public double ExametersPerSecondSquared => As(AccelerationUnit.ExameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in FemtometersPerHourSquared.
        /// </summary>
        public double FemtometersPerHourSquared => As(AccelerationUnit.FemtometerPerHourSquared);

        /// <summary>
        ///     Get Acceleration in FemtometersPerMinutesSquared.
        /// </summary>
        public double FemtometersPerMinutesSquared => As(AccelerationUnit.FemtometerPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in FemtometersPerSecondSquared.
        /// </summary>
        public double FemtometersPerSecondSquared => As(AccelerationUnit.FemtometerPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in FeetPerSecondSquared.
        /// </summary>
        public double FeetPerSecondSquared => As(AccelerationUnit.FootPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in GigametersPerHourSquared.
        /// </summary>
        public double GigametersPerHourSquared => As(AccelerationUnit.GigameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in GigametersPerMinutesSquared.
        /// </summary>
        public double GigametersPerMinutesSquared => As(AccelerationUnit.GigameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in GigametersPerSecondSquared.
        /// </summary>
        public double GigametersPerSecondSquared => As(AccelerationUnit.GigameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in HectometersPerHourSquared.
        /// </summary>
        public double HectometersPerHourSquared => As(AccelerationUnit.HectometerPerHourSquared);

        /// <summary>
        ///     Get Acceleration in HectometersPerMinutesSquared.
        /// </summary>
        public double HectometersPerMinutesSquared => As(AccelerationUnit.HectometerPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in HectometersPerSecondSquared.
        /// </summary>
        public double HectometersPerSecondSquared => As(AccelerationUnit.HectometerPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in InchesPerSecondSquared.
        /// </summary>
        public double InchesPerSecondSquared => As(AccelerationUnit.InchPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in KilolightsecondsPerHourSquared.
        /// </summary>
        public double KilolightsecondsPerHourSquared => As(AccelerationUnit.KilolightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in KilometersPerHourSquared.
        /// </summary>
        public double KilometersPerHourSquared => As(AccelerationUnit.KilometerPerHourSquared);

        /// <summary>
        ///     Get Acceleration in KilometersPerMinutesSquared.
        /// </summary>
        public double KilometersPerMinutesSquared => As(AccelerationUnit.KilometerPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in KilometersPerSecondSquared.
        /// </summary>
        public double KilometersPerSecondSquared => As(AccelerationUnit.KilometerPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in KnotsPerHour.
        /// </summary>
        public double KnotsPerHour => As(AccelerationUnit.KnotPerHour);

        /// <summary>
        ///     Get Acceleration in KnotsPerMinute.
        /// </summary>
        public double KnotsPerMinute => As(AccelerationUnit.KnotPerMinute);

        /// <summary>
        ///     Get Acceleration in KnotsPerSecond.
        /// </summary>
        public double KnotsPerSecond => As(AccelerationUnit.KnotPerSecond);

        /// <summary>
        ///     Get Acceleration in LightsecondsPerHourSquared.
        /// </summary>
        public double LightsecondsPerHourSquared => As(AccelerationUnit.LightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MegametersPerHourSquared.
        /// </summary>
        public double MegametersPerHourSquared => As(AccelerationUnit.MegameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MegametersPerMinutesSquared.
        /// </summary>
        public double MegametersPerMinutesSquared => As(AccelerationUnit.MegameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in MegametersPerSecondSquared.
        /// </summary>
        public double MegametersPerSecondSquared => As(AccelerationUnit.MegameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in MetersPerHourSquared.
        /// </summary>
        public double MetersPerHourSquared => As(AccelerationUnit.MeterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MetersPerMinutesSquared.
        /// </summary>
        public double MetersPerMinutesSquared => As(AccelerationUnit.MeterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in MetersPerSecondSquared.
        /// </summary>
        public double MetersPerSecondSquared => As(AccelerationUnit.MeterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in MicrolightsecondsPerHourSquared.
        /// </summary>
        public double MicrolightsecondsPerHourSquared => As(AccelerationUnit.MicrolightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MicrometersPerHourSquared.
        /// </summary>
        public double MicrometersPerHourSquared => As(AccelerationUnit.MicrometerPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MicrometersPerMinutesSquared.
        /// </summary>
        public double MicrometersPerMinutesSquared => As(AccelerationUnit.MicrometerPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in MicrometersPerSecondSquared.
        /// </summary>
        public double MicrometersPerSecondSquared => As(AccelerationUnit.MicrometerPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in MilesPerHourSquared.
        /// </summary>
        public double MilesPerHourSquared => As(AccelerationUnit.MilePerHourSquared);

        /// <summary>
        ///     Get Acceleration in MillilightsecondsPerHourSquared.
        /// </summary>
        public double MillilightsecondsPerHourSquared => As(AccelerationUnit.MillilightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MillimetersPerHourSquared.
        /// </summary>
        public double MillimetersPerHourSquared => As(AccelerationUnit.MillimeterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in MillimetersPerMinutesSquared.
        /// </summary>
        public double MillimetersPerMinutesSquared => As(AccelerationUnit.MillimeterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in MillimetersPerSecondSquared.
        /// </summary>
        public double MillimetersPerSecondSquared => As(AccelerationUnit.MillimeterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in NanolightsecondsPerHourSquared.
        /// </summary>
        public double NanolightsecondsPerHourSquared => As(AccelerationUnit.NanolightsecondPerHourSquared);

        /// <summary>
        ///     Get Acceleration in NanometersPerHourSquared.
        /// </summary>
        public double NanometersPerHourSquared => As(AccelerationUnit.NanometerPerHourSquared);

        /// <summary>
        ///     Get Acceleration in NanometersPerMinutesSquared.
        /// </summary>
        public double NanometersPerMinutesSquared => As(AccelerationUnit.NanometerPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in NanometersPerSecondSquared.
        /// </summary>
        public double NanometersPerSecondSquared => As(AccelerationUnit.NanometerPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in PetametersPerHourSquared.
        /// </summary>
        public double PetametersPerHourSquared => As(AccelerationUnit.PetameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in PetametersPerMinutesSquared.
        /// </summary>
        public double PetametersPerMinutesSquared => As(AccelerationUnit.PetameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in PetametersPerSecondSquared.
        /// </summary>
        public double PetametersPerSecondSquared => As(AccelerationUnit.PetameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in PicometersPerHourSquared.
        /// </summary>
        public double PicometersPerHourSquared => As(AccelerationUnit.PicometerPerHourSquared);

        /// <summary>
        ///     Get Acceleration in PicometersPerMinutesSquared.
        /// </summary>
        public double PicometersPerMinutesSquared => As(AccelerationUnit.PicometerPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in PicometersPerSecondSquared.
        /// </summary>
        public double PicometersPerSecondSquared => As(AccelerationUnit.PicometerPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in QutrametersPerHourSquared.
        /// </summary>
        public double QutrametersPerHourSquared => As(AccelerationUnit.QutrameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in QutrametersPerMinutesSquared.
        /// </summary>
        public double QutrametersPerMinutesSquared => As(AccelerationUnit.QutrameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in QutrametersPerSecondSquared.
        /// </summary>
        public double QutrametersPerSecondSquared => As(AccelerationUnit.QutrameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in StandardGravity.
        /// </summary>
        public double StandardGravity => As(AccelerationUnit.StandardGravity);

        /// <summary>
        ///     Get Acceleration in TerametersPerHourSquared.
        /// </summary>
        public double TerametersPerHourSquared => As(AccelerationUnit.TerameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in TerametersPerMinutesSquared.
        /// </summary>
        public double TerametersPerMinutesSquared => As(AccelerationUnit.TerameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in TerametersPerSecondSquared.
        /// </summary>
        public double TerametersPerSecondSquared => As(AccelerationUnit.TerameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in VettametersPerHourSquared.
        /// </summary>
        public double VettametersPerHourSquared => As(AccelerationUnit.VettameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in VettametersPerMinutesSquared.
        /// </summary>
        public double VettametersPerMinutesSquared => As(AccelerationUnit.VettameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in VettametersPerSecondSquared.
        /// </summary>
        public double VettametersPerSecondSquared => As(AccelerationUnit.VettameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in YottametersPerHourSquared.
        /// </summary>
        public double YottametersPerHourSquared => As(AccelerationUnit.YottameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in YottametersPerMinutesSquared.
        /// </summary>
        public double YottametersPerMinutesSquared => As(AccelerationUnit.YottameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in YottametersPerSecondSquared.
        /// </summary>
        public double YottametersPerSecondSquared => As(AccelerationUnit.YottameterPerSecondSquared);

        /// <summary>
        ///     Get Acceleration in ZettametersPerHourSquared.
        /// </summary>
        public double ZettametersPerHourSquared => As(AccelerationUnit.ZettameterPerHourSquared);

        /// <summary>
        ///     Get Acceleration in ZettametersPerMinutesSquared.
        /// </summary>
        public double ZettametersPerMinutesSquared => As(AccelerationUnit.ZettameterPerMinuteSquared);

        /// <summary>
        ///     Get Acceleration in ZettametersPerSecondSquared.
        /// </summary>
        public double ZettametersPerSecondSquared => As(AccelerationUnit.ZettameterPerSecondSquared);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(AccelerationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(AccelerationUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Acceleration from CentilightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromCentilightsecondsPerHourSquared(double centilightsecondsperhoursquared)
        {
            double value = (double) centilightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.CentilightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from CentimetersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromCentimetersPerHourSquared(double centimetersperhoursquared)
        {
            double value = (double) centimetersperhoursquared;
            return new Acceleration(value, AccelerationUnit.CentimeterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from CentimetersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromCentimetersPerMinutesSquared(double centimetersperminutessquared)
        {
            double value = (double) centimetersperminutessquared;
            return new Acceleration(value, AccelerationUnit.CentimeterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from CentimetersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromCentimetersPerSecondSquared(double centimeterspersecondsquared)
        {
            double value = (double) centimeterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.CentimeterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecalightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecalightsecondsPerHourSquared(double decalightsecondsperhoursquared)
        {
            double value = (double) decalightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.DecalightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecametersPerHourSquared(double decametersperhoursquared)
        {
            double value = (double) decametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.DecameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecametersPerMinutesSquared(double decametersperminutessquared)
        {
            double value = (double) decametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.DecameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecametersPerSecondSquared(double decameterspersecondsquared)
        {
            double value = (double) decameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.DecameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecilightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecilightsecondsPerHourSquared(double decilightsecondsperhoursquared)
        {
            double value = (double) decilightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.DecilightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecimetersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecimetersPerHourSquared(double decimetersperhoursquared)
        {
            double value = (double) decimetersperhoursquared;
            return new Acceleration(value, AccelerationUnit.DecimeterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecimetersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecimetersPerMinutesSquared(double decimetersperminutessquared)
        {
            double value = (double) decimetersperminutessquared;
            return new Acceleration(value, AccelerationUnit.DecimeterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from DecimetersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromDecimetersPerSecondSquared(double decimeterspersecondsquared)
        {
            double value = (double) decimeterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.DecimeterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from ExametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromExametersPerHourSquared(double exametersperhoursquared)
        {
            double value = (double) exametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.ExameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from ExametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromExametersPerMinutesSquared(double exametersperminutessquared)
        {
            double value = (double) exametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.ExameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from ExametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromExametersPerSecondSquared(double exameterspersecondsquared)
        {
            double value = (double) exameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.ExameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from FemtometersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromFemtometersPerHourSquared(double femtometersperhoursquared)
        {
            double value = (double) femtometersperhoursquared;
            return new Acceleration(value, AccelerationUnit.FemtometerPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from FemtometersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromFemtometersPerMinutesSquared(double femtometersperminutessquared)
        {
            double value = (double) femtometersperminutessquared;
            return new Acceleration(value, AccelerationUnit.FemtometerPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from FemtometersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromFemtometersPerSecondSquared(double femtometerspersecondsquared)
        {
            double value = (double) femtometerspersecondsquared;
            return new Acceleration(value, AccelerationUnit.FemtometerPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from FeetPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromFeetPerSecondSquared(double feetpersecondsquared)
        {
            double value = (double) feetpersecondsquared;
            return new Acceleration(value, AccelerationUnit.FootPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from GigametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromGigametersPerHourSquared(double gigametersperhoursquared)
        {
            double value = (double) gigametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.GigameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from GigametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromGigametersPerMinutesSquared(double gigametersperminutessquared)
        {
            double value = (double) gigametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.GigameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from GigametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromGigametersPerSecondSquared(double gigameterspersecondsquared)
        {
            double value = (double) gigameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.GigameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from HectometersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromHectometersPerHourSquared(double hectometersperhoursquared)
        {
            double value = (double) hectometersperhoursquared;
            return new Acceleration(value, AccelerationUnit.HectometerPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from HectometersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromHectometersPerMinutesSquared(double hectometersperminutessquared)
        {
            double value = (double) hectometersperminutessquared;
            return new Acceleration(value, AccelerationUnit.HectometerPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from HectometersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromHectometersPerSecondSquared(double hectometerspersecondsquared)
        {
            double value = (double) hectometerspersecondsquared;
            return new Acceleration(value, AccelerationUnit.HectometerPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from InchesPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromInchesPerSecondSquared(double inchespersecondsquared)
        {
            double value = (double) inchespersecondsquared;
            return new Acceleration(value, AccelerationUnit.InchPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from KilolightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKilolightsecondsPerHourSquared(double kilolightsecondsperhoursquared)
        {
            double value = (double) kilolightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.KilolightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from KilometersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKilometersPerHourSquared(double kilometersperhoursquared)
        {
            double value = (double) kilometersperhoursquared;
            return new Acceleration(value, AccelerationUnit.KilometerPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from KilometersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKilometersPerMinutesSquared(double kilometersperminutessquared)
        {
            double value = (double) kilometersperminutessquared;
            return new Acceleration(value, AccelerationUnit.KilometerPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from KilometersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKilometersPerSecondSquared(double kilometerspersecondsquared)
        {
            double value = (double) kilometerspersecondsquared;
            return new Acceleration(value, AccelerationUnit.KilometerPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from KnotsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKnotsPerHour(double knotsperhour)
        {
            double value = (double) knotsperhour;
            return new Acceleration(value, AccelerationUnit.KnotPerHour);
        }
        /// <summary>
        ///     Get Acceleration from KnotsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKnotsPerMinute(double knotsperminute)
        {
            double value = (double) knotsperminute;
            return new Acceleration(value, AccelerationUnit.KnotPerMinute);
        }
        /// <summary>
        ///     Get Acceleration from KnotsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromKnotsPerSecond(double knotspersecond)
        {
            double value = (double) knotspersecond;
            return new Acceleration(value, AccelerationUnit.KnotPerSecond);
        }
        /// <summary>
        ///     Get Acceleration from LightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromLightsecondsPerHourSquared(double lightsecondsperhoursquared)
        {
            double value = (double) lightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.LightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MegametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMegametersPerHourSquared(double megametersperhoursquared)
        {
            double value = (double) megametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.MegameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MegametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMegametersPerMinutesSquared(double megametersperminutessquared)
        {
            double value = (double) megametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.MegameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from MegametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMegametersPerSecondSquared(double megameterspersecondsquared)
        {
            double value = (double) megameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.MegameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from MetersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMetersPerHourSquared(double metersperhoursquared)
        {
            double value = (double) metersperhoursquared;
            return new Acceleration(value, AccelerationUnit.MeterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MetersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMetersPerMinutesSquared(double metersperminutessquared)
        {
            double value = (double) metersperminutessquared;
            return new Acceleration(value, AccelerationUnit.MeterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from MetersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMetersPerSecondSquared(double meterspersecondsquared)
        {
            double value = (double) meterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.MeterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from MicrolightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMicrolightsecondsPerHourSquared(double microlightsecondsperhoursquared)
        {
            double value = (double) microlightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.MicrolightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MicrometersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMicrometersPerHourSquared(double micrometersperhoursquared)
        {
            double value = (double) micrometersperhoursquared;
            return new Acceleration(value, AccelerationUnit.MicrometerPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MicrometersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMicrometersPerMinutesSquared(double micrometersperminutessquared)
        {
            double value = (double) micrometersperminutessquared;
            return new Acceleration(value, AccelerationUnit.MicrometerPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from MicrometersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMicrometersPerSecondSquared(double micrometerspersecondsquared)
        {
            double value = (double) micrometerspersecondsquared;
            return new Acceleration(value, AccelerationUnit.MicrometerPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from MilesPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMilesPerHourSquared(double milesperhoursquared)
        {
            double value = (double) milesperhoursquared;
            return new Acceleration(value, AccelerationUnit.MilePerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MillilightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMillilightsecondsPerHourSquared(double millilightsecondsperhoursquared)
        {
            double value = (double) millilightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.MillilightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MillimetersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMillimetersPerHourSquared(double millimetersperhoursquared)
        {
            double value = (double) millimetersperhoursquared;
            return new Acceleration(value, AccelerationUnit.MillimeterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from MillimetersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMillimetersPerMinutesSquared(double millimetersperminutessquared)
        {
            double value = (double) millimetersperminutessquared;
            return new Acceleration(value, AccelerationUnit.MillimeterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from MillimetersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromMillimetersPerSecondSquared(double millimeterspersecondsquared)
        {
            double value = (double) millimeterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.MillimeterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from NanolightsecondsPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromNanolightsecondsPerHourSquared(double nanolightsecondsperhoursquared)
        {
            double value = (double) nanolightsecondsperhoursquared;
            return new Acceleration(value, AccelerationUnit.NanolightsecondPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from NanometersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromNanometersPerHourSquared(double nanometersperhoursquared)
        {
            double value = (double) nanometersperhoursquared;
            return new Acceleration(value, AccelerationUnit.NanometerPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from NanometersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromNanometersPerMinutesSquared(double nanometersperminutessquared)
        {
            double value = (double) nanometersperminutessquared;
            return new Acceleration(value, AccelerationUnit.NanometerPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from NanometersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromNanometersPerSecondSquared(double nanometerspersecondsquared)
        {
            double value = (double) nanometerspersecondsquared;
            return new Acceleration(value, AccelerationUnit.NanometerPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from PetametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromPetametersPerHourSquared(double petametersperhoursquared)
        {
            double value = (double) petametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.PetameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from PetametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromPetametersPerMinutesSquared(double petametersperminutessquared)
        {
            double value = (double) petametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.PetameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from PetametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromPetametersPerSecondSquared(double petameterspersecondsquared)
        {
            double value = (double) petameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.PetameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from PicometersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromPicometersPerHourSquared(double picometersperhoursquared)
        {
            double value = (double) picometersperhoursquared;
            return new Acceleration(value, AccelerationUnit.PicometerPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from PicometersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromPicometersPerMinutesSquared(double picometersperminutessquared)
        {
            double value = (double) picometersperminutessquared;
            return new Acceleration(value, AccelerationUnit.PicometerPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from PicometersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromPicometersPerSecondSquared(double picometerspersecondsquared)
        {
            double value = (double) picometerspersecondsquared;
            return new Acceleration(value, AccelerationUnit.PicometerPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from QutrametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromQutrametersPerHourSquared(double qutrametersperhoursquared)
        {
            double value = (double) qutrametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.QutrameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from QutrametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromQutrametersPerMinutesSquared(double qutrametersperminutessquared)
        {
            double value = (double) qutrametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.QutrameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from QutrametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromQutrametersPerSecondSquared(double qutrameterspersecondsquared)
        {
            double value = (double) qutrameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.QutrameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from StandardGravity.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromStandardGravity(double standardgravity)
        {
            double value = (double) standardgravity;
            return new Acceleration(value, AccelerationUnit.StandardGravity);
        }
        /// <summary>
        ///     Get Acceleration from TerametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromTerametersPerHourSquared(double terametersperhoursquared)
        {
            double value = (double) terametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.TerameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from TerametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromTerametersPerMinutesSquared(double terametersperminutessquared)
        {
            double value = (double) terametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.TerameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from TerametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromTerametersPerSecondSquared(double terameterspersecondsquared)
        {
            double value = (double) terameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.TerameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from VettametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromVettametersPerHourSquared(double vettametersperhoursquared)
        {
            double value = (double) vettametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.VettameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from VettametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromVettametersPerMinutesSquared(double vettametersperminutessquared)
        {
            double value = (double) vettametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.VettameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from VettametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromVettametersPerSecondSquared(double vettameterspersecondsquared)
        {
            double value = (double) vettameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.VettameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from YottametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromYottametersPerHourSquared(double yottametersperhoursquared)
        {
            double value = (double) yottametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.YottameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from YottametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromYottametersPerMinutesSquared(double yottametersperminutessquared)
        {
            double value = (double) yottametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.YottameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from YottametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromYottametersPerSecondSquared(double yottameterspersecondsquared)
        {
            double value = (double) yottameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.YottameterPerSecondSquared);
        }
        /// <summary>
        ///     Get Acceleration from ZettametersPerHourSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromZettametersPerHourSquared(double zettametersperhoursquared)
        {
            double value = (double) zettametersperhoursquared;
            return new Acceleration(value, AccelerationUnit.ZettameterPerHourSquared);
        }
        /// <summary>
        ///     Get Acceleration from ZettametersPerMinutesSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromZettametersPerMinutesSquared(double zettametersperminutessquared)
        {
            double value = (double) zettametersperminutessquared;
            return new Acceleration(value, AccelerationUnit.ZettameterPerMinuteSquared);
        }
        /// <summary>
        ///     Get Acceleration from ZettametersPerSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Acceleration FromZettametersPerSecondSquared(double zettameterspersecondsquared)
        {
            double value = (double) zettameterspersecondsquared;
            return new Acceleration(value, AccelerationUnit.ZettameterPerSecondSquared);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AccelerationUnit" /> to <see cref="Acceleration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Acceleration unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Acceleration From(double value, AccelerationUnit fromUnit)
        {
            return new Acceleration((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Acceleration Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Acceleration Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Acceleration, AccelerationUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Acceleration result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Acceleration result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Acceleration, AccelerationUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static AccelerationUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static AccelerationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<AccelerationUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out AccelerationUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out AccelerationUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<AccelerationUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Acceleration objAcceleration)) throw new ArgumentException("Expected type Acceleration.", nameof(obj));

            return CompareTo(objAcceleration);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Acceleration other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Acceleration objAcceleration))
                return false;

            return Equals(objAcceleration);
        }

        public bool Equals(Acceleration other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Acceleration within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Acceleration other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Acceleration.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((AccelerationUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(AccelerationUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Acceleration to another Acceleration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Acceleration with the specified unit.</returns>
        public Acceleration ToUnit(AccelerationUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Acceleration(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case AccelerationUnit.CentilightsecondPerHourSquared: return (_value*1.2008e-5) * 1e-2d;
                case AccelerationUnit.CentimeterPerHourSquared: return (_value/3600) * 1e-2d;
                case AccelerationUnit.CentimeterPerMinuteSquared: return (_value/60) * 1e-2d;
                case AccelerationUnit.CentimeterPerSecondSquared: return (_value) * 1e-2d;
                case AccelerationUnit.DecalightsecondPerHourSquared: return (_value*1.2008e-5) * 1e1d;
                case AccelerationUnit.DecameterPerHourSquared: return (_value/3600) * 1e1d;
                case AccelerationUnit.DecameterPerMinuteSquared: return (_value/60) * 1e1d;
                case AccelerationUnit.DecameterPerSecondSquared: return (_value) * 1e1d;
                case AccelerationUnit.DecilightsecondPerHourSquared: return (_value*1.2008e-5) * 1e-1d;
                case AccelerationUnit.DecimeterPerHourSquared: return (_value/3600) * 1e-1d;
                case AccelerationUnit.DecimeterPerMinuteSquared: return (_value/60) * 1e-1d;
                case AccelerationUnit.DecimeterPerSecondSquared: return (_value) * 1e-1d;
                case AccelerationUnit.ExameterPerHourSquared: return (_value/3600) * 1e18d;
                case AccelerationUnit.ExameterPerMinuteSquared: return (_value/60) * 1e18d;
                case AccelerationUnit.ExameterPerSecondSquared: return (_value) * 1e18d;
                case AccelerationUnit.FemtometerPerHourSquared: return (_value/3600) * 1e-15d;
                case AccelerationUnit.FemtometerPerMinuteSquared: return (_value/60) * 1e-15d;
                case AccelerationUnit.FemtometerPerSecondSquared: return (_value) * 1e-15d;
                case AccelerationUnit.FootPerSecondSquared: return _value*0.304800;
                case AccelerationUnit.GigameterPerHourSquared: return (_value/3600) * 1e9d;
                case AccelerationUnit.GigameterPerMinuteSquared: return (_value/60) * 1e9d;
                case AccelerationUnit.GigameterPerSecondSquared: return (_value) * 1e9d;
                case AccelerationUnit.HectometerPerHourSquared: return (_value/3600) * 1e2d;
                case AccelerationUnit.HectometerPerMinuteSquared: return (_value/60) * 1e2d;
                case AccelerationUnit.HectometerPerSecondSquared: return (_value) * 1e2d;
                case AccelerationUnit.InchPerSecondSquared: return _value*0.0254;
                case AccelerationUnit.KilolightsecondPerHourSquared: return (_value*1.2008e-5) * 1e3d;
                case AccelerationUnit.KilometerPerHourSquared: return (_value/3600) * 1e3d;
                case AccelerationUnit.KilometerPerMinuteSquared: return (_value/60) * 1e3d;
                case AccelerationUnit.KilometerPerSecondSquared: return (_value) * 1e3d;
                case AccelerationUnit.KnotPerHour: return _value*0.5144444444444/3600;
                case AccelerationUnit.KnotPerMinute: return _value*0.5144444444444/60;
                case AccelerationUnit.KnotPerSecond: return _value*0.5144444444444;
                case AccelerationUnit.LightsecondPerHourSquared: return _value*1.2008e-5;
                case AccelerationUnit.MegameterPerHourSquared: return (_value/3600) * 1e6d;
                case AccelerationUnit.MegameterPerMinuteSquared: return (_value/60) * 1e6d;
                case AccelerationUnit.MegameterPerSecondSquared: return (_value) * 1e6d;
                case AccelerationUnit.MeterPerHourSquared: return _value/3600;
                case AccelerationUnit.MeterPerMinuteSquared: return _value/60;
                case AccelerationUnit.MeterPerSecondSquared: return _value;
                case AccelerationUnit.MicrolightsecondPerHourSquared: return (_value*1.2008e-5) * 1e-6d;
                case AccelerationUnit.MicrometerPerHourSquared: return (_value/3600) * 1e-6d;
                case AccelerationUnit.MicrometerPerMinuteSquared: return (_value/60) * 1e-6d;
                case AccelerationUnit.MicrometerPerSecondSquared: return (_value) * 1e-6d;
                case AccelerationUnit.MilePerHourSquared: return _value*0.44704;
                case AccelerationUnit.MillilightsecondPerHourSquared: return (_value*1.2008e-5) * 1e-3d;
                case AccelerationUnit.MillimeterPerHourSquared: return (_value/3600) * 1e-3d;
                case AccelerationUnit.MillimeterPerMinuteSquared: return (_value/60) * 1e-3d;
                case AccelerationUnit.MillimeterPerSecondSquared: return (_value) * 1e-3d;
                case AccelerationUnit.NanolightsecondPerHourSquared: return (_value*1.2008e-5) * 1e-9d;
                case AccelerationUnit.NanometerPerHourSquared: return (_value/3600) * 1e-9d;
                case AccelerationUnit.NanometerPerMinuteSquared: return (_value/60) * 1e-9d;
                case AccelerationUnit.NanometerPerSecondSquared: return (_value) * 1e-9d;
                case AccelerationUnit.PetameterPerHourSquared: return (_value/3600) * 1e15d;
                case AccelerationUnit.PetameterPerMinuteSquared: return (_value/60) * 1e15d;
                case AccelerationUnit.PetameterPerSecondSquared: return (_value) * 1e15d;
                case AccelerationUnit.PicometerPerHourSquared: return (_value/3600) * 1e-12d;
                case AccelerationUnit.PicometerPerMinuteSquared: return (_value/60) * 1e-12d;
                case AccelerationUnit.PicometerPerSecondSquared: return (_value) * 1e-12d;
                case AccelerationUnit.QutrameterPerHourSquared: return (_value/3600) * 1e27d;
                case AccelerationUnit.QutrameterPerMinuteSquared: return (_value/60) * 1e27d;
                case AccelerationUnit.QutrameterPerSecondSquared: return (_value) * 1e27d;
                case AccelerationUnit.StandardGravity: return _value*9.80665;
                case AccelerationUnit.TerameterPerHourSquared: return (_value/3600) * 1e12d;
                case AccelerationUnit.TerameterPerMinuteSquared: return (_value/60) * 1e12d;
                case AccelerationUnit.TerameterPerSecondSquared: return (_value) * 1e12d;
                case AccelerationUnit.VettameterPerHourSquared: return (_value/3600) * 1e30d;
                case AccelerationUnit.VettameterPerMinuteSquared: return (_value/60) * 1e30d;
                case AccelerationUnit.VettameterPerSecondSquared: return (_value) * 1e30d;
                case AccelerationUnit.YottameterPerHourSquared: return (_value/3600) * 1e24d;
                case AccelerationUnit.YottameterPerMinuteSquared: return (_value/60) * 1e24d;
                case AccelerationUnit.YottameterPerSecondSquared: return (_value) * 1e24d;
                case AccelerationUnit.ZettameterPerHourSquared: return (_value/3600) * 1e21d;
                case AccelerationUnit.ZettameterPerMinuteSquared: return (_value/60) * 1e21d;
                case AccelerationUnit.ZettameterPerSecondSquared: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(AccelerationUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case AccelerationUnit.CentilightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e-2d;
                case AccelerationUnit.CentimeterPerHourSquared: return (baseUnitValue*3600) / 1e-2d;
                case AccelerationUnit.CentimeterPerMinuteSquared: return (baseUnitValue*60) / 1e-2d;
                case AccelerationUnit.CentimeterPerSecondSquared: return (baseUnitValue) / 1e-2d;
                case AccelerationUnit.DecalightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e1d;
                case AccelerationUnit.DecameterPerHourSquared: return (baseUnitValue*3600) / 1e1d;
                case AccelerationUnit.DecameterPerMinuteSquared: return (baseUnitValue*60) / 1e1d;
                case AccelerationUnit.DecameterPerSecondSquared: return (baseUnitValue) / 1e1d;
                case AccelerationUnit.DecilightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e-1d;
                case AccelerationUnit.DecimeterPerHourSquared: return (baseUnitValue*3600) / 1e-1d;
                case AccelerationUnit.DecimeterPerMinuteSquared: return (baseUnitValue*60) / 1e-1d;
                case AccelerationUnit.DecimeterPerSecondSquared: return (baseUnitValue) / 1e-1d;
                case AccelerationUnit.ExameterPerHourSquared: return (baseUnitValue*3600) / 1e18d;
                case AccelerationUnit.ExameterPerMinuteSquared: return (baseUnitValue*60) / 1e18d;
                case AccelerationUnit.ExameterPerSecondSquared: return (baseUnitValue) / 1e18d;
                case AccelerationUnit.FemtometerPerHourSquared: return (baseUnitValue*3600) / 1e-15d;
                case AccelerationUnit.FemtometerPerMinuteSquared: return (baseUnitValue*60) / 1e-15d;
                case AccelerationUnit.FemtometerPerSecondSquared: return (baseUnitValue) / 1e-15d;
                case AccelerationUnit.FootPerSecondSquared: return baseUnitValue/0.304800;
                case AccelerationUnit.GigameterPerHourSquared: return (baseUnitValue*3600) / 1e9d;
                case AccelerationUnit.GigameterPerMinuteSquared: return (baseUnitValue*60) / 1e9d;
                case AccelerationUnit.GigameterPerSecondSquared: return (baseUnitValue) / 1e9d;
                case AccelerationUnit.HectometerPerHourSquared: return (baseUnitValue*3600) / 1e2d;
                case AccelerationUnit.HectometerPerMinuteSquared: return (baseUnitValue*60) / 1e2d;
                case AccelerationUnit.HectometerPerSecondSquared: return (baseUnitValue) / 1e2d;
                case AccelerationUnit.InchPerSecondSquared: return baseUnitValue/0.0254;
                case AccelerationUnit.KilolightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e3d;
                case AccelerationUnit.KilometerPerHourSquared: return (baseUnitValue*3600) / 1e3d;
                case AccelerationUnit.KilometerPerMinuteSquared: return (baseUnitValue*60) / 1e3d;
                case AccelerationUnit.KilometerPerSecondSquared: return (baseUnitValue) / 1e3d;
                case AccelerationUnit.KnotPerHour: return baseUnitValue/0.5144444444444*3600;
                case AccelerationUnit.KnotPerMinute: return baseUnitValue/0.5144444444444*60;
                case AccelerationUnit.KnotPerSecond: return baseUnitValue/0.5144444444444;
                case AccelerationUnit.LightsecondPerHourSquared: return baseUnitValue/1.2008e-5;
                case AccelerationUnit.MegameterPerHourSquared: return (baseUnitValue*3600) / 1e6d;
                case AccelerationUnit.MegameterPerMinuteSquared: return (baseUnitValue*60) / 1e6d;
                case AccelerationUnit.MegameterPerSecondSquared: return (baseUnitValue) / 1e6d;
                case AccelerationUnit.MeterPerHourSquared: return baseUnitValue*3600;
                case AccelerationUnit.MeterPerMinuteSquared: return baseUnitValue*60;
                case AccelerationUnit.MeterPerSecondSquared: return baseUnitValue;
                case AccelerationUnit.MicrolightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e-6d;
                case AccelerationUnit.MicrometerPerHourSquared: return (baseUnitValue*3600) / 1e-6d;
                case AccelerationUnit.MicrometerPerMinuteSquared: return (baseUnitValue*60) / 1e-6d;
                case AccelerationUnit.MicrometerPerSecondSquared: return (baseUnitValue) / 1e-6d;
                case AccelerationUnit.MilePerHourSquared: return baseUnitValue/0.44704;
                case AccelerationUnit.MillilightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e-3d;
                case AccelerationUnit.MillimeterPerHourSquared: return (baseUnitValue*3600) / 1e-3d;
                case AccelerationUnit.MillimeterPerMinuteSquared: return (baseUnitValue*60) / 1e-3d;
                case AccelerationUnit.MillimeterPerSecondSquared: return (baseUnitValue) / 1e-3d;
                case AccelerationUnit.NanolightsecondPerHourSquared: return (baseUnitValue/1.2008e-5) / 1e-9d;
                case AccelerationUnit.NanometerPerHourSquared: return (baseUnitValue*3600) / 1e-9d;
                case AccelerationUnit.NanometerPerMinuteSquared: return (baseUnitValue*60) / 1e-9d;
                case AccelerationUnit.NanometerPerSecondSquared: return (baseUnitValue) / 1e-9d;
                case AccelerationUnit.PetameterPerHourSquared: return (baseUnitValue*3600) / 1e15d;
                case AccelerationUnit.PetameterPerMinuteSquared: return (baseUnitValue*60) / 1e15d;
                case AccelerationUnit.PetameterPerSecondSquared: return (baseUnitValue) / 1e15d;
                case AccelerationUnit.PicometerPerHourSquared: return (baseUnitValue*3600) / 1e-12d;
                case AccelerationUnit.PicometerPerMinuteSquared: return (baseUnitValue*60) / 1e-12d;
                case AccelerationUnit.PicometerPerSecondSquared: return (baseUnitValue) / 1e-12d;
                case AccelerationUnit.QutrameterPerHourSquared: return (baseUnitValue*3600) / 1e27d;
                case AccelerationUnit.QutrameterPerMinuteSquared: return (baseUnitValue*60) / 1e27d;
                case AccelerationUnit.QutrameterPerSecondSquared: return (baseUnitValue) / 1e27d;
                case AccelerationUnit.StandardGravity: return baseUnitValue/9.80665;
                case AccelerationUnit.TerameterPerHourSquared: return (baseUnitValue*3600) / 1e12d;
                case AccelerationUnit.TerameterPerMinuteSquared: return (baseUnitValue*60) / 1e12d;
                case AccelerationUnit.TerameterPerSecondSquared: return (baseUnitValue) / 1e12d;
                case AccelerationUnit.VettameterPerHourSquared: return (baseUnitValue*3600) / 1e30d;
                case AccelerationUnit.VettameterPerMinuteSquared: return (baseUnitValue*60) / 1e30d;
                case AccelerationUnit.VettameterPerSecondSquared: return (baseUnitValue) / 1e30d;
                case AccelerationUnit.YottameterPerHourSquared: return (baseUnitValue*3600) / 1e24d;
                case AccelerationUnit.YottameterPerMinuteSquared: return (baseUnitValue*60) / 1e24d;
                case AccelerationUnit.YottameterPerSecondSquared: return (baseUnitValue) / 1e24d;
                case AccelerationUnit.ZettameterPerHourSquared: return (baseUnitValue*3600) / 1e21d;
                case AccelerationUnit.ZettameterPerMinuteSquared: return (baseUnitValue*60) / 1e21d;
                case AccelerationUnit.ZettameterPerSecondSquared: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
