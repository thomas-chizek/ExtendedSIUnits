//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Volume : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit? _unit;

        static Volume()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Volume, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Volume()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Volume(double numericValue, VolumeUnit unit)
        {
            if(unit == VolumeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; } = VolumeUnit.CubicMeter;

        /// <summary>
        /// Represents the largest possible value of Volume
        /// </summary>
        public static Volume MaxValue { get; } = new Volume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Volume
        /// </summary>
        public static Volume MinValue { get; } = new Volume(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Volume;

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; } = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().Except(new VolumeUnit[]{ VolumeUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero { get; } = new Volume(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Volume.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Volume in AcreFeet.
        /// </summary>
        public double AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Get Volume in AuTablespoons.
        /// </summary>
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Get Volume in CenticubicFeet.
        /// </summary>
        public double CenticubicFeet => As(VolumeUnit.CenticubicFoot);

        /// <summary>
        ///     Get Volume in CenticubicMeters.
        /// </summary>
        public double CenticubicMeters => As(VolumeUnit.CenticubicMeter);

        /// <summary>
        ///     Get Volume in Centiliters.
        /// </summary>
        public double Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Get Volume in CubicCentimeters.
        /// </summary>
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Get Volume in CubicDecimeters.
        /// </summary>
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Get Volume in CubicFeet.
        /// </summary>
        public double CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Get Volume in CubicHectometers.
        /// </summary>
        public double CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Get Volume in CubicInches.
        /// </summary>
        public double CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Get Volume in CubicKilometers.
        /// </summary>
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Get Volume in CubicMeters.
        /// </summary>
        public double CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Get Volume in CubicMicrometers.
        /// </summary>
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Get Volume in CubicMiles.
        /// </summary>
        public double CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Get Volume in CubicMillimeters.
        /// </summary>
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Get Volume in CubicYards.
        /// </summary>
        public double CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Get Volume in DecacubicFeet.
        /// </summary>
        public double DecacubicFeet => As(VolumeUnit.DecacubicFoot);

        /// <summary>
        ///     Get Volume in DecacubicMeters.
        /// </summary>
        public double DecacubicMeters => As(VolumeUnit.DecacubicMeter);

        /// <summary>
        ///     Get Volume in Decaliters.
        /// </summary>
        public double Decaliters => As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Get Volume in DecicubicFeet.
        /// </summary>
        public double DecicubicFeet => As(VolumeUnit.DecicubicFoot);

        /// <summary>
        ///     Get Volume in DecicubicMeters.
        /// </summary>
        public double DecicubicMeters => As(VolumeUnit.DecicubicMeter);

        /// <summary>
        ///     Get Volume in Deciliters.
        /// </summary>
        public double Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Get Volume in ExacubicFeet.
        /// </summary>
        public double ExacubicFeet => As(VolumeUnit.ExacubicFoot);

        /// <summary>
        ///     Get Volume in ExacubicMeters.
        /// </summary>
        public double ExacubicMeters => As(VolumeUnit.ExacubicMeter);

        /// <summary>
        ///     Get Volume in Exaliters.
        /// </summary>
        public double Exaliters => As(VolumeUnit.Exaliter);

        /// <summary>
        ///     Get Volume in FemtocubicFeet.
        /// </summary>
        public double FemtocubicFeet => As(VolumeUnit.FemtocubicFoot);

        /// <summary>
        ///     Get Volume in FemtocubicMeters.
        /// </summary>
        public double FemtocubicMeters => As(VolumeUnit.FemtocubicMeter);

        /// <summary>
        ///     Get Volume in Femtoliters.
        /// </summary>
        public double Femtoliters => As(VolumeUnit.Femtoliter);

        /// <summary>
        ///     Get Volume in GigacubicFeet.
        /// </summary>
        public double GigacubicFeet => As(VolumeUnit.GigacubicFoot);

        /// <summary>
        ///     Get Volume in GigacubicMeters.
        /// </summary>
        public double GigacubicMeters => As(VolumeUnit.GigacubicMeter);

        /// <summary>
        ///     Get Volume in Gigaliters.
        /// </summary>
        public double Gigaliters => As(VolumeUnit.Gigaliter);

        /// <summary>
        ///     Get Volume in HectocubicFeet.
        /// </summary>
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Get Volume in HectocubicMeters.
        /// </summary>
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Get Volume in Hectoliters.
        /// </summary>
        public double Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Get Volume in ImperialBeerBarrels.
        /// </summary>
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Get Volume in ImperialGallons.
        /// </summary>
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Get Volume in ImperialOunces.
        /// </summary>
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Get Volume in ImperialPints.
        /// </summary>
        public double ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Get Volume in KilocubicFeet.
        /// </summary>
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Get Volume in KilocubicMeters.
        /// </summary>
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Get Volume in KiloimperialGallons.
        /// </summary>
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Get Volume in Kiloliters.
        /// </summary>
        public double Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Get Volume in KilousGallons.
        /// </summary>
        public double KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Get Volume in Liters.
        /// </summary>
        public double Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Get Volume in MegacubicFeet.
        /// </summary>
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Get Volume in MegacubicMeters.
        /// </summary>
        public double MegacubicMeters => As(VolumeUnit.MegacubicMeter);

        /// <summary>
        ///     Get Volume in MegaimperialGallons.
        /// </summary>
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Get Volume in Megaliters.
        /// </summary>
        public double Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Get Volume in MegausGallons.
        /// </summary>
        public double MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Get Volume in MetricCups.
        /// </summary>
        public double MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Get Volume in MetricTeaspoons.
        /// </summary>
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Get Volume in MicrocubicFeet.
        /// </summary>
        public double MicrocubicFeet => As(VolumeUnit.MicrocubicFoot);

        /// <summary>
        ///     Get Volume in MicrocubicMeters.
        /// </summary>
        public double MicrocubicMeters => As(VolumeUnit.MicrocubicMeter);

        /// <summary>
        ///     Get Volume in Microliters.
        /// </summary>
        public double Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Get Volume in MillicubicFeet.
        /// </summary>
        public double MillicubicFeet => As(VolumeUnit.MillicubicFoot);

        /// <summary>
        ///     Get Volume in MillicubicMeters.
        /// </summary>
        public double MillicubicMeters => As(VolumeUnit.MillicubicMeter);

        /// <summary>
        ///     Get Volume in Milliliters.
        /// </summary>
        public double Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Get Volume in NanocubicFeet.
        /// </summary>
        public double NanocubicFeet => As(VolumeUnit.NanocubicFoot);

        /// <summary>
        ///     Get Volume in NanocubicMeters.
        /// </summary>
        public double NanocubicMeters => As(VolumeUnit.NanocubicMeter);

        /// <summary>
        ///     Get Volume in Nanoliters.
        /// </summary>
        public double Nanoliters => As(VolumeUnit.Nanoliter);

        /// <summary>
        ///     Get Volume in OilBarrels.
        /// </summary>
        public double OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Get Volume in PetacubicFeet.
        /// </summary>
        public double PetacubicFeet => As(VolumeUnit.PetacubicFoot);

        /// <summary>
        ///     Get Volume in PetacubicMeters.
        /// </summary>
        public double PetacubicMeters => As(VolumeUnit.PetacubicMeter);

        /// <summary>
        ///     Get Volume in Petaliters.
        /// </summary>
        public double Petaliters => As(VolumeUnit.Petaliter);

        /// <summary>
        ///     Get Volume in PicocubicFeet.
        /// </summary>
        public double PicocubicFeet => As(VolumeUnit.PicocubicFoot);

        /// <summary>
        ///     Get Volume in PicocubicMeters.
        /// </summary>
        public double PicocubicMeters => As(VolumeUnit.PicocubicMeter);

        /// <summary>
        ///     Get Volume in Picoliters.
        /// </summary>
        public double Picoliters => As(VolumeUnit.Picoliter);

        /// <summary>
        ///     Get Volume in QutracubicFeet.
        /// </summary>
        public double QutracubicFeet => As(VolumeUnit.QutracubicFoot);

        /// <summary>
        ///     Get Volume in QutracubicMeters.
        /// </summary>
        public double QutracubicMeters => As(VolumeUnit.QutracubicMeter);

        /// <summary>
        ///     Get Volume in Qutraliters.
        /// </summary>
        public double Qutraliters => As(VolumeUnit.Qutraliter);

        /// <summary>
        ///     Get Volume in TeracubicFeet.
        /// </summary>
        public double TeracubicFeet => As(VolumeUnit.TeracubicFoot);

        /// <summary>
        ///     Get Volume in TeracubicMeters.
        /// </summary>
        public double TeracubicMeters => As(VolumeUnit.TeracubicMeter);

        /// <summary>
        ///     Get Volume in Teraliters.
        /// </summary>
        public double Teraliters => As(VolumeUnit.Teraliter);

        /// <summary>
        ///     Get Volume in UkTablespoons.
        /// </summary>
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Get Volume in UsBeerBarrels.
        /// </summary>
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Get Volume in UsCustomaryCups.
        /// </summary>
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Get Volume in UsGallons.
        /// </summary>
        public double UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Get Volume in UsLegalCups.
        /// </summary>
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Get Volume in UsOunces.
        /// </summary>
        public double UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Get Volume in UsPints.
        /// </summary>
        public double UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Get Volume in UsQuarts.
        /// </summary>
        public double UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Get Volume in UsTablespoons.
        /// </summary>
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Get Volume in UsTeaspoons.
        /// </summary>
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        /// <summary>
        ///     Get Volume in VettacubicFeet.
        /// </summary>
        public double VettacubicFeet => As(VolumeUnit.VettacubicFoot);

        /// <summary>
        ///     Get Volume in VettacubicMeters.
        /// </summary>
        public double VettacubicMeters => As(VolumeUnit.VettacubicMeter);

        /// <summary>
        ///     Get Volume in Vettaliters.
        /// </summary>
        public double Vettaliters => As(VolumeUnit.Vettaliter);

        /// <summary>
        ///     Get Volume in YottacubicFeet.
        /// </summary>
        public double YottacubicFeet => As(VolumeUnit.YottacubicFoot);

        /// <summary>
        ///     Get Volume in YottacubicMeters.
        /// </summary>
        public double YottacubicMeters => As(VolumeUnit.YottacubicMeter);

        /// <summary>
        ///     Get Volume in Yottaliters.
        /// </summary>
        public double Yottaliters => As(VolumeUnit.Yottaliter);

        /// <summary>
        ///     Get Volume in ZettacubicFeet.
        /// </summary>
        public double ZettacubicFeet => As(VolumeUnit.ZettacubicFoot);

        /// <summary>
        ///     Get Volume in ZettacubicMeters.
        /// </summary>
        public double ZettacubicMeters => As(VolumeUnit.ZettacubicMeter);

        /// <summary>
        ///     Get Volume in Zettaliters.
        /// </summary>
        public double Zettaliters => As(VolumeUnit.Zettaliter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Volume from AcreFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAcreFeet(double acrefeet)
        {
            double value = (double) acrefeet;
            return new Volume(value, VolumeUnit.AcreFoot);
        }
        /// <summary>
        ///     Get Volume from AuTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAuTablespoons(double autablespoons)
        {
            double value = (double) autablespoons;
            return new Volume(value, VolumeUnit.AuTablespoon);
        }
        /// <summary>
        ///     Get Volume from CenticubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCenticubicFeet(double centicubicfeet)
        {
            double value = (double) centicubicfeet;
            return new Volume(value, VolumeUnit.CenticubicFoot);
        }
        /// <summary>
        ///     Get Volume from CenticubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCenticubicMeters(double centicubicmeters)
        {
            double value = (double) centicubicmeters;
            return new Volume(value, VolumeUnit.CenticubicMeter);
        }
        /// <summary>
        ///     Get Volume from Centiliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCentiliters(double centiliters)
        {
            double value = (double) centiliters;
            return new Volume(value, VolumeUnit.Centiliter);
        }
        /// <summary>
        ///     Get Volume from CubicCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicCentimeters(double cubiccentimeters)
        {
            double value = (double) cubiccentimeters;
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }
        /// <summary>
        ///     Get Volume from CubicDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicDecimeters(double cubicdecimeters)
        {
            double value = (double) cubicdecimeters;
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }
        /// <summary>
        ///     Get Volume from CubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicFeet(double cubicfeet)
        {
            double value = (double) cubicfeet;
            return new Volume(value, VolumeUnit.CubicFoot);
        }
        /// <summary>
        ///     Get Volume from CubicHectometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicHectometers(double cubichectometers)
        {
            double value = (double) cubichectometers;
            return new Volume(value, VolumeUnit.CubicHectometer);
        }
        /// <summary>
        ///     Get Volume from CubicInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicInches(double cubicinches)
        {
            double value = (double) cubicinches;
            return new Volume(value, VolumeUnit.CubicInch);
        }
        /// <summary>
        ///     Get Volume from CubicKilometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicKilometers(double cubickilometers)
        {
            double value = (double) cubickilometers;
            return new Volume(value, VolumeUnit.CubicKilometer);
        }
        /// <summary>
        ///     Get Volume from CubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMeters(double cubicmeters)
        {
            double value = (double) cubicmeters;
            return new Volume(value, VolumeUnit.CubicMeter);
        }
        /// <summary>
        ///     Get Volume from CubicMicrometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMicrometers(double cubicmicrometers)
        {
            double value = (double) cubicmicrometers;
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }
        /// <summary>
        ///     Get Volume from CubicMiles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMiles(double cubicmiles)
        {
            double value = (double) cubicmiles;
            return new Volume(value, VolumeUnit.CubicMile);
        }
        /// <summary>
        ///     Get Volume from CubicMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMillimeters(double cubicmillimeters)
        {
            double value = (double) cubicmillimeters;
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }
        /// <summary>
        ///     Get Volume from CubicYards.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicYards(double cubicyards)
        {
            double value = (double) cubicyards;
            return new Volume(value, VolumeUnit.CubicYard);
        }
        /// <summary>
        ///     Get Volume from DecacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecacubicFeet(double decacubicfeet)
        {
            double value = (double) decacubicfeet;
            return new Volume(value, VolumeUnit.DecacubicFoot);
        }
        /// <summary>
        ///     Get Volume from DecacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecacubicMeters(double decacubicmeters)
        {
            double value = (double) decacubicmeters;
            return new Volume(value, VolumeUnit.DecacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Decaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecaliters(double decaliters)
        {
            double value = (double) decaliters;
            return new Volume(value, VolumeUnit.Decaliter);
        }
        /// <summary>
        ///     Get Volume from DecicubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecicubicFeet(double decicubicfeet)
        {
            double value = (double) decicubicfeet;
            return new Volume(value, VolumeUnit.DecicubicFoot);
        }
        /// <summary>
        ///     Get Volume from DecicubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecicubicMeters(double decicubicmeters)
        {
            double value = (double) decicubicmeters;
            return new Volume(value, VolumeUnit.DecicubicMeter);
        }
        /// <summary>
        ///     Get Volume from Deciliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciliters(double deciliters)
        {
            double value = (double) deciliters;
            return new Volume(value, VolumeUnit.Deciliter);
        }
        /// <summary>
        ///     Get Volume from ExacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromExacubicFeet(double exacubicfeet)
        {
            double value = (double) exacubicfeet;
            return new Volume(value, VolumeUnit.ExacubicFoot);
        }
        /// <summary>
        ///     Get Volume from ExacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromExacubicMeters(double exacubicmeters)
        {
            double value = (double) exacubicmeters;
            return new Volume(value, VolumeUnit.ExacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Exaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromExaliters(double exaliters)
        {
            double value = (double) exaliters;
            return new Volume(value, VolumeUnit.Exaliter);
        }
        /// <summary>
        ///     Get Volume from FemtocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromFemtocubicFeet(double femtocubicfeet)
        {
            double value = (double) femtocubicfeet;
            return new Volume(value, VolumeUnit.FemtocubicFoot);
        }
        /// <summary>
        ///     Get Volume from FemtocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromFemtocubicMeters(double femtocubicmeters)
        {
            double value = (double) femtocubicmeters;
            return new Volume(value, VolumeUnit.FemtocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Femtoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromFemtoliters(double femtoliters)
        {
            double value = (double) femtoliters;
            return new Volume(value, VolumeUnit.Femtoliter);
        }
        /// <summary>
        ///     Get Volume from GigacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromGigacubicFeet(double gigacubicfeet)
        {
            double value = (double) gigacubicfeet;
            return new Volume(value, VolumeUnit.GigacubicFoot);
        }
        /// <summary>
        ///     Get Volume from GigacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromGigacubicMeters(double gigacubicmeters)
        {
            double value = (double) gigacubicmeters;
            return new Volume(value, VolumeUnit.GigacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Gigaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromGigaliters(double gigaliters)
        {
            double value = (double) gigaliters;
            return new Volume(value, VolumeUnit.Gigaliter);
        }
        /// <summary>
        ///     Get Volume from HectocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicFeet(double hectocubicfeet)
        {
            double value = (double) hectocubicfeet;
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }
        /// <summary>
        ///     Get Volume from HectocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicMeters(double hectocubicmeters)
        {
            double value = (double) hectocubicmeters;
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Hectoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectoliters(double hectoliters)
        {
            double value = (double) hectoliters;
            return new Volume(value, VolumeUnit.Hectoliter);
        }
        /// <summary>
        ///     Get Volume from ImperialBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialBeerBarrels(double imperialbeerbarrels)
        {
            double value = (double) imperialbeerbarrels;
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }
        /// <summary>
        ///     Get Volume from ImperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialGallons(double imperialgallons)
        {
            double value = (double) imperialgallons;
            return new Volume(value, VolumeUnit.ImperialGallon);
        }
        /// <summary>
        ///     Get Volume from ImperialOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialOunces(double imperialounces)
        {
            double value = (double) imperialounces;
            return new Volume(value, VolumeUnit.ImperialOunce);
        }
        /// <summary>
        ///     Get Volume from ImperialPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialPints(double imperialpints)
        {
            double value = (double) imperialpints;
            return new Volume(value, VolumeUnit.ImperialPint);
        }
        /// <summary>
        ///     Get Volume from KilocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicFeet(double kilocubicfeet)
        {
            double value = (double) kilocubicfeet;
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }
        /// <summary>
        ///     Get Volume from KilocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicMeters(double kilocubicmeters)
        {
            double value = (double) kilocubicmeters;
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }
        /// <summary>
        ///     Get Volume from KiloimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloimperialGallons(double kiloimperialgallons)
        {
            double value = (double) kiloimperialgallons;
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }
        /// <summary>
        ///     Get Volume from Kiloliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloliters(double kiloliters)
        {
            double value = (double) kiloliters;
            return new Volume(value, VolumeUnit.Kiloliter);
        }
        /// <summary>
        ///     Get Volume from KilousGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilousGallons(double kilousgallons)
        {
            double value = (double) kilousgallons;
            return new Volume(value, VolumeUnit.KilousGallon);
        }
        /// <summary>
        ///     Get Volume from Liters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromLiters(double liters)
        {
            double value = (double) liters;
            return new Volume(value, VolumeUnit.Liter);
        }
        /// <summary>
        ///     Get Volume from MegacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegacubicFeet(double megacubicfeet)
        {
            double value = (double) megacubicfeet;
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }
        /// <summary>
        ///     Get Volume from MegacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegacubicMeters(double megacubicmeters)
        {
            double value = (double) megacubicmeters;
            return new Volume(value, VolumeUnit.MegacubicMeter);
        }
        /// <summary>
        ///     Get Volume from MegaimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaimperialGallons(double megaimperialgallons)
        {
            double value = (double) megaimperialgallons;
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }
        /// <summary>
        ///     Get Volume from Megaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaliters(double megaliters)
        {
            double value = (double) megaliters;
            return new Volume(value, VolumeUnit.Megaliter);
        }
        /// <summary>
        ///     Get Volume from MegausGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegausGallons(double megausgallons)
        {
            double value = (double) megausgallons;
            return new Volume(value, VolumeUnit.MegausGallon);
        }
        /// <summary>
        ///     Get Volume from MetricCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricCups(double metriccups)
        {
            double value = (double) metriccups;
            return new Volume(value, VolumeUnit.MetricCup);
        }
        /// <summary>
        ///     Get Volume from MetricTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricTeaspoons(double metricteaspoons)
        {
            double value = (double) metricteaspoons;
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }
        /// <summary>
        ///     Get Volume from MicrocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicrocubicFeet(double microcubicfeet)
        {
            double value = (double) microcubicfeet;
            return new Volume(value, VolumeUnit.MicrocubicFoot);
        }
        /// <summary>
        ///     Get Volume from MicrocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicrocubicMeters(double microcubicmeters)
        {
            double value = (double) microcubicmeters;
            return new Volume(value, VolumeUnit.MicrocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Microliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicroliters(double microliters)
        {
            double value = (double) microliters;
            return new Volume(value, VolumeUnit.Microliter);
        }
        /// <summary>
        ///     Get Volume from MillicubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMillicubicFeet(double millicubicfeet)
        {
            double value = (double) millicubicfeet;
            return new Volume(value, VolumeUnit.MillicubicFoot);
        }
        /// <summary>
        ///     Get Volume from MillicubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMillicubicMeters(double millicubicmeters)
        {
            double value = (double) millicubicmeters;
            return new Volume(value, VolumeUnit.MillicubicMeter);
        }
        /// <summary>
        ///     Get Volume from Milliliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMilliliters(double milliliters)
        {
            double value = (double) milliliters;
            return new Volume(value, VolumeUnit.Milliliter);
        }
        /// <summary>
        ///     Get Volume from NanocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromNanocubicFeet(double nanocubicfeet)
        {
            double value = (double) nanocubicfeet;
            return new Volume(value, VolumeUnit.NanocubicFoot);
        }
        /// <summary>
        ///     Get Volume from NanocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromNanocubicMeters(double nanocubicmeters)
        {
            double value = (double) nanocubicmeters;
            return new Volume(value, VolumeUnit.NanocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Nanoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromNanoliters(double nanoliters)
        {
            double value = (double) nanoliters;
            return new Volume(value, VolumeUnit.Nanoliter);
        }
        /// <summary>
        ///     Get Volume from OilBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromOilBarrels(double oilbarrels)
        {
            double value = (double) oilbarrels;
            return new Volume(value, VolumeUnit.OilBarrel);
        }
        /// <summary>
        ///     Get Volume from PetacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromPetacubicFeet(double petacubicfeet)
        {
            double value = (double) petacubicfeet;
            return new Volume(value, VolumeUnit.PetacubicFoot);
        }
        /// <summary>
        ///     Get Volume from PetacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromPetacubicMeters(double petacubicmeters)
        {
            double value = (double) petacubicmeters;
            return new Volume(value, VolumeUnit.PetacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Petaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromPetaliters(double petaliters)
        {
            double value = (double) petaliters;
            return new Volume(value, VolumeUnit.Petaliter);
        }
        /// <summary>
        ///     Get Volume from PicocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromPicocubicFeet(double picocubicfeet)
        {
            double value = (double) picocubicfeet;
            return new Volume(value, VolumeUnit.PicocubicFoot);
        }
        /// <summary>
        ///     Get Volume from PicocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromPicocubicMeters(double picocubicmeters)
        {
            double value = (double) picocubicmeters;
            return new Volume(value, VolumeUnit.PicocubicMeter);
        }
        /// <summary>
        ///     Get Volume from Picoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromPicoliters(double picoliters)
        {
            double value = (double) picoliters;
            return new Volume(value, VolumeUnit.Picoliter);
        }
        /// <summary>
        ///     Get Volume from QutracubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromQutracubicFeet(double qutracubicfeet)
        {
            double value = (double) qutracubicfeet;
            return new Volume(value, VolumeUnit.QutracubicFoot);
        }
        /// <summary>
        ///     Get Volume from QutracubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromQutracubicMeters(double qutracubicmeters)
        {
            double value = (double) qutracubicmeters;
            return new Volume(value, VolumeUnit.QutracubicMeter);
        }
        /// <summary>
        ///     Get Volume from Qutraliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromQutraliters(double qutraliters)
        {
            double value = (double) qutraliters;
            return new Volume(value, VolumeUnit.Qutraliter);
        }
        /// <summary>
        ///     Get Volume from TeracubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromTeracubicFeet(double teracubicfeet)
        {
            double value = (double) teracubicfeet;
            return new Volume(value, VolumeUnit.TeracubicFoot);
        }
        /// <summary>
        ///     Get Volume from TeracubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromTeracubicMeters(double teracubicmeters)
        {
            double value = (double) teracubicmeters;
            return new Volume(value, VolumeUnit.TeracubicMeter);
        }
        /// <summary>
        ///     Get Volume from Teraliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromTeraliters(double teraliters)
        {
            double value = (double) teraliters;
            return new Volume(value, VolumeUnit.Teraliter);
        }
        /// <summary>
        ///     Get Volume from UkTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUkTablespoons(double uktablespoons)
        {
            double value = (double) uktablespoons;
            return new Volume(value, VolumeUnit.UkTablespoon);
        }
        /// <summary>
        ///     Get Volume from UsBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsBeerBarrels(double usbeerbarrels)
        {
            double value = (double) usbeerbarrels;
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }
        /// <summary>
        ///     Get Volume from UsCustomaryCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsCustomaryCups(double uscustomarycups)
        {
            double value = (double) uscustomarycups;
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }
        /// <summary>
        ///     Get Volume from UsGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsGallons(double usgallons)
        {
            double value = (double) usgallons;
            return new Volume(value, VolumeUnit.UsGallon);
        }
        /// <summary>
        ///     Get Volume from UsLegalCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsLegalCups(double uslegalcups)
        {
            double value = (double) uslegalcups;
            return new Volume(value, VolumeUnit.UsLegalCup);
        }
        /// <summary>
        ///     Get Volume from UsOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsOunces(double usounces)
        {
            double value = (double) usounces;
            return new Volume(value, VolumeUnit.UsOunce);
        }
        /// <summary>
        ///     Get Volume from UsPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsPints(double uspints)
        {
            double value = (double) uspints;
            return new Volume(value, VolumeUnit.UsPint);
        }
        /// <summary>
        ///     Get Volume from UsQuarts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsQuarts(double usquarts)
        {
            double value = (double) usquarts;
            return new Volume(value, VolumeUnit.UsQuart);
        }
        /// <summary>
        ///     Get Volume from UsTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTablespoons(double ustablespoons)
        {
            double value = (double) ustablespoons;
            return new Volume(value, VolumeUnit.UsTablespoon);
        }
        /// <summary>
        ///     Get Volume from UsTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTeaspoons(double usteaspoons)
        {
            double value = (double) usteaspoons;
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }
        /// <summary>
        ///     Get Volume from VettacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromVettacubicFeet(double vettacubicfeet)
        {
            double value = (double) vettacubicfeet;
            return new Volume(value, VolumeUnit.VettacubicFoot);
        }
        /// <summary>
        ///     Get Volume from VettacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromVettacubicMeters(double vettacubicmeters)
        {
            double value = (double) vettacubicmeters;
            return new Volume(value, VolumeUnit.VettacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Vettaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromVettaliters(double vettaliters)
        {
            double value = (double) vettaliters;
            return new Volume(value, VolumeUnit.Vettaliter);
        }
        /// <summary>
        ///     Get Volume from YottacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromYottacubicFeet(double yottacubicfeet)
        {
            double value = (double) yottacubicfeet;
            return new Volume(value, VolumeUnit.YottacubicFoot);
        }
        /// <summary>
        ///     Get Volume from YottacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromYottacubicMeters(double yottacubicmeters)
        {
            double value = (double) yottacubicmeters;
            return new Volume(value, VolumeUnit.YottacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Yottaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromYottaliters(double yottaliters)
        {
            double value = (double) yottaliters;
            return new Volume(value, VolumeUnit.Yottaliter);
        }
        /// <summary>
        ///     Get Volume from ZettacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromZettacubicFeet(double zettacubicfeet)
        {
            double value = (double) zettacubicfeet;
            return new Volume(value, VolumeUnit.ZettacubicFoot);
        }
        /// <summary>
        ///     Get Volume from ZettacubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromZettacubicMeters(double zettacubicmeters)
        {
            double value = (double) zettacubicmeters;
            return new Volume(value, VolumeUnit.ZettacubicMeter);
        }
        /// <summary>
        ///     Get Volume from Zettaliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromZettaliters(double zettaliters)
        {
            double value = (double) zettaliters;
            return new Volume(value, VolumeUnit.Zettaliter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Volume From(double value, VolumeUnit fromUnit)
        {
            return new Volume((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Volume Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Volume, VolumeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Volume result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Volume, VolumeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<VolumeUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out VolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out VolumeUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<VolumeUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Volume objVolume)) throw new ArgumentException("Expected type Volume.", nameof(obj));

            return CompareTo(objVolume);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Volume other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Volume objVolume))
                return false;

            return Equals(objVolume);
        }

        public bool Equals(Volume other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Volume within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Volume other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((VolumeUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Volume(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumeUnit.AcreFoot: return _value/0.000810714;
                case VolumeUnit.AuTablespoon: return _value*2e-5;
                case VolumeUnit.CenticubicFoot: return (_value*0.0283168) * 1e-2d;
                case VolumeUnit.CenticubicMeter: return (_value) * 1e-2d;
                case VolumeUnit.Centiliter: return (_value/1e3) * 1e-2d;
                case VolumeUnit.CubicCentimeter: return _value/1e6;
                case VolumeUnit.CubicDecimeter: return _value/1e3;
                case VolumeUnit.CubicFoot: return _value*0.0283168;
                case VolumeUnit.CubicHectometer: return _value*1e6;
                case VolumeUnit.CubicInch: return _value*1.6387*1e-5;
                case VolumeUnit.CubicKilometer: return _value*1e9;
                case VolumeUnit.CubicMeter: return _value;
                case VolumeUnit.CubicMicrometer: return _value/1e18;
                case VolumeUnit.CubicMile: return _value*4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return _value/1e9;
                case VolumeUnit.CubicYard: return _value*0.764554858;
                case VolumeUnit.DecacubicFoot: return (_value*0.0283168) * 1e1d;
                case VolumeUnit.DecacubicMeter: return (_value) * 1e1d;
                case VolumeUnit.Decaliter: return (_value/1e3) * 1e1d;
                case VolumeUnit.DecicubicFoot: return (_value*0.0283168) * 1e-1d;
                case VolumeUnit.DecicubicMeter: return (_value) * 1e-1d;
                case VolumeUnit.Deciliter: return (_value/1e3) * 1e-1d;
                case VolumeUnit.ExacubicFoot: return (_value*0.0283168) * 1e18d;
                case VolumeUnit.ExacubicMeter: return (_value) * 1e18d;
                case VolumeUnit.Exaliter: return (_value/1e3) * 1e18d;
                case VolumeUnit.FemtocubicFoot: return (_value*0.0283168) * 1e-15d;
                case VolumeUnit.FemtocubicMeter: return (_value) * 1e-15d;
                case VolumeUnit.Femtoliter: return (_value/1e3) * 1e-15d;
                case VolumeUnit.GigacubicFoot: return (_value*0.0283168) * 1e9d;
                case VolumeUnit.GigacubicMeter: return (_value) * 1e9d;
                case VolumeUnit.Gigaliter: return (_value/1e3) * 1e9d;
                case VolumeUnit.HectocubicFoot: return (_value*0.0283168) * 1e2d;
                case VolumeUnit.HectocubicMeter: return (_value) * 1e2d;
                case VolumeUnit.Hectoliter: return (_value/1e3) * 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return _value*0.16365924;
                case VolumeUnit.ImperialGallon: return _value*0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return _value*2.8413062499962901241875439064617e-5;
                case VolumeUnit.ImperialPint: return _value * 5.6826125e-4;
                case VolumeUnit.KilocubicFoot: return (_value*0.0283168) * 1e3d;
                case VolumeUnit.KilocubicMeter: return (_value) * 1e3d;
                case VolumeUnit.KiloimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e3d;
                case VolumeUnit.Kiloliter: return (_value/1e3) * 1e3d;
                case VolumeUnit.KilousGallon: return (_value*0.00378541) * 1e3d;
                case VolumeUnit.Liter: return _value/1e3;
                case VolumeUnit.MegacubicFoot: return (_value*0.0283168) * 1e6d;
                case VolumeUnit.MegacubicMeter: return (_value) * 1e6d;
                case VolumeUnit.MegaimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e6d;
                case VolumeUnit.Megaliter: return (_value/1e3) * 1e6d;
                case VolumeUnit.MegausGallon: return (_value*0.00378541) * 1e6d;
                case VolumeUnit.MetricCup: return _value*0.00025;
                case VolumeUnit.MetricTeaspoon: return _value*0.5e-5;
                case VolumeUnit.MicrocubicFoot: return (_value*0.0283168) * 1e-6d;
                case VolumeUnit.MicrocubicMeter: return (_value) * 1e-6d;
                case VolumeUnit.Microliter: return (_value/1e3) * 1e-6d;
                case VolumeUnit.MillicubicFoot: return (_value*0.0283168) * 1e-3d;
                case VolumeUnit.MillicubicMeter: return (_value) * 1e-3d;
                case VolumeUnit.Milliliter: return (_value/1e3) * 1e-3d;
                case VolumeUnit.NanocubicFoot: return (_value*0.0283168) * 1e-9d;
                case VolumeUnit.NanocubicMeter: return (_value) * 1e-9d;
                case VolumeUnit.Nanoliter: return (_value/1e3) * 1e-9d;
                case VolumeUnit.OilBarrel: return _value*0.158987294928;
                case VolumeUnit.PetacubicFoot: return (_value*0.0283168) * 1e15d;
                case VolumeUnit.PetacubicMeter: return (_value) * 1e15d;
                case VolumeUnit.Petaliter: return (_value/1e3) * 1e15d;
                case VolumeUnit.PicocubicFoot: return (_value*0.0283168) * 1e-12d;
                case VolumeUnit.PicocubicMeter: return (_value) * 1e-12d;
                case VolumeUnit.Picoliter: return (_value/1e3) * 1e-12d;
                case VolumeUnit.QutracubicFoot: return (_value*0.0283168) * 1e27d;
                case VolumeUnit.QutracubicMeter: return (_value) * 1e27d;
                case VolumeUnit.Qutraliter: return (_value/1e3) * 1e27d;
                case VolumeUnit.TeracubicFoot: return (_value*0.0283168) * 1e12d;
                case VolumeUnit.TeracubicMeter: return (_value) * 1e12d;
                case VolumeUnit.Teraliter: return (_value/1e3) * 1e12d;
                case VolumeUnit.UkTablespoon: return _value*1.5e-5;
                case VolumeUnit.UsBeerBarrel: return _value*0.1173477658;
                case VolumeUnit.UsCustomaryCup: return _value*0.0002365882365;
                case VolumeUnit.UsGallon: return _value*0.00378541;
                case VolumeUnit.UsLegalCup: return _value*0.00024;
                case VolumeUnit.UsOunce: return _value*2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return _value*4.73176473e-4;
                case VolumeUnit.UsQuart: return _value*9.46352946e-4;
                case VolumeUnit.UsTablespoon: return _value*1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return _value*4.92892159375e-6;
                case VolumeUnit.VettacubicFoot: return (_value*0.0283168) * 1e30d;
                case VolumeUnit.VettacubicMeter: return (_value) * 1e30d;
                case VolumeUnit.Vettaliter: return (_value/1e3) * 1e30d;
                case VolumeUnit.YottacubicFoot: return (_value*0.0283168) * 1e24d;
                case VolumeUnit.YottacubicMeter: return (_value) * 1e24d;
                case VolumeUnit.Yottaliter: return (_value/1e3) * 1e24d;
                case VolumeUnit.ZettacubicFoot: return (_value*0.0283168) * 1e21d;
                case VolumeUnit.ZettacubicMeter: return (_value) * 1e21d;
                case VolumeUnit.Zettaliter: return (_value/1e3) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(VolumeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumeUnit.AcreFoot: return baseUnitValue*0.000810714;
                case VolumeUnit.AuTablespoon: return baseUnitValue/2e-5;
                case VolumeUnit.CenticubicFoot: return (baseUnitValue/0.0283168) / 1e-2d;
                case VolumeUnit.CenticubicMeter: return (baseUnitValue) / 1e-2d;
                case VolumeUnit.Centiliter: return (baseUnitValue*1e3) / 1e-2d;
                case VolumeUnit.CubicCentimeter: return baseUnitValue*1e6;
                case VolumeUnit.CubicDecimeter: return baseUnitValue*1e3;
                case VolumeUnit.CubicFoot: return baseUnitValue/0.0283168;
                case VolumeUnit.CubicHectometer: return baseUnitValue/1e6;
                case VolumeUnit.CubicInch: return baseUnitValue/(1.6387*1e-5);
                case VolumeUnit.CubicKilometer: return baseUnitValue/1e9;
                case VolumeUnit.CubicMeter: return baseUnitValue;
                case VolumeUnit.CubicMicrometer: return baseUnitValue*1e18;
                case VolumeUnit.CubicMile: return baseUnitValue/4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return baseUnitValue*1e9;
                case VolumeUnit.CubicYard: return baseUnitValue/0.764554858;
                case VolumeUnit.DecacubicFoot: return (baseUnitValue/0.0283168) / 1e1d;
                case VolumeUnit.DecacubicMeter: return (baseUnitValue) / 1e1d;
                case VolumeUnit.Decaliter: return (baseUnitValue*1e3) / 1e1d;
                case VolumeUnit.DecicubicFoot: return (baseUnitValue/0.0283168) / 1e-1d;
                case VolumeUnit.DecicubicMeter: return (baseUnitValue) / 1e-1d;
                case VolumeUnit.Deciliter: return (baseUnitValue*1e3) / 1e-1d;
                case VolumeUnit.ExacubicFoot: return (baseUnitValue/0.0283168) / 1e18d;
                case VolumeUnit.ExacubicMeter: return (baseUnitValue) / 1e18d;
                case VolumeUnit.Exaliter: return (baseUnitValue*1e3) / 1e18d;
                case VolumeUnit.FemtocubicFoot: return (baseUnitValue/0.0283168) / 1e-15d;
                case VolumeUnit.FemtocubicMeter: return (baseUnitValue) / 1e-15d;
                case VolumeUnit.Femtoliter: return (baseUnitValue*1e3) / 1e-15d;
                case VolumeUnit.GigacubicFoot: return (baseUnitValue/0.0283168) / 1e9d;
                case VolumeUnit.GigacubicMeter: return (baseUnitValue) / 1e9d;
                case VolumeUnit.Gigaliter: return (baseUnitValue*1e3) / 1e9d;
                case VolumeUnit.HectocubicFoot: return (baseUnitValue/0.0283168) / 1e2d;
                case VolumeUnit.HectocubicMeter: return (baseUnitValue) / 1e2d;
                case VolumeUnit.Hectoliter: return (baseUnitValue*1e3) / 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return baseUnitValue/0.16365924;
                case VolumeUnit.ImperialGallon: return baseUnitValue/0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return baseUnitValue/2.8413062499962901241875439064617e-5;
                case VolumeUnit.ImperialPint: return baseUnitValue / 5.6826125e-4;
                case VolumeUnit.KilocubicFoot: return (baseUnitValue/0.0283168) / 1e3d;
                case VolumeUnit.KilocubicMeter: return (baseUnitValue) / 1e3d;
                case VolumeUnit.KiloimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e3d;
                case VolumeUnit.Kiloliter: return (baseUnitValue*1e3) / 1e3d;
                case VolumeUnit.KilousGallon: return (baseUnitValue/0.00378541) / 1e3d;
                case VolumeUnit.Liter: return baseUnitValue*1e3;
                case VolumeUnit.MegacubicFoot: return (baseUnitValue/0.0283168) / 1e6d;
                case VolumeUnit.MegacubicMeter: return (baseUnitValue) / 1e6d;
                case VolumeUnit.MegaimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e6d;
                case VolumeUnit.Megaliter: return (baseUnitValue*1e3) / 1e6d;
                case VolumeUnit.MegausGallon: return (baseUnitValue/0.00378541) / 1e6d;
                case VolumeUnit.MetricCup: return baseUnitValue/0.00025;
                case VolumeUnit.MetricTeaspoon: return baseUnitValue/0.5e-5;
                case VolumeUnit.MicrocubicFoot: return (baseUnitValue/0.0283168) / 1e-6d;
                case VolumeUnit.MicrocubicMeter: return (baseUnitValue) / 1e-6d;
                case VolumeUnit.Microliter: return (baseUnitValue*1e3) / 1e-6d;
                case VolumeUnit.MillicubicFoot: return (baseUnitValue/0.0283168) / 1e-3d;
                case VolumeUnit.MillicubicMeter: return (baseUnitValue) / 1e-3d;
                case VolumeUnit.Milliliter: return (baseUnitValue*1e3) / 1e-3d;
                case VolumeUnit.NanocubicFoot: return (baseUnitValue/0.0283168) / 1e-9d;
                case VolumeUnit.NanocubicMeter: return (baseUnitValue) / 1e-9d;
                case VolumeUnit.Nanoliter: return (baseUnitValue*1e3) / 1e-9d;
                case VolumeUnit.OilBarrel: return baseUnitValue/0.158987294928;
                case VolumeUnit.PetacubicFoot: return (baseUnitValue/0.0283168) / 1e15d;
                case VolumeUnit.PetacubicMeter: return (baseUnitValue) / 1e15d;
                case VolumeUnit.Petaliter: return (baseUnitValue*1e3) / 1e15d;
                case VolumeUnit.PicocubicFoot: return (baseUnitValue/0.0283168) / 1e-12d;
                case VolumeUnit.PicocubicMeter: return (baseUnitValue) / 1e-12d;
                case VolumeUnit.Picoliter: return (baseUnitValue*1e3) / 1e-12d;
                case VolumeUnit.QutracubicFoot: return (baseUnitValue/0.0283168) / 1e27d;
                case VolumeUnit.QutracubicMeter: return (baseUnitValue) / 1e27d;
                case VolumeUnit.Qutraliter: return (baseUnitValue*1e3) / 1e27d;
                case VolumeUnit.TeracubicFoot: return (baseUnitValue/0.0283168) / 1e12d;
                case VolumeUnit.TeracubicMeter: return (baseUnitValue) / 1e12d;
                case VolumeUnit.Teraliter: return (baseUnitValue*1e3) / 1e12d;
                case VolumeUnit.UkTablespoon: return baseUnitValue/1.5e-5;
                case VolumeUnit.UsBeerBarrel: return baseUnitValue/0.1173477658;
                case VolumeUnit.UsCustomaryCup: return baseUnitValue/0.0002365882365;
                case VolumeUnit.UsGallon: return baseUnitValue/0.00378541;
                case VolumeUnit.UsLegalCup: return baseUnitValue/0.00024;
                case VolumeUnit.UsOunce: return baseUnitValue/2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return baseUnitValue/4.73176473e-4;
                case VolumeUnit.UsQuart: return baseUnitValue/9.46352946e-4;
                case VolumeUnit.UsTablespoon: return baseUnitValue/1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return baseUnitValue/4.92892159375e-6;
                case VolumeUnit.VettacubicFoot: return (baseUnitValue/0.0283168) / 1e30d;
                case VolumeUnit.VettacubicMeter: return (baseUnitValue) / 1e30d;
                case VolumeUnit.Vettaliter: return (baseUnitValue*1e3) / 1e30d;
                case VolumeUnit.YottacubicFoot: return (baseUnitValue/0.0283168) / 1e24d;
                case VolumeUnit.YottacubicMeter: return (baseUnitValue) / 1e24d;
                case VolumeUnit.Yottaliter: return (baseUnitValue*1e3) / 1e24d;
                case VolumeUnit.ZettacubicFoot: return (baseUnitValue/0.0283168) / 1e21d;
                case VolumeUnit.ZettacubicMeter: return (baseUnitValue) / 1e21d;
                case VolumeUnit.Zettaliter: return (baseUnitValue*1e3) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
