//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Irradiation is the process by which an object is exposed to radiation. The exposure can originate from various sources, including natural sources.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Irradiation
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Irradiation : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly IrradiationUnit? _unit;

        static Irradiation()
        {
            BaseDimensions = new BaseDimensions(0, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Irradiation, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit JoulePerSquareMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Irradiation()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Irradiation(double numericValue, IrradiationUnit unit)
        {
            if(unit == IrradiationUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Irradiation, which is JoulePerSquareMeter. All conversions go via this value.
        /// </summary>
        public static IrradiationUnit BaseUnit { get; } = IrradiationUnit.JoulePerSquareMeter;

        /// <summary>
        /// Represents the largest possible value of Irradiation
        /// </summary>
        public static Irradiation MaxValue { get; } = new Irradiation(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Irradiation
        /// </summary>
        public static Irradiation MinValue { get; } = new Irradiation(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Irradiation;

        /// <summary>
        ///     All units of measurement for the Irradiation quantity.
        /// </summary>
        public static IrradiationUnit[] Units { get; } = Enum.GetValues(typeof(IrradiationUnit)).Cast<IrradiationUnit>().Except(new IrradiationUnit[]{ IrradiationUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit JoulePerSquareMeter.
        /// </summary>
        public static Irradiation Zero { get; } = new Irradiation(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public IrradiationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Irradiation.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Irradiation.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Irradiation in CentijoulesPerSquareCentimeter.
        /// </summary>
        public double CentijoulesPerSquareCentimeter => As(IrradiationUnit.CentijoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in CentijoulesPerSquareMeter.
        /// </summary>
        public double CentijoulesPerSquareMeter => As(IrradiationUnit.CentijoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in CentijoulesPerSquareMillimeter.
        /// </summary>
        public double CentijoulesPerSquareMillimeter => As(IrradiationUnit.CentijoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in CentiwattHoursPerSquareMeter.
        /// </summary>
        public double CentiwattHoursPerSquareMeter => As(IrradiationUnit.CentiwattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in DecajoulesPerSquareCentimeter.
        /// </summary>
        public double DecajoulesPerSquareCentimeter => As(IrradiationUnit.DecajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in DecajoulesPerSquareMeter.
        /// </summary>
        public double DecajoulesPerSquareMeter => As(IrradiationUnit.DecajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in DecajoulesPerSquareMillimeter.
        /// </summary>
        public double DecajoulesPerSquareMillimeter => As(IrradiationUnit.DecajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in DecawattHoursPerSquareMeter.
        /// </summary>
        public double DecawattHoursPerSquareMeter => As(IrradiationUnit.DecawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in DecijoulesPerSquareCentimeter.
        /// </summary>
        public double DecijoulesPerSquareCentimeter => As(IrradiationUnit.DecijoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in DecijoulesPerSquareMeter.
        /// </summary>
        public double DecijoulesPerSquareMeter => As(IrradiationUnit.DecijoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in DecijoulesPerSquareMillimeter.
        /// </summary>
        public double DecijoulesPerSquareMillimeter => As(IrradiationUnit.DecijoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in DeciwattHoursPerSquareMeter.
        /// </summary>
        public double DeciwattHoursPerSquareMeter => As(IrradiationUnit.DeciwattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in ExajoulesPerSquareCentimeter.
        /// </summary>
        public double ExajoulesPerSquareCentimeter => As(IrradiationUnit.ExajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in ExajoulesPerSquareMeter.
        /// </summary>
        public double ExajoulesPerSquareMeter => As(IrradiationUnit.ExajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in ExajoulesPerSquareMillimeter.
        /// </summary>
        public double ExajoulesPerSquareMillimeter => As(IrradiationUnit.ExajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in ExawattHoursPerSquareMeter.
        /// </summary>
        public double ExawattHoursPerSquareMeter => As(IrradiationUnit.ExawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in FemtojoulesPerSquareCentimeter.
        /// </summary>
        public double FemtojoulesPerSquareCentimeter => As(IrradiationUnit.FemtojoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in FemtojoulesPerSquareMeter.
        /// </summary>
        public double FemtojoulesPerSquareMeter => As(IrradiationUnit.FemtojoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in FemtojoulesPerSquareMillimeter.
        /// </summary>
        public double FemtojoulesPerSquareMillimeter => As(IrradiationUnit.FemtojoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in FemtowattHoursPerSquareMeter.
        /// </summary>
        public double FemtowattHoursPerSquareMeter => As(IrradiationUnit.FemtowattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in GigajoulesPerSquareCentimeter.
        /// </summary>
        public double GigajoulesPerSquareCentimeter => As(IrradiationUnit.GigajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in GigajoulesPerSquareMeter.
        /// </summary>
        public double GigajoulesPerSquareMeter => As(IrradiationUnit.GigajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in GigajoulesPerSquareMillimeter.
        /// </summary>
        public double GigajoulesPerSquareMillimeter => As(IrradiationUnit.GigajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in GigawattHoursPerSquareMeter.
        /// </summary>
        public double GigawattHoursPerSquareMeter => As(IrradiationUnit.GigawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in HectojoulesPerSquareCentimeter.
        /// </summary>
        public double HectojoulesPerSquareCentimeter => As(IrradiationUnit.HectojoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in HectojoulesPerSquareMeter.
        /// </summary>
        public double HectojoulesPerSquareMeter => As(IrradiationUnit.HectojoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in HectojoulesPerSquareMillimeter.
        /// </summary>
        public double HectojoulesPerSquareMillimeter => As(IrradiationUnit.HectojoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in HectowattHoursPerSquareMeter.
        /// </summary>
        public double HectowattHoursPerSquareMeter => As(IrradiationUnit.HectowattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in JoulesPerSquareCentimeter.
        /// </summary>
        public double JoulesPerSquareCentimeter => As(IrradiationUnit.JoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in JoulesPerSquareMeter.
        /// </summary>
        public double JoulesPerSquareMeter => As(IrradiationUnit.JoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in JoulesPerSquareMillimeter.
        /// </summary>
        public double JoulesPerSquareMillimeter => As(IrradiationUnit.JoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in KilojoulesPerSquareCentimeter.
        /// </summary>
        public double KilojoulesPerSquareCentimeter => As(IrradiationUnit.KilojoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in KilojoulesPerSquareMeter.
        /// </summary>
        public double KilojoulesPerSquareMeter => As(IrradiationUnit.KilojoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in KilojoulesPerSquareMillimeter.
        /// </summary>
        public double KilojoulesPerSquareMillimeter => As(IrradiationUnit.KilojoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in KilowattHoursPerSquareMeter.
        /// </summary>
        public double KilowattHoursPerSquareMeter => As(IrradiationUnit.KilowattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in MegajoulesPerSquareCentimeter.
        /// </summary>
        public double MegajoulesPerSquareCentimeter => As(IrradiationUnit.MegajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in MegajoulesPerSquareMeter.
        /// </summary>
        public double MegajoulesPerSquareMeter => As(IrradiationUnit.MegajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in MegajoulesPerSquareMillimeter.
        /// </summary>
        public double MegajoulesPerSquareMillimeter => As(IrradiationUnit.MegajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in MegawattHoursPerSquareMeter.
        /// </summary>
        public double MegawattHoursPerSquareMeter => As(IrradiationUnit.MegawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in MicrojoulesPerSquareCentimeter.
        /// </summary>
        public double MicrojoulesPerSquareCentimeter => As(IrradiationUnit.MicrojoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in MicrojoulesPerSquareMeter.
        /// </summary>
        public double MicrojoulesPerSquareMeter => As(IrradiationUnit.MicrojoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in MicrojoulesPerSquareMillimeter.
        /// </summary>
        public double MicrojoulesPerSquareMillimeter => As(IrradiationUnit.MicrojoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in MicrowattHoursPerSquareMeter.
        /// </summary>
        public double MicrowattHoursPerSquareMeter => As(IrradiationUnit.MicrowattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in MillijoulesPerSquareCentimeter.
        /// </summary>
        public double MillijoulesPerSquareCentimeter => As(IrradiationUnit.MillijoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in MillijoulesPerSquareMeter.
        /// </summary>
        public double MillijoulesPerSquareMeter => As(IrradiationUnit.MillijoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in MillijoulesPerSquareMillimeter.
        /// </summary>
        public double MillijoulesPerSquareMillimeter => As(IrradiationUnit.MillijoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in MilliwattHoursPerSquareMeter.
        /// </summary>
        public double MilliwattHoursPerSquareMeter => As(IrradiationUnit.MilliwattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in NanojoulesPerSquareCentimeter.
        /// </summary>
        public double NanojoulesPerSquareCentimeter => As(IrradiationUnit.NanojoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in NanojoulesPerSquareMeter.
        /// </summary>
        public double NanojoulesPerSquareMeter => As(IrradiationUnit.NanojoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in NanojoulesPerSquareMillimeter.
        /// </summary>
        public double NanojoulesPerSquareMillimeter => As(IrradiationUnit.NanojoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in NanowattHoursPerSquareMeter.
        /// </summary>
        public double NanowattHoursPerSquareMeter => As(IrradiationUnit.NanowattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in PetajoulesPerSquareCentimeter.
        /// </summary>
        public double PetajoulesPerSquareCentimeter => As(IrradiationUnit.PetajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in PetajoulesPerSquareMeter.
        /// </summary>
        public double PetajoulesPerSquareMeter => As(IrradiationUnit.PetajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in PetajoulesPerSquareMillimeter.
        /// </summary>
        public double PetajoulesPerSquareMillimeter => As(IrradiationUnit.PetajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in PetawattHoursPerSquareMeter.
        /// </summary>
        public double PetawattHoursPerSquareMeter => As(IrradiationUnit.PetawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in PicojoulesPerSquareCentimeter.
        /// </summary>
        public double PicojoulesPerSquareCentimeter => As(IrradiationUnit.PicojoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in PicojoulesPerSquareMeter.
        /// </summary>
        public double PicojoulesPerSquareMeter => As(IrradiationUnit.PicojoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in PicojoulesPerSquareMillimeter.
        /// </summary>
        public double PicojoulesPerSquareMillimeter => As(IrradiationUnit.PicojoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in PicowattHoursPerSquareMeter.
        /// </summary>
        public double PicowattHoursPerSquareMeter => As(IrradiationUnit.PicowattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in QutrajoulesPerSquareCentimeter.
        /// </summary>
        public double QutrajoulesPerSquareCentimeter => As(IrradiationUnit.QutrajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in QutrajoulesPerSquareMeter.
        /// </summary>
        public double QutrajoulesPerSquareMeter => As(IrradiationUnit.QutrajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in QutrajoulesPerSquareMillimeter.
        /// </summary>
        public double QutrajoulesPerSquareMillimeter => As(IrradiationUnit.QutrajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in QutrawattHoursPerSquareMeter.
        /// </summary>
        public double QutrawattHoursPerSquareMeter => As(IrradiationUnit.QutrawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in TerajoulesPerSquareCentimeter.
        /// </summary>
        public double TerajoulesPerSquareCentimeter => As(IrradiationUnit.TerajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in TerajoulesPerSquareMeter.
        /// </summary>
        public double TerajoulesPerSquareMeter => As(IrradiationUnit.TerajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in TerajoulesPerSquareMillimeter.
        /// </summary>
        public double TerajoulesPerSquareMillimeter => As(IrradiationUnit.TerajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in TerawattHoursPerSquareMeter.
        /// </summary>
        public double TerawattHoursPerSquareMeter => As(IrradiationUnit.TerawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in VettajoulesPerSquareCentimeter.
        /// </summary>
        public double VettajoulesPerSquareCentimeter => As(IrradiationUnit.VettajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in VettajoulesPerSquareMeter.
        /// </summary>
        public double VettajoulesPerSquareMeter => As(IrradiationUnit.VettajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in VettajoulesPerSquareMillimeter.
        /// </summary>
        public double VettajoulesPerSquareMillimeter => As(IrradiationUnit.VettajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in VettawattHoursPerSquareMeter.
        /// </summary>
        public double VettawattHoursPerSquareMeter => As(IrradiationUnit.VettawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in WattHoursPerSquareMeter.
        /// </summary>
        public double WattHoursPerSquareMeter => As(IrradiationUnit.WattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in YottajoulesPerSquareCentimeter.
        /// </summary>
        public double YottajoulesPerSquareCentimeter => As(IrradiationUnit.YottajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in YottajoulesPerSquareMeter.
        /// </summary>
        public double YottajoulesPerSquareMeter => As(IrradiationUnit.YottajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in YottajoulesPerSquareMillimeter.
        /// </summary>
        public double YottajoulesPerSquareMillimeter => As(IrradiationUnit.YottajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in YottawattHoursPerSquareMeter.
        /// </summary>
        public double YottawattHoursPerSquareMeter => As(IrradiationUnit.YottawattHourPerSquareMeter);

        /// <summary>
        ///     Get Irradiation in ZettajoulesPerSquareCentimeter.
        /// </summary>
        public double ZettajoulesPerSquareCentimeter => As(IrradiationUnit.ZettajoulePerSquareCentimeter);

        /// <summary>
        ///     Get Irradiation in ZettajoulesPerSquareMeter.
        /// </summary>
        public double ZettajoulesPerSquareMeter => As(IrradiationUnit.ZettajoulePerSquareMeter);

        /// <summary>
        ///     Get Irradiation in ZettajoulesPerSquareMillimeter.
        /// </summary>
        public double ZettajoulesPerSquareMillimeter => As(IrradiationUnit.ZettajoulePerSquareMillimeter);

        /// <summary>
        ///     Get Irradiation in ZettawattHoursPerSquareMeter.
        /// </summary>
        public double ZettawattHoursPerSquareMeter => As(IrradiationUnit.ZettawattHourPerSquareMeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(IrradiationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(IrradiationUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Irradiation from CentijoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromCentijoulesPerSquareCentimeter(double centijoulespersquarecentimeter)
        {
            double value = (double) centijoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.CentijoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from CentijoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromCentijoulesPerSquareMeter(double centijoulespersquaremeter)
        {
            double value = (double) centijoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.CentijoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from CentijoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromCentijoulesPerSquareMillimeter(double centijoulespersquaremillimeter)
        {
            double value = (double) centijoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.CentijoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from CentiwattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromCentiwattHoursPerSquareMeter(double centiwatthourspersquaremeter)
        {
            double value = (double) centiwatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.CentiwattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from DecajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecajoulesPerSquareCentimeter(double decajoulespersquarecentimeter)
        {
            double value = (double) decajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.DecajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from DecajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecajoulesPerSquareMeter(double decajoulespersquaremeter)
        {
            double value = (double) decajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.DecajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from DecajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecajoulesPerSquareMillimeter(double decajoulespersquaremillimeter)
        {
            double value = (double) decajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.DecajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from DecawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecawattHoursPerSquareMeter(double decawatthourspersquaremeter)
        {
            double value = (double) decawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.DecawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from DecijoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecijoulesPerSquareCentimeter(double decijoulespersquarecentimeter)
        {
            double value = (double) decijoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.DecijoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from DecijoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecijoulesPerSquareMeter(double decijoulespersquaremeter)
        {
            double value = (double) decijoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.DecijoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from DecijoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDecijoulesPerSquareMillimeter(double decijoulespersquaremillimeter)
        {
            double value = (double) decijoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.DecijoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from DeciwattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromDeciwattHoursPerSquareMeter(double deciwatthourspersquaremeter)
        {
            double value = (double) deciwatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.DeciwattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from ExajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromExajoulesPerSquareCentimeter(double exajoulespersquarecentimeter)
        {
            double value = (double) exajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.ExajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from ExajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromExajoulesPerSquareMeter(double exajoulespersquaremeter)
        {
            double value = (double) exajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.ExajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from ExajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromExajoulesPerSquareMillimeter(double exajoulespersquaremillimeter)
        {
            double value = (double) exajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.ExajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from ExawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromExawattHoursPerSquareMeter(double exawatthourspersquaremeter)
        {
            double value = (double) exawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.ExawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from FemtojoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromFemtojoulesPerSquareCentimeter(double femtojoulespersquarecentimeter)
        {
            double value = (double) femtojoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.FemtojoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from FemtojoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromFemtojoulesPerSquareMeter(double femtojoulespersquaremeter)
        {
            double value = (double) femtojoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.FemtojoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from FemtojoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromFemtojoulesPerSquareMillimeter(double femtojoulespersquaremillimeter)
        {
            double value = (double) femtojoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.FemtojoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from FemtowattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromFemtowattHoursPerSquareMeter(double femtowatthourspersquaremeter)
        {
            double value = (double) femtowatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.FemtowattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from GigajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromGigajoulesPerSquareCentimeter(double gigajoulespersquarecentimeter)
        {
            double value = (double) gigajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.GigajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from GigajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromGigajoulesPerSquareMeter(double gigajoulespersquaremeter)
        {
            double value = (double) gigajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.GigajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from GigajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromGigajoulesPerSquareMillimeter(double gigajoulespersquaremillimeter)
        {
            double value = (double) gigajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.GigajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from GigawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromGigawattHoursPerSquareMeter(double gigawatthourspersquaremeter)
        {
            double value = (double) gigawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.GigawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from HectojoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromHectojoulesPerSquareCentimeter(double hectojoulespersquarecentimeter)
        {
            double value = (double) hectojoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.HectojoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from HectojoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromHectojoulesPerSquareMeter(double hectojoulespersquaremeter)
        {
            double value = (double) hectojoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.HectojoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from HectojoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromHectojoulesPerSquareMillimeter(double hectojoulespersquaremillimeter)
        {
            double value = (double) hectojoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.HectojoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from HectowattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromHectowattHoursPerSquareMeter(double hectowatthourspersquaremeter)
        {
            double value = (double) hectowatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.HectowattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from JoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromJoulesPerSquareCentimeter(double joulespersquarecentimeter)
        {
            double value = (double) joulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.JoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from JoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromJoulesPerSquareMeter(double joulespersquaremeter)
        {
            double value = (double) joulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.JoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from JoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromJoulesPerSquareMillimeter(double joulespersquaremillimeter)
        {
            double value = (double) joulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.JoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from KilojoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromKilojoulesPerSquareCentimeter(double kilojoulespersquarecentimeter)
        {
            double value = (double) kilojoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.KilojoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from KilojoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromKilojoulesPerSquareMeter(double kilojoulespersquaremeter)
        {
            double value = (double) kilojoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.KilojoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from KilojoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromKilojoulesPerSquareMillimeter(double kilojoulespersquaremillimeter)
        {
            double value = (double) kilojoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.KilojoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from KilowattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromKilowattHoursPerSquareMeter(double kilowatthourspersquaremeter)
        {
            double value = (double) kilowatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.KilowattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from MegajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMegajoulesPerSquareCentimeter(double megajoulespersquarecentimeter)
        {
            double value = (double) megajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.MegajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from MegajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMegajoulesPerSquareMeter(double megajoulespersquaremeter)
        {
            double value = (double) megajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.MegajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from MegajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMegajoulesPerSquareMillimeter(double megajoulespersquaremillimeter)
        {
            double value = (double) megajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.MegajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from MegawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMegawattHoursPerSquareMeter(double megawatthourspersquaremeter)
        {
            double value = (double) megawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.MegawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from MicrojoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMicrojoulesPerSquareCentimeter(double microjoulespersquarecentimeter)
        {
            double value = (double) microjoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.MicrojoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from MicrojoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMicrojoulesPerSquareMeter(double microjoulespersquaremeter)
        {
            double value = (double) microjoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.MicrojoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from MicrojoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMicrojoulesPerSquareMillimeter(double microjoulespersquaremillimeter)
        {
            double value = (double) microjoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.MicrojoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from MicrowattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMicrowattHoursPerSquareMeter(double microwatthourspersquaremeter)
        {
            double value = (double) microwatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.MicrowattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from MillijoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMillijoulesPerSquareCentimeter(double millijoulespersquarecentimeter)
        {
            double value = (double) millijoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.MillijoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from MillijoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMillijoulesPerSquareMeter(double millijoulespersquaremeter)
        {
            double value = (double) millijoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.MillijoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from MillijoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMillijoulesPerSquareMillimeter(double millijoulespersquaremillimeter)
        {
            double value = (double) millijoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.MillijoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from MilliwattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromMilliwattHoursPerSquareMeter(double milliwatthourspersquaremeter)
        {
            double value = (double) milliwatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.MilliwattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from NanojoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromNanojoulesPerSquareCentimeter(double nanojoulespersquarecentimeter)
        {
            double value = (double) nanojoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.NanojoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from NanojoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromNanojoulesPerSquareMeter(double nanojoulespersquaremeter)
        {
            double value = (double) nanojoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.NanojoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from NanojoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromNanojoulesPerSquareMillimeter(double nanojoulespersquaremillimeter)
        {
            double value = (double) nanojoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.NanojoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from NanowattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromNanowattHoursPerSquareMeter(double nanowatthourspersquaremeter)
        {
            double value = (double) nanowatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.NanowattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from PetajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPetajoulesPerSquareCentimeter(double petajoulespersquarecentimeter)
        {
            double value = (double) petajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.PetajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from PetajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPetajoulesPerSquareMeter(double petajoulespersquaremeter)
        {
            double value = (double) petajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.PetajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from PetajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPetajoulesPerSquareMillimeter(double petajoulespersquaremillimeter)
        {
            double value = (double) petajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.PetajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from PetawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPetawattHoursPerSquareMeter(double petawatthourspersquaremeter)
        {
            double value = (double) petawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.PetawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from PicojoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPicojoulesPerSquareCentimeter(double picojoulespersquarecentimeter)
        {
            double value = (double) picojoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.PicojoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from PicojoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPicojoulesPerSquareMeter(double picojoulespersquaremeter)
        {
            double value = (double) picojoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.PicojoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from PicojoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPicojoulesPerSquareMillimeter(double picojoulespersquaremillimeter)
        {
            double value = (double) picojoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.PicojoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from PicowattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromPicowattHoursPerSquareMeter(double picowatthourspersquaremeter)
        {
            double value = (double) picowatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.PicowattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from QutrajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromQutrajoulesPerSquareCentimeter(double qutrajoulespersquarecentimeter)
        {
            double value = (double) qutrajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.QutrajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from QutrajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromQutrajoulesPerSquareMeter(double qutrajoulespersquaremeter)
        {
            double value = (double) qutrajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.QutrajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from QutrajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromQutrajoulesPerSquareMillimeter(double qutrajoulespersquaremillimeter)
        {
            double value = (double) qutrajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.QutrajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from QutrawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromQutrawattHoursPerSquareMeter(double qutrawatthourspersquaremeter)
        {
            double value = (double) qutrawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.QutrawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from TerajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromTerajoulesPerSquareCentimeter(double terajoulespersquarecentimeter)
        {
            double value = (double) terajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.TerajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from TerajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromTerajoulesPerSquareMeter(double terajoulespersquaremeter)
        {
            double value = (double) terajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.TerajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from TerajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromTerajoulesPerSquareMillimeter(double terajoulespersquaremillimeter)
        {
            double value = (double) terajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.TerajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from TerawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromTerawattHoursPerSquareMeter(double terawatthourspersquaremeter)
        {
            double value = (double) terawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.TerawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from VettajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromVettajoulesPerSquareCentimeter(double vettajoulespersquarecentimeter)
        {
            double value = (double) vettajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.VettajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from VettajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromVettajoulesPerSquareMeter(double vettajoulespersquaremeter)
        {
            double value = (double) vettajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.VettajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from VettajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromVettajoulesPerSquareMillimeter(double vettajoulespersquaremillimeter)
        {
            double value = (double) vettajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.VettajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from VettawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromVettawattHoursPerSquareMeter(double vettawatthourspersquaremeter)
        {
            double value = (double) vettawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.VettawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from WattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromWattHoursPerSquareMeter(double watthourspersquaremeter)
        {
            double value = (double) watthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.WattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from YottajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromYottajoulesPerSquareCentimeter(double yottajoulespersquarecentimeter)
        {
            double value = (double) yottajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.YottajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from YottajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromYottajoulesPerSquareMeter(double yottajoulespersquaremeter)
        {
            double value = (double) yottajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.YottajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from YottajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromYottajoulesPerSquareMillimeter(double yottajoulespersquaremillimeter)
        {
            double value = (double) yottajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.YottajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from YottawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromYottawattHoursPerSquareMeter(double yottawatthourspersquaremeter)
        {
            double value = (double) yottawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.YottawattHourPerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from ZettajoulesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromZettajoulesPerSquareCentimeter(double zettajoulespersquarecentimeter)
        {
            double value = (double) zettajoulespersquarecentimeter;
            return new Irradiation(value, IrradiationUnit.ZettajoulePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Irradiation from ZettajoulesPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromZettajoulesPerSquareMeter(double zettajoulespersquaremeter)
        {
            double value = (double) zettajoulespersquaremeter;
            return new Irradiation(value, IrradiationUnit.ZettajoulePerSquareMeter);
        }
        /// <summary>
        ///     Get Irradiation from ZettajoulesPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromZettajoulesPerSquareMillimeter(double zettajoulespersquaremillimeter)
        {
            double value = (double) zettajoulespersquaremillimeter;
            return new Irradiation(value, IrradiationUnit.ZettajoulePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Irradiation from ZettawattHoursPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Irradiation FromZettawattHoursPerSquareMeter(double zettawatthourspersquaremeter)
        {
            double value = (double) zettawatthourspersquaremeter;
            return new Irradiation(value, IrradiationUnit.ZettawattHourPerSquareMeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="IrradiationUnit" /> to <see cref="Irradiation" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Irradiation unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Irradiation From(double value, IrradiationUnit fromUnit)
        {
            return new Irradiation((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Irradiation Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Irradiation Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Irradiation, IrradiationUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Irradiation result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Irradiation result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Irradiation, IrradiationUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static IrradiationUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static IrradiationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<IrradiationUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out IrradiationUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out IrradiationUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<IrradiationUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Irradiation objIrradiation)) throw new ArgumentException("Expected type Irradiation.", nameof(obj));

            return CompareTo(objIrradiation);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Irradiation other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Irradiation objIrradiation))
                return false;

            return Equals(objIrradiation);
        }

        public bool Equals(Irradiation other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Irradiation within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Irradiation other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Irradiation.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((IrradiationUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(IrradiationUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Irradiation to another Irradiation with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Irradiation with the specified unit.</returns>
        public Irradiation ToUnit(IrradiationUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Irradiation(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case IrradiationUnit.CentijoulePerSquareCentimeter: return (_value*1e4) * 1e-2d;
                case IrradiationUnit.CentijoulePerSquareMeter: return (_value) * 1e-2d;
                case IrradiationUnit.CentijoulePerSquareMillimeter: return (_value*1e6) * 1e-2d;
                case IrradiationUnit.CentiwattHourPerSquareMeter: return (_value*3600d) * 1e-2d;
                case IrradiationUnit.DecajoulePerSquareCentimeter: return (_value*1e4) * 1e1d;
                case IrradiationUnit.DecajoulePerSquareMeter: return (_value) * 1e1d;
                case IrradiationUnit.DecajoulePerSquareMillimeter: return (_value*1e6) * 1e1d;
                case IrradiationUnit.DecawattHourPerSquareMeter: return (_value*3600d) * 1e1d;
                case IrradiationUnit.DecijoulePerSquareCentimeter: return (_value*1e4) * 1e-1d;
                case IrradiationUnit.DecijoulePerSquareMeter: return (_value) * 1e-1d;
                case IrradiationUnit.DecijoulePerSquareMillimeter: return (_value*1e6) * 1e-1d;
                case IrradiationUnit.DeciwattHourPerSquareMeter: return (_value*3600d) * 1e-1d;
                case IrradiationUnit.ExajoulePerSquareCentimeter: return (_value*1e4) * 1e18d;
                case IrradiationUnit.ExajoulePerSquareMeter: return (_value) * 1e18d;
                case IrradiationUnit.ExajoulePerSquareMillimeter: return (_value*1e6) * 1e18d;
                case IrradiationUnit.ExawattHourPerSquareMeter: return (_value*3600d) * 1e18d;
                case IrradiationUnit.FemtojoulePerSquareCentimeter: return (_value*1e4) * 1e-15d;
                case IrradiationUnit.FemtojoulePerSquareMeter: return (_value) * 1e-15d;
                case IrradiationUnit.FemtojoulePerSquareMillimeter: return (_value*1e6) * 1e-15d;
                case IrradiationUnit.FemtowattHourPerSquareMeter: return (_value*3600d) * 1e-15d;
                case IrradiationUnit.GigajoulePerSquareCentimeter: return (_value*1e4) * 1e9d;
                case IrradiationUnit.GigajoulePerSquareMeter: return (_value) * 1e9d;
                case IrradiationUnit.GigajoulePerSquareMillimeter: return (_value*1e6) * 1e9d;
                case IrradiationUnit.GigawattHourPerSquareMeter: return (_value*3600d) * 1e9d;
                case IrradiationUnit.HectojoulePerSquareCentimeter: return (_value*1e4) * 1e2d;
                case IrradiationUnit.HectojoulePerSquareMeter: return (_value) * 1e2d;
                case IrradiationUnit.HectojoulePerSquareMillimeter: return (_value*1e6) * 1e2d;
                case IrradiationUnit.HectowattHourPerSquareMeter: return (_value*3600d) * 1e2d;
                case IrradiationUnit.JoulePerSquareCentimeter: return _value*1e4;
                case IrradiationUnit.JoulePerSquareMeter: return _value;
                case IrradiationUnit.JoulePerSquareMillimeter: return _value*1e6;
                case IrradiationUnit.KilojoulePerSquareCentimeter: return (_value*1e4) * 1e3d;
                case IrradiationUnit.KilojoulePerSquareMeter: return (_value) * 1e3d;
                case IrradiationUnit.KilojoulePerSquareMillimeter: return (_value*1e6) * 1e3d;
                case IrradiationUnit.KilowattHourPerSquareMeter: return (_value*3600d) * 1e3d;
                case IrradiationUnit.MegajoulePerSquareCentimeter: return (_value*1e4) * 1e6d;
                case IrradiationUnit.MegajoulePerSquareMeter: return (_value) * 1e6d;
                case IrradiationUnit.MegajoulePerSquareMillimeter: return (_value*1e6) * 1e6d;
                case IrradiationUnit.MegawattHourPerSquareMeter: return (_value*3600d) * 1e6d;
                case IrradiationUnit.MicrojoulePerSquareCentimeter: return (_value*1e4) * 1e-6d;
                case IrradiationUnit.MicrojoulePerSquareMeter: return (_value) * 1e-6d;
                case IrradiationUnit.MicrojoulePerSquareMillimeter: return (_value*1e6) * 1e-6d;
                case IrradiationUnit.MicrowattHourPerSquareMeter: return (_value*3600d) * 1e-6d;
                case IrradiationUnit.MillijoulePerSquareCentimeter: return (_value*1e4) * 1e-3d;
                case IrradiationUnit.MillijoulePerSquareMeter: return (_value) * 1e-3d;
                case IrradiationUnit.MillijoulePerSquareMillimeter: return (_value*1e6) * 1e-3d;
                case IrradiationUnit.MilliwattHourPerSquareMeter: return (_value*3600d) * 1e-3d;
                case IrradiationUnit.NanojoulePerSquareCentimeter: return (_value*1e4) * 1e-9d;
                case IrradiationUnit.NanojoulePerSquareMeter: return (_value) * 1e-9d;
                case IrradiationUnit.NanojoulePerSquareMillimeter: return (_value*1e6) * 1e-9d;
                case IrradiationUnit.NanowattHourPerSquareMeter: return (_value*3600d) * 1e-9d;
                case IrradiationUnit.PetajoulePerSquareCentimeter: return (_value*1e4) * 1e15d;
                case IrradiationUnit.PetajoulePerSquareMeter: return (_value) * 1e15d;
                case IrradiationUnit.PetajoulePerSquareMillimeter: return (_value*1e6) * 1e15d;
                case IrradiationUnit.PetawattHourPerSquareMeter: return (_value*3600d) * 1e15d;
                case IrradiationUnit.PicojoulePerSquareCentimeter: return (_value*1e4) * 1e-12d;
                case IrradiationUnit.PicojoulePerSquareMeter: return (_value) * 1e-12d;
                case IrradiationUnit.PicojoulePerSquareMillimeter: return (_value*1e6) * 1e-12d;
                case IrradiationUnit.PicowattHourPerSquareMeter: return (_value*3600d) * 1e-12d;
                case IrradiationUnit.QutrajoulePerSquareCentimeter: return (_value*1e4) * 1e27d;
                case IrradiationUnit.QutrajoulePerSquareMeter: return (_value) * 1e27d;
                case IrradiationUnit.QutrajoulePerSquareMillimeter: return (_value*1e6) * 1e27d;
                case IrradiationUnit.QutrawattHourPerSquareMeter: return (_value*3600d) * 1e27d;
                case IrradiationUnit.TerajoulePerSquareCentimeter: return (_value*1e4) * 1e12d;
                case IrradiationUnit.TerajoulePerSquareMeter: return (_value) * 1e12d;
                case IrradiationUnit.TerajoulePerSquareMillimeter: return (_value*1e6) * 1e12d;
                case IrradiationUnit.TerawattHourPerSquareMeter: return (_value*3600d) * 1e12d;
                case IrradiationUnit.VettajoulePerSquareCentimeter: return (_value*1e4) * 1e30d;
                case IrradiationUnit.VettajoulePerSquareMeter: return (_value) * 1e30d;
                case IrradiationUnit.VettajoulePerSquareMillimeter: return (_value*1e6) * 1e30d;
                case IrradiationUnit.VettawattHourPerSquareMeter: return (_value*3600d) * 1e30d;
                case IrradiationUnit.WattHourPerSquareMeter: return _value*3600d;
                case IrradiationUnit.YottajoulePerSquareCentimeter: return (_value*1e4) * 1e24d;
                case IrradiationUnit.YottajoulePerSquareMeter: return (_value) * 1e24d;
                case IrradiationUnit.YottajoulePerSquareMillimeter: return (_value*1e6) * 1e24d;
                case IrradiationUnit.YottawattHourPerSquareMeter: return (_value*3600d) * 1e24d;
                case IrradiationUnit.ZettajoulePerSquareCentimeter: return (_value*1e4) * 1e21d;
                case IrradiationUnit.ZettajoulePerSquareMeter: return (_value) * 1e21d;
                case IrradiationUnit.ZettajoulePerSquareMillimeter: return (_value*1e6) * 1e21d;
                case IrradiationUnit.ZettawattHourPerSquareMeter: return (_value*3600d) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(IrradiationUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case IrradiationUnit.CentijoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-2d;
                case IrradiationUnit.CentijoulePerSquareMeter: return (baseUnitValue) / 1e-2d;
                case IrradiationUnit.CentijoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-2d;
                case IrradiationUnit.CentiwattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-2d;
                case IrradiationUnit.DecajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e1d;
                case IrradiationUnit.DecajoulePerSquareMeter: return (baseUnitValue) / 1e1d;
                case IrradiationUnit.DecajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e1d;
                case IrradiationUnit.DecawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e1d;
                case IrradiationUnit.DecijoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-1d;
                case IrradiationUnit.DecijoulePerSquareMeter: return (baseUnitValue) / 1e-1d;
                case IrradiationUnit.DecijoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-1d;
                case IrradiationUnit.DeciwattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-1d;
                case IrradiationUnit.ExajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e18d;
                case IrradiationUnit.ExajoulePerSquareMeter: return (baseUnitValue) / 1e18d;
                case IrradiationUnit.ExajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e18d;
                case IrradiationUnit.ExawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e18d;
                case IrradiationUnit.FemtojoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-15d;
                case IrradiationUnit.FemtojoulePerSquareMeter: return (baseUnitValue) / 1e-15d;
                case IrradiationUnit.FemtojoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-15d;
                case IrradiationUnit.FemtowattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-15d;
                case IrradiationUnit.GigajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e9d;
                case IrradiationUnit.GigajoulePerSquareMeter: return (baseUnitValue) / 1e9d;
                case IrradiationUnit.GigajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e9d;
                case IrradiationUnit.GigawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e9d;
                case IrradiationUnit.HectojoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e2d;
                case IrradiationUnit.HectojoulePerSquareMeter: return (baseUnitValue) / 1e2d;
                case IrradiationUnit.HectojoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e2d;
                case IrradiationUnit.HectowattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e2d;
                case IrradiationUnit.JoulePerSquareCentimeter: return baseUnitValue/1e4;
                case IrradiationUnit.JoulePerSquareMeter: return baseUnitValue;
                case IrradiationUnit.JoulePerSquareMillimeter: return baseUnitValue/1e6;
                case IrradiationUnit.KilojoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e3d;
                case IrradiationUnit.KilojoulePerSquareMeter: return (baseUnitValue) / 1e3d;
                case IrradiationUnit.KilojoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e3d;
                case IrradiationUnit.KilowattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e3d;
                case IrradiationUnit.MegajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e6d;
                case IrradiationUnit.MegajoulePerSquareMeter: return (baseUnitValue) / 1e6d;
                case IrradiationUnit.MegajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e6d;
                case IrradiationUnit.MegawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e6d;
                case IrradiationUnit.MicrojoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-6d;
                case IrradiationUnit.MicrojoulePerSquareMeter: return (baseUnitValue) / 1e-6d;
                case IrradiationUnit.MicrojoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-6d;
                case IrradiationUnit.MicrowattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-6d;
                case IrradiationUnit.MillijoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-3d;
                case IrradiationUnit.MillijoulePerSquareMeter: return (baseUnitValue) / 1e-3d;
                case IrradiationUnit.MillijoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-3d;
                case IrradiationUnit.MilliwattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-3d;
                case IrradiationUnit.NanojoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-9d;
                case IrradiationUnit.NanojoulePerSquareMeter: return (baseUnitValue) / 1e-9d;
                case IrradiationUnit.NanojoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-9d;
                case IrradiationUnit.NanowattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-9d;
                case IrradiationUnit.PetajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e15d;
                case IrradiationUnit.PetajoulePerSquareMeter: return (baseUnitValue) / 1e15d;
                case IrradiationUnit.PetajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e15d;
                case IrradiationUnit.PetawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e15d;
                case IrradiationUnit.PicojoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e-12d;
                case IrradiationUnit.PicojoulePerSquareMeter: return (baseUnitValue) / 1e-12d;
                case IrradiationUnit.PicojoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e-12d;
                case IrradiationUnit.PicowattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e-12d;
                case IrradiationUnit.QutrajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e27d;
                case IrradiationUnit.QutrajoulePerSquareMeter: return (baseUnitValue) / 1e27d;
                case IrradiationUnit.QutrajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e27d;
                case IrradiationUnit.QutrawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e27d;
                case IrradiationUnit.TerajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e12d;
                case IrradiationUnit.TerajoulePerSquareMeter: return (baseUnitValue) / 1e12d;
                case IrradiationUnit.TerajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e12d;
                case IrradiationUnit.TerawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e12d;
                case IrradiationUnit.VettajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e30d;
                case IrradiationUnit.VettajoulePerSquareMeter: return (baseUnitValue) / 1e30d;
                case IrradiationUnit.VettajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e30d;
                case IrradiationUnit.VettawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e30d;
                case IrradiationUnit.WattHourPerSquareMeter: return baseUnitValue/3600d;
                case IrradiationUnit.YottajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e24d;
                case IrradiationUnit.YottajoulePerSquareMeter: return (baseUnitValue) / 1e24d;
                case IrradiationUnit.YottajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e24d;
                case IrradiationUnit.YottawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e24d;
                case IrradiationUnit.ZettajoulePerSquareCentimeter: return (baseUnitValue/1e4) / 1e21d;
                case IrradiationUnit.ZettajoulePerSquareMeter: return (baseUnitValue) / 1e21d;
                case IrradiationUnit.ZettajoulePerSquareMillimeter: return (baseUnitValue/1e6) / 1e21d;
                case IrradiationUnit.ZettawattHourPerSquareMeter: return (baseUnitValue/3600d) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
