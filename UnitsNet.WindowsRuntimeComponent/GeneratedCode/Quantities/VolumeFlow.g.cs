//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class VolumeFlow : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit? _unit;

        static VolumeFlow()
        {
            BaseDimensions = new BaseDimensions(3, 0, -1, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.VolumeFlow, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit CubicMeterPerSecond.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public VolumeFlow()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private VolumeFlow(double numericValue, VolumeFlowUnit unit)
        {
            if(unit == VolumeFlowUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of VolumeFlow, which is CubicMeterPerSecond. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit { get; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MaxValue { get; } = new VolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MinValue { get; } = new VolumeFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.VolumeFlow;

        /// <summary>
        ///     All units of measurement for the VolumeFlow quantity.
        /// </summary>
        public static VolumeFlowUnit[] Units { get; } = Enum.GetValues(typeof(VolumeFlowUnit)).Cast<VolumeFlowUnit>().Except(new VolumeFlowUnit[]{ VolumeFlowUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecond.
        /// </summary>
        public static VolumeFlow Zero { get; } = new VolumeFlow(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeFlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => VolumeFlow.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => VolumeFlow.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerDay.
        /// </summary>
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerHour.
        /// </summary>
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerMinute.
        /// </summary>
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerSecond.
        /// </summary>
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow in AttolitersPerDay.
        /// </summary>
        public double AttolitersPerDay => As(VolumeFlowUnit.AttoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in AttolitersPerHour.
        /// </summary>
        public double AttolitersPerHour => As(VolumeFlowUnit.AttoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in AttolitersPerMinute.
        /// </summary>
        public double AttolitersPerMinute => As(VolumeFlowUnit.AttoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerDay.
        /// </summary>
        public double CentilitersPerDay => As(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerHour.
        /// </summary>
        public double CentilitersPerHour => As(VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicDecimetersPerMinute.
        /// </summary>
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerHour.
        /// </summary>
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerMinute.
        /// </summary>
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerSecond.
        /// </summary>
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerDay.
        /// </summary>
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerHour.
        /// </summary>
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerMinute.
        /// </summary>
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerSecond.
        /// </summary>
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicMillimetersPerSecond.
        /// </summary>
        public double CubicMillimetersPerSecond => As(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerDay.
        /// </summary>
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerHour.
        /// </summary>
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerMinute.
        /// </summary>
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerSecond.
        /// </summary>
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Get VolumeFlow in DecalitersPerDay.
        /// </summary>
        public double DecalitersPerDay => As(VolumeFlowUnit.DecaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in DecalitersPerHour.
        /// </summary>
        public double DecalitersPerHour => As(VolumeFlowUnit.DecaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in DecalitersPerMinute.
        /// </summary>
        public double DecalitersPerMinute => As(VolumeFlowUnit.DecaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerDay.
        /// </summary>
        public double DecilitersPerDay => As(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerHour.
        /// </summary>
        public double DecilitersPerHour => As(VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in ExalitersPerDay.
        /// </summary>
        public double ExalitersPerDay => As(VolumeFlowUnit.ExaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in ExalitersPerHour.
        /// </summary>
        public double ExalitersPerHour => As(VolumeFlowUnit.ExaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in ExalitersPerMinute.
        /// </summary>
        public double ExalitersPerMinute => As(VolumeFlowUnit.ExaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in FemtolitersPerDay.
        /// </summary>
        public double FemtolitersPerDay => As(VolumeFlowUnit.FemtoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in FemtolitersPerHour.
        /// </summary>
        public double FemtolitersPerHour => As(VolumeFlowUnit.FemtoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in FemtolitersPerMinute.
        /// </summary>
        public double FemtolitersPerMinute => As(VolumeFlowUnit.FemtoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in GigalitersPerDay.
        /// </summary>
        public double GigalitersPerDay => As(VolumeFlowUnit.GigaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in GigalitersPerHour.
        /// </summary>
        public double GigalitersPerHour => As(VolumeFlowUnit.GigaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in GigalitersPerMinute.
        /// </summary>
        public double GigalitersPerMinute => As(VolumeFlowUnit.GigaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in HectolitersPerDay.
        /// </summary>
        public double HectolitersPerDay => As(VolumeFlowUnit.HectoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in HectolitersPerHour.
        /// </summary>
        public double HectolitersPerHour => As(VolumeFlowUnit.HectoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in HectolitersPerMinute.
        /// </summary>
        public double HectolitersPerMinute => As(VolumeFlowUnit.HectoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerDay.
        /// </summary>
        public double KilolitersPerDay => As(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerHour.
        /// </summary>
        public double KilolitersPerHour => As(VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in KilousGallonsPerMinute.
        /// </summary>
        public double KilousGallonsPerMinute => As(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in LitersPerDay.
        /// </summary>
        public double LitersPerDay => As(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Get VolumeFlow in LitersPerHour.
        /// </summary>
        public double LitersPerHour => As(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Get VolumeFlow in LitersPerMinute.
        /// </summary>
        public double LitersPerMinute => As(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in LitersPerSecond.
        /// </summary>
        public double LitersPerSecond => As(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MegalitersPerDay.
        /// </summary>
        public double MegalitersPerDay => As(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MegalitersPerHour.
        /// </summary>
        public double MegalitersPerHour => As(VolumeFlowUnit.MegaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in MegalitersPerMinute.
        /// </summary>
        public double MegalitersPerMinute => As(VolumeFlowUnit.MegaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MegaukGallonsPerSecond.
        /// </summary>
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerDay.
        /// </summary>
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerHour.
        /// </summary>
        public double MicrolitersPerHour => As(VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerDay.
        /// </summary>
        public double MillilitersPerDay => As(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerHour.
        /// </summary>
        public double MillilitersPerHour => As(VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MillionUsGallonsPerDay.
        /// </summary>
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerDay.
        /// </summary>
        public double NanolitersPerDay => As(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerHour.
        /// </summary>
        public double NanolitersPerHour => As(VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerDay.
        /// </summary>
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerHour.
        /// </summary>
        public double OilBarrelsPerHour => As(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerMinute.
        /// </summary>
        public double OilBarrelsPerMinute => As(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerSecond.
        /// </summary>
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Get VolumeFlow in PetalitersPerDay.
        /// </summary>
        public double PetalitersPerDay => As(VolumeFlowUnit.PetaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in PetalitersPerHour.
        /// </summary>
        public double PetalitersPerHour => As(VolumeFlowUnit.PetaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in PetalitersPerMinute.
        /// </summary>
        public double PetalitersPerMinute => As(VolumeFlowUnit.PetaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in PicolitersPerDay.
        /// </summary>
        public double PicolitersPerDay => As(VolumeFlowUnit.PicoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in PicolitersPerHour.
        /// </summary>
        public double PicolitersPerHour => As(VolumeFlowUnit.PicoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in PicolitersPerMinute.
        /// </summary>
        public double PicolitersPerMinute => As(VolumeFlowUnit.PicoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in QutralitersPerDay.
        /// </summary>
        public double QutralitersPerDay => As(VolumeFlowUnit.QutraliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in QutralitersPerHour.
        /// </summary>
        public double QutralitersPerHour => As(VolumeFlowUnit.QutraliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in QutralitersPerMinute.
        /// </summary>
        public double QutralitersPerMinute => As(VolumeFlowUnit.QutraliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in TeralitersPerDay.
        /// </summary>
        public double TeralitersPerDay => As(VolumeFlowUnit.TeraliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in TeralitersPerHour.
        /// </summary>
        public double TeralitersPerHour => As(VolumeFlowUnit.TeraliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in TeralitersPerMinute.
        /// </summary>
        public double TeralitersPerMinute => As(VolumeFlowUnit.TeraliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerDay.
        /// </summary>
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerMinute.
        /// </summary>
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerSecond.
        /// </summary>
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerDay.
        /// </summary>
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerHour.
        /// </summary>
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerMinute.
        /// </summary>
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerSecond.
        /// </summary>
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in VettalitersPerDay.
        /// </summary>
        public double VettalitersPerDay => As(VolumeFlowUnit.VettaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in VettalitersPerHour.
        /// </summary>
        public double VettalitersPerHour => As(VolumeFlowUnit.VettaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in VettalitersPerMinute.
        /// </summary>
        public double VettalitersPerMinute => As(VolumeFlowUnit.VettaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in YoctolitersPerDay.
        /// </summary>
        public double YoctolitersPerDay => As(VolumeFlowUnit.YoctoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in YoctolitersPerHour.
        /// </summary>
        public double YoctolitersPerHour => As(VolumeFlowUnit.YoctoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in YoctolitersPerMinute.
        /// </summary>
        public double YoctolitersPerMinute => As(VolumeFlowUnit.YoctoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in YottalitersPerDay.
        /// </summary>
        public double YottalitersPerDay => As(VolumeFlowUnit.YottaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in YottalitersPerHour.
        /// </summary>
        public double YottalitersPerHour => As(VolumeFlowUnit.YottaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in YottalitersPerMinute.
        /// </summary>
        public double YottalitersPerMinute => As(VolumeFlowUnit.YottaliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in ZeptolitersPerDay.
        /// </summary>
        public double ZeptolitersPerDay => As(VolumeFlowUnit.ZeptoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in ZeptolitersPerHour.
        /// </summary>
        public double ZeptolitersPerHour => As(VolumeFlowUnit.ZeptoliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in ZeptolitersPerMinute.
        /// </summary>
        public double ZeptolitersPerMinute => As(VolumeFlowUnit.ZeptoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in ZettalitersPerDay.
        /// </summary>
        public double ZettalitersPerDay => As(VolumeFlowUnit.ZettaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in ZettalitersPerHour.
        /// </summary>
        public double ZettalitersPerHour => As(VolumeFlowUnit.ZettaliterPerHour);

        /// <summary>
        ///     Get VolumeFlow in ZettalitersPerMinute.
        /// </summary>
        public double ZettalitersPerMinute => As(VolumeFlowUnit.ZettaliterPerMinute);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeFlowUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerDay(double acrefeetperday)
        {
            double value = (double) acrefeetperday;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerHour(double acrefeetperhour)
        {
            double value = (double) acrefeetperhour;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerMinute(double acrefeetperminute)
        {
            double value = (double) acrefeetperminute;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAcreFeetPerSecond(double acrefeetpersecond)
        {
            double value = (double) acrefeetpersecond;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from AttolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAttolitersPerDay(double attolitersperday)
        {
            double value = (double) attolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.AttoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from AttolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAttolitersPerHour(double attolitersperhour)
        {
            double value = (double) attolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.AttoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from AttolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromAttolitersPerMinute(double attolitersperminute)
        {
            double value = (double) attolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.AttoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CentilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCentilitersPerDay(double centilitersperday)
        {
            double value = (double) centilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.CentiliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from CentilitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCentilitersPerHour(double centilitersperhour)
        {
            double value = (double) centilitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CentiliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CentilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCentilitersPerMinute(double centilitersperminute)
        {
            double value = (double) centilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CentiliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicDecimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicDecimetersPerMinute(double cubicdecimetersperminute)
        {
            double value = (double) cubicdecimetersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicDecimeterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerHour(double cubicfeetperhour)
        {
            double value = (double) cubicfeetperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerMinute(double cubicfeetperminute)
        {
            double value = (double) cubicfeetperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicFeetPerSecond(double cubicfeetpersecond)
        {
            double value = (double) cubicfeetpersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerDay(double cubicmetersperday)
        {
            double value = (double) cubicmetersperday;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerHour(double cubicmetersperhour)
        {
            double value = (double) cubicmetersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerMinute(double cubicmetersperminute)
        {
            double value = (double) cubicmetersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMetersPerSecond(double cubicmeterspersecond)
        {
            double value = (double) cubicmeterspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicMillimetersPerSecond(double cubicmillimeterspersecond)
        {
            double value = (double) cubicmillimeterspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMillimeterPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerDay(double cubicyardsperday)
        {
            double value = (double) cubicyardsperday;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerHour(double cubicyardsperhour)
        {
            double value = (double) cubicyardsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerMinute(double cubicyardsperminute)
        {
            double value = (double) cubicyardsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromCubicYardsPerSecond(double cubicyardspersecond)
        {
            double value = (double) cubicyardspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from DecalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecalitersPerDay(double decalitersperday)
        {
            double value = (double) decalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.DecaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from DecalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecalitersPerHour(double decalitersperhour)
        {
            double value = (double) decalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.DecaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from DecalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecalitersPerMinute(double decalitersperminute)
        {
            double value = (double) decalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.DecaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from DecilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecilitersPerDay(double decilitersperday)
        {
            double value = (double) decilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.DeciliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from DecilitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecilitersPerHour(double decilitersperhour)
        {
            double value = (double) decilitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.DeciliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from DecilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromDecilitersPerMinute(double decilitersperminute)
        {
            double value = (double) decilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.DeciliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from ExalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromExalitersPerDay(double exalitersperday)
        {
            double value = (double) exalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.ExaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from ExalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromExalitersPerHour(double exalitersperhour)
        {
            double value = (double) exalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.ExaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from ExalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromExalitersPerMinute(double exalitersperminute)
        {
            double value = (double) exalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.ExaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from FemtolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromFemtolitersPerDay(double femtolitersperday)
        {
            double value = (double) femtolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.FemtoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from FemtolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromFemtolitersPerHour(double femtolitersperhour)
        {
            double value = (double) femtolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.FemtoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from FemtolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromFemtolitersPerMinute(double femtolitersperminute)
        {
            double value = (double) femtolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.FemtoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from GigalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromGigalitersPerDay(double gigalitersperday)
        {
            double value = (double) gigalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.GigaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from GigalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromGigalitersPerHour(double gigalitersperhour)
        {
            double value = (double) gigalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.GigaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from GigalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromGigalitersPerMinute(double gigalitersperminute)
        {
            double value = (double) gigalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.GigaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from HectolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromHectolitersPerDay(double hectolitersperday)
        {
            double value = (double) hectolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.HectoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from HectolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromHectolitersPerHour(double hectolitersperhour)
        {
            double value = (double) hectolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.HectoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from HectolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromHectolitersPerMinute(double hectolitersperminute)
        {
            double value = (double) hectolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.HectoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from KilolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilolitersPerDay(double kilolitersperday)
        {
            double value = (double) kilolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.KiloliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from KilolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilolitersPerHour(double kilolitersperhour)
        {
            double value = (double) kilolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.KiloliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from KilolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilolitersPerMinute(double kilolitersperminute)
        {
            double value = (double) kilolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.KiloliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from KilousGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromKilousGallonsPerMinute(double kilousgallonsperminute)
        {
            double value = (double) kilousgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.KilousGallonPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerDay(double litersperday)
        {
            double value = (double) litersperday;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerHour(double litersperhour)
        {
            double value = (double) litersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerMinute(double litersperminute)
        {
            double value = (double) litersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromLitersPerSecond(double literspersecond)
        {
            double value = (double) literspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from MegalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMegalitersPerDay(double megalitersperday)
        {
            double value = (double) megalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MegaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from MegalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMegalitersPerHour(double megalitersperhour)
        {
            double value = (double) megalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.MegaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from MegalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMegalitersPerMinute(double megalitersperminute)
        {
            double value = (double) megalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MegaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from MegaukGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMegaukGallonsPerSecond(double megaukgallonspersecond)
        {
            double value = (double) megaukgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.MegaukGallonPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMicrolitersPerDay(double microlitersperday)
        {
            double value = (double) microlitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MicroliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMicrolitersPerHour(double microlitersperhour)
        {
            double value = (double) microlitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.MicroliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMicrolitersPerMinute(double microlitersperminute)
        {
            double value = (double) microlitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MicroliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from MillilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillilitersPerDay(double millilitersperday)
        {
            double value = (double) millilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MilliliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from MillilitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillilitersPerHour(double millilitersperhour)
        {
            double value = (double) millilitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.MilliliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from MillilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillilitersPerMinute(double millilitersperminute)
        {
            double value = (double) millilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MilliliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from MillionUsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromMillionUsGallonsPerDay(double millionusgallonsperday)
        {
            double value = (double) millionusgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.MillionUsGallonsPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from NanolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromNanolitersPerDay(double nanolitersperday)
        {
            double value = (double) nanolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.NanoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from NanolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromNanolitersPerHour(double nanolitersperhour)
        {
            double value = (double) nanolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.NanoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from NanolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromNanolitersPerMinute(double nanolitersperminute)
        {
            double value = (double) nanolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.NanoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerDay(double oilbarrelsperday)
        {
            double value = (double) oilbarrelsperday;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerHour(double oilbarrelsperhour)
        {
            double value = (double) oilbarrelsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerMinute(double oilbarrelsperminute)
        {
            double value = (double) oilbarrelsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromOilBarrelsPerSecond(double oilbarrelspersecond)
        {
            double value = (double) oilbarrelspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from PetalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromPetalitersPerDay(double petalitersperday)
        {
            double value = (double) petalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.PetaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from PetalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromPetalitersPerHour(double petalitersperhour)
        {
            double value = (double) petalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.PetaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from PetalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromPetalitersPerMinute(double petalitersperminute)
        {
            double value = (double) petalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.PetaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from PicolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromPicolitersPerDay(double picolitersperday)
        {
            double value = (double) picolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.PicoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from PicolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromPicolitersPerHour(double picolitersperhour)
        {
            double value = (double) picolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.PicoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from PicolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromPicolitersPerMinute(double picolitersperminute)
        {
            double value = (double) picolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.PicoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from QutralitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromQutralitersPerDay(double qutralitersperday)
        {
            double value = (double) qutralitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.QutraliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from QutralitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromQutralitersPerHour(double qutralitersperhour)
        {
            double value = (double) qutralitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.QutraliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from QutralitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromQutralitersPerMinute(double qutralitersperminute)
        {
            double value = (double) qutralitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.QutraliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from TeralitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromTeralitersPerDay(double teralitersperday)
        {
            double value = (double) teralitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.TeraliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from TeralitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromTeralitersPerHour(double teralitersperhour)
        {
            double value = (double) teralitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.TeraliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from TeralitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromTeralitersPerMinute(double teralitersperminute)
        {
            double value = (double) teralitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.TeraliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUkGallonsPerDay(double ukgallonsperday)
        {
            double value = (double) ukgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUkGallonsPerMinute(double ukgallonsperminute)
        {
            double value = (double) ukgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUkGallonsPerSecond(double ukgallonspersecond)
        {
            double value = (double) ukgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerDay(double usgallonsperday)
        {
            double value = (double) usgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerHour(double usgallonsperhour)
        {
            double value = (double) usgallonsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerMinute(double usgallonsperminute)
        {
            double value = (double) usgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromUsGallonsPerSecond(double usgallonspersecond)
        {
            double value = (double) usgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from VettalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromVettalitersPerDay(double vettalitersperday)
        {
            double value = (double) vettalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.VettaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from VettalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromVettalitersPerHour(double vettalitersperhour)
        {
            double value = (double) vettalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.VettaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from VettalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromVettalitersPerMinute(double vettalitersperminute)
        {
            double value = (double) vettalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.VettaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from YoctolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromYoctolitersPerDay(double yoctolitersperday)
        {
            double value = (double) yoctolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.YoctoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from YoctolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromYoctolitersPerHour(double yoctolitersperhour)
        {
            double value = (double) yoctolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.YoctoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from YoctolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromYoctolitersPerMinute(double yoctolitersperminute)
        {
            double value = (double) yoctolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.YoctoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from YottalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromYottalitersPerDay(double yottalitersperday)
        {
            double value = (double) yottalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.YottaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from YottalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromYottalitersPerHour(double yottalitersperhour)
        {
            double value = (double) yottalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.YottaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from YottalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromYottalitersPerMinute(double yottalitersperminute)
        {
            double value = (double) yottalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.YottaliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from ZeptolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromZeptolitersPerDay(double zeptolitersperday)
        {
            double value = (double) zeptolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.ZeptoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from ZeptolitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromZeptolitersPerHour(double zeptolitersperhour)
        {
            double value = (double) zeptolitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.ZeptoliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from ZeptolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromZeptolitersPerMinute(double zeptolitersperminute)
        {
            double value = (double) zeptolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.ZeptoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from ZettalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromZettalitersPerDay(double zettalitersperday)
        {
            double value = (double) zettalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.ZettaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from ZettalitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromZettalitersPerHour(double zettalitersperhour)
        {
            double value = (double) zettalitersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.ZettaliterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from ZettalitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static VolumeFlow FromZettalitersPerMinute(double zettalitersperminute)
        {
            double value = (double) zettalitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.ZettaliterPerMinute);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static VolumeFlow From(double value, VolumeFlowUnit fromUnit)
        {
            return new VolumeFlow((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeFlow Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<VolumeFlow, VolumeFlowUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumeFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out VolumeFlow result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<VolumeFlow, VolumeFlowUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeFlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<VolumeFlowUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out VolumeFlowUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out VolumeFlowUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<VolumeFlowUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is VolumeFlow objVolumeFlow)) throw new ArgumentException("Expected type VolumeFlow.", nameof(obj));

            return CompareTo(objVolumeFlow);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(VolumeFlow other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is VolumeFlow objVolumeFlow))
                return false;

            return Equals(objVolumeFlow);
        }

        public bool Equals(VolumeFlow other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another VolumeFlow within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(VolumeFlow other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current VolumeFlow.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((VolumeFlowUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeFlowUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this VolumeFlow to another VolumeFlow with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A VolumeFlow with the specified unit.</returns>
        public VolumeFlow ToUnit(VolumeFlowUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new VolumeFlow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return _value/70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return _value/2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return _value/0.0486427916;
                case VolumeFlowUnit.AcreFootPerSecond: return _value/0.000810713194;
                case VolumeFlowUnit.AttoliterPerDay: return (_value/86400000) * 1e-18d;
                case VolumeFlowUnit.AttoliterPerHour: return (_value/3600000.000) * 1e-18d;
                case VolumeFlowUnit.AttoliterPerMinute: return (_value/60000.00000) * 1e-18d;
                case VolumeFlowUnit.CentiliterPerDay: return (_value/86400000) * 1e-2d;
                case VolumeFlowUnit.CentiliterPerHour: return (_value/3600000.000) * 1e-2d;
                case VolumeFlowUnit.CentiliterPerMinute: return (_value/60000.00000) * 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return _value/2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return _value/35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return _value/86400;
                case VolumeFlowUnit.CubicMeterPerHour: return _value/3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return _value/60;
                case VolumeFlowUnit.CubicMeterPerSecond: return _value;
                case VolumeFlowUnit.CubicMillimeterPerSecond: return _value*1e-9;
                case VolumeFlowUnit.CubicYardPerDay: return _value/113007;
                case VolumeFlowUnit.CubicYardPerHour: return _value*2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return _value*0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return _value*0.764554857984;
                case VolumeFlowUnit.DecaliterPerDay: return (_value/86400000) * 1e1d;
                case VolumeFlowUnit.DecaliterPerHour: return (_value/3600000.000) * 1e1d;
                case VolumeFlowUnit.DecaliterPerMinute: return (_value/60000.00000) * 1e1d;
                case VolumeFlowUnit.DeciliterPerDay: return (_value/86400000) * 1e-1d;
                case VolumeFlowUnit.DeciliterPerHour: return (_value/3600000.000) * 1e-1d;
                case VolumeFlowUnit.DeciliterPerMinute: return (_value/60000.00000) * 1e-1d;
                case VolumeFlowUnit.ExaliterPerDay: return (_value/86400000) * 1e18d;
                case VolumeFlowUnit.ExaliterPerHour: return (_value/3600000.000) * 1e18d;
                case VolumeFlowUnit.ExaliterPerMinute: return (_value/60000.00000) * 1e18d;
                case VolumeFlowUnit.FemtoliterPerDay: return (_value/86400000) * 1e-15d;
                case VolumeFlowUnit.FemtoliterPerHour: return (_value/3600000.000) * 1e-15d;
                case VolumeFlowUnit.FemtoliterPerMinute: return (_value/60000.00000) * 1e-15d;
                case VolumeFlowUnit.GigaliterPerDay: return (_value/86400000) * 1e9d;
                case VolumeFlowUnit.GigaliterPerHour: return (_value/3600000.000) * 1e9d;
                case VolumeFlowUnit.GigaliterPerMinute: return (_value/60000.00000) * 1e9d;
                case VolumeFlowUnit.HectoliterPerDay: return (_value/86400000) * 1e2d;
                case VolumeFlowUnit.HectoliterPerHour: return (_value/3600000.000) * 1e2d;
                case VolumeFlowUnit.HectoliterPerMinute: return (_value/60000.00000) * 1e2d;
                case VolumeFlowUnit.KiloliterPerDay: return (_value/86400000) * 1e3d;
                case VolumeFlowUnit.KiloliterPerHour: return (_value/3600000.000) * 1e3d;
                case VolumeFlowUnit.KiloliterPerMinute: return (_value/60000.00000) * 1e3d;
                case VolumeFlowUnit.KilousGallonPerMinute: return _value/15.850323141489;
                case VolumeFlowUnit.LiterPerDay: return _value/86400000;
                case VolumeFlowUnit.LiterPerHour: return _value/3600000.000;
                case VolumeFlowUnit.LiterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.LiterPerSecond: return _value/1000;
                case VolumeFlowUnit.MegaliterPerDay: return (_value/86400000) * 1e6d;
                case VolumeFlowUnit.MegaliterPerHour: return (_value/3600000.000) * 1e6d;
                case VolumeFlowUnit.MegaliterPerMinute: return (_value/60000.00000) * 1e6d;
                case VolumeFlowUnit.MegaukGallonPerSecond: return (_value/219.969) * 1e6d;
                case VolumeFlowUnit.MicroliterPerDay: return (_value/86400000) * 1e-6d;
                case VolumeFlowUnit.MicroliterPerHour: return (_value/3600000.000) * 1e-6d;
                case VolumeFlowUnit.MicroliterPerMinute: return (_value/60000.00000) * 1e-6d;
                case VolumeFlowUnit.MilliliterPerDay: return (_value/86400000) * 1e-3d;
                case VolumeFlowUnit.MilliliterPerHour: return (_value/3600000.000) * 1e-3d;
                case VolumeFlowUnit.MilliliterPerMinute: return (_value/60000.00000) * 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return _value/22.824465227;
                case VolumeFlowUnit.NanoliterPerDay: return (_value/86400000) * 1e-9d;
                case VolumeFlowUnit.NanoliterPerHour: return (_value/3600000.000) * 1e-9d;
                case VolumeFlowUnit.NanoliterPerMinute: return (_value/60000.00000) * 1e-9d;
                case VolumeFlowUnit.OilBarrelPerDay: return _value*1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelPerHour: return _value*4.41631375e-5;
                case VolumeFlowUnit.OilBarrelPerMinute: return _value*2.64978825e-3;
                case VolumeFlowUnit.OilBarrelPerSecond: return _value/6.28981;
                case VolumeFlowUnit.PetaliterPerDay: return (_value/86400000) * 1e15d;
                case VolumeFlowUnit.PetaliterPerHour: return (_value/3600000.000) * 1e15d;
                case VolumeFlowUnit.PetaliterPerMinute: return (_value/60000.00000) * 1e15d;
                case VolumeFlowUnit.PicoliterPerDay: return (_value/86400000) * 1e-12d;
                case VolumeFlowUnit.PicoliterPerHour: return (_value/3600000.000) * 1e-12d;
                case VolumeFlowUnit.PicoliterPerMinute: return (_value/60000.00000) * 1e-12d;
                case VolumeFlowUnit.QutraliterPerDay: return (_value/86400000) * 1e27d;
                case VolumeFlowUnit.QutraliterPerHour: return (_value/3600000.000) * 1e27d;
                case VolumeFlowUnit.QutraliterPerMinute: return (_value/60000.00000) * 1e27d;
                case VolumeFlowUnit.TeraliterPerDay: return (_value/86400000) * 1e12d;
                case VolumeFlowUnit.TeraliterPerHour: return (_value/3600000.000) * 1e12d;
                case VolumeFlowUnit.TeraliterPerMinute: return (_value/60000.00000) * 1e12d;
                case VolumeFlowUnit.UkGallonPerDay: return _value/19005304;
                case VolumeFlowUnit.UkGallonPerMinute: return _value/13198.2;
                case VolumeFlowUnit.UkGallonPerSecond: return _value/219.969;
                case VolumeFlowUnit.UsGallonPerDay: return _value/22824465.227;
                case VolumeFlowUnit.UsGallonPerHour: return _value/951019.38848933424;
                case VolumeFlowUnit.UsGallonPerMinute: return _value/15850.323141489;
                case VolumeFlowUnit.UsGallonPerSecond: return _value/264.1720523581484;
                case VolumeFlowUnit.VettaliterPerDay: return (_value/86400000) * 1e30d;
                case VolumeFlowUnit.VettaliterPerHour: return (_value/3600000.000) * 1e30d;
                case VolumeFlowUnit.VettaliterPerMinute: return (_value/60000.00000) * 1e30d;
                case VolumeFlowUnit.YoctoliterPerDay: return (_value/86400000) * 1e-24d;
                case VolumeFlowUnit.YoctoliterPerHour: return (_value/3600000.000) * 1e-24d;
                case VolumeFlowUnit.YoctoliterPerMinute: return (_value/60000.00000) * 1e-24d;
                case VolumeFlowUnit.YottaliterPerDay: return (_value/86400000) * 1e24d;
                case VolumeFlowUnit.YottaliterPerHour: return (_value/3600000.000) * 1e24d;
                case VolumeFlowUnit.YottaliterPerMinute: return (_value/60000.00000) * 1e24d;
                case VolumeFlowUnit.ZeptoliterPerDay: return (_value/86400000) * 1e-21d;
                case VolumeFlowUnit.ZeptoliterPerHour: return (_value/3600000.000) * 1e-21d;
                case VolumeFlowUnit.ZeptoliterPerMinute: return (_value/60000.00000) * 1e-21d;
                case VolumeFlowUnit.ZettaliterPerDay: return (_value/86400000) * 1e21d;
                case VolumeFlowUnit.ZettaliterPerHour: return (_value/3600000.000) * 1e21d;
                case VolumeFlowUnit.ZettaliterPerMinute: return (_value/60000.00000) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(VolumeFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return baseUnitValue*70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return baseUnitValue*2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return baseUnitValue*0.0486427916;
                case VolumeFlowUnit.AcreFootPerSecond: return baseUnitValue*0.000810713194;
                case VolumeFlowUnit.AttoliterPerDay: return (baseUnitValue*86400000) / 1e-18d;
                case VolumeFlowUnit.AttoliterPerHour: return (baseUnitValue*3600000.000) / 1e-18d;
                case VolumeFlowUnit.AttoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-18d;
                case VolumeFlowUnit.CentiliterPerDay: return (baseUnitValue*86400000) / 1e-2d;
                case VolumeFlowUnit.CentiliterPerHour: return (baseUnitValue*3600000.000) / 1e-2d;
                case VolumeFlowUnit.CentiliterPerMinute: return (baseUnitValue*60000.00000) / 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return baseUnitValue*2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return baseUnitValue*35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return baseUnitValue*86400;
                case VolumeFlowUnit.CubicMeterPerHour: return baseUnitValue*3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return baseUnitValue*60;
                case VolumeFlowUnit.CubicMeterPerSecond: return baseUnitValue;
                case VolumeFlowUnit.CubicMillimeterPerSecond: return baseUnitValue/1e-9;
                case VolumeFlowUnit.CubicYardPerDay: return baseUnitValue*113007;
                case VolumeFlowUnit.CubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return baseUnitValue/0.764554857984;
                case VolumeFlowUnit.DecaliterPerDay: return (baseUnitValue*86400000) / 1e1d;
                case VolumeFlowUnit.DecaliterPerHour: return (baseUnitValue*3600000.000) / 1e1d;
                case VolumeFlowUnit.DecaliterPerMinute: return (baseUnitValue*60000.00000) / 1e1d;
                case VolumeFlowUnit.DeciliterPerDay: return (baseUnitValue*86400000) / 1e-1d;
                case VolumeFlowUnit.DeciliterPerHour: return (baseUnitValue*3600000.000) / 1e-1d;
                case VolumeFlowUnit.DeciliterPerMinute: return (baseUnitValue*60000.00000) / 1e-1d;
                case VolumeFlowUnit.ExaliterPerDay: return (baseUnitValue*86400000) / 1e18d;
                case VolumeFlowUnit.ExaliterPerHour: return (baseUnitValue*3600000.000) / 1e18d;
                case VolumeFlowUnit.ExaliterPerMinute: return (baseUnitValue*60000.00000) / 1e18d;
                case VolumeFlowUnit.FemtoliterPerDay: return (baseUnitValue*86400000) / 1e-15d;
                case VolumeFlowUnit.FemtoliterPerHour: return (baseUnitValue*3600000.000) / 1e-15d;
                case VolumeFlowUnit.FemtoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-15d;
                case VolumeFlowUnit.GigaliterPerDay: return (baseUnitValue*86400000) / 1e9d;
                case VolumeFlowUnit.GigaliterPerHour: return (baseUnitValue*3600000.000) / 1e9d;
                case VolumeFlowUnit.GigaliterPerMinute: return (baseUnitValue*60000.00000) / 1e9d;
                case VolumeFlowUnit.HectoliterPerDay: return (baseUnitValue*86400000) / 1e2d;
                case VolumeFlowUnit.HectoliterPerHour: return (baseUnitValue*3600000.000) / 1e2d;
                case VolumeFlowUnit.HectoliterPerMinute: return (baseUnitValue*60000.00000) / 1e2d;
                case VolumeFlowUnit.KiloliterPerDay: return (baseUnitValue*86400000) / 1e3d;
                case VolumeFlowUnit.KiloliterPerHour: return (baseUnitValue*3600000.000) / 1e3d;
                case VolumeFlowUnit.KiloliterPerMinute: return (baseUnitValue*60000.00000) / 1e3d;
                case VolumeFlowUnit.KilousGallonPerMinute: return baseUnitValue*15.850323141489;
                case VolumeFlowUnit.LiterPerDay: return baseUnitValue*86400000;
                case VolumeFlowUnit.LiterPerHour: return baseUnitValue*3600000.000;
                case VolumeFlowUnit.LiterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.LiterPerSecond: return baseUnitValue*1000;
                case VolumeFlowUnit.MegaliterPerDay: return (baseUnitValue*86400000) / 1e6d;
                case VolumeFlowUnit.MegaliterPerHour: return (baseUnitValue*3600000.000) / 1e6d;
                case VolumeFlowUnit.MegaliterPerMinute: return (baseUnitValue*60000.00000) / 1e6d;
                case VolumeFlowUnit.MegaukGallonPerSecond: return (baseUnitValue*219.969) / 1e6d;
                case VolumeFlowUnit.MicroliterPerDay: return (baseUnitValue*86400000) / 1e-6d;
                case VolumeFlowUnit.MicroliterPerHour: return (baseUnitValue*3600000.000) / 1e-6d;
                case VolumeFlowUnit.MicroliterPerMinute: return (baseUnitValue*60000.00000) / 1e-6d;
                case VolumeFlowUnit.MilliliterPerDay: return (baseUnitValue*86400000) / 1e-3d;
                case VolumeFlowUnit.MilliliterPerHour: return (baseUnitValue*3600000.000) / 1e-3d;
                case VolumeFlowUnit.MilliliterPerMinute: return (baseUnitValue*60000.00000) / 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return baseUnitValue*22.824465227;
                case VolumeFlowUnit.NanoliterPerDay: return (baseUnitValue*86400000) / 1e-9d;
                case VolumeFlowUnit.NanoliterPerHour: return (baseUnitValue*3600000.000) / 1e-9d;
                case VolumeFlowUnit.NanoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-9d;
                case VolumeFlowUnit.OilBarrelPerDay: return baseUnitValue/1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelPerHour: return baseUnitValue/4.41631375e-5;
                case VolumeFlowUnit.OilBarrelPerMinute: return baseUnitValue/2.64978825e-3;
                case VolumeFlowUnit.OilBarrelPerSecond: return baseUnitValue*6.28981;
                case VolumeFlowUnit.PetaliterPerDay: return (baseUnitValue*86400000) / 1e15d;
                case VolumeFlowUnit.PetaliterPerHour: return (baseUnitValue*3600000.000) / 1e15d;
                case VolumeFlowUnit.PetaliterPerMinute: return (baseUnitValue*60000.00000) / 1e15d;
                case VolumeFlowUnit.PicoliterPerDay: return (baseUnitValue*86400000) / 1e-12d;
                case VolumeFlowUnit.PicoliterPerHour: return (baseUnitValue*3600000.000) / 1e-12d;
                case VolumeFlowUnit.PicoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-12d;
                case VolumeFlowUnit.QutraliterPerDay: return (baseUnitValue*86400000) / 1e27d;
                case VolumeFlowUnit.QutraliterPerHour: return (baseUnitValue*3600000.000) / 1e27d;
                case VolumeFlowUnit.QutraliterPerMinute: return (baseUnitValue*60000.00000) / 1e27d;
                case VolumeFlowUnit.TeraliterPerDay: return (baseUnitValue*86400000) / 1e12d;
                case VolumeFlowUnit.TeraliterPerHour: return (baseUnitValue*3600000.000) / 1e12d;
                case VolumeFlowUnit.TeraliterPerMinute: return (baseUnitValue*60000.00000) / 1e12d;
                case VolumeFlowUnit.UkGallonPerDay: return baseUnitValue*19005304;
                case VolumeFlowUnit.UkGallonPerMinute: return baseUnitValue*13198.2;
                case VolumeFlowUnit.UkGallonPerSecond: return baseUnitValue*219.969;
                case VolumeFlowUnit.UsGallonPerDay: return baseUnitValue*22824465.227;
                case VolumeFlowUnit.UsGallonPerHour: return baseUnitValue*951019.38848933424;
                case VolumeFlowUnit.UsGallonPerMinute: return baseUnitValue*15850.323141489;
                case VolumeFlowUnit.UsGallonPerSecond: return baseUnitValue*264.1720523581484;
                case VolumeFlowUnit.VettaliterPerDay: return (baseUnitValue*86400000) / 1e30d;
                case VolumeFlowUnit.VettaliterPerHour: return (baseUnitValue*3600000.000) / 1e30d;
                case VolumeFlowUnit.VettaliterPerMinute: return (baseUnitValue*60000.00000) / 1e30d;
                case VolumeFlowUnit.YoctoliterPerDay: return (baseUnitValue*86400000) / 1e-24d;
                case VolumeFlowUnit.YoctoliterPerHour: return (baseUnitValue*3600000.000) / 1e-24d;
                case VolumeFlowUnit.YoctoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-24d;
                case VolumeFlowUnit.YottaliterPerDay: return (baseUnitValue*86400000) / 1e24d;
                case VolumeFlowUnit.YottaliterPerHour: return (baseUnitValue*3600000.000) / 1e24d;
                case VolumeFlowUnit.YottaliterPerMinute: return (baseUnitValue*60000.00000) / 1e24d;
                case VolumeFlowUnit.ZeptoliterPerDay: return (baseUnitValue*86400000) / 1e-21d;
                case VolumeFlowUnit.ZeptoliterPerHour: return (baseUnitValue*3600000.000) / 1e-21d;
                case VolumeFlowUnit.ZeptoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-21d;
                case VolumeFlowUnit.ZettaliterPerDay: return (baseUnitValue*86400000) / 1e21d;
                case VolumeFlowUnit.ZettaliterPerHour: return (baseUnitValue*3600000.000) / 1e21d;
                case VolumeFlowUnit.ZettaliterPerMinute: return (baseUnitValue*60000.00000) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
