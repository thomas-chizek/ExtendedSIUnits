//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Specific entropy is an amount of energy required to raise temperature of a substance by 1 Kelvin per unit mass.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class SpecificEntropy : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificEntropyUnit? _unit;

        static SpecificEntropy()
        {
            BaseDimensions = new BaseDimensions(2, 0, -2, 0, -1, 0, 0);
            Info = new QuantityInfo(QuantityType.SpecificEntropy, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit JoulePerKilogramKelvin.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public SpecificEntropy()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private SpecificEntropy(double numericValue, SpecificEntropyUnit unit)
        {
            if(unit == SpecificEntropyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificEntropy, which is JoulePerKilogramKelvin. All conversions go via this value.
        /// </summary>
        public static SpecificEntropyUnit BaseUnit { get; } = SpecificEntropyUnit.JoulePerKilogramKelvin;

        /// <summary>
        /// Represents the largest possible value of SpecificEntropy
        /// </summary>
        public static SpecificEntropy MaxValue { get; } = new SpecificEntropy(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of SpecificEntropy
        /// </summary>
        public static SpecificEntropy MinValue { get; } = new SpecificEntropy(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.SpecificEntropy;

        /// <summary>
        ///     All units of measurement for the SpecificEntropy quantity.
        /// </summary>
        public static SpecificEntropyUnit[] Units { get; } = Enum.GetValues(typeof(SpecificEntropyUnit)).Cast<SpecificEntropyUnit>().Except(new SpecificEntropyUnit[]{ SpecificEntropyUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogramKelvin.
        /// </summary>
        public static SpecificEntropy Zero { get; } = new SpecificEntropy(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public SpecificEntropyUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => SpecificEntropy.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificEntropy.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get SpecificEntropy in BtusPerPoundFahrenheit.
        /// </summary>
        public double BtusPerPoundFahrenheit => As(SpecificEntropyUnit.BtuPerPoundFahrenheit);

        /// <summary>
        ///     Get SpecificEntropy in CaloriesPerGramKelvin.
        /// </summary>
        public double CaloriesPerGramKelvin => As(SpecificEntropyUnit.CaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in CenticaloriesPerGramKelvin.
        /// </summary>
        public double CenticaloriesPerGramKelvin => As(SpecificEntropyUnit.CenticaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in CentijoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double CentijoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in CentijoulesPerKilogramKelvin.
        /// </summary>
        public double CentijoulesPerKilogramKelvin => As(SpecificEntropyUnit.CentijoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecacaloriesPerGramKelvin.
        /// </summary>
        public double DecacaloriesPerGramKelvin => As(SpecificEntropyUnit.DecacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double DecajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in DecajoulesPerKilogramKelvin.
        /// </summary>
        public double DecajoulesPerKilogramKelvin => As(SpecificEntropyUnit.DecajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecicaloriesPerGramKelvin.
        /// </summary>
        public double DecicaloriesPerGramKelvin => As(SpecificEntropyUnit.DecicaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in DecijoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double DecijoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in DecijoulesPerKilogramKelvin.
        /// </summary>
        public double DecijoulesPerKilogramKelvin => As(SpecificEntropyUnit.DecijoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ExacaloriesPerGramKelvin.
        /// </summary>
        public double ExacaloriesPerGramKelvin => As(SpecificEntropyUnit.ExacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ExajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double ExajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in ExajoulesPerKilogramKelvin.
        /// </summary>
        public double ExajoulesPerKilogramKelvin => As(SpecificEntropyUnit.ExajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in FemtocaloriesPerGramKelvin.
        /// </summary>
        public double FemtocaloriesPerGramKelvin => As(SpecificEntropyUnit.FemtocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in FemtojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double FemtojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in FemtojoulesPerKilogramKelvin.
        /// </summary>
        public double FemtojoulesPerKilogramKelvin => As(SpecificEntropyUnit.FemtojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in GigacaloriesPerGramKelvin.
        /// </summary>
        public double GigacaloriesPerGramKelvin => As(SpecificEntropyUnit.GigacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in GigajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double GigajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in GigajoulesPerKilogramKelvin.
        /// </summary>
        public double GigajoulesPerKilogramKelvin => As(SpecificEntropyUnit.GigajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in HectocaloriesPerGramKelvin.
        /// </summary>
        public double HectocaloriesPerGramKelvin => As(SpecificEntropyUnit.HectocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in HectojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double HectojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in HectojoulesPerKilogramKelvin.
        /// </summary>
        public double HectojoulesPerKilogramKelvin => As(SpecificEntropyUnit.HectojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in JoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double JoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.JoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in JoulesPerKilogramKelvin.
        /// </summary>
        public double JoulesPerKilogramKelvin => As(SpecificEntropyUnit.JoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in KilocaloriesPerGramKelvin.
        /// </summary>
        public double KilocaloriesPerGramKelvin => As(SpecificEntropyUnit.KilocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in KilojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double KilojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in KilojoulesPerKilogramKelvin.
        /// </summary>
        public double KilojoulesPerKilogramKelvin => As(SpecificEntropyUnit.KilojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MegacaloriesPerGramKelvin.
        /// </summary>
        public double MegacaloriesPerGramKelvin => As(SpecificEntropyUnit.MegacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MegajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double MegajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in MegajoulesPerKilogramKelvin.
        /// </summary>
        public double MegajoulesPerKilogramKelvin => As(SpecificEntropyUnit.MegajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MicrocaloriesPerGramKelvin.
        /// </summary>
        public double MicrocaloriesPerGramKelvin => As(SpecificEntropyUnit.MicrocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MicrojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double MicrojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in MicrojoulesPerKilogramKelvin.
        /// </summary>
        public double MicrojoulesPerKilogramKelvin => As(SpecificEntropyUnit.MicrojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MillicaloriesPerGramKelvin.
        /// </summary>
        public double MillicaloriesPerGramKelvin => As(SpecificEntropyUnit.MillicaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in MillijoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double MillijoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in MillijoulesPerKilogramKelvin.
        /// </summary>
        public double MillijoulesPerKilogramKelvin => As(SpecificEntropyUnit.MillijoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in NanocaloriesPerGramKelvin.
        /// </summary>
        public double NanocaloriesPerGramKelvin => As(SpecificEntropyUnit.NanocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in NanojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double NanojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in NanojoulesPerKilogramKelvin.
        /// </summary>
        public double NanojoulesPerKilogramKelvin => As(SpecificEntropyUnit.NanojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PetacaloriesPerGramKelvin.
        /// </summary>
        public double PetacaloriesPerGramKelvin => As(SpecificEntropyUnit.PetacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PetajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double PetajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in PetajoulesPerKilogramKelvin.
        /// </summary>
        public double PetajoulesPerKilogramKelvin => As(SpecificEntropyUnit.PetajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PicocaloriesPerGramKelvin.
        /// </summary>
        public double PicocaloriesPerGramKelvin => As(SpecificEntropyUnit.PicocaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in PicojoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double PicojoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in PicojoulesPerKilogramKelvin.
        /// </summary>
        public double PicojoulesPerKilogramKelvin => As(SpecificEntropyUnit.PicojoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in QutracaloriesPerGramKelvin.
        /// </summary>
        public double QutracaloriesPerGramKelvin => As(SpecificEntropyUnit.QutracaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in QutrajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double QutrajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in QutrajoulesPerKilogramKelvin.
        /// </summary>
        public double QutrajoulesPerKilogramKelvin => As(SpecificEntropyUnit.QutrajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in TeracaloriesPerGramKelvin.
        /// </summary>
        public double TeracaloriesPerGramKelvin => As(SpecificEntropyUnit.TeracaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in TerajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double TerajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in TerajoulesPerKilogramKelvin.
        /// </summary>
        public double TerajoulesPerKilogramKelvin => As(SpecificEntropyUnit.TerajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in VettacaloriesPerGramKelvin.
        /// </summary>
        public double VettacaloriesPerGramKelvin => As(SpecificEntropyUnit.VettacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in VettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double VettajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in VettajoulesPerKilogramKelvin.
        /// </summary>
        public double VettajoulesPerKilogramKelvin => As(SpecificEntropyUnit.VettajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in YottacaloriesPerGramKelvin.
        /// </summary>
        public double YottacaloriesPerGramKelvin => As(SpecificEntropyUnit.YottacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in YottajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double YottajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in YottajoulesPerKilogramKelvin.
        /// </summary>
        public double YottajoulesPerKilogramKelvin => As(SpecificEntropyUnit.YottajoulePerKilogramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ZettacaloriesPerGramKelvin.
        /// </summary>
        public double ZettacaloriesPerGramKelvin => As(SpecificEntropyUnit.ZettacaloriePerGramKelvin);

        /// <summary>
        ///     Get SpecificEntropy in ZettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        public double ZettajoulesPerKilogramDegreeCelsius => As(SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius);

        /// <summary>
        ///     Get SpecificEntropy in ZettajoulesPerKilogramKelvin.
        /// </summary>
        public double ZettajoulesPerKilogramKelvin => As(SpecificEntropyUnit.ZettajoulePerKilogramKelvin);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificEntropyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(SpecificEntropyUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificEntropy from BtusPerPoundFahrenheit.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromBtusPerPoundFahrenheit(double btusperpoundfahrenheit)
        {
            double value = (double) btusperpoundfahrenheit;
            return new SpecificEntropy(value, SpecificEntropyUnit.BtuPerPoundFahrenheit);
        }
        /// <summary>
        ///     Get SpecificEntropy from CaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromCaloriesPerGramKelvin(double caloriespergramkelvin)
        {
            double value = (double) caloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.CaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from CenticaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromCenticaloriesPerGramKelvin(double centicaloriespergramkelvin)
        {
            double value = (double) centicaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.CenticaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from CentijoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromCentijoulesPerKilogramDegreeCelsius(double centijoulesperkilogramdegreecelsius)
        {
            double value = (double) centijoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from CentijoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromCentijoulesPerKilogramKelvin(double centijoulesperkilogramkelvin)
        {
            double value = (double) centijoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.CentijoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromDecacaloriesPerGramKelvin(double decacaloriespergramkelvin)
        {
            double value = (double) decacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromDecajoulesPerKilogramDegreeCelsius(double decajoulesperkilogramdegreecelsius)
        {
            double value = (double) decajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromDecajoulesPerKilogramKelvin(double decajoulesperkilogramkelvin)
        {
            double value = (double) decajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecicaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromDecicaloriesPerGramKelvin(double decicaloriespergramkelvin)
        {
            double value = (double) decicaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecicaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecijoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromDecijoulesPerKilogramDegreeCelsius(double decijoulesperkilogramdegreecelsius)
        {
            double value = (double) decijoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from DecijoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromDecijoulesPerKilogramKelvin(double decijoulesperkilogramkelvin)
        {
            double value = (double) decijoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.DecijoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ExacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromExacaloriesPerGramKelvin(double exacaloriespergramkelvin)
        {
            double value = (double) exacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ExacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ExajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromExajoulesPerKilogramDegreeCelsius(double exajoulesperkilogramdegreecelsius)
        {
            double value = (double) exajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from ExajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromExajoulesPerKilogramKelvin(double exajoulesperkilogramkelvin)
        {
            double value = (double) exajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ExajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from FemtocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromFemtocaloriesPerGramKelvin(double femtocaloriespergramkelvin)
        {
            double value = (double) femtocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.FemtocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from FemtojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromFemtojoulesPerKilogramDegreeCelsius(double femtojoulesperkilogramdegreecelsius)
        {
            double value = (double) femtojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from FemtojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromFemtojoulesPerKilogramKelvin(double femtojoulesperkilogramkelvin)
        {
            double value = (double) femtojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.FemtojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from GigacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromGigacaloriesPerGramKelvin(double gigacaloriespergramkelvin)
        {
            double value = (double) gigacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.GigacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from GigajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromGigajoulesPerKilogramDegreeCelsius(double gigajoulesperkilogramdegreecelsius)
        {
            double value = (double) gigajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from GigajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromGigajoulesPerKilogramKelvin(double gigajoulesperkilogramkelvin)
        {
            double value = (double) gigajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.GigajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from HectocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromHectocaloriesPerGramKelvin(double hectocaloriespergramkelvin)
        {
            double value = (double) hectocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.HectocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from HectojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromHectojoulesPerKilogramDegreeCelsius(double hectojoulesperkilogramdegreecelsius)
        {
            double value = (double) hectojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from HectojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromHectojoulesPerKilogramKelvin(double hectojoulesperkilogramkelvin)
        {
            double value = (double) hectojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.HectojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from JoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromJoulesPerKilogramDegreeCelsius(double joulesperkilogramdegreecelsius)
        {
            double value = (double) joulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.JoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from JoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromJoulesPerKilogramKelvin(double joulesperkilogramkelvin)
        {
            double value = (double) joulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.JoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from KilocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromKilocaloriesPerGramKelvin(double kilocaloriespergramkelvin)
        {
            double value = (double) kilocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.KilocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from KilojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromKilojoulesPerKilogramDegreeCelsius(double kilojoulesperkilogramdegreecelsius)
        {
            double value = (double) kilojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from KilojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromKilojoulesPerKilogramKelvin(double kilojoulesperkilogramkelvin)
        {
            double value = (double) kilojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.KilojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MegacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMegacaloriesPerGramKelvin(double megacaloriespergramkelvin)
        {
            double value = (double) megacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MegacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MegajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMegajoulesPerKilogramDegreeCelsius(double megajoulesperkilogramdegreecelsius)
        {
            double value = (double) megajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from MegajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMegajoulesPerKilogramKelvin(double megajoulesperkilogramkelvin)
        {
            double value = (double) megajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MegajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MicrocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMicrocaloriesPerGramKelvin(double microcaloriespergramkelvin)
        {
            double value = (double) microcaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MicrocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MicrojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMicrojoulesPerKilogramDegreeCelsius(double microjoulesperkilogramdegreecelsius)
        {
            double value = (double) microjoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from MicrojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMicrojoulesPerKilogramKelvin(double microjoulesperkilogramkelvin)
        {
            double value = (double) microjoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MicrojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MillicaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMillicaloriesPerGramKelvin(double millicaloriespergramkelvin)
        {
            double value = (double) millicaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MillicaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from MillijoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMillijoulesPerKilogramDegreeCelsius(double millijoulesperkilogramdegreecelsius)
        {
            double value = (double) millijoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from MillijoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromMillijoulesPerKilogramKelvin(double millijoulesperkilogramkelvin)
        {
            double value = (double) millijoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.MillijoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from NanocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromNanocaloriesPerGramKelvin(double nanocaloriespergramkelvin)
        {
            double value = (double) nanocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.NanocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from NanojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromNanojoulesPerKilogramDegreeCelsius(double nanojoulesperkilogramdegreecelsius)
        {
            double value = (double) nanojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from NanojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromNanojoulesPerKilogramKelvin(double nanojoulesperkilogramkelvin)
        {
            double value = (double) nanojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.NanojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PetacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromPetacaloriesPerGramKelvin(double petacaloriespergramkelvin)
        {
            double value = (double) petacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PetacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PetajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromPetajoulesPerKilogramDegreeCelsius(double petajoulesperkilogramdegreecelsius)
        {
            double value = (double) petajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from PetajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromPetajoulesPerKilogramKelvin(double petajoulesperkilogramkelvin)
        {
            double value = (double) petajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PetajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PicocaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromPicocaloriesPerGramKelvin(double picocaloriespergramkelvin)
        {
            double value = (double) picocaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PicocaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from PicojoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromPicojoulesPerKilogramDegreeCelsius(double picojoulesperkilogramdegreecelsius)
        {
            double value = (double) picojoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from PicojoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromPicojoulesPerKilogramKelvin(double picojoulesperkilogramkelvin)
        {
            double value = (double) picojoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.PicojoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from QutracaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromQutracaloriesPerGramKelvin(double qutracaloriespergramkelvin)
        {
            double value = (double) qutracaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.QutracaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from QutrajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromQutrajoulesPerKilogramDegreeCelsius(double qutrajoulesperkilogramdegreecelsius)
        {
            double value = (double) qutrajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from QutrajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromQutrajoulesPerKilogramKelvin(double qutrajoulesperkilogramkelvin)
        {
            double value = (double) qutrajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.QutrajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from TeracaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromTeracaloriesPerGramKelvin(double teracaloriespergramkelvin)
        {
            double value = (double) teracaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.TeracaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from TerajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromTerajoulesPerKilogramDegreeCelsius(double terajoulesperkilogramdegreecelsius)
        {
            double value = (double) terajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from TerajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromTerajoulesPerKilogramKelvin(double terajoulesperkilogramkelvin)
        {
            double value = (double) terajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.TerajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from VettacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromVettacaloriesPerGramKelvin(double vettacaloriespergramkelvin)
        {
            double value = (double) vettacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.VettacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from VettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromVettajoulesPerKilogramDegreeCelsius(double vettajoulesperkilogramdegreecelsius)
        {
            double value = (double) vettajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from VettajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromVettajoulesPerKilogramKelvin(double vettajoulesperkilogramkelvin)
        {
            double value = (double) vettajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.VettajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from YottacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromYottacaloriesPerGramKelvin(double yottacaloriespergramkelvin)
        {
            double value = (double) yottacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.YottacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from YottajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromYottajoulesPerKilogramDegreeCelsius(double yottajoulesperkilogramdegreecelsius)
        {
            double value = (double) yottajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from YottajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromYottajoulesPerKilogramKelvin(double yottajoulesperkilogramkelvin)
        {
            double value = (double) yottajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.YottajoulePerKilogramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZettacaloriesPerGramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromZettacaloriesPerGramKelvin(double zettacaloriespergramkelvin)
        {
            double value = (double) zettacaloriespergramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZettacaloriePerGramKelvin);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZettajoulesPerKilogramDegreeCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromZettajoulesPerKilogramDegreeCelsius(double zettajoulesperkilogramdegreecelsius)
        {
            double value = (double) zettajoulesperkilogramdegreecelsius;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius);
        }
        /// <summary>
        ///     Get SpecificEntropy from ZettajoulesPerKilogramKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEntropy FromZettajoulesPerKilogramKelvin(double zettajoulesperkilogramkelvin)
        {
            double value = (double) zettajoulesperkilogramkelvin;
            return new SpecificEntropy(value, SpecificEntropyUnit.ZettajoulePerKilogramKelvin);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificEntropyUnit" /> to <see cref="SpecificEntropy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificEntropy unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static SpecificEntropy From(double value, SpecificEntropyUnit fromUnit)
        {
            return new SpecificEntropy((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificEntropy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpecificEntropy Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<SpecificEntropy, SpecificEntropyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificEntropy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out SpecificEntropy result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<SpecificEntropy, SpecificEntropyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificEntropyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpecificEntropyUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<SpecificEntropyUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out SpecificEntropyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out SpecificEntropyUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<SpecificEntropyUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is SpecificEntropy objSpecificEntropy)) throw new ArgumentException("Expected type SpecificEntropy.", nameof(obj));

            return CompareTo(objSpecificEntropy);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(SpecificEntropy other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is SpecificEntropy objSpecificEntropy))
                return false;

            return Equals(objSpecificEntropy);
        }

        public bool Equals(SpecificEntropy other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificEntropy within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificEntropy other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificEntropy.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((SpecificEntropyUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificEntropyUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this SpecificEntropy to another SpecificEntropy with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificEntropy with the specified unit.</returns>
        public SpecificEntropy ToUnit(SpecificEntropyUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new SpecificEntropy(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case SpecificEntropyUnit.BtuPerPoundFahrenheit: return _value * 4.1868e3;
                case SpecificEntropyUnit.CaloriePerGramKelvin: return _value*4.184e3;
                case SpecificEntropyUnit.CenticaloriePerGramKelvin: return (_value*4.184e3) * 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius: return (_value) * 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramKelvin: return (_value) * 1e-2d;
                case SpecificEntropyUnit.DecacaloriePerGramKelvin: return (_value*4.184e3) * 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius: return (_value) * 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramKelvin: return (_value) * 1e1d;
                case SpecificEntropyUnit.DecicaloriePerGramKelvin: return (_value*4.184e3) * 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius: return (_value) * 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramKelvin: return (_value) * 1e-1d;
                case SpecificEntropyUnit.ExacaloriePerGramKelvin: return (_value*4.184e3) * 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius: return (_value) * 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramKelvin: return (_value) * 1e18d;
                case SpecificEntropyUnit.FemtocaloriePerGramKelvin: return (_value*4.184e3) * 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius: return (_value) * 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramKelvin: return (_value) * 1e-15d;
                case SpecificEntropyUnit.GigacaloriePerGramKelvin: return (_value*4.184e3) * 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius: return (_value) * 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramKelvin: return (_value) * 1e9d;
                case SpecificEntropyUnit.HectocaloriePerGramKelvin: return (_value*4.184e3) * 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius: return (_value) * 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramKelvin: return (_value) * 1e2d;
                case SpecificEntropyUnit.JoulePerKilogramDegreeCelsius: return _value;
                case SpecificEntropyUnit.JoulePerKilogramKelvin: return _value;
                case SpecificEntropyUnit.KilocaloriePerGramKelvin: return (_value*4.184e3) * 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius: return (_value) * 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramKelvin: return (_value) * 1e3d;
                case SpecificEntropyUnit.MegacaloriePerGramKelvin: return (_value*4.184e3) * 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius: return (_value) * 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramKelvin: return (_value) * 1e6d;
                case SpecificEntropyUnit.MicrocaloriePerGramKelvin: return (_value*4.184e3) * 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius: return (_value) * 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramKelvin: return (_value) * 1e-6d;
                case SpecificEntropyUnit.MillicaloriePerGramKelvin: return (_value*4.184e3) * 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius: return (_value) * 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramKelvin: return (_value) * 1e-3d;
                case SpecificEntropyUnit.NanocaloriePerGramKelvin: return (_value*4.184e3) * 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius: return (_value) * 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramKelvin: return (_value) * 1e-9d;
                case SpecificEntropyUnit.PetacaloriePerGramKelvin: return (_value*4.184e3) * 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius: return (_value) * 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramKelvin: return (_value) * 1e15d;
                case SpecificEntropyUnit.PicocaloriePerGramKelvin: return (_value*4.184e3) * 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius: return (_value) * 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramKelvin: return (_value) * 1e-12d;
                case SpecificEntropyUnit.QutracaloriePerGramKelvin: return (_value*4.184e3) * 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius: return (_value) * 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramKelvin: return (_value) * 1e27d;
                case SpecificEntropyUnit.TeracaloriePerGramKelvin: return (_value*4.184e3) * 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius: return (_value) * 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramKelvin: return (_value) * 1e12d;
                case SpecificEntropyUnit.VettacaloriePerGramKelvin: return (_value*4.184e3) * 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius: return (_value) * 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramKelvin: return (_value) * 1e30d;
                case SpecificEntropyUnit.YottacaloriePerGramKelvin: return (_value*4.184e3) * 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius: return (_value) * 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramKelvin: return (_value) * 1e24d;
                case SpecificEntropyUnit.ZettacaloriePerGramKelvin: return (_value*4.184e3) * 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius: return (_value) * 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramKelvin: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(SpecificEntropyUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case SpecificEntropyUnit.BtuPerPoundFahrenheit: return baseUnitValue / 4.1868e3;
                case SpecificEntropyUnit.CaloriePerGramKelvin: return baseUnitValue/4.184e3;
                case SpecificEntropyUnit.CenticaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-2d;
                case SpecificEntropyUnit.CentijoulePerKilogramKelvin: return (baseUnitValue) / 1e-2d;
                case SpecificEntropyUnit.DecacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e1d;
                case SpecificEntropyUnit.DecajoulePerKilogramKelvin: return (baseUnitValue) / 1e1d;
                case SpecificEntropyUnit.DecicaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-1d;
                case SpecificEntropyUnit.DecijoulePerKilogramKelvin: return (baseUnitValue) / 1e-1d;
                case SpecificEntropyUnit.ExacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e18d;
                case SpecificEntropyUnit.ExajoulePerKilogramKelvin: return (baseUnitValue) / 1e18d;
                case SpecificEntropyUnit.FemtocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-15d;
                case SpecificEntropyUnit.FemtojoulePerKilogramKelvin: return (baseUnitValue) / 1e-15d;
                case SpecificEntropyUnit.GigacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e9d;
                case SpecificEntropyUnit.GigajoulePerKilogramKelvin: return (baseUnitValue) / 1e9d;
                case SpecificEntropyUnit.HectocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e2d;
                case SpecificEntropyUnit.HectojoulePerKilogramKelvin: return (baseUnitValue) / 1e2d;
                case SpecificEntropyUnit.JoulePerKilogramDegreeCelsius: return baseUnitValue;
                case SpecificEntropyUnit.JoulePerKilogramKelvin: return baseUnitValue;
                case SpecificEntropyUnit.KilocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e3d;
                case SpecificEntropyUnit.KilojoulePerKilogramKelvin: return (baseUnitValue) / 1e3d;
                case SpecificEntropyUnit.MegacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e6d;
                case SpecificEntropyUnit.MegajoulePerKilogramKelvin: return (baseUnitValue) / 1e6d;
                case SpecificEntropyUnit.MicrocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-6d;
                case SpecificEntropyUnit.MicrojoulePerKilogramKelvin: return (baseUnitValue) / 1e-6d;
                case SpecificEntropyUnit.MillicaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-3d;
                case SpecificEntropyUnit.MillijoulePerKilogramKelvin: return (baseUnitValue) / 1e-3d;
                case SpecificEntropyUnit.NanocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-9d;
                case SpecificEntropyUnit.NanojoulePerKilogramKelvin: return (baseUnitValue) / 1e-9d;
                case SpecificEntropyUnit.PetacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e15d;
                case SpecificEntropyUnit.PetajoulePerKilogramKelvin: return (baseUnitValue) / 1e15d;
                case SpecificEntropyUnit.PicocaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e-12d;
                case SpecificEntropyUnit.PicojoulePerKilogramKelvin: return (baseUnitValue) / 1e-12d;
                case SpecificEntropyUnit.QutracaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e27d;
                case SpecificEntropyUnit.QutrajoulePerKilogramKelvin: return (baseUnitValue) / 1e27d;
                case SpecificEntropyUnit.TeracaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e12d;
                case SpecificEntropyUnit.TerajoulePerKilogramKelvin: return (baseUnitValue) / 1e12d;
                case SpecificEntropyUnit.VettacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e30d;
                case SpecificEntropyUnit.VettajoulePerKilogramKelvin: return (baseUnitValue) / 1e30d;
                case SpecificEntropyUnit.YottacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e24d;
                case SpecificEntropyUnit.YottajoulePerKilogramKelvin: return (baseUnitValue) / 1e24d;
                case SpecificEntropyUnit.ZettacaloriePerGramKelvin: return (baseUnitValue/4.184e3) / 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramDegreeCelsius: return (baseUnitValue) / 1e21d;
                case SpecificEntropyUnit.ZettajoulePerKilogramKelvin: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
