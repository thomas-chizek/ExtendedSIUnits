//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volt-ampere reactive (var) is a unit by which reactive power is expressed in an AC electric power system. Reactive power exists in an AC circuit when the current and voltage are not in phase.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class ReactivePower : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ReactivePowerUnit? _unit;

        static ReactivePower()
        {
            BaseDimensions = new BaseDimensions(2, 1, -3, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.ReactivePower, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit VoltampereReactive.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public ReactivePower()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private ReactivePower(double numericValue, ReactivePowerUnit unit)
        {
            if(unit == ReactivePowerUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of ReactivePower, which is VoltampereReactive. All conversions go via this value.
        /// </summary>
        public static ReactivePowerUnit BaseUnit { get; } = ReactivePowerUnit.VoltampereReactive;

        /// <summary>
        /// Represents the largest possible value of ReactivePower
        /// </summary>
        public static ReactivePower MaxValue { get; } = new ReactivePower(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ReactivePower
        /// </summary>
        public static ReactivePower MinValue { get; } = new ReactivePower(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.ReactivePower;

        /// <summary>
        ///     All units of measurement for the ReactivePower quantity.
        /// </summary>
        public static ReactivePowerUnit[] Units { get; } = Enum.GetValues(typeof(ReactivePowerUnit)).Cast<ReactivePowerUnit>().Except(new ReactivePowerUnit[]{ ReactivePowerUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit VoltampereReactive.
        /// </summary>
        public static ReactivePower Zero { get; } = new ReactivePower(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public ReactivePowerUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => ReactivePower.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => ReactivePower.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get ReactivePower in AttovoltamperesReactive.
        /// </summary>
        public double AttovoltamperesReactive => As(ReactivePowerUnit.AttovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in CentivoltamperesReactive.
        /// </summary>
        public double CentivoltamperesReactive => As(ReactivePowerUnit.CentivoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in DecavoltamperesReactive.
        /// </summary>
        public double DecavoltamperesReactive => As(ReactivePowerUnit.DecavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in DecivoltamperesReactive.
        /// </summary>
        public double DecivoltamperesReactive => As(ReactivePowerUnit.DecivoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in ExavoltamperesReactive.
        /// </summary>
        public double ExavoltamperesReactive => As(ReactivePowerUnit.ExavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in FemtovoltamperesReactive.
        /// </summary>
        public double FemtovoltamperesReactive => As(ReactivePowerUnit.FemtovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in GigavoltamperesReactive.
        /// </summary>
        public double GigavoltamperesReactive => As(ReactivePowerUnit.GigavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in HectovoltamperesReactive.
        /// </summary>
        public double HectovoltamperesReactive => As(ReactivePowerUnit.HectovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in KilovoltamperesReactive.
        /// </summary>
        public double KilovoltamperesReactive => As(ReactivePowerUnit.KilovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in MegavoltamperesReactive.
        /// </summary>
        public double MegavoltamperesReactive => As(ReactivePowerUnit.MegavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in MicrovoltamperesReactive.
        /// </summary>
        public double MicrovoltamperesReactive => As(ReactivePowerUnit.MicrovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in MillivoltamperesReactive.
        /// </summary>
        public double MillivoltamperesReactive => As(ReactivePowerUnit.MillivoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in NanovoltamperesReactive.
        /// </summary>
        public double NanovoltamperesReactive => As(ReactivePowerUnit.NanovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in PetavoltamperesReactive.
        /// </summary>
        public double PetavoltamperesReactive => As(ReactivePowerUnit.PetavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in PicovoltamperesReactive.
        /// </summary>
        public double PicovoltamperesReactive => As(ReactivePowerUnit.PicovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in QutravoltamperesReactive.
        /// </summary>
        public double QutravoltamperesReactive => As(ReactivePowerUnit.QutravoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in TeravoltamperesReactive.
        /// </summary>
        public double TeravoltamperesReactive => As(ReactivePowerUnit.TeravoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in VettavoltamperesReactive.
        /// </summary>
        public double VettavoltamperesReactive => As(ReactivePowerUnit.VettavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in VoltamperesReactive.
        /// </summary>
        public double VoltamperesReactive => As(ReactivePowerUnit.VoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in YoctovoltamperesReactive.
        /// </summary>
        public double YoctovoltamperesReactive => As(ReactivePowerUnit.YoctovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in YottavoltamperesReactive.
        /// </summary>
        public double YottavoltamperesReactive => As(ReactivePowerUnit.YottavoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in ZeptovoltamperesReactive.
        /// </summary>
        public double ZeptovoltamperesReactive => As(ReactivePowerUnit.ZeptovoltampereReactive);

        /// <summary>
        ///     Get ReactivePower in ZettavoltamperesReactive.
        /// </summary>
        public double ZettavoltamperesReactive => As(ReactivePowerUnit.ZettavoltampereReactive);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(ReactivePowerUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(ReactivePowerUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get ReactivePower from AttovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromAttovoltamperesReactive(double attovoltamperesreactive)
        {
            double value = (double) attovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.AttovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from CentivoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromCentivoltamperesReactive(double centivoltamperesreactive)
        {
            double value = (double) centivoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.CentivoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from DecavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromDecavoltamperesReactive(double decavoltamperesreactive)
        {
            double value = (double) decavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.DecavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from DecivoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromDecivoltamperesReactive(double decivoltamperesreactive)
        {
            double value = (double) decivoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.DecivoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from ExavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromExavoltamperesReactive(double exavoltamperesreactive)
        {
            double value = (double) exavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.ExavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from FemtovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromFemtovoltamperesReactive(double femtovoltamperesreactive)
        {
            double value = (double) femtovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.FemtovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from GigavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromGigavoltamperesReactive(double gigavoltamperesreactive)
        {
            double value = (double) gigavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.GigavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from HectovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromHectovoltamperesReactive(double hectovoltamperesreactive)
        {
            double value = (double) hectovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.HectovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from KilovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromKilovoltamperesReactive(double kilovoltamperesreactive)
        {
            double value = (double) kilovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.KilovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from MegavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromMegavoltamperesReactive(double megavoltamperesreactive)
        {
            double value = (double) megavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.MegavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from MicrovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromMicrovoltamperesReactive(double microvoltamperesreactive)
        {
            double value = (double) microvoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.MicrovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from MillivoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromMillivoltamperesReactive(double millivoltamperesreactive)
        {
            double value = (double) millivoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.MillivoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from NanovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromNanovoltamperesReactive(double nanovoltamperesreactive)
        {
            double value = (double) nanovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.NanovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from PetavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromPetavoltamperesReactive(double petavoltamperesreactive)
        {
            double value = (double) petavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.PetavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from PicovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromPicovoltamperesReactive(double picovoltamperesreactive)
        {
            double value = (double) picovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.PicovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from QutravoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromQutravoltamperesReactive(double qutravoltamperesreactive)
        {
            double value = (double) qutravoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.QutravoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from TeravoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromTeravoltamperesReactive(double teravoltamperesreactive)
        {
            double value = (double) teravoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.TeravoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from VettavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromVettavoltamperesReactive(double vettavoltamperesreactive)
        {
            double value = (double) vettavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.VettavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from VoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromVoltamperesReactive(double voltamperesreactive)
        {
            double value = (double) voltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.VoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from YoctovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromYoctovoltamperesReactive(double yoctovoltamperesreactive)
        {
            double value = (double) yoctovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.YoctovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from YottavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromYottavoltamperesReactive(double yottavoltamperesreactive)
        {
            double value = (double) yottavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.YottavoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from ZeptovoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromZeptovoltamperesReactive(double zeptovoltamperesreactive)
        {
            double value = (double) zeptovoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.ZeptovoltampereReactive);
        }
        /// <summary>
        ///     Get ReactivePower from ZettavoltamperesReactive.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static ReactivePower FromZettavoltamperesReactive(double zettavoltamperesreactive)
        {
            double value = (double) zettavoltamperesreactive;
            return new ReactivePower(value, ReactivePowerUnit.ZettavoltampereReactive);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ReactivePowerUnit" /> to <see cref="ReactivePower" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ReactivePower unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static ReactivePower From(double value, ReactivePowerUnit fromUnit)
        {
            return new ReactivePower((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static ReactivePower Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ReactivePower Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<ReactivePower, ReactivePowerUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out ReactivePower result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out ReactivePower result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<ReactivePower, ReactivePowerUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ReactivePowerUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ReactivePowerUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<ReactivePowerUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out ReactivePowerUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out ReactivePowerUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<ReactivePowerUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is ReactivePower objReactivePower)) throw new ArgumentException("Expected type ReactivePower.", nameof(obj));

            return CompareTo(objReactivePower);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(ReactivePower other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is ReactivePower objReactivePower))
                return false;

            return Equals(objReactivePower);
        }

        public bool Equals(ReactivePower other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another ReactivePower within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(ReactivePower other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current ReactivePower.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((ReactivePowerUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(ReactivePowerUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this ReactivePower to another ReactivePower with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A ReactivePower with the specified unit.</returns>
        public ReactivePower ToUnit(ReactivePowerUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new ReactivePower(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case ReactivePowerUnit.AttovoltampereReactive: return (_value) * 1e-18d;
                case ReactivePowerUnit.CentivoltampereReactive: return (_value) * 1e-2d;
                case ReactivePowerUnit.DecavoltampereReactive: return (_value) * 1e1d;
                case ReactivePowerUnit.DecivoltampereReactive: return (_value) * 1e-1d;
                case ReactivePowerUnit.ExavoltampereReactive: return (_value) * 1e18d;
                case ReactivePowerUnit.FemtovoltampereReactive: return (_value) * 1e-15d;
                case ReactivePowerUnit.GigavoltampereReactive: return (_value) * 1e9d;
                case ReactivePowerUnit.HectovoltampereReactive: return (_value) * 1e2d;
                case ReactivePowerUnit.KilovoltampereReactive: return (_value) * 1e3d;
                case ReactivePowerUnit.MegavoltampereReactive: return (_value) * 1e6d;
                case ReactivePowerUnit.MicrovoltampereReactive: return (_value) * 1e-6d;
                case ReactivePowerUnit.MillivoltampereReactive: return (_value) * 1e-3d;
                case ReactivePowerUnit.NanovoltampereReactive: return (_value) * 1e-9d;
                case ReactivePowerUnit.PetavoltampereReactive: return (_value) * 1e15d;
                case ReactivePowerUnit.PicovoltampereReactive: return (_value) * 1e-12d;
                case ReactivePowerUnit.QutravoltampereReactive: return (_value) * 1e27d;
                case ReactivePowerUnit.TeravoltampereReactive: return (_value) * 1e12d;
                case ReactivePowerUnit.VettavoltampereReactive: return (_value) * 1e30d;
                case ReactivePowerUnit.VoltampereReactive: return _value;
                case ReactivePowerUnit.YoctovoltampereReactive: return (_value) * 1e-24d;
                case ReactivePowerUnit.YottavoltampereReactive: return (_value) * 1e24d;
                case ReactivePowerUnit.ZeptovoltampereReactive: return (_value) * 1e-21d;
                case ReactivePowerUnit.ZettavoltampereReactive: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(ReactivePowerUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case ReactivePowerUnit.AttovoltampereReactive: return (baseUnitValue) / 1e-18d;
                case ReactivePowerUnit.CentivoltampereReactive: return (baseUnitValue) / 1e-2d;
                case ReactivePowerUnit.DecavoltampereReactive: return (baseUnitValue) / 1e1d;
                case ReactivePowerUnit.DecivoltampereReactive: return (baseUnitValue) / 1e-1d;
                case ReactivePowerUnit.ExavoltampereReactive: return (baseUnitValue) / 1e18d;
                case ReactivePowerUnit.FemtovoltampereReactive: return (baseUnitValue) / 1e-15d;
                case ReactivePowerUnit.GigavoltampereReactive: return (baseUnitValue) / 1e9d;
                case ReactivePowerUnit.HectovoltampereReactive: return (baseUnitValue) / 1e2d;
                case ReactivePowerUnit.KilovoltampereReactive: return (baseUnitValue) / 1e3d;
                case ReactivePowerUnit.MegavoltampereReactive: return (baseUnitValue) / 1e6d;
                case ReactivePowerUnit.MicrovoltampereReactive: return (baseUnitValue) / 1e-6d;
                case ReactivePowerUnit.MillivoltampereReactive: return (baseUnitValue) / 1e-3d;
                case ReactivePowerUnit.NanovoltampereReactive: return (baseUnitValue) / 1e-9d;
                case ReactivePowerUnit.PetavoltampereReactive: return (baseUnitValue) / 1e15d;
                case ReactivePowerUnit.PicovoltampereReactive: return (baseUnitValue) / 1e-12d;
                case ReactivePowerUnit.QutravoltampereReactive: return (baseUnitValue) / 1e27d;
                case ReactivePowerUnit.TeravoltampereReactive: return (baseUnitValue) / 1e12d;
                case ReactivePowerUnit.VettavoltampereReactive: return (baseUnitValue) / 1e30d;
                case ReactivePowerUnit.VoltampereReactive: return baseUnitValue;
                case ReactivePowerUnit.YoctovoltampereReactive: return (baseUnitValue) / 1e-24d;
                case ReactivePowerUnit.YottavoltampereReactive: return (baseUnitValue) / 1e24d;
                case ReactivePowerUnit.ZeptovoltampereReactive: return (baseUnitValue) / 1e-21d;
                case ReactivePowerUnit.ZettavoltampereReactive: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
