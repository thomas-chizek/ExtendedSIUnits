//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Pressure : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit? _unit;

        static Pressure()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Pressure, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Pressure()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Pressure(double numericValue, PressureUnit unit)
        {
            if(unit == PressureUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Pressure, which is Pascal. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; } = PressureUnit.Pascal;

        /// <summary>
        /// Represents the largest possible value of Pressure
        /// </summary>
        public static Pressure MaxValue { get; } = new Pressure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Pressure
        /// </summary>
        public static Pressure MinValue { get; } = new Pressure(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Pressure;

        /// <summary>
        ///     All units of measurement for the Pressure quantity.
        /// </summary>
        public static PressureUnit[] Units { get; } = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>().Except(new PressureUnit[]{ PressureUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        public static Pressure Zero { get; } = new Pressure(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PressureUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Pressure.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Pressure.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Pressure in Atmospheres.
        /// </summary>
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Get Pressure in Attobars.
        /// </summary>
        public double Attobars => As(PressureUnit.Attobar);

        /// <summary>
        ///     Get Pressure in AttonewtonsPerSquareCentimeter.
        /// </summary>
        public double AttonewtonsPerSquareCentimeter => As(PressureUnit.AttonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in AttonewtonsPerSquareMeter.
        /// </summary>
        public double AttonewtonsPerSquareMeter => As(PressureUnit.AttonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in AttonewtonsPerSquareMillimeter.
        /// </summary>
        public double AttonewtonsPerSquareMillimeter => As(PressureUnit.AttonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Attopascals.
        /// </summary>
        public double Attopascals => As(PressureUnit.Attopascal);

        /// <summary>
        ///     Get Pressure in AttopoundsForcePerSquareFoot.
        /// </summary>
        public double AttopoundsForcePerSquareFoot => As(PressureUnit.AttopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in AttopoundsForcePerSquareInch.
        /// </summary>
        public double AttopoundsForcePerSquareInch => As(PressureUnit.AttopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Bars.
        /// </summary>
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Get Pressure in Centibars.
        /// </summary>
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Get Pressure in CentinewtonsPerSquareCentimeter.
        /// </summary>
        public double CentinewtonsPerSquareCentimeter => As(PressureUnit.CentinewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in CentinewtonsPerSquareMeter.
        /// </summary>
        public double CentinewtonsPerSquareMeter => As(PressureUnit.CentinewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in CentinewtonsPerSquareMillimeter.
        /// </summary>
        public double CentinewtonsPerSquareMillimeter => As(PressureUnit.CentinewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Centipascals.
        /// </summary>
        public double Centipascals => As(PressureUnit.Centipascal);

        /// <summary>
        ///     Get Pressure in CentipoundsForcePerSquareFoot.
        /// </summary>
        public double CentipoundsForcePerSquareFoot => As(PressureUnit.CentipoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in CentipoundsForcePerSquareInch.
        /// </summary>
        public double CentipoundsForcePerSquareInch => As(PressureUnit.CentipoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Decabars.
        /// </summary>
        public double Decabars => As(PressureUnit.Decabar);

        /// <summary>
        ///     Get Pressure in DecanewtonsPerSquareCentimeter.
        /// </summary>
        public double DecanewtonsPerSquareCentimeter => As(PressureUnit.DecanewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in DecanewtonsPerSquareMeter.
        /// </summary>
        public double DecanewtonsPerSquareMeter => As(PressureUnit.DecanewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in DecanewtonsPerSquareMillimeter.
        /// </summary>
        public double DecanewtonsPerSquareMillimeter => As(PressureUnit.DecanewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Decapascals.
        /// </summary>
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Get Pressure in DecapoundsForcePerSquareFoot.
        /// </summary>
        public double DecapoundsForcePerSquareFoot => As(PressureUnit.DecapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in DecapoundsForcePerSquareInch.
        /// </summary>
        public double DecapoundsForcePerSquareInch => As(PressureUnit.DecapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Decibars.
        /// </summary>
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Get Pressure in DecinewtonsPerSquareCentimeter.
        /// </summary>
        public double DecinewtonsPerSquareCentimeter => As(PressureUnit.DecinewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in DecinewtonsPerSquareMeter.
        /// </summary>
        public double DecinewtonsPerSquareMeter => As(PressureUnit.DecinewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in DecinewtonsPerSquareMillimeter.
        /// </summary>
        public double DecinewtonsPerSquareMillimeter => As(PressureUnit.DecinewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Decipascals.
        /// </summary>
        public double Decipascals => As(PressureUnit.Decipascal);

        /// <summary>
        ///     Get Pressure in DecipoundsForcePerSquareFoot.
        /// </summary>
        public double DecipoundsForcePerSquareFoot => As(PressureUnit.DecipoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in DecipoundsForcePerSquareInch.
        /// </summary>
        public double DecipoundsForcePerSquareInch => As(PressureUnit.DecipoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in DynesPerSquareCentimeter.
        /// </summary>
        public double DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in Exabars.
        /// </summary>
        public double Exabars => As(PressureUnit.Exabar);

        /// <summary>
        ///     Get Pressure in ExanewtonsPerSquareCentimeter.
        /// </summary>
        public double ExanewtonsPerSquareCentimeter => As(PressureUnit.ExanewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in ExanewtonsPerSquareMeter.
        /// </summary>
        public double ExanewtonsPerSquareMeter => As(PressureUnit.ExanewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in ExanewtonsPerSquareMillimeter.
        /// </summary>
        public double ExanewtonsPerSquareMillimeter => As(PressureUnit.ExanewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Exapascals.
        /// </summary>
        public double Exapascals => As(PressureUnit.Exapascal);

        /// <summary>
        ///     Get Pressure in ExapoundsForcePerSquareFoot.
        /// </summary>
        public double ExapoundsForcePerSquareFoot => As(PressureUnit.ExapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in ExapoundsForcePerSquareInch.
        /// </summary>
        public double ExapoundsForcePerSquareInch => As(PressureUnit.ExapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Femtobars.
        /// </summary>
        public double Femtobars => As(PressureUnit.Femtobar);

        /// <summary>
        ///     Get Pressure in FemtonewtonsPerSquareCentimeter.
        /// </summary>
        public double FemtonewtonsPerSquareCentimeter => As(PressureUnit.FemtonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in FemtonewtonsPerSquareMeter.
        /// </summary>
        public double FemtonewtonsPerSquareMeter => As(PressureUnit.FemtonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in FemtonewtonsPerSquareMillimeter.
        /// </summary>
        public double FemtonewtonsPerSquareMillimeter => As(PressureUnit.FemtonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Femtopascals.
        /// </summary>
        public double Femtopascals => As(PressureUnit.Femtopascal);

        /// <summary>
        ///     Get Pressure in FemtopoundsForcePerSquareFoot.
        /// </summary>
        public double FemtopoundsForcePerSquareFoot => As(PressureUnit.FemtopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in FemtopoundsForcePerSquareInch.
        /// </summary>
        public double FemtopoundsForcePerSquareInch => As(PressureUnit.FemtopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in FeetOfHead.
        /// </summary>
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Get Pressure in Gigabars.
        /// </summary>
        public double Gigabars => As(PressureUnit.Gigabar);

        /// <summary>
        ///     Get Pressure in GiganewtonsPerSquareCentimeter.
        /// </summary>
        public double GiganewtonsPerSquareCentimeter => As(PressureUnit.GiganewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in GiganewtonsPerSquareMeter.
        /// </summary>
        public double GiganewtonsPerSquareMeter => As(PressureUnit.GiganewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in GiganewtonsPerSquareMillimeter.
        /// </summary>
        public double GiganewtonsPerSquareMillimeter => As(PressureUnit.GiganewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Gigapascals.
        /// </summary>
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Get Pressure in GigapoundsForcePerSquareFoot.
        /// </summary>
        public double GigapoundsForcePerSquareFoot => As(PressureUnit.GigapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in GigapoundsForcePerSquareInch.
        /// </summary>
        public double GigapoundsForcePerSquareInch => As(PressureUnit.GigapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Hectobars.
        /// </summary>
        public double Hectobars => As(PressureUnit.Hectobar);

        /// <summary>
        ///     Get Pressure in HectonewtonsPerSquareCentimeter.
        /// </summary>
        public double HectonewtonsPerSquareCentimeter => As(PressureUnit.HectonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in HectonewtonsPerSquareMeter.
        /// </summary>
        public double HectonewtonsPerSquareMeter => As(PressureUnit.HectonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in HectonewtonsPerSquareMillimeter.
        /// </summary>
        public double HectonewtonsPerSquareMillimeter => As(PressureUnit.HectonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Hectopascals.
        /// </summary>
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Get Pressure in HectopoundsForcePerSquareFoot.
        /// </summary>
        public double HectopoundsForcePerSquareFoot => As(PressureUnit.HectopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in HectopoundsForcePerSquareInch.
        /// </summary>
        public double HectopoundsForcePerSquareInch => As(PressureUnit.HectopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in InchesOfMercury.
        /// </summary>
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Get Pressure in InchesOfWaterColumn.
        /// </summary>
        public double InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Get Pressure in Kilobars.
        /// </summary>
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMeter.
        /// </summary>
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMeter.
        /// </summary>
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Kilopascals.
        /// </summary>
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareFoot.
        /// </summary>
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareInch.
        /// </summary>
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Megabars.
        /// </summary>
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Get Pressure in MeganewtonsPerSquareCentimeter.
        /// </summary>
        public double MeganewtonsPerSquareCentimeter => As(PressureUnit.MeganewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in MeganewtonsPerSquareMeter.
        /// </summary>
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in MeganewtonsPerSquareMillimeter.
        /// </summary>
        public double MeganewtonsPerSquareMillimeter => As(PressureUnit.MeganewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Megapascals.
        /// </summary>
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Get Pressure in MegapoundsForcePerSquareFoot.
        /// </summary>
        public double MegapoundsForcePerSquareFoot => As(PressureUnit.MegapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in MegapoundsForcePerSquareInch.
        /// </summary>
        public double MegapoundsForcePerSquareInch => As(PressureUnit.MegapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in MetersOfHead.
        /// </summary>
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Get Pressure in Microbars.
        /// </summary>
        public double Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Get Pressure in MicronewtonsPerSquareCentimeter.
        /// </summary>
        public double MicronewtonsPerSquareCentimeter => As(PressureUnit.MicronewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in MicronewtonsPerSquareMeter.
        /// </summary>
        public double MicronewtonsPerSquareMeter => As(PressureUnit.MicronewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in MicronewtonsPerSquareMillimeter.
        /// </summary>
        public double MicronewtonsPerSquareMillimeter => As(PressureUnit.MicronewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Micropascals.
        /// </summary>
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Get Pressure in MicropoundsForcePerSquareFoot.
        /// </summary>
        public double MicropoundsForcePerSquareFoot => As(PressureUnit.MicropoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in MicropoundsForcePerSquareInch.
        /// </summary>
        public double MicropoundsForcePerSquareInch => As(PressureUnit.MicropoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Millibars.
        /// </summary>
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Get Pressure in MillimetersOfMercury.
        /// </summary>
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Get Pressure in MillinewtonsPerSquareCentimeter.
        /// </summary>
        public double MillinewtonsPerSquareCentimeter => As(PressureUnit.MillinewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in MillinewtonsPerSquareMeter.
        /// </summary>
        public double MillinewtonsPerSquareMeter => As(PressureUnit.MillinewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in MillinewtonsPerSquareMillimeter.
        /// </summary>
        public double MillinewtonsPerSquareMillimeter => As(PressureUnit.MillinewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Millipascals.
        /// </summary>
        public double Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Get Pressure in MillipoundsForcePerSquareFoot.
        /// </summary>
        public double MillipoundsForcePerSquareFoot => As(PressureUnit.MillipoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in MillipoundsForcePerSquareInch.
        /// </summary>
        public double MillipoundsForcePerSquareInch => As(PressureUnit.MillipoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Nanobars.
        /// </summary>
        public double Nanobars => As(PressureUnit.Nanobar);

        /// <summary>
        ///     Get Pressure in NanonewtonsPerSquareCentimeter.
        /// </summary>
        public double NanonewtonsPerSquareCentimeter => As(PressureUnit.NanonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in NanonewtonsPerSquareMeter.
        /// </summary>
        public double NanonewtonsPerSquareMeter => As(PressureUnit.NanonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in NanonewtonsPerSquareMillimeter.
        /// </summary>
        public double NanonewtonsPerSquareMillimeter => As(PressureUnit.NanonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Nanopascals.
        /// </summary>
        public double Nanopascals => As(PressureUnit.Nanopascal);

        /// <summary>
        ///     Get Pressure in NanopoundsForcePerSquareFoot.
        /// </summary>
        public double NanopoundsForcePerSquareFoot => As(PressureUnit.NanopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in NanopoundsForcePerSquareInch.
        /// </summary>
        public double NanopoundsForcePerSquareInch => As(PressureUnit.NanopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareCentimeter.
        /// </summary>
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMeter.
        /// </summary>
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMillimeter.
        /// </summary>
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Pascals.
        /// </summary>
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Get Pressure in Petabars.
        /// </summary>
        public double Petabars => As(PressureUnit.Petabar);

        /// <summary>
        ///     Get Pressure in PetanewtonsPerSquareCentimeter.
        /// </summary>
        public double PetanewtonsPerSquareCentimeter => As(PressureUnit.PetanewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in PetanewtonsPerSquareMeter.
        /// </summary>
        public double PetanewtonsPerSquareMeter => As(PressureUnit.PetanewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in PetanewtonsPerSquareMillimeter.
        /// </summary>
        public double PetanewtonsPerSquareMillimeter => As(PressureUnit.PetanewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Petapascals.
        /// </summary>
        public double Petapascals => As(PressureUnit.Petapascal);

        /// <summary>
        ///     Get Pressure in PetapoundsForcePerSquareFoot.
        /// </summary>
        public double PetapoundsForcePerSquareFoot => As(PressureUnit.PetapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in PetapoundsForcePerSquareInch.
        /// </summary>
        public double PetapoundsForcePerSquareInch => As(PressureUnit.PetapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Picobars.
        /// </summary>
        public double Picobars => As(PressureUnit.Picobar);

        /// <summary>
        ///     Get Pressure in PiconewtonsPerSquareCentimeter.
        /// </summary>
        public double PiconewtonsPerSquareCentimeter => As(PressureUnit.PiconewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in PiconewtonsPerSquareMeter.
        /// </summary>
        public double PiconewtonsPerSquareMeter => As(PressureUnit.PiconewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in PiconewtonsPerSquareMillimeter.
        /// </summary>
        public double PiconewtonsPerSquareMillimeter => As(PressureUnit.PiconewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Picopascals.
        /// </summary>
        public double Picopascals => As(PressureUnit.Picopascal);

        /// <summary>
        ///     Get Pressure in PicopoundsForcePerSquareFoot.
        /// </summary>
        public double PicopoundsForcePerSquareFoot => As(PressureUnit.PicopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in PicopoundsForcePerSquareInch.
        /// </summary>
        public double PicopoundsForcePerSquareInch => As(PressureUnit.PicopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareFoot.
        /// </summary>
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareInch.
        /// </summary>
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in PoundsPerInchSecondSquared.
        /// </summary>
        public double PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Get Pressure in Qutrabars.
        /// </summary>
        public double Qutrabars => As(PressureUnit.Qutrabar);

        /// <summary>
        ///     Get Pressure in QutranewtonsPerSquareCentimeter.
        /// </summary>
        public double QutranewtonsPerSquareCentimeter => As(PressureUnit.QutranewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in QutranewtonsPerSquareMeter.
        /// </summary>
        public double QutranewtonsPerSquareMeter => As(PressureUnit.QutranewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in QutranewtonsPerSquareMillimeter.
        /// </summary>
        public double QutranewtonsPerSquareMillimeter => As(PressureUnit.QutranewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Qutrapascals.
        /// </summary>
        public double Qutrapascals => As(PressureUnit.Qutrapascal);

        /// <summary>
        ///     Get Pressure in QutrapoundsForcePerSquareFoot.
        /// </summary>
        public double QutrapoundsForcePerSquareFoot => As(PressureUnit.QutrapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in QutrapoundsForcePerSquareInch.
        /// </summary>
        public double QutrapoundsForcePerSquareInch => As(PressureUnit.QutrapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in TechnicalAtmospheres.
        /// </summary>
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Get Pressure in Terabars.
        /// </summary>
        public double Terabars => As(PressureUnit.Terabar);

        /// <summary>
        ///     Get Pressure in TeranewtonsPerSquareCentimeter.
        /// </summary>
        public double TeranewtonsPerSquareCentimeter => As(PressureUnit.TeranewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in TeranewtonsPerSquareMeter.
        /// </summary>
        public double TeranewtonsPerSquareMeter => As(PressureUnit.TeranewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in TeranewtonsPerSquareMillimeter.
        /// </summary>
        public double TeranewtonsPerSquareMillimeter => As(PressureUnit.TeranewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Terapascals.
        /// </summary>
        public double Terapascals => As(PressureUnit.Terapascal);

        /// <summary>
        ///     Get Pressure in TerapoundsForcePerSquareFoot.
        /// </summary>
        public double TerapoundsForcePerSquareFoot => As(PressureUnit.TerapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in TerapoundsForcePerSquareInch.
        /// </summary>
        public double TerapoundsForcePerSquareInch => As(PressureUnit.TerapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareCentimeter.
        /// </summary>
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMeter.
        /// </summary>
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMillimeter.
        /// </summary>
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Torrs.
        /// </summary>
        public double Torrs => As(PressureUnit.Torr);

        /// <summary>
        ///     Get Pressure in Vettabars.
        /// </summary>
        public double Vettabars => As(PressureUnit.Vettabar);

        /// <summary>
        ///     Get Pressure in VettanewtonsPerSquareCentimeter.
        /// </summary>
        public double VettanewtonsPerSquareCentimeter => As(PressureUnit.VettanewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in VettanewtonsPerSquareMeter.
        /// </summary>
        public double VettanewtonsPerSquareMeter => As(PressureUnit.VettanewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in VettanewtonsPerSquareMillimeter.
        /// </summary>
        public double VettanewtonsPerSquareMillimeter => As(PressureUnit.VettanewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Vettapascals.
        /// </summary>
        public double Vettapascals => As(PressureUnit.Vettapascal);

        /// <summary>
        ///     Get Pressure in VettapoundsForcePerSquareFoot.
        /// </summary>
        public double VettapoundsForcePerSquareFoot => As(PressureUnit.VettapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in VettapoundsForcePerSquareInch.
        /// </summary>
        public double VettapoundsForcePerSquareInch => As(PressureUnit.VettapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Yoctobars.
        /// </summary>
        public double Yoctobars => As(PressureUnit.Yoctobar);

        /// <summary>
        ///     Get Pressure in YoctonewtonsPerSquareCentimeter.
        /// </summary>
        public double YoctonewtonsPerSquareCentimeter => As(PressureUnit.YoctonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in YoctonewtonsPerSquareMeter.
        /// </summary>
        public double YoctonewtonsPerSquareMeter => As(PressureUnit.YoctonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in YoctonewtonsPerSquareMillimeter.
        /// </summary>
        public double YoctonewtonsPerSquareMillimeter => As(PressureUnit.YoctonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Yoctopascals.
        /// </summary>
        public double Yoctopascals => As(PressureUnit.Yoctopascal);

        /// <summary>
        ///     Get Pressure in YoctopoundsForcePerSquareFoot.
        /// </summary>
        public double YoctopoundsForcePerSquareFoot => As(PressureUnit.YoctopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in YoctopoundsForcePerSquareInch.
        /// </summary>
        public double YoctopoundsForcePerSquareInch => As(PressureUnit.YoctopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Yottabars.
        /// </summary>
        public double Yottabars => As(PressureUnit.Yottabar);

        /// <summary>
        ///     Get Pressure in YottanewtonsPerSquareCentimeter.
        /// </summary>
        public double YottanewtonsPerSquareCentimeter => As(PressureUnit.YottanewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in YottanewtonsPerSquareMeter.
        /// </summary>
        public double YottanewtonsPerSquareMeter => As(PressureUnit.YottanewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in YottanewtonsPerSquareMillimeter.
        /// </summary>
        public double YottanewtonsPerSquareMillimeter => As(PressureUnit.YottanewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Yottapascals.
        /// </summary>
        public double Yottapascals => As(PressureUnit.Yottapascal);

        /// <summary>
        ///     Get Pressure in YottapoundsForcePerSquareFoot.
        /// </summary>
        public double YottapoundsForcePerSquareFoot => As(PressureUnit.YottapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in YottapoundsForcePerSquareInch.
        /// </summary>
        public double YottapoundsForcePerSquareInch => As(PressureUnit.YottapoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Zeptobars.
        /// </summary>
        public double Zeptobars => As(PressureUnit.Zeptobar);

        /// <summary>
        ///     Get Pressure in ZeptonewtonsPerSquareCentimeter.
        /// </summary>
        public double ZeptonewtonsPerSquareCentimeter => As(PressureUnit.ZeptonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in ZeptonewtonsPerSquareMeter.
        /// </summary>
        public double ZeptonewtonsPerSquareMeter => As(PressureUnit.ZeptonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in ZeptonewtonsPerSquareMillimeter.
        /// </summary>
        public double ZeptonewtonsPerSquareMillimeter => As(PressureUnit.ZeptonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Zeptopascals.
        /// </summary>
        public double Zeptopascals => As(PressureUnit.Zeptopascal);

        /// <summary>
        ///     Get Pressure in ZeptopoundsForcePerSquareFoot.
        /// </summary>
        public double ZeptopoundsForcePerSquareFoot => As(PressureUnit.ZeptopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in ZeptopoundsForcePerSquareInch.
        /// </summary>
        public double ZeptopoundsForcePerSquareInch => As(PressureUnit.ZeptopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Zettabars.
        /// </summary>
        public double Zettabars => As(PressureUnit.Zettabar);

        /// <summary>
        ///     Get Pressure in ZettanewtonsPerSquareCentimeter.
        /// </summary>
        public double ZettanewtonsPerSquareCentimeter => As(PressureUnit.ZettanewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in ZettanewtonsPerSquareMeter.
        /// </summary>
        public double ZettanewtonsPerSquareMeter => As(PressureUnit.ZettanewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in ZettanewtonsPerSquareMillimeter.
        /// </summary>
        public double ZettanewtonsPerSquareMillimeter => As(PressureUnit.ZettanewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Zettapascals.
        /// </summary>
        public double Zettapascals => As(PressureUnit.Zettapascal);

        /// <summary>
        ///     Get Pressure in ZettapoundsForcePerSquareFoot.
        /// </summary>
        public double ZettapoundsForcePerSquareFoot => As(PressureUnit.ZettapoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in ZettapoundsForcePerSquareInch.
        /// </summary>
        public double ZettapoundsForcePerSquareInch => As(PressureUnit.ZettapoundForcePerSquareInch);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(PressureUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Pressure from Atmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAtmospheres(double atmospheres)
        {
            double value = (double) atmospheres;
            return new Pressure(value, PressureUnit.Atmosphere);
        }
        /// <summary>
        ///     Get Pressure from Attobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttobars(double attobars)
        {
            double value = (double) attobars;
            return new Pressure(value, PressureUnit.Attobar);
        }
        /// <summary>
        ///     Get Pressure from AttonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttonewtonsPerSquareCentimeter(double attonewtonspersquarecentimeter)
        {
            double value = (double) attonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.AttonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from AttonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttonewtonsPerSquareMeter(double attonewtonspersquaremeter)
        {
            double value = (double) attonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.AttonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from AttonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttonewtonsPerSquareMillimeter(double attonewtonspersquaremillimeter)
        {
            double value = (double) attonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.AttonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Attopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttopascals(double attopascals)
        {
            double value = (double) attopascals;
            return new Pressure(value, PressureUnit.Attopascal);
        }
        /// <summary>
        ///     Get Pressure from AttopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttopoundsForcePerSquareFoot(double attopoundsforcepersquarefoot)
        {
            double value = (double) attopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.AttopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from AttopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAttopoundsForcePerSquareInch(double attopoundsforcepersquareinch)
        {
            double value = (double) attopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.AttopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Bars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromBars(double bars)
        {
            double value = (double) bars;
            return new Pressure(value, PressureUnit.Bar);
        }
        /// <summary>
        ///     Get Pressure from Centibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentibars(double centibars)
        {
            double value = (double) centibars;
            return new Pressure(value, PressureUnit.Centibar);
        }
        /// <summary>
        ///     Get Pressure from CentinewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentinewtonsPerSquareCentimeter(double centinewtonspersquarecentimeter)
        {
            double value = (double) centinewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.CentinewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from CentinewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentinewtonsPerSquareMeter(double centinewtonspersquaremeter)
        {
            double value = (double) centinewtonspersquaremeter;
            return new Pressure(value, PressureUnit.CentinewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from CentinewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentinewtonsPerSquareMillimeter(double centinewtonspersquaremillimeter)
        {
            double value = (double) centinewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.CentinewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Centipascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentipascals(double centipascals)
        {
            double value = (double) centipascals;
            return new Pressure(value, PressureUnit.Centipascal);
        }
        /// <summary>
        ///     Get Pressure from CentipoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentipoundsForcePerSquareFoot(double centipoundsforcepersquarefoot)
        {
            double value = (double) centipoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.CentipoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from CentipoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentipoundsForcePerSquareInch(double centipoundsforcepersquareinch)
        {
            double value = (double) centipoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.CentipoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Decabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecabars(double decabars)
        {
            double value = (double) decabars;
            return new Pressure(value, PressureUnit.Decabar);
        }
        /// <summary>
        ///     Get Pressure from DecanewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecanewtonsPerSquareCentimeter(double decanewtonspersquarecentimeter)
        {
            double value = (double) decanewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.DecanewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from DecanewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecanewtonsPerSquareMeter(double decanewtonspersquaremeter)
        {
            double value = (double) decanewtonspersquaremeter;
            return new Pressure(value, PressureUnit.DecanewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from DecanewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecanewtonsPerSquareMillimeter(double decanewtonspersquaremillimeter)
        {
            double value = (double) decanewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.DecanewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Decapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecapascals(double decapascals)
        {
            double value = (double) decapascals;
            return new Pressure(value, PressureUnit.Decapascal);
        }
        /// <summary>
        ///     Get Pressure from DecapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecapoundsForcePerSquareFoot(double decapoundsforcepersquarefoot)
        {
            double value = (double) decapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.DecapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from DecapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecapoundsForcePerSquareInch(double decapoundsforcepersquareinch)
        {
            double value = (double) decapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.DecapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Decibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecibars(double decibars)
        {
            double value = (double) decibars;
            return new Pressure(value, PressureUnit.Decibar);
        }
        /// <summary>
        ///     Get Pressure from DecinewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecinewtonsPerSquareCentimeter(double decinewtonspersquarecentimeter)
        {
            double value = (double) decinewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.DecinewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from DecinewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecinewtonsPerSquareMeter(double decinewtonspersquaremeter)
        {
            double value = (double) decinewtonspersquaremeter;
            return new Pressure(value, PressureUnit.DecinewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from DecinewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecinewtonsPerSquareMillimeter(double decinewtonspersquaremillimeter)
        {
            double value = (double) decinewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.DecinewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Decipascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecipascals(double decipascals)
        {
            double value = (double) decipascals;
            return new Pressure(value, PressureUnit.Decipascal);
        }
        /// <summary>
        ///     Get Pressure from DecipoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecipoundsForcePerSquareFoot(double decipoundsforcepersquarefoot)
        {
            double value = (double) decipoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.DecipoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from DecipoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecipoundsForcePerSquareInch(double decipoundsforcepersquareinch)
        {
            double value = (double) decipoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.DecipoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from DynesPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDynesPerSquareCentimeter(double dynespersquarecentimeter)
        {
            double value = (double) dynespersquarecentimeter;
            return new Pressure(value, PressureUnit.DynePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from Exabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExabars(double exabars)
        {
            double value = (double) exabars;
            return new Pressure(value, PressureUnit.Exabar);
        }
        /// <summary>
        ///     Get Pressure from ExanewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExanewtonsPerSquareCentimeter(double exanewtonspersquarecentimeter)
        {
            double value = (double) exanewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.ExanewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from ExanewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExanewtonsPerSquareMeter(double exanewtonspersquaremeter)
        {
            double value = (double) exanewtonspersquaremeter;
            return new Pressure(value, PressureUnit.ExanewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from ExanewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExanewtonsPerSquareMillimeter(double exanewtonspersquaremillimeter)
        {
            double value = (double) exanewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.ExanewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Exapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExapascals(double exapascals)
        {
            double value = (double) exapascals;
            return new Pressure(value, PressureUnit.Exapascal);
        }
        /// <summary>
        ///     Get Pressure from ExapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExapoundsForcePerSquareFoot(double exapoundsforcepersquarefoot)
        {
            double value = (double) exapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.ExapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from ExapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromExapoundsForcePerSquareInch(double exapoundsforcepersquareinch)
        {
            double value = (double) exapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.ExapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Femtobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtobars(double femtobars)
        {
            double value = (double) femtobars;
            return new Pressure(value, PressureUnit.Femtobar);
        }
        /// <summary>
        ///     Get Pressure from FemtonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtonewtonsPerSquareCentimeter(double femtonewtonspersquarecentimeter)
        {
            double value = (double) femtonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.FemtonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from FemtonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtonewtonsPerSquareMeter(double femtonewtonspersquaremeter)
        {
            double value = (double) femtonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.FemtonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from FemtonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtonewtonsPerSquareMillimeter(double femtonewtonspersquaremillimeter)
        {
            double value = (double) femtonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.FemtonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Femtopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtopascals(double femtopascals)
        {
            double value = (double) femtopascals;
            return new Pressure(value, PressureUnit.Femtopascal);
        }
        /// <summary>
        ///     Get Pressure from FemtopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtopoundsForcePerSquareFoot(double femtopoundsforcepersquarefoot)
        {
            double value = (double) femtopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.FemtopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from FemtopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFemtopoundsForcePerSquareInch(double femtopoundsforcepersquareinch)
        {
            double value = (double) femtopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.FemtopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from FeetOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFeetOfHead(double feetofhead)
        {
            double value = (double) feetofhead;
            return new Pressure(value, PressureUnit.FootOfHead);
        }
        /// <summary>
        ///     Get Pressure from Gigabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigabars(double gigabars)
        {
            double value = (double) gigabars;
            return new Pressure(value, PressureUnit.Gigabar);
        }
        /// <summary>
        ///     Get Pressure from GiganewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGiganewtonsPerSquareCentimeter(double giganewtonspersquarecentimeter)
        {
            double value = (double) giganewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.GiganewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from GiganewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGiganewtonsPerSquareMeter(double giganewtonspersquaremeter)
        {
            double value = (double) giganewtonspersquaremeter;
            return new Pressure(value, PressureUnit.GiganewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from GiganewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGiganewtonsPerSquareMillimeter(double giganewtonspersquaremillimeter)
        {
            double value = (double) giganewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.GiganewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Gigapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigapascals(double gigapascals)
        {
            double value = (double) gigapascals;
            return new Pressure(value, PressureUnit.Gigapascal);
        }
        /// <summary>
        ///     Get Pressure from GigapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigapoundsForcePerSquareFoot(double gigapoundsforcepersquarefoot)
        {
            double value = (double) gigapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.GigapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from GigapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigapoundsForcePerSquareInch(double gigapoundsforcepersquareinch)
        {
            double value = (double) gigapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.GigapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Hectobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectobars(double hectobars)
        {
            double value = (double) hectobars;
            return new Pressure(value, PressureUnit.Hectobar);
        }
        /// <summary>
        ///     Get Pressure from HectonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectonewtonsPerSquareCentimeter(double hectonewtonspersquarecentimeter)
        {
            double value = (double) hectonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.HectonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from HectonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectonewtonsPerSquareMeter(double hectonewtonspersquaremeter)
        {
            double value = (double) hectonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.HectonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from HectonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectonewtonsPerSquareMillimeter(double hectonewtonspersquaremillimeter)
        {
            double value = (double) hectonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.HectonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Hectopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectopascals(double hectopascals)
        {
            double value = (double) hectopascals;
            return new Pressure(value, PressureUnit.Hectopascal);
        }
        /// <summary>
        ///     Get Pressure from HectopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectopoundsForcePerSquareFoot(double hectopoundsforcepersquarefoot)
        {
            double value = (double) hectopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.HectopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from HectopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectopoundsForcePerSquareInch(double hectopoundsforcepersquareinch)
        {
            double value = (double) hectopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.HectopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from InchesOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromInchesOfMercury(double inchesofmercury)
        {
            double value = (double) inchesofmercury;
            return new Pressure(value, PressureUnit.InchOfMercury);
        }
        /// <summary>
        ///     Get Pressure from InchesOfWaterColumn.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromInchesOfWaterColumn(double inchesofwatercolumn)
        {
            double value = (double) inchesofwatercolumn;
            return new Pressure(value, PressureUnit.InchOfWaterColumn);
        }
        /// <summary>
        ///     Get Pressure from Kilobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilobars(double kilobars)
        {
            double value = (double) kilobars;
            return new Pressure(value, PressureUnit.Kilobar);
        }
        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter)
        {
            double value = (double) kilogramsforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter)
        {
            double value = (double) kilogramsforcepersquaremeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter)
        {
            double value = (double) kilogramsforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter)
        {
            double value = (double) kilonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter)
        {
            double value = (double) kilonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter)
        {
            double value = (double) kilonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Kilopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopascals(double kilopascals)
        {
            double value = (double) kilopascals;
            return new Pressure(value, PressureUnit.Kilopascal);
        }
        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot)
        {
            double value = (double) kilopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch)
        {
            double value = (double) kilopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Megabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegabars(double megabars)
        {
            double value = (double) megabars;
            return new Pressure(value, PressureUnit.Megabar);
        }
        /// <summary>
        ///     Get Pressure from MeganewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMeganewtonsPerSquareCentimeter(double meganewtonspersquarecentimeter)
        {
            double value = (double) meganewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.MeganewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from MeganewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMeganewtonsPerSquareMeter(double meganewtonspersquaremeter)
        {
            double value = (double) meganewtonspersquaremeter;
            return new Pressure(value, PressureUnit.MeganewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from MeganewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMeganewtonsPerSquareMillimeter(double meganewtonspersquaremillimeter)
        {
            double value = (double) meganewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.MeganewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Megapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegapascals(double megapascals)
        {
            double value = (double) megapascals;
            return new Pressure(value, PressureUnit.Megapascal);
        }
        /// <summary>
        ///     Get Pressure from MegapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegapoundsForcePerSquareFoot(double megapoundsforcepersquarefoot)
        {
            double value = (double) megapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.MegapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from MegapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegapoundsForcePerSquareInch(double megapoundsforcepersquareinch)
        {
            double value = (double) megapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.MegapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from MetersOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMetersOfHead(double metersofhead)
        {
            double value = (double) metersofhead;
            return new Pressure(value, PressureUnit.MeterOfHead);
        }
        /// <summary>
        ///     Get Pressure from Microbars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicrobars(double microbars)
        {
            double value = (double) microbars;
            return new Pressure(value, PressureUnit.Microbar);
        }
        /// <summary>
        ///     Get Pressure from MicronewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicronewtonsPerSquareCentimeter(double micronewtonspersquarecentimeter)
        {
            double value = (double) micronewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.MicronewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from MicronewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicronewtonsPerSquareMeter(double micronewtonspersquaremeter)
        {
            double value = (double) micronewtonspersquaremeter;
            return new Pressure(value, PressureUnit.MicronewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from MicronewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicronewtonsPerSquareMillimeter(double micronewtonspersquaremillimeter)
        {
            double value = (double) micronewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.MicronewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Micropascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicropascals(double micropascals)
        {
            double value = (double) micropascals;
            return new Pressure(value, PressureUnit.Micropascal);
        }
        /// <summary>
        ///     Get Pressure from MicropoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicropoundsForcePerSquareFoot(double micropoundsforcepersquarefoot)
        {
            double value = (double) micropoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.MicropoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from MicropoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicropoundsForcePerSquareInch(double micropoundsforcepersquareinch)
        {
            double value = (double) micropoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.MicropoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Millibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillibars(double millibars)
        {
            double value = (double) millibars;
            return new Pressure(value, PressureUnit.Millibar);
        }
        /// <summary>
        ///     Get Pressure from MillimetersOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillimetersOfMercury(double millimetersofmercury)
        {
            double value = (double) millimetersofmercury;
            return new Pressure(value, PressureUnit.MillimeterOfMercury);
        }
        /// <summary>
        ///     Get Pressure from MillinewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillinewtonsPerSquareCentimeter(double millinewtonspersquarecentimeter)
        {
            double value = (double) millinewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.MillinewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from MillinewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillinewtonsPerSquareMeter(double millinewtonspersquaremeter)
        {
            double value = (double) millinewtonspersquaremeter;
            return new Pressure(value, PressureUnit.MillinewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from MillinewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillinewtonsPerSquareMillimeter(double millinewtonspersquaremillimeter)
        {
            double value = (double) millinewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.MillinewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Millipascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillipascals(double millipascals)
        {
            double value = (double) millipascals;
            return new Pressure(value, PressureUnit.Millipascal);
        }
        /// <summary>
        ///     Get Pressure from MillipoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillipoundsForcePerSquareFoot(double millipoundsforcepersquarefoot)
        {
            double value = (double) millipoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.MillipoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from MillipoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillipoundsForcePerSquareInch(double millipoundsforcepersquareinch)
        {
            double value = (double) millipoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.MillipoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Nanobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanobars(double nanobars)
        {
            double value = (double) nanobars;
            return new Pressure(value, PressureUnit.Nanobar);
        }
        /// <summary>
        ///     Get Pressure from NanonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanonewtonsPerSquareCentimeter(double nanonewtonspersquarecentimeter)
        {
            double value = (double) nanonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.NanonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from NanonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanonewtonsPerSquareMeter(double nanonewtonspersquaremeter)
        {
            double value = (double) nanonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.NanonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from NanonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanonewtonsPerSquareMillimeter(double nanonewtonspersquaremillimeter)
        {
            double value = (double) nanonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.NanonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Nanopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanopascals(double nanopascals)
        {
            double value = (double) nanopascals;
            return new Pressure(value, PressureUnit.Nanopascal);
        }
        /// <summary>
        ///     Get Pressure from NanopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanopoundsForcePerSquareFoot(double nanopoundsforcepersquarefoot)
        {
            double value = (double) nanopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.NanopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from NanopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNanopoundsForcePerSquareInch(double nanopoundsforcepersquareinch)
        {
            double value = (double) nanopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.NanopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from NewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter)
        {
            double value = (double) newtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMeter(double newtonspersquaremeter)
        {
            double value = (double) newtonspersquaremeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter)
        {
            double value = (double) newtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Pascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPascals(double pascals)
        {
            double value = (double) pascals;
            return new Pressure(value, PressureUnit.Pascal);
        }
        /// <summary>
        ///     Get Pressure from Petabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetabars(double petabars)
        {
            double value = (double) petabars;
            return new Pressure(value, PressureUnit.Petabar);
        }
        /// <summary>
        ///     Get Pressure from PetanewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetanewtonsPerSquareCentimeter(double petanewtonspersquarecentimeter)
        {
            double value = (double) petanewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.PetanewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from PetanewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetanewtonsPerSquareMeter(double petanewtonspersquaremeter)
        {
            double value = (double) petanewtonspersquaremeter;
            return new Pressure(value, PressureUnit.PetanewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from PetanewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetanewtonsPerSquareMillimeter(double petanewtonspersquaremillimeter)
        {
            double value = (double) petanewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.PetanewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Petapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetapascals(double petapascals)
        {
            double value = (double) petapascals;
            return new Pressure(value, PressureUnit.Petapascal);
        }
        /// <summary>
        ///     Get Pressure from PetapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetapoundsForcePerSquareFoot(double petapoundsforcepersquarefoot)
        {
            double value = (double) petapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PetapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from PetapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPetapoundsForcePerSquareInch(double petapoundsforcepersquareinch)
        {
            double value = (double) petapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PetapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Picobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPicobars(double picobars)
        {
            double value = (double) picobars;
            return new Pressure(value, PressureUnit.Picobar);
        }
        /// <summary>
        ///     Get Pressure from PiconewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPiconewtonsPerSquareCentimeter(double piconewtonspersquarecentimeter)
        {
            double value = (double) piconewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.PiconewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from PiconewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPiconewtonsPerSquareMeter(double piconewtonspersquaremeter)
        {
            double value = (double) piconewtonspersquaremeter;
            return new Pressure(value, PressureUnit.PiconewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from PiconewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPiconewtonsPerSquareMillimeter(double piconewtonspersquaremillimeter)
        {
            double value = (double) piconewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.PiconewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Picopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPicopascals(double picopascals)
        {
            double value = (double) picopascals;
            return new Pressure(value, PressureUnit.Picopascal);
        }
        /// <summary>
        ///     Get Pressure from PicopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPicopoundsForcePerSquareFoot(double picopoundsforcepersquarefoot)
        {
            double value = (double) picopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PicopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from PicopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPicopoundsForcePerSquareInch(double picopoundsforcepersquareinch)
        {
            double value = (double) picopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PicopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot)
        {
            double value = (double) poundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareInch(double poundsforcepersquareinch)
        {
            double value = (double) poundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from PoundsPerInchSecondSquared.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsPerInchSecondSquared(double poundsperinchsecondsquared)
        {
            double value = (double) poundsperinchsecondsquared;
            return new Pressure(value, PressureUnit.PoundPerInchSecondSquared);
        }
        /// <summary>
        ///     Get Pressure from Qutrabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutrabars(double qutrabars)
        {
            double value = (double) qutrabars;
            return new Pressure(value, PressureUnit.Qutrabar);
        }
        /// <summary>
        ///     Get Pressure from QutranewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutranewtonsPerSquareCentimeter(double qutranewtonspersquarecentimeter)
        {
            double value = (double) qutranewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.QutranewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from QutranewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutranewtonsPerSquareMeter(double qutranewtonspersquaremeter)
        {
            double value = (double) qutranewtonspersquaremeter;
            return new Pressure(value, PressureUnit.QutranewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from QutranewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutranewtonsPerSquareMillimeter(double qutranewtonspersquaremillimeter)
        {
            double value = (double) qutranewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.QutranewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Qutrapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutrapascals(double qutrapascals)
        {
            double value = (double) qutrapascals;
            return new Pressure(value, PressureUnit.Qutrapascal);
        }
        /// <summary>
        ///     Get Pressure from QutrapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutrapoundsForcePerSquareFoot(double qutrapoundsforcepersquarefoot)
        {
            double value = (double) qutrapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.QutrapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from QutrapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromQutrapoundsForcePerSquareInch(double qutrapoundsforcepersquareinch)
        {
            double value = (double) qutrapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.QutrapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from TechnicalAtmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTechnicalAtmospheres(double technicalatmospheres)
        {
            double value = (double) technicalatmospheres;
            return new Pressure(value, PressureUnit.TechnicalAtmosphere);
        }
        /// <summary>
        ///     Get Pressure from Terabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTerabars(double terabars)
        {
            double value = (double) terabars;
            return new Pressure(value, PressureUnit.Terabar);
        }
        /// <summary>
        ///     Get Pressure from TeranewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTeranewtonsPerSquareCentimeter(double teranewtonspersquarecentimeter)
        {
            double value = (double) teranewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.TeranewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from TeranewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTeranewtonsPerSquareMeter(double teranewtonspersquaremeter)
        {
            double value = (double) teranewtonspersquaremeter;
            return new Pressure(value, PressureUnit.TeranewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from TeranewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTeranewtonsPerSquareMillimeter(double teranewtonspersquaremillimeter)
        {
            double value = (double) teranewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.TeranewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Terapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTerapascals(double terapascals)
        {
            double value = (double) terapascals;
            return new Pressure(value, PressureUnit.Terapascal);
        }
        /// <summary>
        ///     Get Pressure from TerapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTerapoundsForcePerSquareFoot(double terapoundsforcepersquarefoot)
        {
            double value = (double) terapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.TerapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from TerapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTerapoundsForcePerSquareInch(double terapoundsforcepersquareinch)
        {
            double value = (double) terapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.TerapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter)
        {
            double value = (double) tonnesforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter)
        {
            double value = (double) tonnesforcepersquaremeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter)
        {
            double value = (double) tonnesforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Torrs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTorrs(double torrs)
        {
            double value = (double) torrs;
            return new Pressure(value, PressureUnit.Torr);
        }
        /// <summary>
        ///     Get Pressure from Vettabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettabars(double vettabars)
        {
            double value = (double) vettabars;
            return new Pressure(value, PressureUnit.Vettabar);
        }
        /// <summary>
        ///     Get Pressure from VettanewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettanewtonsPerSquareCentimeter(double vettanewtonspersquarecentimeter)
        {
            double value = (double) vettanewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.VettanewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from VettanewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettanewtonsPerSquareMeter(double vettanewtonspersquaremeter)
        {
            double value = (double) vettanewtonspersquaremeter;
            return new Pressure(value, PressureUnit.VettanewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from VettanewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettanewtonsPerSquareMillimeter(double vettanewtonspersquaremillimeter)
        {
            double value = (double) vettanewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.VettanewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Vettapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettapascals(double vettapascals)
        {
            double value = (double) vettapascals;
            return new Pressure(value, PressureUnit.Vettapascal);
        }
        /// <summary>
        ///     Get Pressure from VettapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettapoundsForcePerSquareFoot(double vettapoundsforcepersquarefoot)
        {
            double value = (double) vettapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.VettapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from VettapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromVettapoundsForcePerSquareInch(double vettapoundsforcepersquareinch)
        {
            double value = (double) vettapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.VettapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Yoctobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctobars(double yoctobars)
        {
            double value = (double) yoctobars;
            return new Pressure(value, PressureUnit.Yoctobar);
        }
        /// <summary>
        ///     Get Pressure from YoctonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctonewtonsPerSquareCentimeter(double yoctonewtonspersquarecentimeter)
        {
            double value = (double) yoctonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.YoctonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from YoctonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctonewtonsPerSquareMeter(double yoctonewtonspersquaremeter)
        {
            double value = (double) yoctonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.YoctonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from YoctonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctonewtonsPerSquareMillimeter(double yoctonewtonspersquaremillimeter)
        {
            double value = (double) yoctonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.YoctonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Yoctopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctopascals(double yoctopascals)
        {
            double value = (double) yoctopascals;
            return new Pressure(value, PressureUnit.Yoctopascal);
        }
        /// <summary>
        ///     Get Pressure from YoctopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctopoundsForcePerSquareFoot(double yoctopoundsforcepersquarefoot)
        {
            double value = (double) yoctopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.YoctopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from YoctopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYoctopoundsForcePerSquareInch(double yoctopoundsforcepersquareinch)
        {
            double value = (double) yoctopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.YoctopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Yottabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottabars(double yottabars)
        {
            double value = (double) yottabars;
            return new Pressure(value, PressureUnit.Yottabar);
        }
        /// <summary>
        ///     Get Pressure from YottanewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottanewtonsPerSquareCentimeter(double yottanewtonspersquarecentimeter)
        {
            double value = (double) yottanewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.YottanewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from YottanewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottanewtonsPerSquareMeter(double yottanewtonspersquaremeter)
        {
            double value = (double) yottanewtonspersquaremeter;
            return new Pressure(value, PressureUnit.YottanewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from YottanewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottanewtonsPerSquareMillimeter(double yottanewtonspersquaremillimeter)
        {
            double value = (double) yottanewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.YottanewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Yottapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottapascals(double yottapascals)
        {
            double value = (double) yottapascals;
            return new Pressure(value, PressureUnit.Yottapascal);
        }
        /// <summary>
        ///     Get Pressure from YottapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottapoundsForcePerSquareFoot(double yottapoundsforcepersquarefoot)
        {
            double value = (double) yottapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.YottapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from YottapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromYottapoundsForcePerSquareInch(double yottapoundsforcepersquareinch)
        {
            double value = (double) yottapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.YottapoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Zeptobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptobars(double zeptobars)
        {
            double value = (double) zeptobars;
            return new Pressure(value, PressureUnit.Zeptobar);
        }
        /// <summary>
        ///     Get Pressure from ZeptonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptonewtonsPerSquareCentimeter(double zeptonewtonspersquarecentimeter)
        {
            double value = (double) zeptonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.ZeptonewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from ZeptonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptonewtonsPerSquareMeter(double zeptonewtonspersquaremeter)
        {
            double value = (double) zeptonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.ZeptonewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from ZeptonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptonewtonsPerSquareMillimeter(double zeptonewtonspersquaremillimeter)
        {
            double value = (double) zeptonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.ZeptonewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Zeptopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptopascals(double zeptopascals)
        {
            double value = (double) zeptopascals;
            return new Pressure(value, PressureUnit.Zeptopascal);
        }
        /// <summary>
        ///     Get Pressure from ZeptopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptopoundsForcePerSquareFoot(double zeptopoundsforcepersquarefoot)
        {
            double value = (double) zeptopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.ZeptopoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from ZeptopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZeptopoundsForcePerSquareInch(double zeptopoundsforcepersquareinch)
        {
            double value = (double) zeptopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.ZeptopoundForcePerSquareInch);
        }
        /// <summary>
        ///     Get Pressure from Zettabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettabars(double zettabars)
        {
            double value = (double) zettabars;
            return new Pressure(value, PressureUnit.Zettabar);
        }
        /// <summary>
        ///     Get Pressure from ZettanewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettanewtonsPerSquareCentimeter(double zettanewtonspersquarecentimeter)
        {
            double value = (double) zettanewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.ZettanewtonPerSquareCentimeter);
        }
        /// <summary>
        ///     Get Pressure from ZettanewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettanewtonsPerSquareMeter(double zettanewtonspersquaremeter)
        {
            double value = (double) zettanewtonspersquaremeter;
            return new Pressure(value, PressureUnit.ZettanewtonPerSquareMeter);
        }
        /// <summary>
        ///     Get Pressure from ZettanewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettanewtonsPerSquareMillimeter(double zettanewtonspersquaremillimeter)
        {
            double value = (double) zettanewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.ZettanewtonPerSquareMillimeter);
        }
        /// <summary>
        ///     Get Pressure from Zettapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettapascals(double zettapascals)
        {
            double value = (double) zettapascals;
            return new Pressure(value, PressureUnit.Zettapascal);
        }
        /// <summary>
        ///     Get Pressure from ZettapoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettapoundsForcePerSquareFoot(double zettapoundsforcepersquarefoot)
        {
            double value = (double) zettapoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.ZettapoundForcePerSquareFoot);
        }
        /// <summary>
        ///     Get Pressure from ZettapoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromZettapoundsForcePerSquareInch(double zettapoundsforcepersquareinch)
        {
            double value = (double) zettapoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.ZettapoundForcePerSquareInch);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Pressure From(double value, PressureUnit fromUnit)
        {
            return new Pressure((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Pressure Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Pressure, PressureUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Pressure result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Pressure result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Pressure, PressureUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PressureUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<PressureUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out PressureUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out PressureUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<PressureUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Pressure objPressure)) throw new ArgumentException("Expected type Pressure.", nameof(obj));

            return CompareTo(objPressure);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Pressure other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Pressure objPressure))
                return false;

            return Equals(objPressure);
        }

        public bool Equals(Pressure other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Pressure within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Pressure other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Pressure.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((PressureUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Pressure with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Pressure(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PressureUnit.Atmosphere: return _value*1.01325*1e5;
                case PressureUnit.Attobar: return (_value*1e5) * 1e-18d;
                case PressureUnit.AttonewtonPerSquareCentimeter: return (_value*1e4) * 1e-18d;
                case PressureUnit.AttonewtonPerSquareMeter: return (_value) * 1e-18d;
                case PressureUnit.AttonewtonPerSquareMillimeter: return (_value*1e6) * 1e-18d;
                case PressureUnit.Attopascal: return (_value) * 1e-18d;
                case PressureUnit.AttopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-18d;
                case PressureUnit.AttopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-18d;
                case PressureUnit.Bar: return _value*1e5;
                case PressureUnit.Centibar: return (_value*1e5) * 1e-2d;
                case PressureUnit.CentinewtonPerSquareCentimeter: return (_value*1e4) * 1e-2d;
                case PressureUnit.CentinewtonPerSquareMeter: return (_value) * 1e-2d;
                case PressureUnit.CentinewtonPerSquareMillimeter: return (_value*1e6) * 1e-2d;
                case PressureUnit.Centipascal: return (_value) * 1e-2d;
                case PressureUnit.CentipoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-2d;
                case PressureUnit.CentipoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-2d;
                case PressureUnit.Decabar: return (_value*1e5) * 1e1d;
                case PressureUnit.DecanewtonPerSquareCentimeter: return (_value*1e4) * 1e1d;
                case PressureUnit.DecanewtonPerSquareMeter: return (_value) * 1e1d;
                case PressureUnit.DecanewtonPerSquareMillimeter: return (_value*1e6) * 1e1d;
                case PressureUnit.Decapascal: return (_value) * 1e1d;
                case PressureUnit.DecapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e1d;
                case PressureUnit.DecapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e1d;
                case PressureUnit.Decibar: return (_value*1e5) * 1e-1d;
                case PressureUnit.DecinewtonPerSquareCentimeter: return (_value*1e4) * 1e-1d;
                case PressureUnit.DecinewtonPerSquareMeter: return (_value) * 1e-1d;
                case PressureUnit.DecinewtonPerSquareMillimeter: return (_value*1e6) * 1e-1d;
                case PressureUnit.Decipascal: return (_value) * 1e-1d;
                case PressureUnit.DecipoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-1d;
                case PressureUnit.DecipoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-1d;
                case PressureUnit.DynePerSquareCentimeter: return _value*1.0e-1;
                case PressureUnit.Exabar: return (_value*1e5) * 1e18d;
                case PressureUnit.ExanewtonPerSquareCentimeter: return (_value*1e4) * 1e18d;
                case PressureUnit.ExanewtonPerSquareMeter: return (_value) * 1e18d;
                case PressureUnit.ExanewtonPerSquareMillimeter: return (_value*1e6) * 1e18d;
                case PressureUnit.Exapascal: return (_value) * 1e18d;
                case PressureUnit.ExapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e18d;
                case PressureUnit.ExapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e18d;
                case PressureUnit.Femtobar: return (_value*1e5) * 1e-15d;
                case PressureUnit.FemtonewtonPerSquareCentimeter: return (_value*1e4) * 1e-15d;
                case PressureUnit.FemtonewtonPerSquareMeter: return (_value) * 1e-15d;
                case PressureUnit.FemtonewtonPerSquareMillimeter: return (_value*1e6) * 1e-15d;
                case PressureUnit.Femtopascal: return (_value) * 1e-15d;
                case PressureUnit.FemtopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-15d;
                case PressureUnit.FemtopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-15d;
                case PressureUnit.FootOfHead: return _value*2989.0669;
                case PressureUnit.Gigabar: return (_value*1e5) * 1e9d;
                case PressureUnit.GiganewtonPerSquareCentimeter: return (_value*1e4) * 1e9d;
                case PressureUnit.GiganewtonPerSquareMeter: return (_value) * 1e9d;
                case PressureUnit.GiganewtonPerSquareMillimeter: return (_value*1e6) * 1e9d;
                case PressureUnit.Gigapascal: return (_value) * 1e9d;
                case PressureUnit.GigapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e9d;
                case PressureUnit.GigapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e9d;
                case PressureUnit.Hectobar: return (_value*1e5) * 1e2d;
                case PressureUnit.HectonewtonPerSquareCentimeter: return (_value*1e4) * 1e2d;
                case PressureUnit.HectonewtonPerSquareMeter: return (_value) * 1e2d;
                case PressureUnit.HectonewtonPerSquareMillimeter: return (_value*1e6) * 1e2d;
                case PressureUnit.Hectopascal: return (_value) * 1e2d;
                case PressureUnit.HectopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e2d;
                case PressureUnit.HectopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e2d;
                case PressureUnit.InchOfMercury: return _value/2.95299830714159e-4;
                case PressureUnit.InchOfWaterColumn: return _value*249.08890833333;
                case PressureUnit.Kilobar: return (_value*1e5) * 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return _value*9.80665e4;
                case PressureUnit.KilogramForcePerSquareMeter: return _value*9.80665019960652;
                case PressureUnit.KilogramForcePerSquareMillimeter: return _value*9.80665e6;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (_value*1e4) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (_value) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (_value*1e6) * 1e3d;
                case PressureUnit.Kilopascal: return (_value) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e3d;
                case PressureUnit.Megabar: return (_value*1e5) * 1e6d;
                case PressureUnit.MeganewtonPerSquareCentimeter: return (_value*1e4) * 1e6d;
                case PressureUnit.MeganewtonPerSquareMeter: return (_value) * 1e6d;
                case PressureUnit.MeganewtonPerSquareMillimeter: return (_value*1e6) * 1e6d;
                case PressureUnit.Megapascal: return (_value) * 1e6d;
                case PressureUnit.MegapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e6d;
                case PressureUnit.MegapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e6d;
                case PressureUnit.MeterOfHead: return _value*9804.139432;
                case PressureUnit.Microbar: return (_value*1e5) * 1e-6d;
                case PressureUnit.MicronewtonPerSquareCentimeter: return (_value*1e4) * 1e-6d;
                case PressureUnit.MicronewtonPerSquareMeter: return (_value) * 1e-6d;
                case PressureUnit.MicronewtonPerSquareMillimeter: return (_value*1e6) * 1e-6d;
                case PressureUnit.Micropascal: return (_value) * 1e-6d;
                case PressureUnit.MicropoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-6d;
                case PressureUnit.MicropoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-6d;
                case PressureUnit.Millibar: return (_value*1e5) * 1e-3d;
                case PressureUnit.MillimeterOfMercury: return _value/7.50061561302643e-3;
                case PressureUnit.MillinewtonPerSquareCentimeter: return (_value*1e4) * 1e-3d;
                case PressureUnit.MillinewtonPerSquareMeter: return (_value) * 1e-3d;
                case PressureUnit.MillinewtonPerSquareMillimeter: return (_value*1e6) * 1e-3d;
                case PressureUnit.Millipascal: return (_value) * 1e-3d;
                case PressureUnit.MillipoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-3d;
                case PressureUnit.MillipoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-3d;
                case PressureUnit.Nanobar: return (_value*1e5) * 1e-9d;
                case PressureUnit.NanonewtonPerSquareCentimeter: return (_value*1e4) * 1e-9d;
                case PressureUnit.NanonewtonPerSquareMeter: return (_value) * 1e-9d;
                case PressureUnit.NanonewtonPerSquareMillimeter: return (_value*1e6) * 1e-9d;
                case PressureUnit.Nanopascal: return (_value) * 1e-9d;
                case PressureUnit.NanopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-9d;
                case PressureUnit.NanopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-9d;
                case PressureUnit.NewtonPerSquareCentimeter: return _value*1e4;
                case PressureUnit.NewtonPerSquareMeter: return _value;
                case PressureUnit.NewtonPerSquareMillimeter: return _value*1e6;
                case PressureUnit.Pascal: return _value;
                case PressureUnit.Petabar: return (_value*1e5) * 1e15d;
                case PressureUnit.PetanewtonPerSquareCentimeter: return (_value*1e4) * 1e15d;
                case PressureUnit.PetanewtonPerSquareMeter: return (_value) * 1e15d;
                case PressureUnit.PetanewtonPerSquareMillimeter: return (_value*1e6) * 1e15d;
                case PressureUnit.Petapascal: return (_value) * 1e15d;
                case PressureUnit.PetapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e15d;
                case PressureUnit.PetapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e15d;
                case PressureUnit.Picobar: return (_value*1e5) * 1e-12d;
                case PressureUnit.PiconewtonPerSquareCentimeter: return (_value*1e4) * 1e-12d;
                case PressureUnit.PiconewtonPerSquareMeter: return (_value) * 1e-12d;
                case PressureUnit.PiconewtonPerSquareMillimeter: return (_value*1e6) * 1e-12d;
                case PressureUnit.Picopascal: return (_value) * 1e-12d;
                case PressureUnit.PicopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-12d;
                case PressureUnit.PicopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-12d;
                case PressureUnit.PoundForcePerSquareFoot: return _value*4.788025898033584e1;
                case PressureUnit.PoundForcePerSquareInch: return _value*6.894757293168361e3;
                case PressureUnit.PoundPerInchSecondSquared: return _value*1.785796732283465e1;
                case PressureUnit.Qutrabar: return (_value*1e5) * 1e27d;
                case PressureUnit.QutranewtonPerSquareCentimeter: return (_value*1e4) * 1e27d;
                case PressureUnit.QutranewtonPerSquareMeter: return (_value) * 1e27d;
                case PressureUnit.QutranewtonPerSquareMillimeter: return (_value*1e6) * 1e27d;
                case PressureUnit.Qutrapascal: return (_value) * 1e27d;
                case PressureUnit.QutrapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e27d;
                case PressureUnit.QutrapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e27d;
                case PressureUnit.TechnicalAtmosphere: return _value*9.80680592331*1e4;
                case PressureUnit.Terabar: return (_value*1e5) * 1e12d;
                case PressureUnit.TeranewtonPerSquareCentimeter: return (_value*1e4) * 1e12d;
                case PressureUnit.TeranewtonPerSquareMeter: return (_value) * 1e12d;
                case PressureUnit.TeranewtonPerSquareMillimeter: return (_value*1e6) * 1e12d;
                case PressureUnit.Terapascal: return (_value) * 1e12d;
                case PressureUnit.TerapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e12d;
                case PressureUnit.TerapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e12d;
                case PressureUnit.TonneForcePerSquareCentimeter: return _value*9.80665e7;
                case PressureUnit.TonneForcePerSquareMeter: return _value*9.80665e3;
                case PressureUnit.TonneForcePerSquareMillimeter: return _value*9.80665e9;
                case PressureUnit.Torr: return _value*1.3332266752*1e2;
                case PressureUnit.Vettabar: return (_value*1e5) * 1e30d;
                case PressureUnit.VettanewtonPerSquareCentimeter: return (_value*1e4) * 1e30d;
                case PressureUnit.VettanewtonPerSquareMeter: return (_value) * 1e30d;
                case PressureUnit.VettanewtonPerSquareMillimeter: return (_value*1e6) * 1e30d;
                case PressureUnit.Vettapascal: return (_value) * 1e30d;
                case PressureUnit.VettapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e30d;
                case PressureUnit.VettapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e30d;
                case PressureUnit.Yoctobar: return (_value*1e5) * 1e-24d;
                case PressureUnit.YoctonewtonPerSquareCentimeter: return (_value*1e4) * 1e-24d;
                case PressureUnit.YoctonewtonPerSquareMeter: return (_value) * 1e-24d;
                case PressureUnit.YoctonewtonPerSquareMillimeter: return (_value*1e6) * 1e-24d;
                case PressureUnit.Yoctopascal: return (_value) * 1e-24d;
                case PressureUnit.YoctopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-24d;
                case PressureUnit.YoctopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-24d;
                case PressureUnit.Yottabar: return (_value*1e5) * 1e24d;
                case PressureUnit.YottanewtonPerSquareCentimeter: return (_value*1e4) * 1e24d;
                case PressureUnit.YottanewtonPerSquareMeter: return (_value) * 1e24d;
                case PressureUnit.YottanewtonPerSquareMillimeter: return (_value*1e6) * 1e24d;
                case PressureUnit.Yottapascal: return (_value) * 1e24d;
                case PressureUnit.YottapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e24d;
                case PressureUnit.YottapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e24d;
                case PressureUnit.Zeptobar: return (_value*1e5) * 1e-21d;
                case PressureUnit.ZeptonewtonPerSquareCentimeter: return (_value*1e4) * 1e-21d;
                case PressureUnit.ZeptonewtonPerSquareMeter: return (_value) * 1e-21d;
                case PressureUnit.ZeptonewtonPerSquareMillimeter: return (_value*1e6) * 1e-21d;
                case PressureUnit.Zeptopascal: return (_value) * 1e-21d;
                case PressureUnit.ZeptopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e-21d;
                case PressureUnit.ZeptopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e-21d;
                case PressureUnit.Zettabar: return (_value*1e5) * 1e21d;
                case PressureUnit.ZettanewtonPerSquareCentimeter: return (_value*1e4) * 1e21d;
                case PressureUnit.ZettanewtonPerSquareMeter: return (_value) * 1e21d;
                case PressureUnit.ZettanewtonPerSquareMillimeter: return (_value*1e6) * 1e21d;
                case PressureUnit.Zettapascal: return (_value) * 1e21d;
                case PressureUnit.ZettapoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e21d;
                case PressureUnit.ZettapoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PressureUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PressureUnit.Atmosphere: return baseUnitValue/(1.01325*1e5);
                case PressureUnit.Attobar: return (baseUnitValue/1e5) / 1e-18d;
                case PressureUnit.AttonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-18d;
                case PressureUnit.AttonewtonPerSquareMeter: return (baseUnitValue) / 1e-18d;
                case PressureUnit.AttonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-18d;
                case PressureUnit.Attopascal: return (baseUnitValue) / 1e-18d;
                case PressureUnit.AttopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-18d;
                case PressureUnit.AttopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-18d;
                case PressureUnit.Bar: return baseUnitValue/1e5;
                case PressureUnit.Centibar: return (baseUnitValue/1e5) / 1e-2d;
                case PressureUnit.CentinewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-2d;
                case PressureUnit.CentinewtonPerSquareMeter: return (baseUnitValue) / 1e-2d;
                case PressureUnit.CentinewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-2d;
                case PressureUnit.Centipascal: return (baseUnitValue) / 1e-2d;
                case PressureUnit.CentipoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-2d;
                case PressureUnit.CentipoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-2d;
                case PressureUnit.Decabar: return (baseUnitValue/1e5) / 1e1d;
                case PressureUnit.DecanewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e1d;
                case PressureUnit.DecanewtonPerSquareMeter: return (baseUnitValue) / 1e1d;
                case PressureUnit.DecanewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e1d;
                case PressureUnit.Decapascal: return (baseUnitValue) / 1e1d;
                case PressureUnit.DecapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e1d;
                case PressureUnit.DecapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e1d;
                case PressureUnit.Decibar: return (baseUnitValue/1e5) / 1e-1d;
                case PressureUnit.DecinewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-1d;
                case PressureUnit.DecinewtonPerSquareMeter: return (baseUnitValue) / 1e-1d;
                case PressureUnit.DecinewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-1d;
                case PressureUnit.Decipascal: return (baseUnitValue) / 1e-1d;
                case PressureUnit.DecipoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-1d;
                case PressureUnit.DecipoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-1d;
                case PressureUnit.DynePerSquareCentimeter: return baseUnitValue/1.0e-1;
                case PressureUnit.Exabar: return (baseUnitValue/1e5) / 1e18d;
                case PressureUnit.ExanewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e18d;
                case PressureUnit.ExanewtonPerSquareMeter: return (baseUnitValue) / 1e18d;
                case PressureUnit.ExanewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e18d;
                case PressureUnit.Exapascal: return (baseUnitValue) / 1e18d;
                case PressureUnit.ExapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e18d;
                case PressureUnit.ExapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e18d;
                case PressureUnit.Femtobar: return (baseUnitValue/1e5) / 1e-15d;
                case PressureUnit.FemtonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-15d;
                case PressureUnit.FemtonewtonPerSquareMeter: return (baseUnitValue) / 1e-15d;
                case PressureUnit.FemtonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-15d;
                case PressureUnit.Femtopascal: return (baseUnitValue) / 1e-15d;
                case PressureUnit.FemtopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-15d;
                case PressureUnit.FemtopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-15d;
                case PressureUnit.FootOfHead: return baseUnitValue*0.000334552565551;
                case PressureUnit.Gigabar: return (baseUnitValue/1e5) / 1e9d;
                case PressureUnit.GiganewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e9d;
                case PressureUnit.GiganewtonPerSquareMeter: return (baseUnitValue) / 1e9d;
                case PressureUnit.GiganewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e9d;
                case PressureUnit.Gigapascal: return (baseUnitValue) / 1e9d;
                case PressureUnit.GigapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e9d;
                case PressureUnit.GigapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e9d;
                case PressureUnit.Hectobar: return (baseUnitValue/1e5) / 1e2d;
                case PressureUnit.HectonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e2d;
                case PressureUnit.HectonewtonPerSquareMeter: return (baseUnitValue) / 1e2d;
                case PressureUnit.HectonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e2d;
                case PressureUnit.Hectopascal: return (baseUnitValue) / 1e2d;
                case PressureUnit.HectopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e2d;
                case PressureUnit.HectopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e2d;
                case PressureUnit.InchOfMercury: return baseUnitValue*2.95299830714159e-4;
                case PressureUnit.InchOfWaterColumn: return baseUnitValue/249.08890833333;
                case PressureUnit.Kilobar: return (baseUnitValue/1e5) / 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return baseUnitValue/9.80665e4;
                case PressureUnit.KilogramForcePerSquareMeter: return baseUnitValue*0.101971619222242;
                case PressureUnit.KilogramForcePerSquareMillimeter: return baseUnitValue/9.80665e6;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e3d;
                case PressureUnit.Kilopascal: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e3d;
                case PressureUnit.Megabar: return (baseUnitValue/1e5) / 1e6d;
                case PressureUnit.MeganewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e6d;
                case PressureUnit.MeganewtonPerSquareMeter: return (baseUnitValue) / 1e6d;
                case PressureUnit.MeganewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e6d;
                case PressureUnit.Megapascal: return (baseUnitValue) / 1e6d;
                case PressureUnit.MegapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e6d;
                case PressureUnit.MegapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e6d;
                case PressureUnit.MeterOfHead: return baseUnitValue*0.0001019977334;
                case PressureUnit.Microbar: return (baseUnitValue/1e5) / 1e-6d;
                case PressureUnit.MicronewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-6d;
                case PressureUnit.MicronewtonPerSquareMeter: return (baseUnitValue) / 1e-6d;
                case PressureUnit.MicronewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-6d;
                case PressureUnit.Micropascal: return (baseUnitValue) / 1e-6d;
                case PressureUnit.MicropoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-6d;
                case PressureUnit.MicropoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-6d;
                case PressureUnit.Millibar: return (baseUnitValue/1e5) / 1e-3d;
                case PressureUnit.MillimeterOfMercury: return baseUnitValue*7.50061561302643e-3;
                case PressureUnit.MillinewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-3d;
                case PressureUnit.MillinewtonPerSquareMeter: return (baseUnitValue) / 1e-3d;
                case PressureUnit.MillinewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-3d;
                case PressureUnit.Millipascal: return (baseUnitValue) / 1e-3d;
                case PressureUnit.MillipoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-3d;
                case PressureUnit.MillipoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-3d;
                case PressureUnit.Nanobar: return (baseUnitValue/1e5) / 1e-9d;
                case PressureUnit.NanonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-9d;
                case PressureUnit.NanonewtonPerSquareMeter: return (baseUnitValue) / 1e-9d;
                case PressureUnit.NanonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-9d;
                case PressureUnit.Nanopascal: return (baseUnitValue) / 1e-9d;
                case PressureUnit.NanopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-9d;
                case PressureUnit.NanopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-9d;
                case PressureUnit.NewtonPerSquareCentimeter: return baseUnitValue/1e4;
                case PressureUnit.NewtonPerSquareMeter: return baseUnitValue;
                case PressureUnit.NewtonPerSquareMillimeter: return baseUnitValue/1e6;
                case PressureUnit.Pascal: return baseUnitValue;
                case PressureUnit.Petabar: return (baseUnitValue/1e5) / 1e15d;
                case PressureUnit.PetanewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e15d;
                case PressureUnit.PetanewtonPerSquareMeter: return (baseUnitValue) / 1e15d;
                case PressureUnit.PetanewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e15d;
                case PressureUnit.Petapascal: return (baseUnitValue) / 1e15d;
                case PressureUnit.PetapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e15d;
                case PressureUnit.PetapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e15d;
                case PressureUnit.Picobar: return (baseUnitValue/1e5) / 1e-12d;
                case PressureUnit.PiconewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-12d;
                case PressureUnit.PiconewtonPerSquareMeter: return (baseUnitValue) / 1e-12d;
                case PressureUnit.PiconewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-12d;
                case PressureUnit.Picopascal: return (baseUnitValue) / 1e-12d;
                case PressureUnit.PicopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-12d;
                case PressureUnit.PicopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-12d;
                case PressureUnit.PoundForcePerSquareFoot: return baseUnitValue/4.788025898033584e1;
                case PressureUnit.PoundForcePerSquareInch: return baseUnitValue/6.894757293168361e3;
                case PressureUnit.PoundPerInchSecondSquared: return baseUnitValue/1.785796732283465e1;
                case PressureUnit.Qutrabar: return (baseUnitValue/1e5) / 1e27d;
                case PressureUnit.QutranewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e27d;
                case PressureUnit.QutranewtonPerSquareMeter: return (baseUnitValue) / 1e27d;
                case PressureUnit.QutranewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e27d;
                case PressureUnit.Qutrapascal: return (baseUnitValue) / 1e27d;
                case PressureUnit.QutrapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e27d;
                case PressureUnit.QutrapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e27d;
                case PressureUnit.TechnicalAtmosphere: return baseUnitValue/(9.80680592331*1e4);
                case PressureUnit.Terabar: return (baseUnitValue/1e5) / 1e12d;
                case PressureUnit.TeranewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e12d;
                case PressureUnit.TeranewtonPerSquareMeter: return (baseUnitValue) / 1e12d;
                case PressureUnit.TeranewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e12d;
                case PressureUnit.Terapascal: return (baseUnitValue) / 1e12d;
                case PressureUnit.TerapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e12d;
                case PressureUnit.TerapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e12d;
                case PressureUnit.TonneForcePerSquareCentimeter: return baseUnitValue/9.80665e7;
                case PressureUnit.TonneForcePerSquareMeter: return baseUnitValue/9.80665e3;
                case PressureUnit.TonneForcePerSquareMillimeter: return baseUnitValue/9.80665e9;
                case PressureUnit.Torr: return baseUnitValue/(1.3332266752*1e2);
                case PressureUnit.Vettabar: return (baseUnitValue/1e5) / 1e30d;
                case PressureUnit.VettanewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e30d;
                case PressureUnit.VettanewtonPerSquareMeter: return (baseUnitValue) / 1e30d;
                case PressureUnit.VettanewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e30d;
                case PressureUnit.Vettapascal: return (baseUnitValue) / 1e30d;
                case PressureUnit.VettapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e30d;
                case PressureUnit.VettapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e30d;
                case PressureUnit.Yoctobar: return (baseUnitValue/1e5) / 1e-24d;
                case PressureUnit.YoctonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-24d;
                case PressureUnit.YoctonewtonPerSquareMeter: return (baseUnitValue) / 1e-24d;
                case PressureUnit.YoctonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-24d;
                case PressureUnit.Yoctopascal: return (baseUnitValue) / 1e-24d;
                case PressureUnit.YoctopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-24d;
                case PressureUnit.YoctopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-24d;
                case PressureUnit.Yottabar: return (baseUnitValue/1e5) / 1e24d;
                case PressureUnit.YottanewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e24d;
                case PressureUnit.YottanewtonPerSquareMeter: return (baseUnitValue) / 1e24d;
                case PressureUnit.YottanewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e24d;
                case PressureUnit.Yottapascal: return (baseUnitValue) / 1e24d;
                case PressureUnit.YottapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e24d;
                case PressureUnit.YottapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e24d;
                case PressureUnit.Zeptobar: return (baseUnitValue/1e5) / 1e-21d;
                case PressureUnit.ZeptonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e-21d;
                case PressureUnit.ZeptonewtonPerSquareMeter: return (baseUnitValue) / 1e-21d;
                case PressureUnit.ZeptonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e-21d;
                case PressureUnit.Zeptopascal: return (baseUnitValue) / 1e-21d;
                case PressureUnit.ZeptopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e-21d;
                case PressureUnit.ZeptopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e-21d;
                case PressureUnit.Zettabar: return (baseUnitValue/1e5) / 1e21d;
                case PressureUnit.ZettanewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e21d;
                case PressureUnit.ZettanewtonPerSquareMeter: return (baseUnitValue) / 1e21d;
                case PressureUnit.ZettanewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e21d;
                case PressureUnit.Zettapascal: return (baseUnitValue) / 1e21d;
                case PressureUnit.ZettapoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e21d;
                case PressureUnit.ZettapoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
