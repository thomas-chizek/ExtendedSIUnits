//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Power : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PowerUnit? _unit;

        static Power()
        {
            BaseDimensions = new BaseDimensions(2, 1, -3, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Power, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit Watt.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Power()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Power(double numericValue, PowerUnit unit)
        {
            if(unit == PowerUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Power, which is Watt. All conversions go via this value.
        /// </summary>
        public static PowerUnit BaseUnit { get; } = PowerUnit.Watt;

        /// <summary>
        /// Represents the largest possible value of Power
        /// </summary>
        public static Power MaxValue { get; } = new Power(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Power
        /// </summary>
        public static Power MinValue { get; } = new Power(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Power;

        /// <summary>
        ///     All units of measurement for the Power quantity.
        /// </summary>
        public static PowerUnit[] Units { get; } = Enum.GetValues(typeof(PowerUnit)).Cast<PowerUnit>().Except(new PowerUnit[]{ PowerUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Watt.
        /// </summary>
        public static Power Zero { get; } = new Power(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PowerUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Power.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Power.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Power in Attowatts.
        /// </summary>
        public double Attowatts => As(PowerUnit.Attowatt);

        /// <summary>
        ///     Get Power in BoilerHorsepower.
        /// </summary>
        public double BoilerHorsepower => As(PowerUnit.BoilerHorsepower);

        /// <summary>
        ///     Get Power in BritishThermalUnitsPerHour.
        /// </summary>
        public double BritishThermalUnitsPerHour => As(PowerUnit.BritishThermalUnitPerHour);

        /// <summary>
        ///     Get Power in Centiwatts.
        /// </summary>
        public double Centiwatts => As(PowerUnit.Centiwatt);

        /// <summary>
        ///     Get Power in Decawatts.
        /// </summary>
        public double Decawatts => As(PowerUnit.Decawatt);

        /// <summary>
        ///     Get Power in Deciwatts.
        /// </summary>
        public double Deciwatts => As(PowerUnit.Deciwatt);

        /// <summary>
        ///     Get Power in ElectricalHorsepower.
        /// </summary>
        public double ElectricalHorsepower => As(PowerUnit.ElectricalHorsepower);

        /// <summary>
        ///     Get Power in Exawatts.
        /// </summary>
        public double Exawatts => As(PowerUnit.Exawatt);

        /// <summary>
        ///     Get Power in Femtowatts.
        /// </summary>
        public double Femtowatts => As(PowerUnit.Femtowatt);

        /// <summary>
        ///     Get Power in Gigawatts.
        /// </summary>
        public double Gigawatts => As(PowerUnit.Gigawatt);

        /// <summary>
        ///     Get Power in Hectowatts.
        /// </summary>
        public double Hectowatts => As(PowerUnit.Hectowatt);

        /// <summary>
        ///     Get Power in HydraulicHorsepower.
        /// </summary>
        public double HydraulicHorsepower => As(PowerUnit.HydraulicHorsepower);

        /// <summary>
        ///     Get Power in KilobritishThermalUnitsPerHour.
        /// </summary>
        public double KilobritishThermalUnitsPerHour => As(PowerUnit.KilobritishThermalUnitPerHour);

        /// <summary>
        ///     Get Power in Kilowatts.
        /// </summary>
        public double Kilowatts => As(PowerUnit.Kilowatt);

        /// <summary>
        ///     Get Power in MechanicalHorsepower.
        /// </summary>
        public double MechanicalHorsepower => As(PowerUnit.MechanicalHorsepower);

        /// <summary>
        ///     Get Power in Megawatts.
        /// </summary>
        public double Megawatts => As(PowerUnit.Megawatt);

        /// <summary>
        ///     Get Power in MetricHorsepower.
        /// </summary>
        public double MetricHorsepower => As(PowerUnit.MetricHorsepower);

        /// <summary>
        ///     Get Power in Microwatts.
        /// </summary>
        public double Microwatts => As(PowerUnit.Microwatt);

        /// <summary>
        ///     Get Power in Milliwatts.
        /// </summary>
        public double Milliwatts => As(PowerUnit.Milliwatt);

        /// <summary>
        ///     Get Power in Nanowatts.
        /// </summary>
        public double Nanowatts => As(PowerUnit.Nanowatt);

        /// <summary>
        ///     Get Power in Petawatts.
        /// </summary>
        public double Petawatts => As(PowerUnit.Petawatt);

        /// <summary>
        ///     Get Power in Picowatts.
        /// </summary>
        public double Picowatts => As(PowerUnit.Picowatt);

        /// <summary>
        ///     Get Power in Qutrawatts.
        /// </summary>
        public double Qutrawatts => As(PowerUnit.Qutrawatt);

        /// <summary>
        ///     Get Power in Terawatts.
        /// </summary>
        public double Terawatts => As(PowerUnit.Terawatt);

        /// <summary>
        ///     Get Power in Vettawatts.
        /// </summary>
        public double Vettawatts => As(PowerUnit.Vettawatt);

        /// <summary>
        ///     Get Power in Watts.
        /// </summary>
        public double Watts => As(PowerUnit.Watt);

        /// <summary>
        ///     Get Power in Yoctowatts.
        /// </summary>
        public double Yoctowatts => As(PowerUnit.Yoctowatt);

        /// <summary>
        ///     Get Power in Yottawatts.
        /// </summary>
        public double Yottawatts => As(PowerUnit.Yottawatt);

        /// <summary>
        ///     Get Power in Zeptowatts.
        /// </summary>
        public double Zeptowatts => As(PowerUnit.Zeptowatt);

        /// <summary>
        ///     Get Power in Zettawatts.
        /// </summary>
        public double Zettawatts => As(PowerUnit.Zettawatt);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PowerUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(PowerUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Power from Attowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromAttowatts(double attowatts)
        {
            double value = (double) attowatts;
            return new Power(value, PowerUnit.Attowatt);
        }
        /// <summary>
        ///     Get Power from BoilerHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromBoilerHorsepower(double boilerhorsepower)
        {
            double value = (double) boilerhorsepower;
            return new Power(value, PowerUnit.BoilerHorsepower);
        }
        /// <summary>
        ///     Get Power from BritishThermalUnitsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromBritishThermalUnitsPerHour(double britishthermalunitsperhour)
        {
            double value = (double) britishthermalunitsperhour;
            return new Power(value, PowerUnit.BritishThermalUnitPerHour);
        }
        /// <summary>
        ///     Get Power from Centiwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromCentiwatts(double centiwatts)
        {
            double value = (double) centiwatts;
            return new Power(value, PowerUnit.Centiwatt);
        }
        /// <summary>
        ///     Get Power from Decawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromDecawatts(double decawatts)
        {
            double value = (double) decawatts;
            return new Power(value, PowerUnit.Decawatt);
        }
        /// <summary>
        ///     Get Power from Deciwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromDeciwatts(double deciwatts)
        {
            double value = (double) deciwatts;
            return new Power(value, PowerUnit.Deciwatt);
        }
        /// <summary>
        ///     Get Power from ElectricalHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromElectricalHorsepower(double electricalhorsepower)
        {
            double value = (double) electricalhorsepower;
            return new Power(value, PowerUnit.ElectricalHorsepower);
        }
        /// <summary>
        ///     Get Power from Exawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromExawatts(double exawatts)
        {
            double value = (double) exawatts;
            return new Power(value, PowerUnit.Exawatt);
        }
        /// <summary>
        ///     Get Power from Femtowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromFemtowatts(double femtowatts)
        {
            double value = (double) femtowatts;
            return new Power(value, PowerUnit.Femtowatt);
        }
        /// <summary>
        ///     Get Power from Gigawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromGigawatts(double gigawatts)
        {
            double value = (double) gigawatts;
            return new Power(value, PowerUnit.Gigawatt);
        }
        /// <summary>
        ///     Get Power from Hectowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromHectowatts(double hectowatts)
        {
            double value = (double) hectowatts;
            return new Power(value, PowerUnit.Hectowatt);
        }
        /// <summary>
        ///     Get Power from HydraulicHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromHydraulicHorsepower(double hydraulichorsepower)
        {
            double value = (double) hydraulichorsepower;
            return new Power(value, PowerUnit.HydraulicHorsepower);
        }
        /// <summary>
        ///     Get Power from KilobritishThermalUnitsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromKilobritishThermalUnitsPerHour(double kilobritishthermalunitsperhour)
        {
            double value = (double) kilobritishthermalunitsperhour;
            return new Power(value, PowerUnit.KilobritishThermalUnitPerHour);
        }
        /// <summary>
        ///     Get Power from Kilowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromKilowatts(double kilowatts)
        {
            double value = (double) kilowatts;
            return new Power(value, PowerUnit.Kilowatt);
        }
        /// <summary>
        ///     Get Power from MechanicalHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMechanicalHorsepower(double mechanicalhorsepower)
        {
            double value = (double) mechanicalhorsepower;
            return new Power(value, PowerUnit.MechanicalHorsepower);
        }
        /// <summary>
        ///     Get Power from Megawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMegawatts(double megawatts)
        {
            double value = (double) megawatts;
            return new Power(value, PowerUnit.Megawatt);
        }
        /// <summary>
        ///     Get Power from MetricHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMetricHorsepower(double metrichorsepower)
        {
            double value = (double) metrichorsepower;
            return new Power(value, PowerUnit.MetricHorsepower);
        }
        /// <summary>
        ///     Get Power from Microwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMicrowatts(double microwatts)
        {
            double value = (double) microwatts;
            return new Power(value, PowerUnit.Microwatt);
        }
        /// <summary>
        ///     Get Power from Milliwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMilliwatts(double milliwatts)
        {
            double value = (double) milliwatts;
            return new Power(value, PowerUnit.Milliwatt);
        }
        /// <summary>
        ///     Get Power from Nanowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromNanowatts(double nanowatts)
        {
            double value = (double) nanowatts;
            return new Power(value, PowerUnit.Nanowatt);
        }
        /// <summary>
        ///     Get Power from Petawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromPetawatts(double petawatts)
        {
            double value = (double) petawatts;
            return new Power(value, PowerUnit.Petawatt);
        }
        /// <summary>
        ///     Get Power from Picowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromPicowatts(double picowatts)
        {
            double value = (double) picowatts;
            return new Power(value, PowerUnit.Picowatt);
        }
        /// <summary>
        ///     Get Power from Qutrawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromQutrawatts(double qutrawatts)
        {
            double value = (double) qutrawatts;
            return new Power(value, PowerUnit.Qutrawatt);
        }
        /// <summary>
        ///     Get Power from Terawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromTerawatts(double terawatts)
        {
            double value = (double) terawatts;
            return new Power(value, PowerUnit.Terawatt);
        }
        /// <summary>
        ///     Get Power from Vettawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromVettawatts(double vettawatts)
        {
            double value = (double) vettawatts;
            return new Power(value, PowerUnit.Vettawatt);
        }
        /// <summary>
        ///     Get Power from Watts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromWatts(double watts)
        {
            double value = (double) watts;
            return new Power(value, PowerUnit.Watt);
        }
        /// <summary>
        ///     Get Power from Yoctowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromYoctowatts(double yoctowatts)
        {
            double value = (double) yoctowatts;
            return new Power(value, PowerUnit.Yoctowatt);
        }
        /// <summary>
        ///     Get Power from Yottawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromYottawatts(double yottawatts)
        {
            double value = (double) yottawatts;
            return new Power(value, PowerUnit.Yottawatt);
        }
        /// <summary>
        ///     Get Power from Zeptowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromZeptowatts(double zeptowatts)
        {
            double value = (double) zeptowatts;
            return new Power(value, PowerUnit.Zeptowatt);
        }
        /// <summary>
        ///     Get Power from Zettawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromZettawatts(double zettawatts)
        {
            double value = (double) zettawatts;
            return new Power(value, PowerUnit.Zettawatt);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerUnit" /> to <see cref="Power" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Power unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Power From(double value, PowerUnit fromUnit)
        {
            return new Power((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Power Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Power Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Power, PowerUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Power result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Power result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Power, PowerUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PowerUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<PowerUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out PowerUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out PowerUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<PowerUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Power objPower)) throw new ArgumentException("Expected type Power.", nameof(obj));

            return CompareTo(objPower);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Power other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Power objPower))
                return false;

            return Equals(objPower);
        }

        public bool Equals(Power other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Power within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Power other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Power.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((PowerUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PowerUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Power to another Power with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Power with the specified unit.</returns>
        public Power ToUnit(PowerUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Power(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PowerUnit.Attowatt: return (_value) * 1e-18d;
                case PowerUnit.BoilerHorsepower: return _value*9812.5;
                case PowerUnit.BritishThermalUnitPerHour: return _value*0.293071;
                case PowerUnit.Centiwatt: return (_value) * 1e-2d;
                case PowerUnit.Decawatt: return (_value) * 1e1d;
                case PowerUnit.Deciwatt: return (_value) * 1e-1d;
                case PowerUnit.ElectricalHorsepower: return _value*746;
                case PowerUnit.Exawatt: return (_value) * 1e18d;
                case PowerUnit.Femtowatt: return (_value) * 1e-15d;
                case PowerUnit.Gigawatt: return (_value) * 1e9d;
                case PowerUnit.Hectowatt: return (_value) * 1e2d;
                case PowerUnit.HydraulicHorsepower: return _value*745.69988145;
                case PowerUnit.KilobritishThermalUnitPerHour: return (_value*0.293071) * 1e3d;
                case PowerUnit.Kilowatt: return (_value) * 1e3d;
                case PowerUnit.MechanicalHorsepower: return _value*745.69;
                case PowerUnit.Megawatt: return (_value) * 1e6d;
                case PowerUnit.MetricHorsepower: return _value*735.49875;
                case PowerUnit.Microwatt: return (_value) * 1e-6d;
                case PowerUnit.Milliwatt: return (_value) * 1e-3d;
                case PowerUnit.Nanowatt: return (_value) * 1e-9d;
                case PowerUnit.Petawatt: return (_value) * 1e15d;
                case PowerUnit.Picowatt: return (_value) * 1e-12d;
                case PowerUnit.Qutrawatt: return (_value) * 1e27d;
                case PowerUnit.Terawatt: return (_value) * 1e12d;
                case PowerUnit.Vettawatt: return (_value) * 1e30d;
                case PowerUnit.Watt: return _value;
                case PowerUnit.Yoctowatt: return (_value) * 1e-24d;
                case PowerUnit.Yottawatt: return (_value) * 1e24d;
                case PowerUnit.Zeptowatt: return (_value) * 1e-21d;
                case PowerUnit.Zettawatt: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PowerUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PowerUnit.Attowatt: return (baseUnitValue) / 1e-18d;
                case PowerUnit.BoilerHorsepower: return baseUnitValue/9812.5;
                case PowerUnit.BritishThermalUnitPerHour: return baseUnitValue/0.293071;
                case PowerUnit.Centiwatt: return (baseUnitValue) / 1e-2d;
                case PowerUnit.Decawatt: return (baseUnitValue) / 1e1d;
                case PowerUnit.Deciwatt: return (baseUnitValue) / 1e-1d;
                case PowerUnit.ElectricalHorsepower: return baseUnitValue/746;
                case PowerUnit.Exawatt: return (baseUnitValue) / 1e18d;
                case PowerUnit.Femtowatt: return (baseUnitValue) / 1e-15d;
                case PowerUnit.Gigawatt: return (baseUnitValue) / 1e9d;
                case PowerUnit.Hectowatt: return (baseUnitValue) / 1e2d;
                case PowerUnit.HydraulicHorsepower: return baseUnitValue/745.69988145;
                case PowerUnit.KilobritishThermalUnitPerHour: return (baseUnitValue/0.293071) / 1e3d;
                case PowerUnit.Kilowatt: return (baseUnitValue) / 1e3d;
                case PowerUnit.MechanicalHorsepower: return baseUnitValue/745.69;
                case PowerUnit.Megawatt: return (baseUnitValue) / 1e6d;
                case PowerUnit.MetricHorsepower: return baseUnitValue/735.49875;
                case PowerUnit.Microwatt: return (baseUnitValue) / 1e-6d;
                case PowerUnit.Milliwatt: return (baseUnitValue) / 1e-3d;
                case PowerUnit.Nanowatt: return (baseUnitValue) / 1e-9d;
                case PowerUnit.Petawatt: return (baseUnitValue) / 1e15d;
                case PowerUnit.Picowatt: return (baseUnitValue) / 1e-12d;
                case PowerUnit.Qutrawatt: return (baseUnitValue) / 1e27d;
                case PowerUnit.Terawatt: return (baseUnitValue) / 1e12d;
                case PowerUnit.Vettawatt: return (baseUnitValue) / 1e30d;
                case PowerUnit.Watt: return baseUnitValue;
                case PowerUnit.Yoctowatt: return (baseUnitValue) / 1e-24d;
                case PowerUnit.Yottawatt: return (baseUnitValue) / 1e24d;
                case PowerUnit.Zeptowatt: return (baseUnitValue) / 1e-21d;
                case PowerUnit.Zettawatt: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
