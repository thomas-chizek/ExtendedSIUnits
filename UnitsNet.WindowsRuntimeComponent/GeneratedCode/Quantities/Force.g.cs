//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics, a force is any influence that causes an object to undergo a certain change, either concerning its movement, direction, or geometrical construction. In other words, a force can cause an object with mass to change its velocity (which includes to begin moving from a state of rest), i.e., to accelerate, or a flexible object to deform, or both. Force can also be described by intuitive concepts such as a push or a pull. A force has both magnitude and direction, making it a vector quantity. It is measured in the SI unit of newtons and represented by the symbol F.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Force : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ForceUnit? _unit;

        static Force()
        {
            BaseDimensions = new BaseDimensions(1, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.Force, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit Newton.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Force()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Force(double numericValue, ForceUnit unit)
        {
            if(unit == ForceUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Force, which is Newton. All conversions go via this value.
        /// </summary>
        public static ForceUnit BaseUnit { get; } = ForceUnit.Newton;

        /// <summary>
        /// Represents the largest possible value of Force
        /// </summary>
        public static Force MaxValue { get; } = new Force(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Force
        /// </summary>
        public static Force MinValue { get; } = new Force(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Force;

        /// <summary>
        ///     All units of measurement for the Force quantity.
        /// </summary>
        public static ForceUnit[] Units { get; } = Enum.GetValues(typeof(ForceUnit)).Cast<ForceUnit>().Except(new ForceUnit[]{ ForceUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Newton.
        /// </summary>
        public static Force Zero { get; } = new Force(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public ForceUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Force.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Force.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Force in Attonewtons.
        /// </summary>
        public double Attonewtons => As(ForceUnit.Attonewton);

        /// <summary>
        ///     Get Force in Centinewtons.
        /// </summary>
        public double Centinewtons => As(ForceUnit.Centinewton);

        /// <summary>
        ///     Get Force in Decanewtons.
        /// </summary>
        public double Decanewtons => As(ForceUnit.Decanewton);

        /// <summary>
        ///     Get Force in Decinewtons.
        /// </summary>
        public double Decinewtons => As(ForceUnit.Decinewton);

        /// <summary>
        ///     Get Force in Dyne.
        /// </summary>
        public double Dyne => As(ForceUnit.Dyn);

        /// <summary>
        ///     Get Force in Exanewtons.
        /// </summary>
        public double Exanewtons => As(ForceUnit.Exanewton);

        /// <summary>
        ///     Get Force in Femtonewtons.
        /// </summary>
        public double Femtonewtons => As(ForceUnit.Femtonewton);

        /// <summary>
        ///     Get Force in Giganewtons.
        /// </summary>
        public double Giganewtons => As(ForceUnit.Giganewton);

        /// <summary>
        ///     Get Force in Hectonewtons.
        /// </summary>
        public double Hectonewtons => As(ForceUnit.Hectonewton);

        /// <summary>
        ///     Get Force in KilogramsForce.
        /// </summary>
        public double KilogramsForce => As(ForceUnit.KilogramForce);

        /// <summary>
        ///     Get Force in Kilonewtons.
        /// </summary>
        public double Kilonewtons => As(ForceUnit.Kilonewton);

        /// <summary>
        ///     Get Force in KiloPonds.
        /// </summary>
        public double KiloPonds => As(ForceUnit.KiloPond);

        /// <summary>
        ///     Get Force in Meganewtons.
        /// </summary>
        public double Meganewtons => As(ForceUnit.Meganewton);

        /// <summary>
        ///     Get Force in Micronewtons.
        /// </summary>
        public double Micronewtons => As(ForceUnit.Micronewton);

        /// <summary>
        ///     Get Force in Millinewtons.
        /// </summary>
        public double Millinewtons => As(ForceUnit.Millinewton);

        /// <summary>
        ///     Get Force in Nanonewtons.
        /// </summary>
        public double Nanonewtons => As(ForceUnit.Nanonewton);

        /// <summary>
        ///     Get Force in Newtons.
        /// </summary>
        public double Newtons => As(ForceUnit.Newton);

        /// <summary>
        ///     Get Force in OunceForce.
        /// </summary>
        public double OunceForce => As(ForceUnit.OunceForce);

        /// <summary>
        ///     Get Force in Petanewtons.
        /// </summary>
        public double Petanewtons => As(ForceUnit.Petanewton);

        /// <summary>
        ///     Get Force in Piconewtons.
        /// </summary>
        public double Piconewtons => As(ForceUnit.Piconewton);

        /// <summary>
        ///     Get Force in Poundals.
        /// </summary>
        public double Poundals => As(ForceUnit.Poundal);

        /// <summary>
        ///     Get Force in PoundsForce.
        /// </summary>
        public double PoundsForce => As(ForceUnit.PoundForce);

        /// <summary>
        ///     Get Force in Qutranewtons.
        /// </summary>
        public double Qutranewtons => As(ForceUnit.Qutranewton);

        /// <summary>
        ///     Get Force in Teranewtons.
        /// </summary>
        public double Teranewtons => As(ForceUnit.Teranewton);

        /// <summary>
        ///     Get Force in TonnesForce.
        /// </summary>
        public double TonnesForce => As(ForceUnit.TonneForce);

        /// <summary>
        ///     Get Force in Vettanewtons.
        /// </summary>
        public double Vettanewtons => As(ForceUnit.Vettanewton);

        /// <summary>
        ///     Get Force in Yoctonewtons.
        /// </summary>
        public double Yoctonewtons => As(ForceUnit.Yoctonewton);

        /// <summary>
        ///     Get Force in Yottanewtons.
        /// </summary>
        public double Yottanewtons => As(ForceUnit.Yottanewton);

        /// <summary>
        ///     Get Force in Zeptonewtons.
        /// </summary>
        public double Zeptonewtons => As(ForceUnit.Zeptonewton);

        /// <summary>
        ///     Get Force in Zettanewtons.
        /// </summary>
        public double Zettanewtons => As(ForceUnit.Zettanewton);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(ForceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(ForceUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Force from Attonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromAttonewtons(double attonewtons)
        {
            double value = (double) attonewtons;
            return new Force(value, ForceUnit.Attonewton);
        }
        /// <summary>
        ///     Get Force from Centinewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromCentinewtons(double centinewtons)
        {
            double value = (double) centinewtons;
            return new Force(value, ForceUnit.Centinewton);
        }
        /// <summary>
        ///     Get Force from Decanewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromDecanewtons(double decanewtons)
        {
            double value = (double) decanewtons;
            return new Force(value, ForceUnit.Decanewton);
        }
        /// <summary>
        ///     Get Force from Decinewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromDecinewtons(double decinewtons)
        {
            double value = (double) decinewtons;
            return new Force(value, ForceUnit.Decinewton);
        }
        /// <summary>
        ///     Get Force from Dyne.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromDyne(double dyne)
        {
            double value = (double) dyne;
            return new Force(value, ForceUnit.Dyn);
        }
        /// <summary>
        ///     Get Force from Exanewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromExanewtons(double exanewtons)
        {
            double value = (double) exanewtons;
            return new Force(value, ForceUnit.Exanewton);
        }
        /// <summary>
        ///     Get Force from Femtonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromFemtonewtons(double femtonewtons)
        {
            double value = (double) femtonewtons;
            return new Force(value, ForceUnit.Femtonewton);
        }
        /// <summary>
        ///     Get Force from Giganewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromGiganewtons(double giganewtons)
        {
            double value = (double) giganewtons;
            return new Force(value, ForceUnit.Giganewton);
        }
        /// <summary>
        ///     Get Force from Hectonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromHectonewtons(double hectonewtons)
        {
            double value = (double) hectonewtons;
            return new Force(value, ForceUnit.Hectonewton);
        }
        /// <summary>
        ///     Get Force from KilogramsForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromKilogramsForce(double kilogramsforce)
        {
            double value = (double) kilogramsforce;
            return new Force(value, ForceUnit.KilogramForce);
        }
        /// <summary>
        ///     Get Force from Kilonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromKilonewtons(double kilonewtons)
        {
            double value = (double) kilonewtons;
            return new Force(value, ForceUnit.Kilonewton);
        }
        /// <summary>
        ///     Get Force from KiloPonds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromKiloPonds(double kiloponds)
        {
            double value = (double) kiloponds;
            return new Force(value, ForceUnit.KiloPond);
        }
        /// <summary>
        ///     Get Force from Meganewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromMeganewtons(double meganewtons)
        {
            double value = (double) meganewtons;
            return new Force(value, ForceUnit.Meganewton);
        }
        /// <summary>
        ///     Get Force from Micronewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromMicronewtons(double micronewtons)
        {
            double value = (double) micronewtons;
            return new Force(value, ForceUnit.Micronewton);
        }
        /// <summary>
        ///     Get Force from Millinewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromMillinewtons(double millinewtons)
        {
            double value = (double) millinewtons;
            return new Force(value, ForceUnit.Millinewton);
        }
        /// <summary>
        ///     Get Force from Nanonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromNanonewtons(double nanonewtons)
        {
            double value = (double) nanonewtons;
            return new Force(value, ForceUnit.Nanonewton);
        }
        /// <summary>
        ///     Get Force from Newtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromNewtons(double newtons)
        {
            double value = (double) newtons;
            return new Force(value, ForceUnit.Newton);
        }
        /// <summary>
        ///     Get Force from OunceForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromOunceForce(double ounceforce)
        {
            double value = (double) ounceforce;
            return new Force(value, ForceUnit.OunceForce);
        }
        /// <summary>
        ///     Get Force from Petanewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromPetanewtons(double petanewtons)
        {
            double value = (double) petanewtons;
            return new Force(value, ForceUnit.Petanewton);
        }
        /// <summary>
        ///     Get Force from Piconewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromPiconewtons(double piconewtons)
        {
            double value = (double) piconewtons;
            return new Force(value, ForceUnit.Piconewton);
        }
        /// <summary>
        ///     Get Force from Poundals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromPoundals(double poundals)
        {
            double value = (double) poundals;
            return new Force(value, ForceUnit.Poundal);
        }
        /// <summary>
        ///     Get Force from PoundsForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromPoundsForce(double poundsforce)
        {
            double value = (double) poundsforce;
            return new Force(value, ForceUnit.PoundForce);
        }
        /// <summary>
        ///     Get Force from Qutranewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromQutranewtons(double qutranewtons)
        {
            double value = (double) qutranewtons;
            return new Force(value, ForceUnit.Qutranewton);
        }
        /// <summary>
        ///     Get Force from Teranewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromTeranewtons(double teranewtons)
        {
            double value = (double) teranewtons;
            return new Force(value, ForceUnit.Teranewton);
        }
        /// <summary>
        ///     Get Force from TonnesForce.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromTonnesForce(double tonnesforce)
        {
            double value = (double) tonnesforce;
            return new Force(value, ForceUnit.TonneForce);
        }
        /// <summary>
        ///     Get Force from Vettanewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromVettanewtons(double vettanewtons)
        {
            double value = (double) vettanewtons;
            return new Force(value, ForceUnit.Vettanewton);
        }
        /// <summary>
        ///     Get Force from Yoctonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromYoctonewtons(double yoctonewtons)
        {
            double value = (double) yoctonewtons;
            return new Force(value, ForceUnit.Yoctonewton);
        }
        /// <summary>
        ///     Get Force from Yottanewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromYottanewtons(double yottanewtons)
        {
            double value = (double) yottanewtons;
            return new Force(value, ForceUnit.Yottanewton);
        }
        /// <summary>
        ///     Get Force from Zeptonewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromZeptonewtons(double zeptonewtons)
        {
            double value = (double) zeptonewtons;
            return new Force(value, ForceUnit.Zeptonewton);
        }
        /// <summary>
        ///     Get Force from Zettanewtons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Force FromZettanewtons(double zettanewtons)
        {
            double value = (double) zettanewtons;
            return new Force(value, ForceUnit.Zettanewton);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ForceUnit" /> to <see cref="Force" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Force unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Force From(double value, ForceUnit fromUnit)
        {
            return new Force((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Force Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Force Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Force, ForceUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Force result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Force result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Force, ForceUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ForceUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static ForceUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<ForceUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out ForceUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out ForceUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<ForceUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Force objForce)) throw new ArgumentException("Expected type Force.", nameof(obj));

            return CompareTo(objForce);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Force other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Force objForce))
                return false;

            return Equals(objForce);
        }

        public bool Equals(Force other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Force within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Force other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Force.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((ForceUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(ForceUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Force to another Force with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Force with the specified unit.</returns>
        public Force ToUnit(ForceUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Force(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case ForceUnit.Attonewton: return (_value) * 1e-18d;
                case ForceUnit.Centinewton: return (_value) * 1e-2d;
                case ForceUnit.Decanewton: return (_value) * 1e1d;
                case ForceUnit.Decinewton: return (_value) * 1e-1d;
                case ForceUnit.Dyn: return _value/1e5;
                case ForceUnit.Exanewton: return (_value) * 1e18d;
                case ForceUnit.Femtonewton: return (_value) * 1e-15d;
                case ForceUnit.Giganewton: return (_value) * 1e9d;
                case ForceUnit.Hectonewton: return (_value) * 1e2d;
                case ForceUnit.KilogramForce: return _value*9.80665002864;
                case ForceUnit.Kilonewton: return (_value) * 1e3d;
                case ForceUnit.KiloPond: return _value*9.80665002864;
                case ForceUnit.Meganewton: return (_value) * 1e6d;
                case ForceUnit.Micronewton: return (_value) * 1e-6d;
                case ForceUnit.Millinewton: return (_value) * 1e-3d;
                case ForceUnit.Nanonewton: return (_value) * 1e-9d;
                case ForceUnit.Newton: return _value;
                case ForceUnit.OunceForce: return _value*2.780138509537812e-1;
                case ForceUnit.Petanewton: return (_value) * 1e15d;
                case ForceUnit.Piconewton: return (_value) * 1e-12d;
                case ForceUnit.Poundal: return _value*0.13825502798973041652092282466083;
                case ForceUnit.PoundForce: return _value*4.4482216152605095551842641431421;
                case ForceUnit.Qutranewton: return (_value) * 1e27d;
                case ForceUnit.Teranewton: return (_value) * 1e12d;
                case ForceUnit.TonneForce: return _value*9.80665002864e3;
                case ForceUnit.Vettanewton: return (_value) * 1e30d;
                case ForceUnit.Yoctonewton: return (_value) * 1e-24d;
                case ForceUnit.Yottanewton: return (_value) * 1e24d;
                case ForceUnit.Zeptonewton: return (_value) * 1e-21d;
                case ForceUnit.Zettanewton: return (_value) * 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(ForceUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case ForceUnit.Attonewton: return (baseUnitValue) / 1e-18d;
                case ForceUnit.Centinewton: return (baseUnitValue) / 1e-2d;
                case ForceUnit.Decanewton: return (baseUnitValue) / 1e1d;
                case ForceUnit.Decinewton: return (baseUnitValue) / 1e-1d;
                case ForceUnit.Dyn: return baseUnitValue*1e5;
                case ForceUnit.Exanewton: return (baseUnitValue) / 1e18d;
                case ForceUnit.Femtonewton: return (baseUnitValue) / 1e-15d;
                case ForceUnit.Giganewton: return (baseUnitValue) / 1e9d;
                case ForceUnit.Hectonewton: return (baseUnitValue) / 1e2d;
                case ForceUnit.KilogramForce: return baseUnitValue/9.80665002864;
                case ForceUnit.Kilonewton: return (baseUnitValue) / 1e3d;
                case ForceUnit.KiloPond: return baseUnitValue/9.80665002864;
                case ForceUnit.Meganewton: return (baseUnitValue) / 1e6d;
                case ForceUnit.Micronewton: return (baseUnitValue) / 1e-6d;
                case ForceUnit.Millinewton: return (baseUnitValue) / 1e-3d;
                case ForceUnit.Nanonewton: return (baseUnitValue) / 1e-9d;
                case ForceUnit.Newton: return baseUnitValue;
                case ForceUnit.OunceForce: return baseUnitValue/2.780138509537812e-1;
                case ForceUnit.Petanewton: return (baseUnitValue) / 1e15d;
                case ForceUnit.Piconewton: return (baseUnitValue) / 1e-12d;
                case ForceUnit.Poundal: return baseUnitValue/0.13825502798973041652092282466083;
                case ForceUnit.PoundForce: return baseUnitValue/4.4482216152605095551842641431421;
                case ForceUnit.Qutranewton: return (baseUnitValue) / 1e27d;
                case ForceUnit.Teranewton: return (baseUnitValue) / 1e12d;
                case ForceUnit.TonneForce: return baseUnitValue/9.80665002864e3;
                case ForceUnit.Vettanewton: return (baseUnitValue) / 1e30d;
                case ForceUnit.Yoctonewton: return (baseUnitValue) / 1e-24d;
                case ForceUnit.Yottanewton: return (baseUnitValue) / 1e24d;
                case ForceUnit.Zeptonewton: return (baseUnitValue) / 1e-21d;
                case ForceUnit.Zettanewton: return (baseUnitValue) / 1e21d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
